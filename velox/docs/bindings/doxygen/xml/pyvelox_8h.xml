<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="pyvelox_8h" kind="file" language="C++">
    <compoundname>pyvelox.h</compoundname>
    <includes local="no">pybind11/pybind11.h</includes>
    <includes local="no">pybind11/stl.h</includes>
    <includes local="no">pybind11/stl_bind.h</includes>
    <includes local="no">velox/type/Type.h</includes>
    <includes local="yes">folly/json.h</includes>
    <includedby refid="pyvelox_8cpp" local="yes">/home/asus/github/fork/velox/pyvelox/pyvelox.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/asus/github/fork/velox/pyvelox/pyvelox.h</label>
        <link refid="pyvelox_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>folly/json.h</label>
      </node>
      <node id="2">
        <label>pybind11/pybind11.h</label>
      </node>
      <node id="3">
        <label>pybind11/stl.h</label>
      </node>
      <node id="4">
        <label>pybind11/stl_bind.h</label>
      </node>
      <node id="5">
        <label>velox/type/Type.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacefacebook">facebook</innernamespace>
    <innernamespace refid="namespacefacebook_1_1velox">facebook::velox</innernamespace>
    <innernamespace refid="namespacefacebook_1_1velox_1_1py">facebook::velox::py</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>Facebook,<sp/>Inc.<sp/>and<sp/>its<sp/>affiliates.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pybind11/pybind11.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pybind11/stl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pybind11/stl_bind.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;velox/type/Type.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;folly/json.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">facebook::velox::py<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"></codeline>
<codeline lineno="34"><highlight class="normal">std::string<sp/><ref refid="group__pyvelox-type-serialization_1gabc79f16e7823ab840cb02f08d4c578d1" kindref="member">serializeType</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;const<sp/>velox::Type&gt;&amp;<sp/>type);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="group__pyvelox-type-serialization_1gacb67e389d06aff815aa745a0221f5a56" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__pyvelox-type-serialization_1gacb67e389d06aff815aa745a0221f5a56" kindref="member">addVeloxBindings</ref>(pybind11::module&amp;<sp/>m,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>asLocalModule<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Inlining<sp/>these<sp/>bindings<sp/>since<sp/>adding<sp/>them<sp/>to<sp/>the<sp/>cpp<sp/>file<sp/>results<sp/>in<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ASAN<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">velox;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">py<sp/>=<sp/>pybind11;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>TypeKind<sp/>enum.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>py::enum_&lt;velox::TypeKind&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;TypeKind&quot;</highlight><highlight class="normal">,<sp/>py::module_local(asLocalModule))</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;BOOLEAN&quot;</highlight><highlight class="normal">,<sp/>velox::TypeKind::BOOLEAN)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;TINYINT&quot;</highlight><highlight class="normal">,<sp/>velox::TypeKind::TINYINT)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;SMALLINT&quot;</highlight><highlight class="normal">,<sp/>velox::TypeKind::SMALLINT)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;INTEGER&quot;</highlight><highlight class="normal">,<sp/>velox::TypeKind::INTEGER)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;BIGINT&quot;</highlight><highlight class="normal">,<sp/>velox::TypeKind::BIGINT)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;REAL&quot;</highlight><highlight class="normal">,<sp/>velox::TypeKind::REAL)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;DOUBLE&quot;</highlight><highlight class="normal">,<sp/>velox::TypeKind::DOUBLE)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;VARCHAR&quot;</highlight><highlight class="normal">,<sp/>velox::TypeKind::VARCHAR)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;VARBINARY&quot;</highlight><highlight class="normal">,<sp/>velox::TypeKind::VARBINARY)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;TIMESTAMP&quot;</highlight><highlight class="normal">,<sp/>velox::TypeKind::TIMESTAMP)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;OPAQUE&quot;</highlight><highlight class="normal">,<sp/>velox::TypeKind::OPAQUE)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;ARRAY&quot;</highlight><highlight class="normal">,<sp/>velox::TypeKind::ARRAY)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;MAP&quot;</highlight><highlight class="normal">,<sp/>velox::TypeKind::MAP)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;ROW&quot;</highlight><highlight class="normal">,<sp/>velox::TypeKind::ROW)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.export_values();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>VeloxType<sp/>bound<sp/>to<sp/>velox::Type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>py::class_&lt;Type,<sp/>std::shared_ptr&lt;Type&gt;&gt;<sp/>type(</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m,<sp/></highlight><highlight class="stringliteral">&quot;VeloxType&quot;</highlight><highlight class="normal">,<sp/>py::module_local(asLocalModule));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adding<sp/>all<sp/>the<sp/>derived<sp/>types<sp/>of<sp/>Type<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>py::class_&lt;BooleanType,<sp/>Type,<sp/>std::shared_ptr&lt;BooleanType&gt;&gt;<sp/>booleanType(</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m,<sp/></highlight><highlight class="stringliteral">&quot;BooleanType&quot;</highlight><highlight class="normal">,<sp/>py::module_local(asLocalModule));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>py::class_&lt;IntegerType,<sp/>Type,<sp/>std::shared_ptr&lt;IntegerType&gt;&gt;<sp/>integerType(</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m,<sp/></highlight><highlight class="stringliteral">&quot;IntegerType&quot;</highlight><highlight class="normal">,<sp/>py::module_local(asLocalModule));</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>py::class_&lt;BigintType,<sp/>Type,<sp/>std::shared_ptr&lt;BigintType&gt;&gt;<sp/>bigintType(</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m,<sp/></highlight><highlight class="stringliteral">&quot;BigintType&quot;</highlight><highlight class="normal">,<sp/>py::module_local(asLocalModule));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>py::class_&lt;SmallintType,<sp/>Type,<sp/>std::shared_ptr&lt;SmallintType&gt;&gt;<sp/>smallintType(</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m,<sp/></highlight><highlight class="stringliteral">&quot;SmallintType&quot;</highlight><highlight class="normal">,<sp/>py::module_local(asLocalModule));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>py::class_&lt;TinyintType,<sp/>Type,<sp/>std::shared_ptr&lt;TinyintType&gt;&gt;<sp/>tinyintType(</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m,<sp/></highlight><highlight class="stringliteral">&quot;TinyintType&quot;</highlight><highlight class="normal">,<sp/>py::module_local(asLocalModule));</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>py::class_&lt;RealType,<sp/>Type,<sp/>std::shared_ptr&lt;RealType&gt;&gt;<sp/>realType(</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m,<sp/></highlight><highlight class="stringliteral">&quot;RealType&quot;</highlight><highlight class="normal">,<sp/>py::module_local(asLocalModule));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>py::class_&lt;DoubleType,<sp/>Type,<sp/>std::shared_ptr&lt;DoubleType&gt;&gt;<sp/>doubleType(</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m,<sp/></highlight><highlight class="stringliteral">&quot;DoubleType&quot;</highlight><highlight class="normal">,<sp/>py::module_local(asLocalModule));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>py::class_&lt;TimestampType,<sp/>Type,<sp/>std::shared_ptr&lt;TimestampType&gt;&gt;<sp/>timestampType(</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m,<sp/></highlight><highlight class="stringliteral">&quot;TimestampType&quot;</highlight><highlight class="normal">,<sp/>py::module_local(asLocalModule));</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>py::class_&lt;VarcharType,<sp/>Type,<sp/>std::shared_ptr&lt;VarcharType&gt;&gt;<sp/>varcharType(</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m,<sp/></highlight><highlight class="stringliteral">&quot;VarcharType&quot;</highlight><highlight class="normal">,<sp/>py::module_local(asLocalModule));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>py::class_&lt;VarbinaryType,<sp/>Type,<sp/>std::shared_ptr&lt;VarbinaryType&gt;&gt;<sp/>varbinaryType(</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m,<sp/></highlight><highlight class="stringliteral">&quot;VarbinaryType&quot;</highlight><highlight class="normal">,<sp/>py::module_local(asLocalModule));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>py::class_&lt;ArrayType,<sp/>Type,<sp/>std::shared_ptr&lt;ArrayType&gt;&gt;<sp/>arrayType(</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m,<sp/></highlight><highlight class="stringliteral">&quot;ArrayType&quot;</highlight><highlight class="normal">,<sp/>py::module_local(asLocalModule));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>py::class_&lt;MapType,<sp/>Type,<sp/>std::shared_ptr&lt;MapType&gt;&gt;<sp/>mapType(</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m,<sp/></highlight><highlight class="stringliteral">&quot;MapType&quot;</highlight><highlight class="normal">,<sp/>py::module_local(asLocalModule));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>py::class_&lt;RowType,<sp/>Type,<sp/>std::shared_ptr&lt;RowType&gt;&gt;<sp/>rowType(</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m,<sp/></highlight><highlight class="stringliteral">&quot;RowType&quot;</highlight><highlight class="normal">,<sp/>py::module_local(asLocalModule));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>py::class_&lt;FixedSizeArrayType,<sp/>Type,<sp/>std::shared_ptr&lt;FixedSizeArrayType&gt;&gt;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fixedArrayType(m,<sp/></highlight><highlight class="stringliteral">&quot;FixedSizeArrayType&quot;</highlight><highlight class="normal">,<sp/>py::module_local(asLocalModule));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Basic<sp/>operations<sp/>on<sp/>Type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>type.def(</highlight><highlight class="stringliteral">&quot;__str__&quot;</highlight><highlight class="normal">,<sp/>&amp;Type::toString);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gcc<sp/>doesnt<sp/>support<sp/>the<sp/>below<sp/>kind<sp/>of<sp/>templatization.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>equality<sp/>and<sp/>inequality<sp/>comparison<sp/>operators.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>type.def(py::self<sp/>==<sp/>py::self);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>type.def(py::self<sp/>!=<sp/>py::self);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>type.def(</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;cpp_size_in_bytes&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Type::cppSizeInBytes,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Return<sp/>the<sp/>C++<sp/>size<sp/>in<sp/>bytes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>type.def(</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;is_fixed_width&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Type::isFixedWidth,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Check<sp/>if<sp/>the<sp/>type<sp/>is<sp/>fixed<sp/>width&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>type.def(</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;is_primitive_type&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Type::isPrimitiveType,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Check<sp/>if<sp/>the<sp/>type<sp/>is<sp/>a<sp/>primitive<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>type.def(</highlight><highlight class="stringliteral">&quot;kind&quot;</highlight><highlight class="normal">,<sp/>&amp;Type::kind,<sp/></highlight><highlight class="stringliteral">&quot;Returns<sp/>the<sp/>kind<sp/>of<sp/>the<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>type.def(</highlight><highlight class="stringliteral">&quot;serialize&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="group__pyvelox-type-serialization_1gabc79f16e7823ab840cb02f08d4c578d1" kindref="member">serializeType</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Serializes<sp/>the<sp/>type<sp/>as<sp/>JSON&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>booleanType.def(py::init());</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>tinyintType.def(py::init());</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>smallintType.def(py::init());</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>integerType.def(py::init());</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>bigintType.def(py::init());</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>realType.def(py::init());</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>doubleType.def(py::init());</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>varcharType.def(py::init());</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>varbinaryType.def(py::init());</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>timestampType.def(py::init());</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>arrayType.def(py::init&lt;std::shared_ptr&lt;Type&gt;&gt;());</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>arrayType.def(</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;element_type&quot;</highlight><highlight class="normal">,<sp/>&amp;ArrayType::elementType,<sp/></highlight><highlight class="stringliteral">&quot;Return<sp/>the<sp/>element<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>fixedArrayType.def(py::init&lt;int,<sp/>velox::TypePtr&gt;())</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;element_type&quot;</highlight><highlight class="normal">,<sp/>&amp;velox::FixedSizeArrayType::elementType)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;fixed_width&quot;</highlight><highlight class="normal">,<sp/>&amp;velox::FixedSizeArrayType::fixedElementsWidth);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>mapType.def(py::init&lt;std::shared_ptr&lt;Type&gt;,<sp/>std::shared_ptr&lt;Type&gt;&gt;());</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>mapType.def(</highlight><highlight class="stringliteral">&quot;key_type&quot;</highlight><highlight class="normal">,<sp/>&amp;MapType::keyType,<sp/></highlight><highlight class="stringliteral">&quot;Return<sp/>the<sp/>key<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>mapType.def(</highlight><highlight class="stringliteral">&quot;value_type&quot;</highlight><highlight class="normal">,<sp/>&amp;MapType::valueType,<sp/></highlight><highlight class="stringliteral">&quot;Return<sp/>the<sp/>value<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>rowType.def(py::init&lt;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;const<sp/>Type&gt;&gt;&gt;());</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>rowType.def(</highlight><highlight class="stringliteral">&quot;size&quot;</highlight><highlight class="normal">,<sp/>&amp;RowType::size,<sp/></highlight><highlight class="stringliteral">&quot;Return<sp/>the<sp/>number<sp/>of<sp/>columns&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>rowType.def(</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;child_at&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;RowType::childAt,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Return<sp/>the<sp/>type<sp/>of<sp/>the<sp/>column<sp/>at<sp/>a<sp/>given<sp/>index&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>py::arg(</highlight><highlight class="stringliteral">&quot;idx&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>rowType.def(</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;find_child&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;RowType&gt;&amp;<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type-&gt;findChild(name);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Return<sp/>the<sp/>type<sp/>of<sp/>the<sp/>column<sp/>with<sp/>the<sp/>given<sp/>name&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>py::arg(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>rowType.def(</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;get_child_idx&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;RowType::getChildIdx,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Return<sp/>the<sp/>index<sp/>of<sp/>the<sp/>column<sp/>with<sp/>the<sp/>given<sp/>name&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>py::arg(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>rowType.def(</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;name_of&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;RowType::nameOf,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Return<sp/>the<sp/>name<sp/>of<sp/>the<sp/>column<sp/>at<sp/>the<sp/>given<sp/>index&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>py::arg(</highlight><highlight class="stringliteral">&quot;idx&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>rowType.def(</highlight><highlight class="stringliteral">&quot;names&quot;</highlight><highlight class="normal">,<sp/>&amp;RowType::names,<sp/></highlight><highlight class="stringliteral">&quot;Return<sp/>the<sp/>names<sp/>of<sp/>the<sp/>columns&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>facebook::velox::py</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/asus/github/fork/velox/pyvelox/pyvelox.h"/>
  </compounddef>
</doxygen>
