# Copyright (c) Facebook, Inc. and its affiliates.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

%YAML 1.2
---
scalar_functions:
  -
    name: "add"
    description: "Add two decimal values."
    impls:
      - args:
          - options: [ SILENT, SATURATE, ERROR ]
            required: false
          - value: decimal<P1,S1>
          - value: decimal<P2,S2>
        return: |-
          init_scale = max(S1,S2)
          init_prec = init_scale + max(P1 - S1, P2 - S2) + 1
          min_scale = min(init_scale, 6)
          delta = init_prec - 38
          prec = min(init_prec, 38)
          scale_after_borrow = max(init_scale - delta, min_scale)
          scale = init_prec > 38 ? scale_after_borrow : init_scale
          DECIMAL<prec, scale>
  -
    name: "subtract"
    impls:
      - args:
          - options: [ SILENT, SATURATE, ERROR ]
            required: false
          - value: decimal<P1,S1>
          - value: decimal<P2,S2>
        return: |-
          init_scale = max(S1,S2)
          init_prec = init_scale + max(P1 - S1, P2 - S2) + 1
          min_scale = min(init_scale, 6)
          delta = init_prec - 38
          prec = min(init_prec, 38)
          scale_after_borrow = max(init_scale - delta, min_scale)
          scale = init_prec > 38 ? scale_after_borrow : init_scale
          DECIMAL<prec, scale>
  -
    name: "multiply"
    impls:
      - args:
          - options: [ SILENT, SATURATE, ERROR ]
            required: false
          - value: decimal<P1,S1>
          - value: decimal<P2,S2>
        return: |-
          init_scale = S1 + S2
          init_prec = P1 + P2 + 1
          min_scale = min(init_scale, 6)
          delta = init_prec - 38
          prec = min(init_prec, 38)
          scale_after_borrow = max(init_scale - delta, min_scale)
          scale = init_prec > 38 ? scale_after_borrow : init_scale
          DECIMAL<prec, scale>
  -
    name: "divide"
    impls:
      - args:
          - options: [ SILENT, SATURATE, ERROR ]
            required: false
          - value: decimal<P1,S1>
          - value: decimal<P2,S2>
        return: |-
          init_scale = max(6, S1 + P2 + 1)
          init_prec = P1 - S1 + P2 + init_scale
          min_scale = min(init_scale, 6)
          delta = init_prec - 38
          prec = min(init_prec, 38)
          scale_after_borrow = max(init_scale - delta, min_scale)
          scale = init_prec > 38 ? scale_after_borrow : init_scale
          DECIMAL<prec, scale>
  -
    name: "modulus"
    impls:
      - args:
          - options: [ SILENT, SATURATE, ERROR ]
            required: false
          - value: decimal<P1,S1>
          - value: decimal<P2,S2>
        return: |-
          init_scale = max(S1,S2)
          init_prec = min(P1 - S1, P2 - S2) + init_scale
          min_scale = min(init_scale, 6)
          delta = init_prec - 38
          prec = min(init_prec, 38)
          scale_after_borrow = max(init_scale - delta, min_scale)
          scale = init_prec > 38 ? scale_after_borrow : init_scale
          DECIMAL<prec, scale>
aggregate_functions:
  - name: "sum"
    description: Sum a set of values.
    impls:
      - args:
          - options: [ SILENT, SATURATE, ERROR ]
            required: false
          - value: "DECIMAL<P, S>"
        nullability: DECLARED_OUTPUT
        decomposable: MANY
        intermediate: "DECIMAL<38,S>?"
        return: "DECIMAL<38,S>?"
  - name: "avg"
    description: Average a set of values.
    impls:
      - args:
          - options: [ SILENT, SATURATE, ERROR ]
            required: false
          - value: "DECIMAL<P,S>"
        nullability: DECLARED_OUTPUT
        decomposable: MANY
        intermediate: "STRUCT<DECIMAL<38,S>,i64>"
        return: "DECIMAL<38,S>"
  - name: "min"
    description: Min a set of values.
    impls:
      - args:
          - value: "DECIMAL<P, S>"
        nullability: DECLARED_OUTPUT
        decomposable: MANY
        intermediate: "DECIMAL<P, S>?"
        return: "DECIMAL<P, S>?"
  - name: "max"
    description: Max a set of values.
    impls:
      - args:
          - value: "DECIMAL<P,S>"
        nullability: DECLARED_OUTPUT
        decomposable: MANY
        intermediate: "DECIMAL<P, S>?"
        return: "DECIMAL<P, S>?"
