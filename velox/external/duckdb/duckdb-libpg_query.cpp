// See https://raw.githubusercontent.com/duckdb/duckdb/master/LICENSE for licensing information

#include "duckdb.hpp"
#include "duckdb-internal.hpp"
#ifndef DUCKDB_AMALGAMATION
#error header mismatch
#endif


// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #11
// See the end of this file for a list

#include <stdexcept>
#include <string>
#include <thread>
#include <mutex>


// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #11
// See the end of this file for a list



#include <stdlib.h>
#include <string>

#define fprintf(...)






namespace duckdb_libpgquery {

typedef struct parse_result_str parse_result;
struct parse_result_str {
	bool success;
	PGList *parse_tree;
	std::string error_message;
	int error_location;
};

void pg_parser_init();
void pg_parser_parse(const char *query, parse_result *res);
void pg_parser_cleanup();

// error handling
int ereport(int code, ...);

void elog(int code, const char *fmt, ...);
int errcode(int sqlerrcode);
int errmsg(const char *fmt, ...);
int errhint(const char *msg);
int errmsg_internal(const char *fmt, ...);
int errdetail(const char *fmt, ...);
int errposition(int cursorpos);
char *psprintf(const char *fmt, ...);

// memory mgmt
char *pstrdup(const char *in);
void *palloc(size_t n);
void pfree(void *ptr);
void *palloc0fast(size_t n);
void *repalloc(void *ptr, size_t n);

char *NameListToString(PGList *names);
void *copyObject(const void *from);
bool equal(const void *a, const void *b);
int exprLocation(const PGNode *expr);

// string gunk
int pg_database_encoding_max_length(void);
bool pg_verifymbstr(const char *mbstr, int len, bool noError);
int pg_mbstrlen_with_len(const char *mbstr, int len);
int pg_mbcliplen(const char *mbstr, int len, int limit);
int pg_mblen(const char *mbstr);

PGDefElem *defWithOids(bool value);

typedef unsigned int pg_wchar;
unsigned char *unicode_to_utf8(pg_wchar c, unsigned char *utf8string);

}

// LICENSE_CHANGE_END


#include <stdarg.h>
#include <mutex>
#include <cstring>


// max parse tree size approx 100 MB, should be enough
#define PG_MALLOC_SIZE 10240

namespace duckdb_libpgquery {

typedef struct pg_parser_state_str parser_state;
struct pg_parser_state_str {
	int pg_err_code;
	int pg_err_pos;
	char pg_err_msg[BUFSIZ];

	size_t malloc_pos;
	size_t malloc_ptr_idx;
	char **malloc_ptrs;
	size_t malloc_ptr_size;
};

static __thread parser_state pg_parser_state;

#ifndef __GNUC__
__thread PGNode *duckdb_newNodeMacroHolder;
#endif

static void allocate_new(parser_state *state, size_t n) {
	if (state->malloc_ptr_idx >= state->malloc_ptr_size) {
		size_t new_size = state->malloc_ptr_size * 2;
		auto new_malloc_ptrs = (char **) malloc(sizeof(char *) * new_size);
		memset(new_malloc_ptrs, 0, sizeof(char*) * new_size);
		memcpy(new_malloc_ptrs, state->malloc_ptrs, state->malloc_ptr_size * sizeof(char*));
		free(state->malloc_ptrs);
		state->malloc_ptr_size = new_size;
		state->malloc_ptrs = new_malloc_ptrs;
	}
	if (n < PG_MALLOC_SIZE) {
		n = PG_MALLOC_SIZE;
	}
	char *base_ptr = (char *)malloc(n);
	if (!base_ptr) {
		throw std::runtime_error("Memory allocation failure");
	}
	state->malloc_ptrs[state->malloc_ptr_idx] = base_ptr;
	state->malloc_ptr_idx++;
	state->malloc_pos = 0;
}

void *palloc(size_t n) {
	// we need to align our pointers for the sanitizer
	auto allocate_n = n + sizeof(size_t);
	auto aligned_n = ((allocate_n + 7) / 8) * 8;
	if (pg_parser_state.malloc_pos + aligned_n > PG_MALLOC_SIZE) {
		allocate_new(&pg_parser_state, aligned_n);
	}

	// store the length of the allocation
	char *base_ptr = pg_parser_state.malloc_ptrs[pg_parser_state.malloc_ptr_idx - 1] + pg_parser_state.malloc_pos;
	memcpy(base_ptr, &n, sizeof(size_t));
	// store the actual pointer
	char *ptr = (char*) base_ptr + sizeof(size_t);
	memset(ptr, 0, n);
	pg_parser_state.malloc_pos += aligned_n;
	return ptr;
}

void pg_parser_init() {
	pg_parser_state.pg_err_code = PGUNDEFINED;
	pg_parser_state.pg_err_msg[0] = '\0';

	pg_parser_state.malloc_ptr_size = 4;
	pg_parser_state.malloc_ptrs = (char **) malloc(sizeof(char *) * pg_parser_state.malloc_ptr_size);
	memset(pg_parser_state.malloc_ptrs, 0, sizeof(char*) * pg_parser_state.malloc_ptr_size);
	pg_parser_state.malloc_ptr_idx = 0;
	allocate_new(&pg_parser_state, 1);
}

void pg_parser_parse(const char *query, parse_result *res) {
	res->parse_tree = nullptr;
	try {
		res->parse_tree = duckdb_libpgquery::raw_parser(query);
		res->success = pg_parser_state.pg_err_code == PGUNDEFINED;
	} catch (std::exception &ex) {
		res->success = false;
		res->error_message = ex.what();
	}
	res->error_message = pg_parser_state.pg_err_msg;
	res->error_location = pg_parser_state.pg_err_pos;
}

void pg_parser_cleanup() {
	for (size_t ptr_idx = 0; ptr_idx < pg_parser_state.malloc_ptr_idx; ptr_idx++) {
		char *ptr = pg_parser_state.malloc_ptrs[ptr_idx];
		if (ptr) {
			free(ptr);
			pg_parser_state.malloc_ptrs[ptr_idx] = nullptr;
		}
	}
	free(pg_parser_state.malloc_ptrs);
}

int ereport(int code, ...) {
	std::string err = "parser error : " + std::string(pg_parser_state.pg_err_msg);
	throw std::runtime_error(err);
}
void elog(int code, const char *fmt, ...) {
	throw std::runtime_error("elog NOT IMPLEMENTED");
}
int errcode(int sqlerrcode) {
	pg_parser_state.pg_err_code = sqlerrcode;
	return 1;
}
int errmsg(const char *fmt, ...) {
	va_list argptr;
	va_start(argptr, fmt);
	vsnprintf(pg_parser_state.pg_err_msg, BUFSIZ, fmt, argptr);
	va_end(argptr);
	return 1;
}
int errhint(const char *msg) {
	throw std::runtime_error("errhint NOT IMPLEMENTED");
}
int errmsg_internal(const char *fmt, ...) {
	throw std::runtime_error("errmsg_internal NOT IMPLEMENTED");
}
int errdetail(const char *fmt, ...) {
	throw std::runtime_error("errdetail NOT IMPLEMENTED");
}
int errposition(int cursorpos) {
	pg_parser_state.pg_err_pos = cursorpos;
	return 1;
}

char *psprintf(const char *fmt, ...) {
	char buf[BUFSIZ];
	va_list args;
	size_t newlen;

	// attempt one: use stack buffer and determine length
	va_start(args, fmt);
	newlen = vsnprintf(buf, BUFSIZ, fmt, args);
	va_end(args);
	if (newlen < BUFSIZ) {
		return pstrdup(buf);
	}

	// attempt two, malloc
	char *mbuf = (char *)palloc(newlen);
	va_start(args, fmt);
	vsnprintf(mbuf, newlen, fmt, args);
	va_end(args);
	return mbuf;
}

char *pstrdup(const char *in) {
	char *new_str = (char *)palloc(strlen(in) + 1);
	memcpy(new_str, in, strlen(in));
	return new_str;
}

void pfree(void *ptr) {
	// nop, we free up entire context on parser cleanup
}
void *palloc0fast(size_t n) { // very fast
	return palloc(n);
}
void *repalloc(void *ptr, size_t n) {
	// get the length of the allocation
	size_t old_len;
	char *old_len_ptr = (char *) ptr - sizeof(size_t);
	memcpy((void *) &old_len, old_len_ptr, sizeof(size_t));
	// re-allocate and copy the data
	void *new_buf = palloc(n);
	memcpy(new_buf, ptr, old_len);
	return new_buf;
}
char *NameListToString(PGList *names) {
	throw std::runtime_error("NameListToString NOT IMPLEMENTED");
}
void *copyObject(const void *from) {
	throw std::runtime_error("copyObject NOT IMPLEMENTED");
}
bool equal(const void *a, const void *b) {
	throw std::runtime_error("equal NOT IMPLEMENTED");
}
int exprLocation(const PGNode *expr) {
	throw std::runtime_error("exprLocation NOT IMPLEMENTED");
}
bool pg_verifymbstr(const char *mbstr, int len, bool noError) {
	throw std::runtime_error("pg_verifymbstr NOT IMPLEMENTED");
}

int pg_database_encoding_max_length(void) {
	return 4; // UTF8
}

static int pg_utf_mblen(const unsigned char *s) {
	int len;

	if ((*s & 0x80) == 0)
		len = 1;
	else if ((*s & 0xe0) == 0xc0)
		len = 2;
	else if ((*s & 0xf0) == 0xe0)
		len = 3;
	else if ((*s & 0xf8) == 0xf0)
		len = 4;
#ifdef NOT_USED
	else if ((*s & 0xfc) == 0xf8)
		len = 5;
	else if ((*s & 0xfe) == 0xfc)
		len = 6;
#endif
	else
		len = 1;
	return len;
}

int pg_mbstrlen_with_len(const char *mbstr, int limit) {
	int len = 0;
	while (limit > 0 && *mbstr) {
		int l = pg_utf_mblen((const unsigned char *)mbstr);
		limit -= l;
		mbstr += l;
		len++;
	}
	return len;
}

int pg_mbcliplen(const char *mbstr, int len, int limit) {
	throw std::runtime_error("pg_mbcliplen NOT IMPLEMENTED");
}
int pg_mblen(const char *mbstr) {
	throw std::runtime_error("pg_mblen NOT IMPLEMENTED");
}
PGDefElem *defWithOids(bool value) {
	throw std::runtime_error("defWithOids NOT IMPLEMENTED");
}
unsigned char *unicode_to_utf8(pg_wchar c, unsigned char *utf8string) {
	throw std::runtime_error("unicode_to_utf8 NOT IMPLEMENTED");
}

// this replaces a brain damaged macro in nodes.hpp
PGNode *newNode(size_t size, PGNodeTag type) {
	auto result = (PGNode *)palloc0fast(size);
	result->type = type;
	return result;
}
}

// LICENSE_CHANGE_END


// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #11
// See the end of this file for a list







// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #11
// See the end of this file for a list

/*-------------------------------------------------------------------------
 *
 * scansup.h
 *	  scanner support routines.  used by both the bootstrap lexer
 * as well as the normal lexer
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/include/parser/scansup.h
 *
 *-------------------------------------------------------------------------
 */



namespace duckdb_libpgquery {

char *scanstr(const char *s);

char *downcase_truncate_identifier(const char *ident, int len, bool warn);

char *downcase_identifier(const char *ident, int len, bool warn, bool truncate);

bool scanner_isspace(char ch);

void set_preserve_identifier_case(bool downcase);
bool get_preserve_identifier_case();

}

// LICENSE_CHANGE_END



// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #11
// See the end of this file for a list

/*-------------------------------------------------------------------------
 *
 * keywords.h
 *	  lexical token lookup for key words in PostgreSQL
 *
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/include/common/keywords.h
 *
 *-------------------------------------------------------------------------
 */


#include <cstdint>

/* Keyword categories --- should match lists in gram.y */
#define UNRESERVED_KEYWORD		0
#define COL_NAME_KEYWORD		1
#define TYPE_FUNC_NAME_KEYWORD	2
#define RESERVED_KEYWORD		3

namespace duckdb_libpgquery {

typedef struct PGScanKeyword {
	const char *name; /* in lower case */
	int16_t value;    /* grammar's token code */
	int16_t category; /* see codes above */
} PGScanKeyword;

const PGScanKeyword *ScanKeywordLookup(const char *text, const PGScanKeyword *keywords, int num_keywords);
}

// LICENSE_CHANGE_END


using namespace std;

namespace duckdb {

PostgresParser::PostgresParser() : success(false), parse_tree(nullptr), error_message(""), error_location(0) {}

void PostgresParser::Parse(const string &query) {
	duckdb_libpgquery::pg_parser_init();
	duckdb_libpgquery::parse_result res;
	pg_parser_parse(query.c_str(), &res);
	success = res.success;

	if (success) {
		parse_tree = res.parse_tree;
	} else {
		error_message = string(res.error_message);
		error_location = res.error_location;
	}
}

vector<duckdb_libpgquery::PGSimplifiedToken> PostgresParser::Tokenize(const std::string &query) {
	duckdb_libpgquery::pg_parser_init();
	auto tokens = duckdb_libpgquery::tokenize(query.c_str());
	duckdb_libpgquery::pg_parser_cleanup();
	return tokens;
}

PostgresParser::~PostgresParser()  {
    duckdb_libpgquery::pg_parser_cleanup();
}

bool PostgresParser::IsKeyword(const std::string &text) {
	return duckdb_libpgquery::is_keyword(text.c_str());
}

vector<duckdb_libpgquery::PGKeyword> PostgresParser::KeywordList() {
	return duckdb_libpgquery::keyword_list();
}

void PostgresParser::SetPreserveIdentifierCase(bool preserve) {
	duckdb_libpgquery::set_preserve_identifier_case(preserve);
}

}


// LICENSE_CHANGE_END


// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #11
// See the end of this file for a list

/*--------------------------------------------------------------------
 * Symbols referenced in this file:
 * - lappend
 * - new_list
 * - new_tail_cell
 * - lcons
 * - new_head_cell
 * - list_concat
 * - list_nth
 * - list_nth_cell
 * - list_delete_cell
 * - list_free
 * - list_free_private
 * - list_copy
 * - list_copy_tail
 * - list_truncate
 *--------------------------------------------------------------------
 */

/*-------------------------------------------------------------------------
 *
 * list.c
 *	  implementation for PostgreSQL generic linked list package
 *
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/nodes/list.c
 *
 *-------------------------------------------------------------------------
 */




namespace duckdb_libpgquery {

/*
 * Routines to simplify writing assertions about the type of a list; a
 * NIL list is considered to be an empty list of any type.
 */
#define IsPointerList(l)		((l) == NIL || IsA((l), PGList))
#define IsIntegerList(l)		((l) == NIL || IsA((l), IntList))
#define IsOidList(l)			((l) == NIL || IsA((l), OidList))

#ifdef USE_ASSERT_CHECKING
/*
 * Check that the specified PGList is valid (so far as we can tell).
 */
static void
check_list_invariants(const PGList *list)
{
	if (list == NIL)
		return;

	Assert(list->length > 0);
	Assert(list->head != NULL);
	Assert(list->tail != NULL);

	Assert(list->type == T_PGList ||
		   list->type == T_PGIntList ||
		   list->type == T_PGOidList);

	if (list->length == 1)
		Assert(list->head == list->tail);
	if (list->length == 2)
		Assert(list->head->next == list->tail);
	Assert(list->tail->next == NULL);
}
#else
#define check_list_invariants(l)
#endif							/* USE_ASSERT_CHECKING */

/*
 * Return a freshly allocated List. Since empty non-NIL lists are
 * invalid, new_list() also allocates the head cell of the new list:
 * the caller should be sure to fill in that cell's data.
 */
static PGList *
new_list(PGNodeTag type)
{
	PGList	   *new_list;
	PGListCell   *new_head;

	new_head = (PGListCell *) palloc(sizeof(*new_head));
	new_head->next = NULL;
	/* new_head->data is left undefined! */

	new_list = (PGList *) palloc(sizeof(*new_list));
	new_list->type = type;
	new_list->length = 1;
	new_list->head = new_head;
	new_list->tail = new_head;

	return new_list;
}

/*
 * Allocate a new cell and make it the head of the specified
 * list. Assumes the list it is passed is non-NIL.
 *
 * The data in the new head cell is undefined; the caller should be
 * sure to fill it in
 */
static void
new_head_cell(PGList *list)
{
	PGListCell   *new_head;

	new_head = (PGListCell *) palloc(sizeof(*new_head));
	new_head->next = list->head;

	list->head = new_head;
	list->length++;
}

/*
 * Allocate a new cell and make it the tail of the specified
 * list. Assumes the list it is passed is non-NIL.
 *
 * The data in the new tail cell is undefined; the caller should be
 * sure to fill it in
 */
static void
new_tail_cell(PGList *list)
{
	PGListCell   *new_tail;

	new_tail = (PGListCell *) palloc(sizeof(*new_tail));
	new_tail->next = NULL;

	list->tail->next = new_tail;
	list->tail = new_tail;
	list->length++;
}

/*
 * PGAppend a pointer to the list. A pointer to the modified list is
 * returned. Note that this function may or may not destructively
 * modify the list; callers should always use this function's return
 * value, rather than continuing to use the pointer passed as the
 * first argument.
 */
PGList *
lappend(PGList *list, void *datum)
{
	Assert(IsPointerList(list));

	if (list == NIL)
		list = new_list(T_PGList);
	else
		new_tail_cell(list);

	lfirst(list->tail) = datum;
	check_list_invariants(list);
	return list;
}

/*
 * PGAppend an integer to the specified list. See lappend()
 */


/*
 * PGAppend an OID to the specified list. See lappend()
 */


/*
 * Add a new cell to the list, in the position after 'prev_cell'. The
 * data in the cell is left undefined, and must be filled in by the
 * caller. 'list' is assumed to be non-NIL, and 'prev_cell' is assumed
 * to be non-NULL and a member of 'list'.
 */


/*
 * Add a new cell to the specified list (which must be non-NIL);
 * it will be placed after the list cell 'prev' (which must be
 * non-NULL and a member of 'list'). The data placed in the new cell
 * is 'datum'. The newly-constructed cell is returned.
 */






/*
 * Prepend a new element to the list. A pointer to the modified list
 * is returned. Note that this function may or may not destructively
 * modify the list; callers should always use this function's return
 * value, rather than continuing to use the pointer passed as the
 * second argument.
 *
 * Caution: before Postgres 8.0, the original PGList was unmodified and
 * could be considered to retain its separate identity.  This is no longer
 * the case.
 */
PGList *
lcons(void *datum, PGList *list)
{
	Assert(IsPointerList(list));

	if (list == NIL)
		list = new_list(T_PGList);
	else
		new_head_cell(list);

	lfirst(list->head) = datum;
	check_list_invariants(list);
	return list;
}

/*
 * Prepend an integer to the list. See lcons()
 */


/*
 * Prepend an OID to the list. See lcons()
 */


/*
 * Concatenate list2 to the end of list1, and return list1. list1 is
 * destructively changed. Callers should be sure to use the return
 * value as the new pointer to the concatenated list: the 'list1'
 * input pointer may or may not be the same as the returned pointer.
 *
 * The nodes in list2 are merely appended to the end of list1 in-place
 * (i.e. they aren't copied; the two lists will share some of the same
 * storage). Therefore, invoking list_free() on list2 will also
 * invalidate a portion of list1.
 */
PGList *
list_concat(PGList *list1, PGList *list2)
{
	if (list1 == NIL)
		return list2;
	if (list2 == NIL)
		return list1;
	if (list1 == list2)
		elog(ERROR, "cannot list_concat() a list to itself");

	Assert(list1->type == list2->type);

	list1->length += list2->length;
	list1->tail->next = list2->head;
	list1->tail = list2->tail;

	check_list_invariants(list1);
	return list1;
}

/*
 * Truncate 'list' to contain no more than 'new_size' elements. This
 * modifies the list in-place! Despite this, callers should use the
 * pointer returned by this function to refer to the newly truncated
 * list -- it may or may not be the same as the pointer that was
 * passed.
 *
 * Note that any cells removed by list_truncate() are NOT pfree'd.
 */
PGList *
list_truncate(PGList *list, int new_size)
{
	PGListCell   *cell;
	int			n;

	if (new_size <= 0)
		return NIL;				/* truncate to zero length */

	/* If asked to effectively extend the list, do nothing */
	if (new_size >= list_length(list))
		return list;

	n = 1;
	foreach(cell, list)
	{
		if (n == new_size)
		{
			cell->next = NULL;
			list->tail = cell;
			list->length = new_size;
			check_list_invariants(list);
			return list;
		}
		n++;
	}

	/* keep the compiler quiet; never reached */
	Assert(false);
	return list;
}

/*
 * Locate the n'th cell (counting from 0) of the list.  It is an assertion
 * failure if there is no such cell.
 */
PGListCell *
list_nth_cell(const PGList *list, int n)
{
	PGListCell   *match;

	Assert(list != NIL);
	Assert(n >= 0);
	Assert(n < list->length);
	check_list_invariants(list);

	/* Does the caller actually mean to fetch the tail? */
	if (n == list->length - 1)
		return list->tail;

	for (match = list->head; n-- > 0; match = match->next)
		;

	return match;
}

/*
 * Return the data value contained in the n'th element of the
 * specified list. (PGList elements begin at 0.)
 */
void *
list_nth(const PGList *list, int n)
{
	Assert(IsPointerList(list));
	return lfirst(list_nth_cell(list, n));
}

/*
 * Delete 'cell' from 'list'; 'prev' is the previous element to 'cell'
 * in 'list', if any (i.e. prev == NULL iff list->head == cell)
 *
 * The cell is pfree'd, as is the PGList header if this was the last member.
 */
PGList *
list_delete_cell(PGList *list, PGListCell *cell, PGListCell *prev)
{
	check_list_invariants(list);
	Assert(prev != NULL ? lnext(prev) == cell : list_head(list) == cell);

	/*
	 * If we're about to delete the last node from the list, free the whole
	 * list instead and return NIL, which is the only valid representation of
	 * a zero-length list.
	 */
	if (list->length == 1)
	{
		list_free(list);
		return NIL;
	}

	/*
	 * Otherwise, adjust the necessary list links, deallocate the particular
	 * node we have just removed, and return the list we were given.
	 */
	list->length--;

	if (prev)
		prev->next = cell->next;
	else
		list->head = cell->next;

	if (list->tail == cell)
		list->tail = prev;

	pfree(cell);
	return list;
}

/*
 * Free all storage in a list, and optionally the pointed-to elements
 */
static void
list_free_private(PGList *list, bool deep)
{
	PGListCell   *cell;

	check_list_invariants(list);

	cell = list_head(list);
	while (cell != NULL)
	{
		PGListCell   *tmp = cell;

		cell = lnext(cell);
		if (deep)
			pfree(lfirst(tmp));
		pfree(tmp);
	}

	if (list)
		pfree(list);
}

/*
 * Free all the cells of the list, as well as the list itself. Any
 * objects that are pointed-to by the cells of the list are NOT
 * free'd.
 *
 * On return, the argument to this function has been freed, so the
 * caller would be wise to set it to NIL for safety's sake.
 */
void
list_free(PGList *list)
{
	list_free_private(list, false);
}

/*
 * Free all the cells of the list, the list itself, and all the
 * objects pointed-to by the cells of the list (each element in the
 * list must contain a pointer to a palloc()'d region of memory!)
 *
 * On return, the argument to this function has been freed, so the
 * caller would be wise to set it to NIL for safety's sake.
 */


/*
 * Return a shallow copy of the specified list.
 */
PGList *
list_copy(const PGList *oldlist)
{
	PGList	   *newlist;
	PGListCell   *newlist_prev;
	PGListCell   *oldlist_cur;

	if (oldlist == NIL)
		return NIL;

	newlist = new_list(oldlist->type);
	newlist->length = oldlist->length;

	/*
	 * Copy over the data in the first cell; new_list() has already allocated
	 * the head cell itself
	 */
	newlist->head->data = oldlist->head->data;

	newlist_prev = newlist->head;
	oldlist_cur = oldlist->head->next;
	while (oldlist_cur)
	{
		PGListCell   *newlist_cur;

		newlist_cur = (PGListCell *) palloc(sizeof(*newlist_cur));
		newlist_cur->data = oldlist_cur->data;
		newlist_prev->next = newlist_cur;

		newlist_prev = newlist_cur;
		oldlist_cur = oldlist_cur->next;
	}

	newlist_prev->next = NULL;
	newlist->tail = newlist_prev;

	check_list_invariants(newlist);
	return newlist;
}

/*
 * Return a shallow copy of the specified list, without the first N elements.
 */
PGList *
list_copy_tail(const PGList *oldlist, int nskip)
{
	PGList	   *newlist;
	PGListCell   *newlist_prev;
	PGListCell   *oldlist_cur;

	if (nskip < 0)
		nskip = 0;				/* would it be better to elog? */

	if (oldlist == NIL || nskip >= oldlist->length)
		return NIL;

	newlist = new_list(oldlist->type);
	newlist->length = oldlist->length - nskip;

	/*
	 * Skip over the unwanted elements.
	 */
	oldlist_cur = oldlist->head;
	while (nskip-- > 0)
		oldlist_cur = oldlist_cur->next;

	/*
	 * Copy over the data in the first remaining cell; new_list() has already
	 * allocated the head cell itself
	 */
	newlist->head->data = oldlist_cur->data;

	newlist_prev = newlist->head;
	oldlist_cur = oldlist_cur->next;
	while (oldlist_cur)
	{
		PGListCell   *newlist_cur;

		newlist_cur = (PGListCell *) palloc(sizeof(*newlist_cur));
		newlist_cur->data = oldlist_cur->data;
		newlist_prev->next = newlist_cur;

		newlist_prev = newlist_cur;
		oldlist_cur = oldlist_cur->next;
	}

	newlist_prev->next = NULL;
	newlist->tail = newlist_prev;

	check_list_invariants(newlist);
	return newlist;
}

/*
 * Temporary compatibility functions
 *
 * In order to avoid warnings for these function definitions, we need
 * to include a prototype here as well as in pg_list.h. That's because
 * we don't enable list API compatibility in list.c, so we
 * don't see the prototypes for these functions.
 */

/*
 * Given a list, return its length. This is merely defined for the
 * sake of backward compatibility: we can't afford to define a macro
 * called "length", so it must be a function. New code should use the
 * list_length() macro in order to avoid the overhead of a function
 * call.
 */
int			length(const PGList *list);


}

// LICENSE_CHANGE_END


// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #11
// See the end of this file for a list

/*--------------------------------------------------------------------
 * Symbols referenced in this file:
 * - makeDefElem
 * - makeTypeNameFromNameList
 * - makeDefElemExtended
 * - makeAlias
 * - makeSimpleAExpr
 * - makeGroupingSet
 * - makeTypeName
 * - makeFuncCall
 * - makeAExpr
 * - makeRangeVar
 * - makeBoolExpr
 *--------------------------------------------------------------------
 */

/*-------------------------------------------------------------------------
 *
 * makefuncs.c
 *	  creator functions for primitive nodes. The functions here are for
 *	  the most frequently created nodes.
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/nodes/makefuncs.c
 *
 *-------------------------------------------------------------------------
 */






// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #11
// See the end of this file for a list

/*-------------------------------------------------------------------------
 *
 * fmgr.h
 *	  Definitions for the Postgres function manager and function-call
 *	  interface.
 *
 * This file must be included by all Postgres modules that either define
 * or call fmgr-callable functions.
 *
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/include/fmgr.h
 *
 *-------------------------------------------------------------------------
 */




typedef struct PGFunctionCallInfoData *PGFunctionCallInfo;

/* Standard parameter list for fmgr-compatible functions */
#define PG_FUNCTION_ARGS	PGFunctionCallInfo fcinfo


// LICENSE_CHANGE_END



// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #11
// See the end of this file for a list

/*-------------------------------------------------------------------------
 *
 * makefuncs.h
 *	  prototypes for the creator functions (for primitive nodes)
 *
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/include/nodes/makefuncs.h
 *
 *-------------------------------------------------------------------------
 */




namespace duckdb_libpgquery {

PGAExpr *makeAExpr(PGAExpr_Kind kind, PGList *name, PGNode *lexpr, PGNode *rexpr, int location);

PGAExpr *makeSimpleAExpr(PGAExpr_Kind kind, const char *name, PGNode *lexpr, PGNode *rexpr, int location);

PGVar *makeVar(PGIndex varno, PGAttrNumber varattno, PGOid vartype, int32_t vartypmod, PGOid varcollid,
               PGIndex varlevelsup);

PGVar *makeVarFromTargetEntry(PGIndex varno, PGTargetEntry *tle);

PGVar *makeWholeRowVar(PGRangeTblEntry *rte, PGIndex varno, PGIndex varlevelsup, bool allowScalar);

PGTargetEntry *makeTargetEntry(PGExpr *expr, PGAttrNumber resno, char *resname, bool resjunk);

PGTargetEntry *flatCopyTargetEntry(PGTargetEntry *src_tle);

PGFromExpr *makeFromExpr(PGList *fromlist, PGNode *quals);

PGConst *makeConst(PGOid consttype, int32_t consttypmod, PGOid constcollid, int constlen, PGDatum constvalue,
                   bool constisnull, bool constbyval);

PGConst *makeNullConst(PGOid consttype, int32_t consttypmod, PGOid constcollid);

PGNode *makeBoolConst(bool value, bool isnull);

PGExpr *makeBoolExpr(PGBoolExprType boolop, PGList *args, int location);

PGAlias *makeAlias(const char *aliasname, PGList *colnames);

PGRelabelType *makeRelabelType(PGExpr *arg, PGOid rtype, int32_t rtypmod, PGOid rcollid, PGCoercionForm rformat);

PGRangeVar *makeRangeVar(char *schemaname, char *relname, int location);

PGTypeName *makeTypeName(char *typnam);
PGTypeName *makeTypeNameFromNameList(PGList *names);
PGTypeName *makeTypeNameFromOid(PGOid typeOid, int32_t typmod);

PGColumnDef *makeColumnDef(const char *colname, PGOid typeOid, int32_t typmod, PGOid collOid);

PGFuncExpr *makeFuncExpr(PGOid funcid, PGOid rettype, PGList *args, PGOid funccollid, PGOid inputcollid,
                         PGCoercionForm fformat);

PGFuncCall *makeFuncCall(PGList *name, PGList *args, int location);

PGDefElem *makeDefElem(const char *name, PGNode *arg, int location);
PGDefElem *makeDefElemExtended(const char *nameSpace, const char *name, PGNode *arg, PGDefElemAction defaction,
                               int location);

PGGroupingSet *makeGroupingSet(GroupingSetKind kind, PGList *content, int location);

}

// LICENSE_CHANGE_END



// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #11
// See the end of this file for a list

/*-------------------------------------------------------------------------
 *
 * nodeFuncs.h
 *		Various general-purpose manipulations of PGNode trees
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/include/nodes/nodeFuncs.h
 *
 *-------------------------------------------------------------------------
 */




namespace duckdb_libpgquery {

/* flags bits for query_tree_walker and query_tree_mutator */
#define QTW_IGNORE_RT_SUBQUERIES 0x01 /* subqueries in rtable */
#define QTW_IGNORE_CTE_SUBQUERIES 0x02 /* subqueries in cteList */
#define QTW_IGNORE_RC_SUBQUERIES 0x03 /* both of above */
#define QTW_IGNORE_JOINALIASES 0x04 /* JOIN alias var lists */
#define QTW_IGNORE_RANGE_TABLE 0x08 /* skip rangetable entirely */
#define QTW_EXAMINE_RTES 0x10 /* examine RTEs */
#define QTW_DONT_COPY_QUERY 0x20 /* do not copy top PGQuery */

/* callback function for check_functions_in_node */
typedef bool (*check_function_callback)(PGOid func_id, void *context);

PGOid exprType(const PGNode *expr);
int32_t exprTypmod(const PGNode *expr);
bool exprIsLengthCoercion(const PGNode *expr, int32_t *coercedTypmod);
PGNode *relabel_to_typmod(PGNode *expr, int32_t typmod);
PGNode *strip_implicit_coercions(PGNode *node);
bool expression_returns_set(PGNode *clause);

PGOid exprCollation(const PGNode *expr);
PGOid exprInputCollation(const PGNode *expr);
void exprSetCollation(PGNode *expr, PGOid collation);
void exprSetInputCollation(PGNode *expr, PGOid inputcollation);

int exprLocation(const PGNode *expr);

void fix_opfuncids(PGNode *node);
void set_opfuncid(PGOpExpr *opexpr);
void set_sa_opfuncid(PGScalarArrayOpExpr *opexpr);

bool check_functions_in_node(PGNode *node, check_function_callback checker, void *context);

bool expression_tree_walker(PGNode *node, bool (*walker)(), void *context);
PGNode *expression_tree_mutator(PGNode *node, PGNode *(*mutator)(), void *context);

bool query_tree_walker(PGQuery *query, bool (*walker)(), void *context, int flags);
PGQuery *query_tree_mutator(PGQuery *query, PGNode *(*mutator)(), void *context, int flags);

bool range_table_walker(PGList *rtable, bool (*walker)(), void *context, int flags);
PGList *range_table_mutator(PGList *rtable, PGNode *(*mutator)(), void *context, int flags);

bool query_or_expression_tree_walker(PGNode *node, bool (*walker)(), void *context, int flags);
PGNode *query_or_expression_tree_mutator(PGNode *node, PGNode *(*mutator)(), void *context, int flags);

bool raw_expression_tree_walker(PGNode *node, bool (*walker)(), void *context);

struct PlanState;
bool planstate_tree_walker(struct PlanState *planstate, bool (*walker)(), void *context);

}


// LICENSE_CHANGE_END


namespace duckdb_libpgquery {

/*
 * makeAExpr -
 *		makes an PGAExpr node
 */
PGAExpr *makeAExpr(PGAExpr_Kind kind, PGList *name, PGNode *lexpr, PGNode *rexpr, int location) {
	PGAExpr *a = makeNode(PGAExpr);

	a->kind = kind;
	a->name = name;
	a->lexpr = lexpr;
	a->rexpr = rexpr;
	a->location = location;
	return a;
}

/*
 * makeSimpleAExpr -
 *		As above, given a simple (unqualified) operator name
 */
PGAExpr *makeSimpleAExpr(PGAExpr_Kind kind, const char *name, PGNode *lexpr, PGNode *rexpr, int location) {
	PGAExpr *a = makeNode(PGAExpr);

	a->kind = kind;
	a->name = list_make1(makeString((char *)name));
	a->lexpr = lexpr;
	a->rexpr = rexpr;
	a->location = location;
	return a;
}

/*
 * makeVar -
 *	  creates a PGVar node
 */

/*
 * makeVarFromTargetEntry -
 *		convenience function to create a same-level PGVar node from a
 *		PGTargetEntry
 */

/*
 * makeWholeRowVar -
 *	  creates a PGVar node representing a whole row of the specified RTE
 *
 * A whole-row reference is a PGVar with varno set to the correct range
 * table entry, and varattno == 0 to signal that it references the whole
 * tuple.  (Use of zero here is unclean, since it could easily be confused
 * with error cases, but it's not worth changing now.)  The vartype indicates
 * a rowtype; either a named composite type, or RECORD.  This function
 * encapsulates the logic for determining the correct rowtype OID to use.
 *
 * If allowScalar is true, then for the case where the RTE is a single function
 * returning a non-composite result type, we produce a normal PGVar referencing
 * the function's result directly, instead of the single-column composite
 * value that the whole-row notation might otherwise suggest.
 */

/*
 * makeTargetEntry -
 *	  creates a PGTargetEntry node
 */

/*
 * flatCopyTargetEntry -
 *	  duplicate a PGTargetEntry, but don't copy substructure
 *
 * This is commonly used when we just want to modify the resno or substitute
 * a new expression.
 */

/*
 * makeFromExpr -
 *	  creates a PGFromExpr node
 */

/*
 * makeConst -
 *	  creates a PGConst node
 */

/*
 * makeNullConst -
 *	  creates a PGConst node representing a NULL of the specified type/typmod
 *
 * This is a convenience routine that just saves a lookup of the type's
 * storage properties.
 */

/*
 * makeBoolConst -
 *	  creates a PGConst node representing a boolean value (can be NULL too)
 */

/*
 * makeBoolExpr -
 *	  creates a PGBoolExpr node
 */
PGExpr *makeBoolExpr(PGBoolExprType boolop, PGList *args, int location) {
	PGBoolExpr *b = makeNode(PGBoolExpr);

	b->boolop = boolop;
	b->args = args;
	b->location = location;

	return (PGExpr *)b;
}

/*
 * makeAlias -
 *	  creates an PGAlias node
 *
 * NOTE: the given name is copied, but the colnames list (if any) isn't.
 */
PGAlias *makeAlias(const char *aliasname, PGList *colnames) {
	PGAlias *a = makeNode(PGAlias);

	a->aliasname = pstrdup(aliasname);
	a->colnames = colnames;

	return a;
}

/*
 * makeRelabelType -
 *	  creates a PGRelabelType node
 */

/*
 * makeRangeVar -
 *	  creates a PGRangeVar node (rather oversimplified case)
 */
PGRangeVar *makeRangeVar(char *schemaname, char *relname, int location) {
	PGRangeVar *r = makeNode(PGRangeVar);

	r->catalogname = NULL;
	r->schemaname = schemaname;
	r->relname = relname;
	r->inh = true;
	r->relpersistence = RELPERSISTENCE_PERMANENT;
	r->alias = NULL;
	r->location = location;
	r->sample = NULL;

	return r;
}

/*
 * makeTypeName -
 *	build a PGTypeName node for an unqualified name.
 *
 * typmod is defaulted, but can be changed later by caller.
 */
PGTypeName *makeTypeName(char *typnam) {
	return makeTypeNameFromNameList(list_make1(makeString(typnam)));
}

/*
 * makeTypeNameFromNameList -
 *	build a PGTypeName node for a String list representing a qualified name.
 *
 * typmod is defaulted, but can be changed later by caller.
 */
PGTypeName *makeTypeNameFromNameList(PGList *names) {
	PGTypeName *n = makeNode(PGTypeName);

	n->names = names;
	n->typmods = NIL;
	n->typemod = -1;
	n->location = -1;
	return n;
}

/*
 * makeTypeNameFromOid -
 *	build a PGTypeName node to represent a type already known by OID/typmod.
 */

/*
 * makeColumnDef -
 *	build a PGColumnDef node to represent a simple column definition.
 *
 * Type and collation are specified by OID.
 * Other properties are all basic to start with.
 */

/*
 * makeFuncExpr -
 *	build an expression tree representing a function call.
 *
 * The argument expressions must have been transformed already.
 */

/*
 * makeDefElem -
 *	build a PGDefElem node
 *
 * This is sufficient for the "typical" case with an unqualified option name
 * and no special action.
 */
PGDefElem *makeDefElem(const char *name, PGNode *arg, int location) {
	PGDefElem *res = makeNode(PGDefElem);

	res->defnamespace = NULL;
	res->defname = (char *)name;
	res->arg = arg;
	res->defaction = PG_DEFELEM_UNSPEC;
	res->location = location;

	return res;
}

/*
 * makeDefElemExtended -
 *	build a PGDefElem node with all fields available to be specified
 */
PGDefElem *makeDefElemExtended(const char *nameSpace, const char *name, PGNode *arg, PGDefElemAction defaction,
                               int location) {
	PGDefElem *res = makeNode(PGDefElem);

	res->defnamespace = (char *)nameSpace;
	res->defname = (char *)name;
	res->arg = arg;
	res->defaction = defaction;
	res->location = location;

	return res;
}

/*
 * makeFuncCall -
 *
 * Initialize a PGFuncCall struct with the information every caller must
 * supply.  Any non-default parameters have to be inserted by the caller.
 */
PGFuncCall *makeFuncCall(PGList *name, PGList *args, int location) {
	PGFuncCall *n = makeNode(PGFuncCall);

	n->funcname = name;
	n->args = args;
	n->agg_order = NIL;
	n->agg_filter = NULL;
	n->agg_within_group = false;
	n->agg_star = false;
	n->agg_distinct = false;
	n->func_variadic = false;
	n->over = NULL;
	n->location = location;
	return n;
}

/*
 * makeGroupingSet
 *
 */
PGGroupingSet *makeGroupingSet(GroupingSetKind kind, PGList *content, int location) {
	PGGroupingSet *n = makeNode(PGGroupingSet);

	n->kind = kind;
	n->content = content;
	n->location = location;
	return n;
}
}

// LICENSE_CHANGE_END


// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #11
// See the end of this file for a list

/*--------------------------------------------------------------------
 * Symbols referenced in this file:
 * - makeInteger
 * - makeString
 * - makeFloat
 *--------------------------------------------------------------------
 */

/*-------------------------------------------------------------------------
 *
 * value.c
 *	  implementation of PGValue nodes
 *
 *
 * Copyright (c) 2003-2017, PostgreSQL Global Development PGGroup
 *
 *
 * IDENTIFICATION
 *	  src/backend/nodes/value.c
 *
 *-------------------------------------------------------------------------
 */



#include <string>
#include <cstring>

namespace duckdb_libpgquery {

/*
 *	makeInteger
 */
PGValue *makeInteger(long i) {
	PGValue *v = makeNode(PGValue);

	v->type = T_PGInteger;
	v->val.ival = i;
	return v;
}

/*
 *	makeFloat
 *
 * Caller is responsible for passing a palloc'd string.
 */
PGValue *makeFloat(char *numericStr) {
	PGValue *v = makeNode(PGValue);

	v->type = T_PGFloat;
	v->val.str = numericStr;
	return v;
}

/*
 *	makeString
 *
 * Caller is responsible for passing a palloc'd string.
 */
PGValue *makeString(const char *str) {
	PGValue *v = makeNode(PGValue);

	v->type = T_PGString;
	v->val.str = (char *)str;
	return v;
}

/*
 *	makeBitString
 *
 * Caller is responsible for passing a palloc'd string.
 */

}

// LICENSE_CHANGE_END


// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #11
// See the end of this file for a list

/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Using locations.  */
#define YYLSP_NEEDED 1

/* Substitute the variable and function names.  */
#define yyparse base_yyparse
#define yylex   base_yylex
#define yyerror base_yyerror
#define yylval  base_yylval
#define yychar  base_yychar
#define yydebug base_yydebug
#define yynerrs base_yynerrs
#define yylloc base_yylloc

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     IDENT = 258,
     FCONST = 259,
     SCONST = 260,
     BCONST = 261,
     XCONST = 262,
     Op = 263,
     ICONST = 264,
     PARAM = 265,
     TYPECAST = 266,
     DOT_DOT = 267,
     COLON_EQUALS = 268,
     EQUALS_GREATER = 269,
     LAMBDA_ARROW = 270,
     POWER_OF = 271,
     LESS_EQUALS = 272,
     GREATER_EQUALS = 273,
     NOT_EQUALS = 274,
     ABORT_P = 275,
     ABSOLUTE_P = 276,
     ACCESS = 277,
     ACTION = 278,
     ADD_P = 279,
     ADMIN = 280,
     AFTER = 281,
     AGGREGATE = 282,
     ALL = 283,
     ALSO = 284,
     ALTER = 285,
     ALWAYS = 286,
     ANALYSE = 287,
     ANALYZE = 288,
     AND = 289,
     ANY = 290,
     ARRAY = 291,
     AS = 292,
     ASC_P = 293,
     ASSERTION = 294,
     ASSIGNMENT = 295,
     ASYMMETRIC = 296,
     AT = 297,
     ATTACH = 298,
     ATTRIBUTE = 299,
     AUTHORIZATION = 300,
     BACKWARD = 301,
     BEFORE = 302,
     BEGIN_P = 303,
     BETWEEN = 304,
     BIGINT = 305,
     BINARY = 306,
     BIT = 307,
     BOOLEAN_P = 308,
     BOTH = 309,
     BY = 310,
     CACHE = 311,
     CALL_P = 312,
     CALLED = 313,
     CASCADE = 314,
     CASCADED = 315,
     CASE = 316,
     CAST = 317,
     CATALOG_P = 318,
     CHAIN = 319,
     CHAR_P = 320,
     CHARACTER = 321,
     CHARACTERISTICS = 322,
     CHECK_P = 323,
     CHECKPOINT = 324,
     CLASS = 325,
     CLOSE = 326,
     CLUSTER = 327,
     COALESCE = 328,
     COLLATE = 329,
     COLLATION = 330,
     COLUMN = 331,
     COLUMNS = 332,
     COMMENT = 333,
     COMMENTS = 334,
     COMMIT = 335,
     COMMITTED = 336,
     COMPRESSION = 337,
     CONCURRENTLY = 338,
     CONFIGURATION = 339,
     CONFLICT = 340,
     CONNECTION = 341,
     CONSTRAINT = 342,
     CONSTRAINTS = 343,
     CONTENT_P = 344,
     CONTINUE_P = 345,
     CONVERSION_P = 346,
     COPY = 347,
     COST = 348,
     CREATE_P = 349,
     CROSS = 350,
     CSV = 351,
     CUBE = 352,
     CURRENT_P = 353,
     CURRENT_CATALOG = 354,
     CURRENT_DATE = 355,
     CURRENT_ROLE = 356,
     CURRENT_SCHEMA = 357,
     CURRENT_TIME = 358,
     CURRENT_TIMESTAMP = 359,
     CURRENT_USER = 360,
     CURSOR = 361,
     CYCLE = 362,
     DATA_P = 363,
     DATABASE = 364,
     DAY_P = 365,
     DAYS_P = 366,
     DEALLOCATE = 367,
     DEC = 368,
     DECIMAL_P = 369,
     DECLARE = 370,
     DEFAULT = 371,
     DEFAULTS = 372,
     DEFERRABLE = 373,
     DEFERRED = 374,
     DEFINER = 375,
     DELETE_P = 376,
     DELIMITER = 377,
     DELIMITERS = 378,
     DEPENDS = 379,
     DESC_P = 380,
     DESCRIBE = 381,
     DETACH = 382,
     DICTIONARY = 383,
     DISABLE_P = 384,
     DISCARD = 385,
     DISTINCT = 386,
     DO = 387,
     DOCUMENT_P = 388,
     DOMAIN_P = 389,
     DOUBLE_P = 390,
     DROP = 391,
     EACH = 392,
     ELSE = 393,
     ENABLE_P = 394,
     ENCODING = 395,
     ENCRYPTED = 396,
     END_P = 397,
     ENUM_P = 398,
     ESCAPE = 399,
     EVENT = 400,
     EXCEPT = 401,
     EXCLUDE = 402,
     EXCLUDING = 403,
     EXCLUSIVE = 404,
     EXECUTE = 405,
     EXISTS = 406,
     EXPLAIN = 407,
     EXPORT_P = 408,
     EXPORT_STATE = 409,
     EXTENSION = 410,
     EXTERNAL = 411,
     EXTRACT = 412,
     FALSE_P = 413,
     FAMILY = 414,
     FETCH = 415,
     FILTER = 416,
     FIRST_P = 417,
     FLOAT_P = 418,
     FOLLOWING = 419,
     FOR = 420,
     FORCE = 421,
     FOREIGN = 422,
     FORWARD = 423,
     FREEZE = 424,
     FROM = 425,
     FULL = 426,
     FUNCTION = 427,
     FUNCTIONS = 428,
     GENERATED = 429,
     GLOB = 430,
     GLOBAL = 431,
     GRANT = 432,
     GRANTED = 433,
     GROUP_P = 434,
     GROUPING = 435,
     GROUPING_ID = 436,
     HANDLER = 437,
     HAVING = 438,
     HEADER_P = 439,
     HOLD = 440,
     HOUR_P = 441,
     HOURS_P = 442,
     IDENTITY_P = 443,
     IF_P = 444,
     IGNORE_P = 445,
     ILIKE = 446,
     IMMEDIATE = 447,
     IMMUTABLE = 448,
     IMPLICIT_P = 449,
     IMPORT_P = 450,
     IN_P = 451,
     INCLUDING = 452,
     INCREMENT = 453,
     INDEX = 454,
     INDEXES = 455,
     INHERIT = 456,
     INHERITS = 457,
     INITIALLY = 458,
     INLINE_P = 459,
     INNER_P = 460,
     INOUT = 461,
     INPUT_P = 462,
     INSENSITIVE = 463,
     INSERT = 464,
     INSTALL = 465,
     INSTEAD = 466,
     INT_P = 467,
     INTEGER = 468,
     INTERSECT = 469,
     INTERVAL = 470,
     INTO = 471,
     INVOKER = 472,
     IS = 473,
     ISNULL = 474,
     ISOLATION = 475,
     JOIN = 476,
     JSON = 477,
     KEY = 478,
     LABEL = 479,
     LANGUAGE = 480,
     LARGE_P = 481,
     LAST_P = 482,
     LATERAL_P = 483,
     LEADING = 484,
     LEAKPROOF = 485,
     LEFT = 486,
     LEVEL = 487,
     LIKE = 488,
     LIMIT = 489,
     LISTEN = 490,
     LOAD = 491,
     LOCAL = 492,
     LOCALTIME = 493,
     LOCALTIMESTAMP = 494,
     LOCATION = 495,
     LOCK_P = 496,
     LOCKED = 497,
     LOGGED = 498,
     MACRO = 499,
     MAP = 500,
     MAPPING = 501,
     MATCH = 502,
     MATERIALIZED = 503,
     MAXVALUE = 504,
     METHOD = 505,
     MICROSECOND_P = 506,
     MICROSECONDS_P = 507,
     MILLISECOND_P = 508,
     MILLISECONDS_P = 509,
     MINUTE_P = 510,
     MINUTES_P = 511,
     MINVALUE = 512,
     MODE = 513,
     MONTH_P = 514,
     MONTHS_P = 515,
     MOVE = 516,
     NAME_P = 517,
     NAMES = 518,
     NATIONAL = 519,
     NATURAL = 520,
     NCHAR = 521,
     NEW = 522,
     NEXT = 523,
     NO = 524,
     NONE = 525,
     NOT = 526,
     NOTHING = 527,
     NOTIFY = 528,
     NOTNULL = 529,
     NOWAIT = 530,
     NULL_P = 531,
     NULLIF = 532,
     NULLS_P = 533,
     NUMERIC = 534,
     OBJECT_P = 535,
     OF = 536,
     OFF = 537,
     OFFSET = 538,
     OIDS = 539,
     OLD = 540,
     ON = 541,
     ONLY = 542,
     OPERATOR = 543,
     OPTION = 544,
     OPTIONS = 545,
     OR = 546,
     ORDER = 547,
     ORDINALITY = 548,
     OUT_P = 549,
     OUTER_P = 550,
     OVER = 551,
     OVERLAPS = 552,
     OVERLAY = 553,
     OVERRIDING = 554,
     OWNED = 555,
     OWNER = 556,
     PARALLEL = 557,
     PARSER = 558,
     PARTIAL = 559,
     PARTITION = 560,
     PASSING = 561,
     PASSWORD = 562,
     PERCENT = 563,
     PLACING = 564,
     PLANS = 565,
     POLICY = 566,
     POSITION = 567,
     PRAGMA_P = 568,
     PRECEDING = 569,
     PRECISION = 570,
     PREPARE = 571,
     PREPARED = 572,
     PRESERVE = 573,
     PRIMARY = 574,
     PRIOR = 575,
     PRIVILEGES = 576,
     PROCEDURAL = 577,
     PROCEDURE = 578,
     PROGRAM = 579,
     PUBLICATION = 580,
     QUALIFY = 581,
     QUOTE = 582,
     RANGE = 583,
     READ_P = 584,
     REAL = 585,
     REASSIGN = 586,
     RECHECK = 587,
     RECURSIVE = 588,
     REF = 589,
     REFERENCES = 590,
     REFERENCING = 591,
     REFRESH = 592,
     REINDEX = 593,
     RELATIVE_P = 594,
     RELEASE = 595,
     RENAME = 596,
     REPEATABLE = 597,
     REPLACE = 598,
     REPLICA = 599,
     RESET = 600,
     RESPECT_P = 601,
     RESTART = 602,
     RESTRICT = 603,
     RETURNING = 604,
     RETURNS = 605,
     REVOKE = 606,
     RIGHT = 607,
     ROLE = 608,
     ROLLBACK = 609,
     ROLLUP = 610,
     ROW = 611,
     ROWS = 612,
     RULE = 613,
     SAMPLE = 614,
     SAVEPOINT = 615,
     SCHEMA = 616,
     SCHEMAS = 617,
     SCROLL = 618,
     SEARCH = 619,
     SECOND_P = 620,
     SECONDS_P = 621,
     SECURITY = 622,
     SELECT = 623,
     SEQUENCE = 624,
     SEQUENCES = 625,
     SERIALIZABLE = 626,
     SERVER = 627,
     SESSION = 628,
     SESSION_USER = 629,
     SET = 630,
     SETOF = 631,
     SETS = 632,
     SHARE = 633,
     SHOW = 634,
     SIMILAR = 635,
     SIMPLE = 636,
     SKIP = 637,
     SMALLINT = 638,
     SNAPSHOT = 639,
     SOME = 640,
     SQL_P = 641,
     STABLE = 642,
     STANDALONE_P = 643,
     START = 644,
     STATEMENT = 645,
     STATISTICS = 646,
     STDIN = 647,
     STDOUT = 648,
     STORAGE = 649,
     STORED = 650,
     STRICT_P = 651,
     STRIP_P = 652,
     STRUCT = 653,
     SUBSCRIPTION = 654,
     SUBSTRING = 655,
     SUMMARIZE = 656,
     SYMMETRIC = 657,
     SYSID = 658,
     SYSTEM_P = 659,
     TABLE = 660,
     TABLES = 661,
     TABLESAMPLE = 662,
     TABLESPACE = 663,
     TEMP = 664,
     TEMPLATE = 665,
     TEMPORARY = 666,
     TEXT_P = 667,
     THEN = 668,
     TIME = 669,
     TIMESTAMP = 670,
     TO = 671,
     TRAILING = 672,
     TRANSACTION = 673,
     TRANSFORM = 674,
     TREAT = 675,
     TRIGGER = 676,
     TRIM = 677,
     TRUE_P = 678,
     TRUNCATE = 679,
     TRUSTED = 680,
     TRY_CAST = 681,
     TYPE_P = 682,
     TYPES_P = 683,
     UNBOUNDED = 684,
     UNCOMMITTED = 685,
     UNENCRYPTED = 686,
     UNION = 687,
     UNIQUE = 688,
     UNKNOWN = 689,
     UNLISTEN = 690,
     UNLOGGED = 691,
     UNTIL = 692,
     UPDATE = 693,
     USER = 694,
     USING = 695,
     VACUUM = 696,
     VALID = 697,
     VALIDATE = 698,
     VALIDATOR = 699,
     VALUE_P = 700,
     VALUES = 701,
     VARCHAR = 702,
     VARIADIC = 703,
     VARYING = 704,
     VERBOSE = 705,
     VERSION_P = 706,
     VIEW = 707,
     VIEWS = 708,
     VIRTUAL = 709,
     VOLATILE = 710,
     WHEN = 711,
     WHERE = 712,
     WHITESPACE_P = 713,
     WINDOW = 714,
     WITH = 715,
     WITHIN = 716,
     WITHOUT = 717,
     WORK = 718,
     WRAPPER = 719,
     WRITE_P = 720,
     XML_P = 721,
     XMLATTRIBUTES = 722,
     XMLCONCAT = 723,
     XMLELEMENT = 724,
     XMLEXISTS = 725,
     XMLFOREST = 726,
     XMLNAMESPACES = 727,
     XMLPARSE = 728,
     XMLPI = 729,
     XMLROOT = 730,
     XMLSERIALIZE = 731,
     XMLTABLE = 732,
     YEAR_P = 733,
     YEARS_P = 734,
     YES_P = 735,
     ZONE = 736,
     NOT_LA = 737,
     NULLS_LA = 738,
     WITH_LA = 739,
     POSTFIXOP = 740,
     UMINUS = 741
   };
#endif
/* Tokens.  */
#define IDENT 258
#define FCONST 259
#define SCONST 260
#define BCONST 261
#define XCONST 262
#define Op 263
#define ICONST 264
#define PARAM 265
#define TYPECAST 266
#define DOT_DOT 267
#define COLON_EQUALS 268
#define EQUALS_GREATER 269
#define LAMBDA_ARROW 270
#define POWER_OF 271
#define LESS_EQUALS 272
#define GREATER_EQUALS 273
#define NOT_EQUALS 274
#define ABORT_P 275
#define ABSOLUTE_P 276
#define ACCESS 277
#define ACTION 278
#define ADD_P 279
#define ADMIN 280
#define AFTER 281
#define AGGREGATE 282
#define ALL 283
#define ALSO 284
#define ALTER 285
#define ALWAYS 286
#define ANALYSE 287
#define ANALYZE 288
#define AND 289
#define ANY 290
#define ARRAY 291
#define AS 292
#define ASC_P 293
#define ASSERTION 294
#define ASSIGNMENT 295
#define ASYMMETRIC 296
#define AT 297
#define ATTACH 298
#define ATTRIBUTE 299
#define AUTHORIZATION 300
#define BACKWARD 301
#define BEFORE 302
#define BEGIN_P 303
#define BETWEEN 304
#define BIGINT 305
#define BINARY 306
#define BIT 307
#define BOOLEAN_P 308
#define BOTH 309
#define BY 310
#define CACHE 311
#define CALL_P 312
#define CALLED 313
#define CASCADE 314
#define CASCADED 315
#define CASE 316
#define CAST 317
#define CATALOG_P 318
#define CHAIN 319
#define CHAR_P 320
#define CHARACTER 321
#define CHARACTERISTICS 322
#define CHECK_P 323
#define CHECKPOINT 324
#define CLASS 325
#define CLOSE 326
#define CLUSTER 327
#define COALESCE 328
#define COLLATE 329
#define COLLATION 330
#define COLUMN 331
#define COLUMNS 332
#define COMMENT 333
#define COMMENTS 334
#define COMMIT 335
#define COMMITTED 336
#define COMPRESSION 337
#define CONCURRENTLY 338
#define CONFIGURATION 339
#define CONFLICT 340
#define CONNECTION 341
#define CONSTRAINT 342
#define CONSTRAINTS 343
#define CONTENT_P 344
#define CONTINUE_P 345
#define CONVERSION_P 346
#define COPY 347
#define COST 348
#define CREATE_P 349
#define CROSS 350
#define CSV 351
#define CUBE 352
#define CURRENT_P 353
#define CURRENT_CATALOG 354
#define CURRENT_DATE 355
#define CURRENT_ROLE 356
#define CURRENT_SCHEMA 357
#define CURRENT_TIME 358
#define CURRENT_TIMESTAMP 359
#define CURRENT_USER 360
#define CURSOR 361
#define CYCLE 362
#define DATA_P 363
#define DATABASE 364
#define DAY_P 365
#define DAYS_P 366
#define DEALLOCATE 367
#define DEC 368
#define DECIMAL_P 369
#define DECLARE 370
#define DEFAULT 371
#define DEFAULTS 372
#define DEFERRABLE 373
#define DEFERRED 374
#define DEFINER 375
#define DELETE_P 376
#define DELIMITER 377
#define DELIMITERS 378
#define DEPENDS 379
#define DESC_P 380
#define DESCRIBE 381
#define DETACH 382
#define DICTIONARY 383
#define DISABLE_P 384
#define DISCARD 385
#define DISTINCT 386
#define DO 387
#define DOCUMENT_P 388
#define DOMAIN_P 389
#define DOUBLE_P 390
#define DROP 391
#define EACH 392
#define ELSE 393
#define ENABLE_P 394
#define ENCODING 395
#define ENCRYPTED 396
#define END_P 397
#define ENUM_P 398
#define ESCAPE 399
#define EVENT 400
#define EXCEPT 401
#define EXCLUDE 402
#define EXCLUDING 403
#define EXCLUSIVE 404
#define EXECUTE 405
#define EXISTS 406
#define EXPLAIN 407
#define EXPORT_P 408
#define EXPORT_STATE 409
#define EXTENSION 410
#define EXTERNAL 411
#define EXTRACT 412
#define FALSE_P 413
#define FAMILY 414
#define FETCH 415
#define FILTER 416
#define FIRST_P 417
#define FLOAT_P 418
#define FOLLOWING 419
#define FOR 420
#define FORCE 421
#define FOREIGN 422
#define FORWARD 423
#define FREEZE 424
#define FROM 425
#define FULL 426
#define FUNCTION 427
#define FUNCTIONS 428
#define GENERATED 429
#define GLOB 430
#define GLOBAL 431
#define GRANT 432
#define GRANTED 433
#define GROUP_P 434
#define GROUPING 435
#define GROUPING_ID 436
#define HANDLER 437
#define HAVING 438
#define HEADER_P 439
#define HOLD 440
#define HOUR_P 441
#define HOURS_P 442
#define IDENTITY_P 443
#define IF_P 444
#define IGNORE_P 445
#define ILIKE 446
#define IMMEDIATE 447
#define IMMUTABLE 448
#define IMPLICIT_P 449
#define IMPORT_P 450
#define IN_P 451
#define INCLUDING 452
#define INCREMENT 453
#define INDEX 454
#define INDEXES 455
#define INHERIT 456
#define INHERITS 457
#define INITIALLY 458
#define INLINE_P 459
#define INNER_P 460
#define INOUT 461
#define INPUT_P 462
#define INSENSITIVE 463
#define INSERT 464
#define INSTALL 465
#define INSTEAD 466
#define INT_P 467
#define INTEGER 468
#define INTERSECT 469
#define INTERVAL 470
#define INTO 471
#define INVOKER 472
#define IS 473
#define ISNULL 474
#define ISOLATION 475
#define JOIN 476
#define JSON 477
#define KEY 478
#define LABEL 479
#define LANGUAGE 480
#define LARGE_P 481
#define LAST_P 482
#define LATERAL_P 483
#define LEADING 484
#define LEAKPROOF 485
#define LEFT 486
#define LEVEL 487
#define LIKE 488
#define LIMIT 489
#define LISTEN 490
#define LOAD 491
#define LOCAL 492
#define LOCALTIME 493
#define LOCALTIMESTAMP 494
#define LOCATION 495
#define LOCK_P 496
#define LOCKED 497
#define LOGGED 498
#define MACRO 499
#define MAP 500
#define MAPPING 501
#define MATCH 502
#define MATERIALIZED 503
#define MAXVALUE 504
#define METHOD 505
#define MICROSECOND_P 506
#define MICROSECONDS_P 507
#define MILLISECOND_P 508
#define MILLISECONDS_P 509
#define MINUTE_P 510
#define MINUTES_P 511
#define MINVALUE 512
#define MODE 513
#define MONTH_P 514
#define MONTHS_P 515
#define MOVE 516
#define NAME_P 517
#define NAMES 518
#define NATIONAL 519
#define NATURAL 520
#define NCHAR 521
#define NEW 522
#define NEXT 523
#define NO 524
#define NONE 525
#define NOT 526
#define NOTHING 527
#define NOTIFY 528
#define NOTNULL 529
#define NOWAIT 530
#define NULL_P 531
#define NULLIF 532
#define NULLS_P 533
#define NUMERIC 534
#define OBJECT_P 535
#define OF 536
#define OFF 537
#define OFFSET 538
#define OIDS 539
#define OLD 540
#define ON 541
#define ONLY 542
#define OPERATOR 543
#define OPTION 544
#define OPTIONS 545
#define OR 546
#define ORDER 547
#define ORDINALITY 548
#define OUT_P 549
#define OUTER_P 550
#define OVER 551
#define OVERLAPS 552
#define OVERLAY 553
#define OVERRIDING 554
#define OWNED 555
#define OWNER 556
#define PARALLEL 557
#define PARSER 558
#define PARTIAL 559
#define PARTITION 560
#define PASSING 561
#define PASSWORD 562
#define PERCENT 563
#define PLACING 564
#define PLANS 565
#define POLICY 566
#define POSITION 567
#define PRAGMA_P 568
#define PRECEDING 569
#define PRECISION 570
#define PREPARE 571
#define PREPARED 572
#define PRESERVE 573
#define PRIMARY 574
#define PRIOR 575
#define PRIVILEGES 576
#define PROCEDURAL 577
#define PROCEDURE 578
#define PROGRAM 579
#define PUBLICATION 580
#define QUALIFY 581
#define QUOTE 582
#define RANGE 583
#define READ_P 584
#define REAL 585
#define REASSIGN 586
#define RECHECK 587
#define RECURSIVE 588
#define REF 589
#define REFERENCES 590
#define REFERENCING 591
#define REFRESH 592
#define REINDEX 593
#define RELATIVE_P 594
#define RELEASE 595
#define RENAME 596
#define REPEATABLE 597
#define REPLACE 598
#define REPLICA 599
#define RESET 600
#define RESPECT_P 601
#define RESTART 602
#define RESTRICT 603
#define RETURNING 604
#define RETURNS 605
#define REVOKE 606
#define RIGHT 607
#define ROLE 608
#define ROLLBACK 609
#define ROLLUP 610
#define ROW 611
#define ROWS 612
#define RULE 613
#define SAMPLE 614
#define SAVEPOINT 615
#define SCHEMA 616
#define SCHEMAS 617
#define SCROLL 618
#define SEARCH 619
#define SECOND_P 620
#define SECONDS_P 621
#define SECURITY 622
#define SELECT 623
#define SEQUENCE 624
#define SEQUENCES 625
#define SERIALIZABLE 626
#define SERVER 627
#define SESSION 628
#define SESSION_USER 629
#define SET 630
#define SETOF 631
#define SETS 632
#define SHARE 633
#define SHOW 634
#define SIMILAR 635
#define SIMPLE 636
#define SKIP 637
#define SMALLINT 638
#define SNAPSHOT 639
#define SOME 640
#define SQL_P 641
#define STABLE 642
#define STANDALONE_P 643
#define START 644
#define STATEMENT 645
#define STATISTICS 646
#define STDIN 647
#define STDOUT 648
#define STORAGE 649
#define STORED 650
#define STRICT_P 651
#define STRIP_P 652
#define STRUCT 653
#define SUBSCRIPTION 654
#define SUBSTRING 655
#define SUMMARIZE 656
#define SYMMETRIC 657
#define SYSID 658
#define SYSTEM_P 659
#define TABLE 660
#define TABLES 661
#define TABLESAMPLE 662
#define TABLESPACE 663
#define TEMP 664
#define TEMPLATE 665
#define TEMPORARY 666
#define TEXT_P 667
#define THEN 668
#define TIME 669
#define TIMESTAMP 670
#define TO 671
#define TRAILING 672
#define TRANSACTION 673
#define TRANSFORM 674
#define TREAT 675
#define TRIGGER 676
#define TRIM 677
#define TRUE_P 678
#define TRUNCATE 679
#define TRUSTED 680
#define TRY_CAST 681
#define TYPE_P 682
#define TYPES_P 683
#define UNBOUNDED 684
#define UNCOMMITTED 685
#define UNENCRYPTED 686
#define UNION 687
#define UNIQUE 688
#define UNKNOWN 689
#define UNLISTEN 690
#define UNLOGGED 691
#define UNTIL 692
#define UPDATE 693
#define USER 694
#define USING 695
#define VACUUM 696
#define VALID 697
#define VALIDATE 698
#define VALIDATOR 699
#define VALUE_P 700
#define VALUES 701
#define VARCHAR 702
#define VARIADIC 703
#define VARYING 704
#define VERBOSE 705
#define VERSION_P 706
#define VIEW 707
#define VIEWS 708
#define VIRTUAL 709
#define VOLATILE 710
#define WHEN 711
#define WHERE 712
#define WHITESPACE_P 713
#define WINDOW 714
#define WITH 715
#define WITHIN 716
#define WITHOUT 717
#define WORK 718
#define WRAPPER 719
#define WRITE_P 720
#define XML_P 721
#define XMLATTRIBUTES 722
#define XMLCONCAT 723
#define XMLELEMENT 724
#define XMLEXISTS 725
#define XMLFOREST 726
#define XMLNAMESPACES 727
#define XMLPARSE 728
#define XMLPI 729
#define XMLROOT 730
#define XMLSERIALIZE 731
#define XMLTABLE 732
#define YEAR_P 733
#define YEARS_P 734
#define YES_P 735
#define ZONE 736
#define NOT_LA 737
#define NULLS_LA 738
#define WITH_LA 739
#define POSTFIXOP 740
#define UMINUS 741




/* Copy the first part of user declarations.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */

#include <string.h>

#include <ctype.h>
#include <limits.h>





// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #11
// See the end of this file for a list

/*-------------------------------------------------------------------------
 *
 * gramparse.h
 *		Shared definitions for the "raw" parser (flex and bison phases only)
 *
 * NOTE: this file is only meant to be included in the core parsing files,
 * ie, parser.c, gram.y, scan.l, and src/common/keywords.c.
 * Definitions that are needed outside the core parser should be in parser.h.
 *
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/include/parser/gramparse.h
 *
 *-------------------------------------------------------------------------
 */






// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #11
// See the end of this file for a list

/*-------------------------------------------------------------------------
 *
 * scanner.h
 *		API for the core scanner (flex machine)
 *
 * The core scanner is also used by PL/pgSQL, so we provide a public API
 * for it.  However, the rest of the backend is only expected to use the
 * higher-level API provided by parser.h.
 *
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/include/parser/scanner.h
 *
 *-------------------------------------------------------------------------
 */



#include <cstdint>




namespace duckdb_libpgquery {

/*
 * The scanner returns extra data about scanned tokens in this union type.
 * Note that this is a subset of the fields used in YYSTYPE of the bison
 * parsers built atop the scanner.
 */
typedef union core_YYSTYPE {
	int ival;            /* for integer literals */
	char *str;           /* for identifiers and non-integer literals */
	const char *keyword; /* canonical spelling of keywords */
} core_YYSTYPE;

/*
 * We track token locations in terms of byte offsets from the start of the
 * source string, not the column number/line number representation that
 * bison uses by default.  Also, to minimize overhead we track only one
 * location (usually the first token location) for each construct, not
 * the beginning and ending locations as bison does by default.  It's
 * therefore sufficient to make YYLTYPE an int.
 */
#define YYLTYPE int

/*
 * Another important component of the scanner's API is the token code numbers.
 * However, those are not defined in this file, because bison insists on
 * defining them for itself.  The token codes used by the core scanner are
 * the ASCII characters plus these:
 *	%token <str>	IDENT FCONST SCONST BCONST XCONST Op
 *	%token <ival>	ICONST PARAM
 *	%token			TYPECAST DOT_DOT COLON_EQUALS EQUALS_GREATER LAMBDA_ARROW
 *	%token			LESS_EQUALS GREATER_EQUALS NOT_EQUALS
 * The above token definitions *must* be the first ones declared in any
 * bison parser built atop this scanner, so that they will have consistent
 * numbers assigned to them (specifically, IDENT = 258 and so on).
 */

/*
 * The YY_EXTRA data that a flex scanner allows us to pass around.
 * Private state needed by the core scanner goes here.  Note that the actual
 * yy_extra struct may be larger and have this as its first component, thus
 * allowing the calling parser to keep some fields of its own in YY_EXTRA.
 */
typedef struct core_yy_extra_type {
	/*
	 * The string the scanner is physically scanning.  We keep this mainly so
	 * that we can cheaply compute the offset of the current token (yytext).
	 */
	char *scanbuf;
	PGSize scanbuflen;

	/*
	 * The keyword list to use.
	 */
	const PGScanKeyword *keywords;
	int num_keywords;

	/*
	 * Scanner settings to use.  These are initialized from the corresponding
	 * GUC variables by scanner_init().  Callers can modify them after
	 * scanner_init() if they don't want the scanner's behavior to follow the
	 * prevailing GUC settings.
	 */
	int backslash_quote;
	bool escape_string_warning;
	bool standard_conforming_strings;

	/*
	 * literalbuf is used to accumulate literal values when multiple rules are
	 * needed to parse a single literal.  Call startlit() to reset buffer to
	 * empty, addlit() to add text.  NOTE: the string in literalbuf is NOT
	 * necessarily null-terminated, but there always IS room to add a trailing
	 * null at offset literallen.  We store a null only when we need it.
	 */
	char *literalbuf; /* palloc'd expandable buffer */
	int literallen;   /* actual current string length */
	int literalalloc; /* current allocated buffer size */

	int xcdepth;     /* depth of nesting in slash-star comments */
	char *dolqstart; /* current $foo$ quote start string */

	/* first part of UTF16 surrogate pair for Unicode escapes */
	int32_t utf16_first_part;

	/* state variables for literal-lexing warnings */
	bool warn_on_first_escape;
	bool saw_non_ascii;
} core_yy_extra_type;

/*
 * The type of yyscanner is opaque outside scan.l.
 */
typedef void *core_yyscan_t;

/* Entry points in parser/scan.l */
core_yyscan_t scanner_init(const char *str, core_yy_extra_type *yyext, const PGScanKeyword *keywords, int num_keywords);
void scanner_finish(core_yyscan_t yyscanner);
int core_yylex(core_YYSTYPE *lvalp, YYLTYPE *llocp, core_yyscan_t yyscanner);
int scanner_errposition(int location, core_yyscan_t yyscanner);
void scanner_yyerror(const char *message, core_yyscan_t yyscanner);

}

// LICENSE_CHANGE_END


namespace duckdb_libpgquery {


// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #11
// See the end of this file for a list

/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton interface for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     IDENT = 258,
     FCONST = 259,
     SCONST = 260,
     BCONST = 261,
     XCONST = 262,
     Op = 263,
     ICONST = 264,
     PARAM = 265,
     TYPECAST = 266,
     DOT_DOT = 267,
     COLON_EQUALS = 268,
     EQUALS_GREATER = 269,
     LAMBDA_ARROW = 270,
     POWER_OF = 271,
     LESS_EQUALS = 272,
     GREATER_EQUALS = 273,
     NOT_EQUALS = 274,
     ABORT_P = 275,
     ABSOLUTE_P = 276,
     ACCESS = 277,
     ACTION = 278,
     ADD_P = 279,
     ADMIN = 280,
     AFTER = 281,
     AGGREGATE = 282,
     ALL = 283,
     ALSO = 284,
     ALTER = 285,
     ALWAYS = 286,
     ANALYSE = 287,
     ANALYZE = 288,
     AND = 289,
     ANY = 290,
     ARRAY = 291,
     AS = 292,
     ASC_P = 293,
     ASSERTION = 294,
     ASSIGNMENT = 295,
     ASYMMETRIC = 296,
     AT = 297,
     ATTACH = 298,
     ATTRIBUTE = 299,
     AUTHORIZATION = 300,
     BACKWARD = 301,
     BEFORE = 302,
     BEGIN_P = 303,
     BETWEEN = 304,
     BIGINT = 305,
     BINARY = 306,
     BIT = 307,
     BOOLEAN_P = 308,
     BOTH = 309,
     BY = 310,
     CACHE = 311,
     CALL_P = 312,
     CALLED = 313,
     CASCADE = 314,
     CASCADED = 315,
     CASE = 316,
     CAST = 317,
     CATALOG_P = 318,
     CHAIN = 319,
     CHAR_P = 320,
     CHARACTER = 321,
     CHARACTERISTICS = 322,
     CHECK_P = 323,
     CHECKPOINT = 324,
     CLASS = 325,
     CLOSE = 326,
     CLUSTER = 327,
     COALESCE = 328,
     COLLATE = 329,
     COLLATION = 330,
     COLUMN = 331,
     COLUMNS = 332,
     COMMENT = 333,
     COMMENTS = 334,
     COMMIT = 335,
     COMMITTED = 336,
     COMPRESSION = 337,
     CONCURRENTLY = 338,
     CONFIGURATION = 339,
     CONFLICT = 340,
     CONNECTION = 341,
     CONSTRAINT = 342,
     CONSTRAINTS = 343,
     CONTENT_P = 344,
     CONTINUE_P = 345,
     CONVERSION_P = 346,
     COPY = 347,
     COST = 348,
     CREATE_P = 349,
     CROSS = 350,
     CSV = 351,
     CUBE = 352,
     CURRENT_P = 353,
     CURRENT_CATALOG = 354,
     CURRENT_DATE = 355,
     CURRENT_ROLE = 356,
     CURRENT_SCHEMA = 357,
     CURRENT_TIME = 358,
     CURRENT_TIMESTAMP = 359,
     CURRENT_USER = 360,
     CURSOR = 361,
     CYCLE = 362,
     DATA_P = 363,
     DATABASE = 364,
     DAY_P = 365,
     DAYS_P = 366,
     DEALLOCATE = 367,
     DEC = 368,
     DECIMAL_P = 369,
     DECLARE = 370,
     DEFAULT = 371,
     DEFAULTS = 372,
     DEFERRABLE = 373,
     DEFERRED = 374,
     DEFINER = 375,
     DELETE_P = 376,
     DELIMITER = 377,
     DELIMITERS = 378,
     DEPENDS = 379,
     DESC_P = 380,
     DESCRIBE = 381,
     DETACH = 382,
     DICTIONARY = 383,
     DISABLE_P = 384,
     DISCARD = 385,
     DISTINCT = 386,
     DO = 387,
     DOCUMENT_P = 388,
     DOMAIN_P = 389,
     DOUBLE_P = 390,
     DROP = 391,
     EACH = 392,
     ELSE = 393,
     ENABLE_P = 394,
     ENCODING = 395,
     ENCRYPTED = 396,
     END_P = 397,
     ENUM_P = 398,
     ESCAPE = 399,
     EVENT = 400,
     EXCEPT = 401,
     EXCLUDE = 402,
     EXCLUDING = 403,
     EXCLUSIVE = 404,
     EXECUTE = 405,
     EXISTS = 406,
     EXPLAIN = 407,
     EXPORT_P = 408,
     EXPORT_STATE = 409,
     EXTENSION = 410,
     EXTERNAL = 411,
     EXTRACT = 412,
     FALSE_P = 413,
     FAMILY = 414,
     FETCH = 415,
     FILTER = 416,
     FIRST_P = 417,
     FLOAT_P = 418,
     FOLLOWING = 419,
     FOR = 420,
     FORCE = 421,
     FOREIGN = 422,
     FORWARD = 423,
     FREEZE = 424,
     FROM = 425,
     FULL = 426,
     FUNCTION = 427,
     FUNCTIONS = 428,
     GENERATED = 429,
     GLOB = 430,
     GLOBAL = 431,
     GRANT = 432,
     GRANTED = 433,
     GROUP_P = 434,
     GROUPING = 435,
     GROUPING_ID = 436,
     HANDLER = 437,
     HAVING = 438,
     HEADER_P = 439,
     HOLD = 440,
     HOUR_P = 441,
     HOURS_P = 442,
     IDENTITY_P = 443,
     IF_P = 444,
     IGNORE_P = 445,
     ILIKE = 446,
     IMMEDIATE = 447,
     IMMUTABLE = 448,
     IMPLICIT_P = 449,
     IMPORT_P = 450,
     IN_P = 451,
     INCLUDING = 452,
     INCREMENT = 453,
     INDEX = 454,
     INDEXES = 455,
     INHERIT = 456,
     INHERITS = 457,
     INITIALLY = 458,
     INLINE_P = 459,
     INNER_P = 460,
     INOUT = 461,
     INPUT_P = 462,
     INSENSITIVE = 463,
     INSERT = 464,
     INSTALL = 465,
     INSTEAD = 466,
     INT_P = 467,
     INTEGER = 468,
     INTERSECT = 469,
     INTERVAL = 470,
     INTO = 471,
     INVOKER = 472,
     IS = 473,
     ISNULL = 474,
     ISOLATION = 475,
     JOIN = 476,
     JSON = 477,
     KEY = 478,
     LABEL = 479,
     LANGUAGE = 480,
     LARGE_P = 481,
     LAST_P = 482,
     LATERAL_P = 483,
     LEADING = 484,
     LEAKPROOF = 485,
     LEFT = 486,
     LEVEL = 487,
     LIKE = 488,
     LIMIT = 489,
     LISTEN = 490,
     LOAD = 491,
     LOCAL = 492,
     LOCALTIME = 493,
     LOCALTIMESTAMP = 494,
     LOCATION = 495,
     LOCK_P = 496,
     LOCKED = 497,
     LOGGED = 498,
     MACRO = 499,
     MAP = 500,
     MAPPING = 501,
     MATCH = 502,
     MATERIALIZED = 503,
     MAXVALUE = 504,
     METHOD = 505,
     MICROSECOND_P = 506,
     MICROSECONDS_P = 507,
     MILLISECOND_P = 508,
     MILLISECONDS_P = 509,
     MINUTE_P = 510,
     MINUTES_P = 511,
     MINVALUE = 512,
     MODE = 513,
     MONTH_P = 514,
     MONTHS_P = 515,
     MOVE = 516,
     NAME_P = 517,
     NAMES = 518,
     NATIONAL = 519,
     NATURAL = 520,
     NCHAR = 521,
     NEW = 522,
     NEXT = 523,
     NO = 524,
     NONE = 525,
     NOT = 526,
     NOTHING = 527,
     NOTIFY = 528,
     NOTNULL = 529,
     NOWAIT = 530,
     NULL_P = 531,
     NULLIF = 532,
     NULLS_P = 533,
     NUMERIC = 534,
     OBJECT_P = 535,
     OF = 536,
     OFF = 537,
     OFFSET = 538,
     OIDS = 539,
     OLD = 540,
     ON = 541,
     ONLY = 542,
     OPERATOR = 543,
     OPTION = 544,
     OPTIONS = 545,
     OR = 546,
     ORDER = 547,
     ORDINALITY = 548,
     OUT_P = 549,
     OUTER_P = 550,
     OVER = 551,
     OVERLAPS = 552,
     OVERLAY = 553,
     OVERRIDING = 554,
     OWNED = 555,
     OWNER = 556,
     PARALLEL = 557,
     PARSER = 558,
     PARTIAL = 559,
     PARTITION = 560,
     PASSING = 561,
     PASSWORD = 562,
     PERCENT = 563,
     PLACING = 564,
     PLANS = 565,
     POLICY = 566,
     POSITION = 567,
     PRAGMA_P = 568,
     PRECEDING = 569,
     PRECISION = 570,
     PREPARE = 571,
     PREPARED = 572,
     PRESERVE = 573,
     PRIMARY = 574,
     PRIOR = 575,
     PRIVILEGES = 576,
     PROCEDURAL = 577,
     PROCEDURE = 578,
     PROGRAM = 579,
     PUBLICATION = 580,
     QUALIFY = 581,
     QUOTE = 582,
     RANGE = 583,
     READ_P = 584,
     REAL = 585,
     REASSIGN = 586,
     RECHECK = 587,
     RECURSIVE = 588,
     REF = 589,
     REFERENCES = 590,
     REFERENCING = 591,
     REFRESH = 592,
     REINDEX = 593,
     RELATIVE_P = 594,
     RELEASE = 595,
     RENAME = 596,
     REPEATABLE = 597,
     REPLACE = 598,
     REPLICA = 599,
     RESET = 600,
     RESPECT_P = 601,
     RESTART = 602,
     RESTRICT = 603,
     RETURNING = 604,
     RETURNS = 605,
     REVOKE = 606,
     RIGHT = 607,
     ROLE = 608,
     ROLLBACK = 609,
     ROLLUP = 610,
     ROW = 611,
     ROWS = 612,
     RULE = 613,
     SAMPLE = 614,
     SAVEPOINT = 615,
     SCHEMA = 616,
     SCHEMAS = 617,
     SCROLL = 618,
     SEARCH = 619,
     SECOND_P = 620,
     SECONDS_P = 621,
     SECURITY = 622,
     SELECT = 623,
     SEQUENCE = 624,
     SEQUENCES = 625,
     SERIALIZABLE = 626,
     SERVER = 627,
     SESSION = 628,
     SESSION_USER = 629,
     SET = 630,
     SETOF = 631,
     SETS = 632,
     SHARE = 633,
     SHOW = 634,
     SIMILAR = 635,
     SIMPLE = 636,
     SKIP = 637,
     SMALLINT = 638,
     SNAPSHOT = 639,
     SOME = 640,
     SQL_P = 641,
     STABLE = 642,
     STANDALONE_P = 643,
     START = 644,
     STATEMENT = 645,
     STATISTICS = 646,
     STDIN = 647,
     STDOUT = 648,
     STORAGE = 649,
     STORED = 650,
     STRICT_P = 651,
     STRIP_P = 652,
     STRUCT = 653,
     SUBSCRIPTION = 654,
     SUBSTRING = 655,
     SUMMARIZE = 656,
     SYMMETRIC = 657,
     SYSID = 658,
     SYSTEM_P = 659,
     TABLE = 660,
     TABLES = 661,
     TABLESAMPLE = 662,
     TABLESPACE = 663,
     TEMP = 664,
     TEMPLATE = 665,
     TEMPORARY = 666,
     TEXT_P = 667,
     THEN = 668,
     TIME = 669,
     TIMESTAMP = 670,
     TO = 671,
     TRAILING = 672,
     TRANSACTION = 673,
     TRANSFORM = 674,
     TREAT = 675,
     TRIGGER = 676,
     TRIM = 677,
     TRUE_P = 678,
     TRUNCATE = 679,
     TRUSTED = 680,
     TRY_CAST = 681,
     TYPE_P = 682,
     TYPES_P = 683,
     UNBOUNDED = 684,
     UNCOMMITTED = 685,
     UNENCRYPTED = 686,
     UNION = 687,
     UNIQUE = 688,
     UNKNOWN = 689,
     UNLISTEN = 690,
     UNLOGGED = 691,
     UNTIL = 692,
     UPDATE = 693,
     USER = 694,
     USING = 695,
     VACUUM = 696,
     VALID = 697,
     VALIDATE = 698,
     VALIDATOR = 699,
     VALUE_P = 700,
     VALUES = 701,
     VARCHAR = 702,
     VARIADIC = 703,
     VARYING = 704,
     VERBOSE = 705,
     VERSION_P = 706,
     VIEW = 707,
     VIEWS = 708,
     VIRTUAL = 709,
     VOLATILE = 710,
     WHEN = 711,
     WHERE = 712,
     WHITESPACE_P = 713,
     WINDOW = 714,
     WITH = 715,
     WITHIN = 716,
     WITHOUT = 717,
     WORK = 718,
     WRAPPER = 719,
     WRITE_P = 720,
     XML_P = 721,
     XMLATTRIBUTES = 722,
     XMLCONCAT = 723,
     XMLELEMENT = 724,
     XMLEXISTS = 725,
     XMLFOREST = 726,
     XMLNAMESPACES = 727,
     XMLPARSE = 728,
     XMLPI = 729,
     XMLROOT = 730,
     XMLSERIALIZE = 731,
     XMLTABLE = 732,
     YEAR_P = 733,
     YEARS_P = 734,
     YES_P = 735,
     ZONE = 736,
     NOT_LA = 737,
     NULLS_LA = 738,
     WITH_LA = 739,
     POSTFIXOP = 740,
     UMINUS = 741
   };
#endif
/* Tokens.  */
#define IDENT 258
#define FCONST 259
#define SCONST 260
#define BCONST 261
#define XCONST 262
#define Op 263
#define ICONST 264
#define PARAM 265
#define TYPECAST 266
#define DOT_DOT 267
#define COLON_EQUALS 268
#define EQUALS_GREATER 269
#define LAMBDA_ARROW 270
#define POWER_OF 271
#define LESS_EQUALS 272
#define GREATER_EQUALS 273
#define NOT_EQUALS 274
#define ABORT_P 275
#define ABSOLUTE_P 276
#define ACCESS 277
#define ACTION 278
#define ADD_P 279
#define ADMIN 280
#define AFTER 281
#define AGGREGATE 282
#define ALL 283
#define ALSO 284
#define ALTER 285
#define ALWAYS 286
#define ANALYSE 287
#define ANALYZE 288
#define AND 289
#define ANY 290
#define ARRAY 291
#define AS 292
#define ASC_P 293
#define ASSERTION 294
#define ASSIGNMENT 295
#define ASYMMETRIC 296
#define AT 297
#define ATTACH 298
#define ATTRIBUTE 299
#define AUTHORIZATION 300
#define BACKWARD 301
#define BEFORE 302
#define BEGIN_P 303
#define BETWEEN 304
#define BIGINT 305
#define BINARY 306
#define BIT 307
#define BOOLEAN_P 308
#define BOTH 309
#define BY 310
#define CACHE 311
#define CALL_P 312
#define CALLED 313
#define CASCADE 314
#define CASCADED 315
#define CASE 316
#define CAST 317
#define CATALOG_P 318
#define CHAIN 319
#define CHAR_P 320
#define CHARACTER 321
#define CHARACTERISTICS 322
#define CHECK_P 323
#define CHECKPOINT 324
#define CLASS 325
#define CLOSE 326
#define CLUSTER 327
#define COALESCE 328
#define COLLATE 329
#define COLLATION 330
#define COLUMN 331
#define COLUMNS 332
#define COMMENT 333
#define COMMENTS 334
#define COMMIT 335
#define COMMITTED 336
#define COMPRESSION 337
#define CONCURRENTLY 338
#define CONFIGURATION 339
#define CONFLICT 340
#define CONNECTION 341
#define CONSTRAINT 342
#define CONSTRAINTS 343
#define CONTENT_P 344
#define CONTINUE_P 345
#define CONVERSION_P 346
#define COPY 347
#define COST 348
#define CREATE_P 349
#define CROSS 350
#define CSV 351
#define CUBE 352
#define CURRENT_P 353
#define CURRENT_CATALOG 354
#define CURRENT_DATE 355
#define CURRENT_ROLE 356
#define CURRENT_SCHEMA 357
#define CURRENT_TIME 358
#define CURRENT_TIMESTAMP 359
#define CURRENT_USER 360
#define CURSOR 361
#define CYCLE 362
#define DATA_P 363
#define DATABASE 364
#define DAY_P 365
#define DAYS_P 366
#define DEALLOCATE 367
#define DEC 368
#define DECIMAL_P 369
#define DECLARE 370
#define DEFAULT 371
#define DEFAULTS 372
#define DEFERRABLE 373
#define DEFERRED 374
#define DEFINER 375
#define DELETE_P 376
#define DELIMITER 377
#define DELIMITERS 378
#define DEPENDS 379
#define DESC_P 380
#define DESCRIBE 381
#define DETACH 382
#define DICTIONARY 383
#define DISABLE_P 384
#define DISCARD 385
#define DISTINCT 386
#define DO 387
#define DOCUMENT_P 388
#define DOMAIN_P 389
#define DOUBLE_P 390
#define DROP 391
#define EACH 392
#define ELSE 393
#define ENABLE_P 394
#define ENCODING 395
#define ENCRYPTED 396
#define END_P 397
#define ENUM_P 398
#define ESCAPE 399
#define EVENT 400
#define EXCEPT 401
#define EXCLUDE 402
#define EXCLUDING 403
#define EXCLUSIVE 404
#define EXECUTE 405
#define EXISTS 406
#define EXPLAIN 407
#define EXPORT_P 408
#define EXPORT_STATE 409
#define EXTENSION 410
#define EXTERNAL 411
#define EXTRACT 412
#define FALSE_P 413
#define FAMILY 414
#define FETCH 415
#define FILTER 416
#define FIRST_P 417
#define FLOAT_P 418
#define FOLLOWING 419
#define FOR 420
#define FORCE 421
#define FOREIGN 422
#define FORWARD 423
#define FREEZE 424
#define FROM 425
#define FULL 426
#define FUNCTION 427
#define FUNCTIONS 428
#define GENERATED 429
#define GLOB 430
#define GLOBAL 431
#define GRANT 432
#define GRANTED 433
#define GROUP_P 434
#define GROUPING 435
#define GROUPING_ID 436
#define HANDLER 437
#define HAVING 438
#define HEADER_P 439
#define HOLD 440
#define HOUR_P 441
#define HOURS_P 442
#define IDENTITY_P 443
#define IF_P 444
#define IGNORE_P 445
#define ILIKE 446
#define IMMEDIATE 447
#define IMMUTABLE 448
#define IMPLICIT_P 449
#define IMPORT_P 450
#define IN_P 451
#define INCLUDING 452
#define INCREMENT 453
#define INDEX 454
#define INDEXES 455
#define INHERIT 456
#define INHERITS 457
#define INITIALLY 458
#define INLINE_P 459
#define INNER_P 460
#define INOUT 461
#define INPUT_P 462
#define INSENSITIVE 463
#define INSERT 464
#define INSTALL 465
#define INSTEAD 466
#define INT_P 467
#define INTEGER 468
#define INTERSECT 469
#define INTERVAL 470
#define INTO 471
#define INVOKER 472
#define IS 473
#define ISNULL 474
#define ISOLATION 475
#define JOIN 476
#define JSON 477
#define KEY 478
#define LABEL 479
#define LANGUAGE 480
#define LARGE_P 481
#define LAST_P 482
#define LATERAL_P 483
#define LEADING 484
#define LEAKPROOF 485
#define LEFT 486
#define LEVEL 487
#define LIKE 488
#define LIMIT 489
#define LISTEN 490
#define LOAD 491
#define LOCAL 492
#define LOCALTIME 493
#define LOCALTIMESTAMP 494
#define LOCATION 495
#define LOCK_P 496
#define LOCKED 497
#define LOGGED 498
#define MACRO 499
#define MAP 500
#define MAPPING 501
#define MATCH 502
#define MATERIALIZED 503
#define MAXVALUE 504
#define METHOD 505
#define MICROSECOND_P 506
#define MICROSECONDS_P 507
#define MILLISECOND_P 508
#define MILLISECONDS_P 509
#define MINUTE_P 510
#define MINUTES_P 511
#define MINVALUE 512
#define MODE 513
#define MONTH_P 514
#define MONTHS_P 515
#define MOVE 516
#define NAME_P 517
#define NAMES 518
#define NATIONAL 519
#define NATURAL 520
#define NCHAR 521
#define NEW 522
#define NEXT 523
#define NO 524
#define NONE 525
#define NOT 526
#define NOTHING 527
#define NOTIFY 528
#define NOTNULL 529
#define NOWAIT 530
#define NULL_P 531
#define NULLIF 532
#define NULLS_P 533
#define NUMERIC 534
#define OBJECT_P 535
#define OF 536
#define OFF 537
#define OFFSET 538
#define OIDS 539
#define OLD 540
#define ON 541
#define ONLY 542
#define OPERATOR 543
#define OPTION 544
#define OPTIONS 545
#define OR 546
#define ORDER 547
#define ORDINALITY 548
#define OUT_P 549
#define OUTER_P 550
#define OVER 551
#define OVERLAPS 552
#define OVERLAY 553
#define OVERRIDING 554
#define OWNED 555
#define OWNER 556
#define PARALLEL 557
#define PARSER 558
#define PARTIAL 559
#define PARTITION 560
#define PASSING 561
#define PASSWORD 562
#define PERCENT 563
#define PLACING 564
#define PLANS 565
#define POLICY 566
#define POSITION 567
#define PRAGMA_P 568
#define PRECEDING 569
#define PRECISION 570
#define PREPARE 571
#define PREPARED 572
#define PRESERVE 573
#define PRIMARY 574
#define PRIOR 575
#define PRIVILEGES 576
#define PROCEDURAL 577
#define PROCEDURE 578
#define PROGRAM 579
#define PUBLICATION 580
#define QUALIFY 581
#define QUOTE 582
#define RANGE 583
#define READ_P 584
#define REAL 585
#define REASSIGN 586
#define RECHECK 587
#define RECURSIVE 588
#define REF 589
#define REFERENCES 590
#define REFERENCING 591
#define REFRESH 592
#define REINDEX 593
#define RELATIVE_P 594
#define RELEASE 595
#define RENAME 596
#define REPEATABLE 597
#define REPLACE 598
#define REPLICA 599
#define RESET 600
#define RESPECT_P 601
#define RESTART 602
#define RESTRICT 603
#define RETURNING 604
#define RETURNS 605
#define REVOKE 606
#define RIGHT 607
#define ROLE 608
#define ROLLBACK 609
#define ROLLUP 610
#define ROW 611
#define ROWS 612
#define RULE 613
#define SAMPLE 614
#define SAVEPOINT 615
#define SCHEMA 616
#define SCHEMAS 617
#define SCROLL 618
#define SEARCH 619
#define SECOND_P 620
#define SECONDS_P 621
#define SECURITY 622
#define SELECT 623
#define SEQUENCE 624
#define SEQUENCES 625
#define SERIALIZABLE 626
#define SERVER 627
#define SESSION 628
#define SESSION_USER 629
#define SET 630
#define SETOF 631
#define SETS 632
#define SHARE 633
#define SHOW 634
#define SIMILAR 635
#define SIMPLE 636
#define SKIP 637
#define SMALLINT 638
#define SNAPSHOT 639
#define SOME 640
#define SQL_P 641
#define STABLE 642
#define STANDALONE_P 643
#define START 644
#define STATEMENT 645
#define STATISTICS 646
#define STDIN 647
#define STDOUT 648
#define STORAGE 649
#define STORED 650
#define STRICT_P 651
#define STRIP_P 652
#define STRUCT 653
#define SUBSCRIPTION 654
#define SUBSTRING 655
#define SUMMARIZE 656
#define SYMMETRIC 657
#define SYSID 658
#define SYSTEM_P 659
#define TABLE 660
#define TABLES 661
#define TABLESAMPLE 662
#define TABLESPACE 663
#define TEMP 664
#define TEMPLATE 665
#define TEMPORARY 666
#define TEXT_P 667
#define THEN 668
#define TIME 669
#define TIMESTAMP 670
#define TO 671
#define TRAILING 672
#define TRANSACTION 673
#define TRANSFORM 674
#define TREAT 675
#define TRIGGER 676
#define TRIM 677
#define TRUE_P 678
#define TRUNCATE 679
#define TRUSTED 680
#define TRY_CAST 681
#define TYPE_P 682
#define TYPES_P 683
#define UNBOUNDED 684
#define UNCOMMITTED 685
#define UNENCRYPTED 686
#define UNION 687
#define UNIQUE 688
#define UNKNOWN 689
#define UNLISTEN 690
#define UNLOGGED 691
#define UNTIL 692
#define UPDATE 693
#define USER 694
#define USING 695
#define VACUUM 696
#define VALID 697
#define VALIDATE 698
#define VALIDATOR 699
#define VALUE_P 700
#define VALUES 701
#define VARCHAR 702
#define VARIADIC 703
#define VARYING 704
#define VERBOSE 705
#define VERSION_P 706
#define VIEW 707
#define VIEWS 708
#define VIRTUAL 709
#define VOLATILE 710
#define WHEN 711
#define WHERE 712
#define WHITESPACE_P 713
#define WINDOW 714
#define WITH 715
#define WITHIN 716
#define WITHOUT 717
#define WORK 718
#define WRAPPER 719
#define WRITE_P 720
#define XML_P 721
#define XMLATTRIBUTES 722
#define XMLCONCAT 723
#define XMLELEMENT 724
#define XMLEXISTS 725
#define XMLFOREST 726
#define XMLNAMESPACES 727
#define XMLPARSE 728
#define XMLPI 729
#define XMLROOT 730
#define XMLSERIALIZE 731
#define XMLTABLE 732
#define YEAR_P 733
#define YEARS_P 734
#define YES_P 735
#define ZONE 736
#define NOT_LA 737
#define NULLS_LA 738
#define WITH_LA 739
#define POSTFIXOP 740
#define UMINUS 741




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 14 "third_party/libpg_query/grammar/grammar.y"
{
	core_YYSTYPE		core_yystype;
	/* these fields must match core_YYSTYPE: */
	int					ival;
	char				*str;
	const char			*keyword;
	const char          *conststr;

	char				chr;
	bool				boolean;
	PGJoinType			jtype;
	PGDropBehavior		dbehavior;
	PGOnCommitAction		oncommit;
	PGOnCreateConflict		oncreateconflict;
	PGList				*list;
	PGNode				*node;
	PGValue				*value;
	PGObjectType			objtype;
	PGTypeName			*typnam;
	PGObjectWithArgs		*objwithargs;
	PGDefElem				*defelt;
	PGSortBy				*sortby;
	PGWindowDef			*windef;
	PGJoinExpr			*jexpr;
	PGIndexElem			*ielem;
	PGAlias				*alias;
	PGRangeVar			*range;
	PGIntoClause			*into;
	PGWithClause			*with;
	PGInferClause			*infer;
	PGOnConflictClause	*onconflict;
	PGAIndices			*aind;
	PGResTarget			*target;
	PGInsertStmt			*istmt;
	PGVariableSetStmt		*vsetstmt;
	PGOverridingKind       override;
	PGSortByDir            sortorder;
	PGSortByNulls          nullorder;
	PGConstrType           constr;
	PGLockClauseStrength lockstrength;
	PGLockWaitPolicy lockwaitpolicy;
	PGSubLinkType subquerytype;
	PGViewCheckOption viewcheckoption;
}
/* Line 1529 of yacc.c.  */
#line 1066 "third_party/libpg_query/grammar/grammar_out.hpp"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif




// LICENSE_CHANGE_END


/*
 * The YY_EXTRA data that a flex scanner allows us to pass around.  Private
 * state needed for raw parsing/lexing goes here.
 */
typedef struct base_yy_extra_type {
	/*
	 * Fields used by the core scanner.
	 */
	core_yy_extra_type core_yy_extra;

	/*
	 * State variables for base_yylex().
	 */
	bool have_lookahead;           /* is lookahead info valid? */
	int lookahead_token;           /* one-token lookahead */
	core_YYSTYPE lookahead_yylval; /* yylval for lookahead token */
	YYLTYPE lookahead_yylloc;      /* yylloc for lookahead token */
	char *lookahead_end;           /* end of current token */
	char lookahead_hold_char;      /* to be put back at *lookahead_end */

	/*
	 * State variables that belong to the grammar.
	 */
	PGList *parsetree; /* final parse result is delivered here */
} base_yy_extra_type;

/*
 * In principle we should use yyget_extra() to fetch the yyextra field
 * from a yyscanner struct.  However, flex always puts that field first,
 * and this is sufficiently performance-critical to make it seem worth
 * cheating a bit to use an inline macro.
 */
#define pg_yyget_extra(yyscanner) (*((base_yy_extra_type **)(yyscanner)))

/* from parser.c */
int base_yylex(YYSTYPE *lvalp, YYLTYPE *llocp, core_yyscan_t yyscanner);

/* from gram.y */
void parser_init(base_yy_extra_type *yyext);
int base_yyparse(core_yyscan_t yyscanner);

}

// LICENSE_CHANGE_END




// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #11
// See the end of this file for a list

/*-------------------------------------------------------------------------
 *
 * datetime.h
 *	  Definitions for date/time support code.
 *	  The support code is shared with other date data types,
 *	   including abstime, reltime, date, and time.
 *
 *
 * Portions Copyright (c) 1996-2015, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/include/utils/datetime.h
 *
 *-------------------------------------------------------------------------
 */





// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #11
// See the end of this file for a list

/*-------------------------------------------------------------------------
 *
 * timestamp.h
 *	  Definitions for the SQL "timestamp" and "interval" types.
 *
 * Portions Copyright (c) 1996-2015, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/include/utils/timestamp.h
 *
 *-------------------------------------------------------------------------
 */




// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #11
// See the end of this file for a list

/*-------------------------------------------------------------------------
 *
 * timestamp.h
 *	  PGTimestamp and PGInterval typedefs and related macros.
 *
 * Note: this file must be includable in both frontend and backend contexts.
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/include/datatype/timestamp.h
 *
 *-------------------------------------------------------------------------
 */


#include <cstdint>

/*
 * PGTimestamp represents absolute time.
 *
 * PGInterval represents delta time. Keep track of months (and years), days,
 * and hours/minutes/seconds separately since the elapsed time spanned is
 * unknown until instantiated relative to an absolute time.
 *
 * Note that Postgres uses "time interval" to mean a bounded interval,
 * consisting of a beginning and ending time, not a time span - thomas 97/03/20
 *
 * Timestamps, as well as the h/m/s fields of intervals, are stored as
 * int64_t values with units of microseconds.  (Once upon a time they were
 * double values with units of seconds.)
 *
 * PGTimeOffset and pg_fsec_t are convenience typedefs for temporary variables.
 * Do not use pg_fsec_t in values stored on-disk.
 * Also, pg_fsec_t is only meant for *fractional* seconds; beware of overflow
 * if the value you need to store could be many seconds.
 */
namespace duckdb_libpgquery {

typedef int64_t PGTimestamp;
typedef int64_t PGTimestampTz;
typedef int64_t PGTimeOffset;
typedef int32_t pg_fsec_t; /* fractional seconds (in microseconds) */

typedef struct {
	PGTimeOffset time; /* all time units other than days, months and
								 * years */
	int32_t day;       /* days, after time for alignment */
	int32_t month;     /* months and years, after time for alignment */
} PGInterval;
}

// LICENSE_CHANGE_END




// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #11
// See the end of this file for a list

/*-------------------------------------------------------------------------
 *
 * pgtime.h
 *	  PostgreSQL internal timezone library
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 *
 * IDENTIFICATION
 *	  src/include/pgtime.h
 *
 *-------------------------------------------------------------------------
 */


#include <cstdint>

/*
 * The API of this library is generally similar to the corresponding
 * C library functions, except that we use pg_time_t which (we hope) is
 * 64 bits wide, and which is most definitely signed not unsigned.
 */

typedef int64_t pg_time_t;

struct pg_tm
{
	int			tm_sec;
	int			tm_min;
	int			tm_hour;
	int			tm_mday;
	int			tm_mon;			/* origin 1, not 0! */
	int			tm_year;		/* relative to 1900 */
	int			tm_wday;
	int			tm_yday;
	int			tm_isdst;
	long int	tm_gmtoff;
	const char *tm_zone;
};

typedef struct pg_tz pg_tz;
typedef struct pg_tzenum pg_tzenum;

/* Maximum length of a timezone name (not including trailing null) */
#define TZ_STRLEN_MAX 255

/* these functions are in localtime.c */

struct pg_tm *pg_localtime(const pg_time_t *timep, const pg_tz *tz);
struct pg_tm *pg_gmtime(const pg_time_t *timep);
int pg_next_dst_boundary(const pg_time_t *timep,
					 long int *before_gmtoff,
					 int *before_isdst,
					 pg_time_t *boundary,
					 long int *after_gmtoff,
					 int *after_isdst,
					 const pg_tz *tz);
bool pg_interpret_timezone_abbrev(const char *abbrev,
							 const pg_time_t *timep,
							 long int *gmtoff,
							 int *isdst,
							 const pg_tz *tz);
bool pg_get_timezone_offset(const pg_tz *tz, long int *gmtoff);
const char *pg_get_timezone_name(pg_tz *tz);
bool pg_tz_acceptable(pg_tz *tz);

/* these functions and variables are in pgtz.c */

pg_tz *session_timezone;
pg_tz *log_timezone;

void pg_timezone_initialize(void);
pg_tz *pg_tzset(const char *tzname);
pg_tz *pg_tzset_offset(long gmtoffset);

pg_tzenum *pg_tzenumerate_start(void);
pg_tz *pg_tzenumerate_next(pg_tzenum *dir);
void pg_tzenumerate_end(pg_tzenum *dir);


// LICENSE_CHANGE_END


/* Macros to handle packing and unpacking the typmod field for intervals */
#define INTERVAL_FULL_RANGE (0x7FFF)
#define INTERVAL_RANGE_MASK (0x7FFF)
#define INTERVAL_FULL_PRECISION (0xFFFF)
#define INTERVAL_PRECISION_MASK (0xFFFF)
#define INTERVAL_TYPMOD(p,r) ((((r) & INTERVAL_RANGE_MASK) << 16) | ((p) & INTERVAL_PRECISION_MASK))
#define INTERVAL_PRECISION(t) ((t) & INTERVAL_PRECISION_MASK)
#define INTERVAL_RANGE(t) (((t) >> 16) & INTERVAL_RANGE_MASK)


// LICENSE_CHANGE_END



/*
 * Field types for time decoding.
 *
 * Can't have more of these than there are bits in an unsigned int
 * since these are turned into bit masks during parsing and decoding.
 *
 * Furthermore, the values for YEAR, MONTH, DAY, HOUR, MINUTE, SECOND
 * must be in the range 0..14 so that the associated bitmasks can fit
 * into the left half of an INTERVAL's typmod value.  Since those bits
 * are stored in typmods, you can't change them without initdb!
 */

#define RESERV	0
#define MONTH	1
#define YEAR	2
#define DAY		3
#define JULIAN	4
#define TZ		5				/* fixed-offset timezone abbreviation */
#define DTZ		6				/* fixed-offset timezone abbrev, DST */
#define DYNTZ	7				/* dynamic timezone abbreviation */
#define IGNORE_DTF	8
#define AMPM	9
#define HOUR	10
#define MINUTE	11
#define SECOND	12
#define MILLISECOND 13
#define MICROSECOND 14
#define DOY		15
#define DOW		16
#define UNITS	17
#define ADBC	18
/* these are only for relative dates */
#define AGO		19
#define ABS_BEFORE		20
#define ABS_AFTER		21
/* generic fields to help with parsing */
#define ISODATE 22
#define ISOTIME 23
/* these are only for parsing intervals */
#define WEEK		24
#define DECADE		25
#define CENTURY		26
#define MILLENNIUM	27
/* hack for parsing two-word timezone specs "MET DST" etc */
#define DTZMOD	28				/* "DST" as a separate word */
/* reserved for unrecognized string values */
#define UNKNOWN_FIELD	31




// LICENSE_CHANGE_END


namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static PGNode *makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod,
								  int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 14 "third_party/libpg_query/grammar/grammar.y"
{
	core_YYSTYPE		core_yystype;
	/* these fields must match core_YYSTYPE: */
	int					ival;
	char				*str;
	const char			*keyword;
	const char          *conststr;

	char				chr;
	bool				boolean;
	PGJoinType			jtype;
	PGDropBehavior		dbehavior;
	PGOnCommitAction		oncommit;
	PGOnCreateConflict		oncreateconflict;
	PGList				*list;
	PGNode				*node;
	PGValue				*value;
	PGObjectType			objtype;
	PGTypeName			*typnam;
	PGObjectWithArgs		*objwithargs;
	PGDefElem				*defelt;
	PGSortBy				*sortby;
	PGWindowDef			*windef;
	PGJoinExpr			*jexpr;
	PGIndexElem			*ielem;
	PGAlias				*alias;
	PGRangeVar			*range;
	PGIntoClause			*into;
	PGWithClause			*with;
	PGInferClause			*infer;
	PGOnConflictClause	*onconflict;
	PGAIndices			*aind;
	PGResTarget			*target;
	PGInsertStmt			*istmt;
	PGVariableSetStmt		*vsetstmt;
	PGOverridingKind       override;
	PGSortByDir            sortorder;
	PGSortByNulls          nullorder;
	PGConstrType           constr;
	PGLockClauseStrength lockstrength;
	PGLockWaitPolicy lockwaitpolicy;
	PGSubLinkType subquerytype;
	PGViewCheckOption viewcheckoption;
}
/* Line 193 of yacc.c.  */
#line 1287 "third_party/libpg_query/grammar/grammar_out.cpp"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


/* Copy the second part of user declarations.  */


/* Line 216 of yacc.c.  */
#line 1312 "third_party/libpg_query/grammar/grammar_out.cpp"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss;
  YYSTYPE yyvs;
    YYLTYPE yyls;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  605
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   55412

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  508
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  395
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1887
/* YYNRULES -- Number of states.  */
#define YYNSTATES  3082

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   741

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   505,     2,   493,     2,     2,
     498,   499,   491,   489,   502,   490,   500,   492,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   507,   501,
     485,   487,   486,   506,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   496,     2,   497,   494,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   503,     2,   504,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     488,   495
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     9,    11,    13,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      80,    85,    92,    97,   104,   109,   116,   121,   128,   130,
     133,   137,   140,   142,   146,   149,   153,   155,   159,   162,
     168,   172,   179,   184,   191,   198,   205,   211,   217,   224,
     234,   239,   245,   253,   260,   265,   274,   279,   282,   287,
     291,   298,   303,   306,   309,   312,   315,   317,   320,   321,
     323,   326,   329,   332,   334,   338,   343,   346,   348,   349,
     352,   356,   359,   363,   370,   377,   386,   393,   402,   409,
     418,   425,   434,   443,   454,   463,   474,   476,   477,   485,
     487,   492,   497,   505,   508,   510,   514,   519,   523,   524,
     526,   527,   530,   534,   540,   549,   555,   556,   562,   568,
     576,   579,   580,   582,   584,   586,   590,   593,   594,   596,
     597,   599,   603,   605,   609,   611,   614,   616,   620,   623,
     629,   632,   637,   643,   649,   658,   660,   661,   665,   675,
     688,   692,   693,   698,   705,   707,   710,   712,   714,   715,
     717,   720,   723,   725,   728,   731,   733,   736,   740,   743,
     746,   749,   752,   756,   760,   764,   766,   770,   772,   773,
     775,   778,   781,   784,   787,   790,   793,   796,   799,   801,
     803,   804,   814,   827,   839,   840,   843,   845,   847,   849,
     851,   853,   855,   859,   860,   862,   865,   867,   869,   872,
     875,   879,   881,   883,   886,   889,   891,   894,   898,   904,
     908,   911,   917,   919,   921,   923,   924,   930,   938,   944,
     947,   951,   953,   955,   958,   961,   962,   966,   971,   976,
     977,   981,   984,   985,   989,   991,   993,   995,   997,   999,
    1001,  1003,  1005,  1007,  1009,  1013,  1017,  1019,  1022,  1025,
    1028,  1031,  1034,  1037,  1038,  1042,  1046,  1050,  1051,  1053,
    1056,  1058,  1061,  1064,  1067,  1070,  1074,  1079,  1081,  1085,
    1087,  1089,  1091,  1093,  1097,  1099,  1102,  1103,  1105,  1108,
    1109,  1111,  1115,  1116,  1119,  1120,  1124,  1128,  1130,  1136,
    1140,  1142,  1146,  1148,  1151,  1153,  1158,  1164,  1170,  1177,
    1181,  1189,  1194,  1206,  1208,  1212,  1215,  1218,  1221,  1222,
    1226,  1228,  1230,  1233,  1236,  1239,  1242,  1244,  1245,  1247,
    1250,  1257,  1262,  1269,  1274,  1281,  1290,  1295,  1302,  1304,
    1306,  1308,  1310,  1313,  1315,  1318,  1320,  1323,  1325,  1327,
    1329,  1333,  1337,  1341,  1345,  1348,  1351,  1353,  1357,  1359,
    1361,  1363,  1365,  1369,  1371,  1373,  1374,  1376,  1378,  1380,
    1382,  1386,  1395,  1403,  1405,  1407,  1410,  1414,  1423,  1435,
    1445,  1447,  1449,  1453,  1454,  1456,  1460,  1462,  1463,  1465,
    1466,  1468,  1469,  1471,  1475,  1477,  1479,  1481,  1485,  1486,
    1489,  1492,  1493,  1496,  1497,  1499,  1500,  1502,  1504,  1506,
    1510,  1514,  1516,  1518,  1522,  1526,  1530,  1534,  1539,  1543,
    1546,  1548,  1550,  1552,  1554,  1556,  1560,  1562,  1564,  1568,
    1572,  1574,  1577,  1582,  1587,  1590,  1594,  1600,  1606,  1608,
    1610,  1622,  1634,  1636,  1639,  1644,  1649,  1654,  1657,  1660,
    1664,  1666,  1670,  1677,  1680,  1681,  1685,  1689,  1694,  1699,
    1704,  1709,  1713,  1716,  1718,  1720,  1721,  1723,  1725,  1726,
    1728,  1734,  1736,  1737,  1740,  1743,  1744,  1746,  1747,  1751,
    1757,  1763,  1765,  1769,  1774,  1778,  1780,  1782,  1783,  1786,
    1789,  1790,  1793,  1796,  1798,  1800,  1802,  1803,  1806,  1811,
    1817,  1822,  1825,  1829,  1832,  1835,  1838,  1841,  1843,  1846,
    1850,  1851,  1853,  1854,  1860,  1862,  1867,  1874,  1877,  1879,
    1880,  1885,  1886,  1888,  1890,  1893,  1896,  1899,  1901,  1903,
    1906,  1909,  1911,  1913,  1915,  1917,  1919,  1921,  1925,  1929,
    1933,  1934,  1936,  1940,  1942,  1945,  1947,  1949,  1951,  1953,
    1955,  1958,  1963,  1968,  1974,  1976,  1978,  1981,  1982,  1985,
    1986,  1988,  1992,  1994,  1995,  1997,  2000,  2004,  2007,  2012,
    2015,  2019,  2022,  2023,  2025,  2028,  2029,  2034,  2040,  2042,
    2045,  2048,  2049,  2051,  2055,  2057,  2060,  2064,  2068,  2072,
    2076,  2080,  2082,  2087,  2091,  2096,  2102,  2107,  2113,  2118,
    2124,  2127,  2132,  2134,  2136,  2137,  2139,  2144,  2150,  2155,
    2156,  2159,  2162,  2165,  2167,  2169,  2170,  2175,  2178,  2180,
    2183,  2186,  2191,  2194,  2201,  2204,  2206,  2210,  2215,  2216,
    2219,  2220,  2223,  2224,  2226,  2230,  2234,  2237,  2238,  2241,
    2246,  2248,  2250,  2252,  2253,  2256,  2260,  2266,  2273,  2276,
    2280,  2286,  2292,  2296,  2301,  2302,  2304,  2306,  2308,  2310,
    2312,  2315,  2320,  2322,  2324,  2326,  2328,  2331,  2335,  2336,
    2338,  2340,  2342,  2344,  2346,  2349,  2352,  2355,  2358,  2361,
    2363,  2367,  2368,  2370,  2372,  2374,  2376,  2382,  2385,  2387,
    2389,  2391,  2393,  2398,  2400,  2403,  2406,  2408,  2412,  2416,
    2419,  2421,  2422,  2428,  2431,  2437,  2440,  2442,  2446,  2450,
    2451,  2453,  2455,  2457,  2459,  2461,  2463,  2465,  2467,  2469,
    2471,  2473,  2475,  2477,  2479,  2481,  2483,  2485,  2487,  2489,
    2491,  2493,  2495,  2497,  2499,  2503,  2507,  2511,  2515,  2519,
    2523,  2527,  2528,  2530,  2534,  2538,  2544,  2547,  2550,  2554,
    2558,  2562,  2566,  2570,  2574,  2578,  2582,  2586,  2590,  2594,
    2598,  2602,  2606,  2609,  2612,  2616,  2620,  2623,  2626,  2630,
    2634,  2640,  2645,  2652,  2656,  2662,  2667,  2674,  2679,  2686,
    2692,  2700,  2704,  2707,  2712,  2716,  2719,  2721,  2725,  2729,
    2733,  2737,  2741,  2746,  2750,  2755,  2759,  2764,  2770,  2777,
    2784,  2792,  2799,  2807,  2814,  2822,  2826,  2831,  2836,  2843,
    2845,  2850,  2852,  2856,  2859,  2862,  2866,  2870,  2874,  2878,
    2882,  2886,  2890,  2894,  2898,  2902,  2906,  2910,  2914,  2918,
    2921,  2924,  2930,  2937,  2944,  2952,  2954,  2956,  2959,  2962,
    2965,  2970,  2972,  2975,  2977,  2980,  2983,  2988,  2992,  2999,
    3007,  3017,  3025,  3033,  3038,  3044,  3046,  3048,  3050,  3056,
    3058,  3060,  3065,  3067,  3072,  3074,  3079,  3081,  3086,  3088,
    3090,  3092,  3094,  3096,  3098,  3105,  3112,  3117,  3122,  3127,
    3132,  3139,  3145,  3151,  3157,  3162,  3169,  3174,  3180,  3181,
    3187,  3188,  3190,  3191,  3194,  3195,  3197,  3201,  3205,  3208,
    3211,  3212,  3219,  3221,  3222,  3226,  3227,  3230,  3233,  3234,
    3236,  3241,  3244,  3247,  3250,  3253,  3256,  3261,  3265,  3267,
    3273,  3277,  3279,  3283,  3285,  3288,  3290,  3292,  3294,  3296,
    3298,  3300,  3302,  3304,  3306,  3308,  3310,  3312,  3314,  3316,
    3318,  3320,  3322,  3324,  3326,  3331,  3333,  3338,  3340,  3345,
    3347,  3350,  3352,  3355,  3357,  3360,  3362,  3366,  3368,  3372,
    3374,  3377,  3379,  3380,  3382,  3386,  3388,  3392,  3396,  3398,
    3402,  3406,  3407,  3409,  3411,  3413,  3415,  3417,  3419,  3421,
    3423,  3425,  3427,  3432,  3436,  3439,  3443,  3444,  3448,  3452,
    3455,  3458,  3460,  3461,  3464,  3467,  3471,  3474,  3476,  3478,
    3482,  3488,  3490,  3493,  3498,  3501,  3502,  3504,  3505,  3507,
    3510,  3513,  3517,  3523,  3525,  3526,  3528,  3531,  3532,  3535,
    3537,  3538,  3540,  3541,  3543,  3547,  3549,  3552,  3556,  3559,
    3561,  3565,  3571,  3576,  3579,  3581,  3582,  3586,  3588,  3592,
    3594,  3597,  3602,  3605,  3606,  3608,  3612,  3614,  3617,  3619,
    3623,  3625,  3628,  3630,  3632,  3634,  3637,  3639,  3641,  3644,
    3646,  3648,  3651,  3659,  3662,  3668,  3672,  3676,  3678,  3680,
    3682,  3684,  3686,  3688,  3690,  3692,  3694,  3696,  3698,  3700,
    3702,  3704,  3706,  3708,  3710,  3712,  3714,  3716,  3719,  3722,
    3726,  3730,  3731,  3733,  3735,  3737,  3739,  3741,  3743,  3745,
    3751,  3755,  3756,  3758,  3760,  3762,  3764,  3769,  3777,  3780,
    3781,  3783,  3785,  3787,  3789,  3803,  3820,  3822,  3825,  3826,
    3828,  3829,  3831,  3832,  3835,  3836,  3838,  3839,  3846,  3855,
    3862,  3871,  3878,  3887,  3890,  3892,  3897,  3901,  3904,  3909,
    3913,  3919,  3921,  3922,  3924,  3926,  3927,  3929,  3931,  3933,
    3935,  3937,  3939,  3941,  3943,  3945,  3947,  3949,  3953,  3955,
    3957,  3959,  3961,  3963,  3965,  3968,  3970,  3972,  3975,  3979,
    3983,  3987,  3989,  3993,  3997,  4000,  4004,  4008,  4012,  4016,
    4018,  4020,  4022,  4024,  4028,  4034,  4036,  4038,  4040,  4042,
    4046,  4049,  4052,  4056,  4058,  4060,  4065,  4071,  4077,  4082,
    4089,  4091,  4093,  4095,  4097,  4099,  4101,  4102,  4104,  4108,
    4110,  4111,  4119,  4121,  4124,  4128,  4131,  4132,  4135,  4136,
    4139,  4144,  4147,  4149,  4151,  4153,  4156,  4160,  4163,  4166,
    4169,  4172,  4176,  4181,  4184,  4186,  4188,  4190,  4192,  4196,
    4199,  4209,  4221,  4234,  4249,  4253,  4258,  4263,  4264,  4272,
    4283,  4293,  4296,  4300,  4301,  4306,  4308,  4310,  4312,  4314,
    4316,  4318,  4320,  4322,  4324,  4326,  4328,  4330,  4332,  4334,
    4336,  4338,  4340,  4342,  4344,  4346,  4348,  4350,  4352,  4354,
    4356,  4358,  4360,  4362,  4364,  4366,  4368,  4370,  4372,  4374,
    4376,  4378,  4380,  4382,  4384,  4386,  4388,  4390,  4392,  4394,
    4396,  4398,  4400,  4402,  4404,  4406,  4408,  4410,  4412,  4414,
    4416,  4418,  4420,  4422,  4424,  4426,  4428,  4430,  4432,  4434,
    4436,  4438,  4440,  4442,  4444,  4446,  4448,  4450,  4452,  4454,
    4456,  4458,  4460,  4462,  4464,  4466,  4468,  4470,  4472,  4474,
    4476,  4478,  4480,  4482,  4484,  4486,  4488,  4490,  4492,  4494,
    4496,  4498,  4500,  4502,  4504,  4506,  4508,  4510,  4512,  4514,
    4516,  4518,  4520,  4522,  4524,  4526,  4528,  4530,  4532,  4534,
    4536,  4538,  4540,  4542,  4544,  4546,  4548,  4550,  4552,  4554,
    4556,  4558,  4560,  4562,  4564,  4566,  4568,  4570,  4572,  4574,
    4576,  4578,  4580,  4582,  4584,  4586,  4588,  4590,  4592,  4594,
    4596,  4598,  4600,  4602,  4604,  4606,  4608,  4610,  4612,  4614,
    4616,  4618,  4620,  4622,  4624,  4626,  4628,  4630,  4632,  4634,
    4636,  4638,  4640,  4642,  4644,  4646,  4648,  4650,  4652,  4654,
    4656,  4658,  4660,  4662,  4664,  4666,  4668,  4670,  4672,  4674,
    4676,  4678,  4680,  4682,  4684,  4686,  4688,  4690,  4692,  4694,
    4696,  4698,  4700,  4702,  4704,  4706,  4708,  4710,  4712,  4714,
    4716,  4718,  4720,  4722,  4724,  4726,  4728,  4730,  4732,  4734,
    4736,  4738,  4740,  4742,  4744,  4746,  4748,  4750,  4752,  4754,
    4756,  4758,  4760,  4762,  4764,  4766,  4768,  4770,  4772,  4774,
    4776,  4778,  4780,  4782,  4784,  4786,  4788,  4790,  4792,  4794,
    4796,  4798,  4800,  4802,  4804,  4806,  4808,  4810,  4812,  4814,
    4816,  4818,  4820,  4822,  4824,  4826,  4828,  4830,  4832,  4834,
    4836,  4838,  4840,  4842,  4844,  4846,  4848,  4850,  4852,  4854,
    4856,  4858,  4860,  4862,  4864,  4866,  4868,  4870,  4872,  4874,
    4876,  4878,  4880,  4882,  4884,  4886,  4888,  4890,  4892,  4894,
    4896,  4898,  4900,  4902,  4904,  4906,  4908,  4910,  4912,  4914,
    4916,  4918,  4920,  4922,  4924,  4926,  4928,  4930,  4932,  4934,
    4936,  4938,  4940,  4942,  4944,  4946,  4948,  4950,  4952,  4954,
    4956,  4958,  4960,  4962,  4964,  4966,  4968,  4970,  4972,  4974,
    4976,  4978,  4980,  4982,  4984,  4986,  4988,  4990,  4992,  4994,
    4996,  4998,  5000,  5002,  5004,  5006,  5008,  5010,  5012,  5014,
    5016,  5018,  5020,  5022,  5024,  5026,  5028,  5030,  5032,  5034,
    5036,  5038,  5040,  5042,  5044,  5046,  5048,  5050,  5052,  5054,
    5056,  5058,  5060,  5062,  5064,  5066,  5068,  5070,  5072,  5074,
    5076,  5078,  5080,  5082,  5084,  5086,  5088,  5090,  5092,  5094,
    5096,  5098,  5100,  5102,  5104,  5106,  5108,  5110,  5112,  5114,
    5116,  5118,  5120,  5122,  5124,  5126,  5128,  5130,  5132,  5134,
    5136,  5138,  5140,  5142,  5144,  5146,  5148,  5150,  5152,  5154,
    5156,  5158,  5160,  5162,  5164,  5166,  5168,  5170,  5172,  5174,
    5176,  5178,  5180,  5182,  5184,  5186,  5188,  5190,  5192,  5194,
    5196,  5198,  5200,  5202,  5204,  5206,  5208,  5210,  5212,  5214,
    5216,  5218,  5220,  5222,  5224,  5226,  5228,  5230,  5232,  5234,
    5236,  5238,  5240,  5242,  5244,  5246,  5248,  5250,  5252,  5254,
    5256,  5258,  5260,  5262,  5264,  5266,  5268,  5270,  5272,  5274,
    5276,  5278,  5280,  5282,  5284,  5286,  5288,  5290,  5292,  5294,
    5296,  5298,  5300,  5302,  5304,  5306,  5308,  5310,  5312,  5314,
    5316,  5318,  5320,  5322,  5324,  5326,  5328,  5330,  5332,  5334,
    5336,  5338,  5340,  5342,  5344,  5346,  5348,  5350,  5352,  5354,
    5356,  5358,  5360,  5362,  5364,  5366,  5368,  5370,  5372,  5374,
    5376,  5378,  5380,  5382,  5384,  5386,  5388,  5390,  5392,  5394,
    5396,  5398,  5400,  5402,  5404,  5406,  5408,  5410,  5412,  5414,
    5416,  5418,  5420,  5422,  5424,  5426,  5428,  5430,  5432,  5434,
    5436,  5438,  5440,  5442,  5444,  5446,  5448,  5450,  5452,  5454,
    5456,  5458,  5460,  5462,  5464,  5466,  5468,  5470,  5472,  5474,
    5476,  5478,  5480,  5482,  5484,  5486,  5488,  5490,  5492,  5494,
    5496,  5498,  5500,  5502,  5504,  5506,  5508,  5510,  5512,  5514,
    5516,  5518,  5520,  5522,  5524,  5526,  5528,  5530
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     509,     0,    -1,   510,    -1,   510,   501,   511,    -1,   511,
      -1,   851,    -1,   551,    -1,   512,    -1,   883,    -1,   890,
      -1,   852,    -1,   619,    -1,   893,    -1,   615,    -1,   841,
      -1,   547,    -1,   560,    -1,   545,    -1,   523,    -1,   879,
      -1,   608,    -1,   549,    -1,   855,    -1,   853,    -1,   854,
      -1,   844,    -1,   526,    -1,   872,    -1,   546,    -1,   838,
      -1,   524,    -1,   636,    -1,   558,    -1,   618,    -1,   874,
      -1,   884,    -1,   866,    -1,   887,    -1,   891,    -1,    -1,
      30,   405,   705,   520,    -1,    30,   405,   189,   151,   705,
     520,    -1,    30,   199,   818,   520,    -1,    30,   199,   189,
     151,   818,   520,    -1,    30,   369,   818,   520,    -1,    30,
     369,   189,   151,   818,   520,    -1,    30,   452,   818,   520,
      -1,    30,   452,   189,   151,   818,   520,    -1,   515,    -1,
     513,   515,    -1,   375,   116,   748,    -1,   136,   116,    -1,
     347,    -1,   347,   553,   554,    -1,   375,   555,    -1,   375,
     174,   607,    -1,   519,    -1,   516,   502,   519,    -1,    24,
     587,    -1,    24,   189,   271,   151,   587,    -1,    24,    76,
     587,    -1,    24,    76,   189,   271,   151,   587,    -1,    30,
     525,   827,   514,    -1,    30,   525,   827,   136,   271,   276,
      -1,    30,   525,   827,   375,   271,   276,    -1,    30,   525,
     827,   375,   391,   557,    -1,    30,   525,   827,   375,   575,
      -1,    30,   525,   827,   345,   575,    -1,    30,   525,   827,
     375,   394,   827,    -1,    30,   525,   827,    24,   174,   607,
      37,   188,   563,    -1,    30,   525,   827,   513,    -1,    30,
     525,   827,   136,   188,    -1,    30,   525,   827,   136,   188,
     189,   151,    -1,   136,   525,   189,   151,   827,   612,    -1,
     136,   525,   827,   612,    -1,    30,   525,   827,   522,   427,
     718,   714,   518,    -1,    30,   525,   827,   521,    -1,    24,
     577,    -1,    30,    87,   821,   561,    -1,   443,    87,   821,
      -1,   136,    87,   189,   151,   821,   612,    -1,   136,    87,
     821,   612,    -1,   375,   243,    -1,   375,   436,    -1,   375,
     575,    -1,   345,   575,    -1,   521,    -1,   440,   748,    -1,
      -1,   571,    -1,   375,   571,    -1,    24,   571,    -1,   136,
     585,    -1,   517,    -1,   520,   502,   517,    -1,   290,   498,
     516,   499,    -1,   375,   108,    -1,   375,    -1,    -1,   112,
     821,    -1,   112,   316,   821,    -1,   112,    28,    -1,   112,
     316,    28,    -1,    30,   361,   821,   341,   416,   821,    -1,
      30,   405,   705,   341,   416,   821,    -1,    30,   405,   189,
     151,   705,   341,   416,   821,    -1,    30,   369,   818,   341,
     416,   821,    -1,    30,   369,   189,   151,   818,   341,   416,
     821,    -1,    30,   452,   818,   341,   416,   821,    -1,    30,
     452,   189,   151,   818,   341,   416,   821,    -1,    30,   199,
     818,   341,   416,   821,    -1,    30,   199,   189,   151,   818,
     341,   416,   821,    -1,    30,   405,   705,   341,   525,   821,
     416,   821,    -1,    30,   405,   189,   151,   705,   341,   525,
     821,   416,   821,    -1,    30,   405,   705,   341,    87,   821,
     416,   821,    -1,    30,   405,   189,   151,   705,   341,    87,
     821,   416,   821,    -1,    76,    -1,    -1,   530,   209,   216,
     528,   527,   533,   535,    -1,   636,    -1,   299,   536,   445,
     636,    -1,   498,   540,   499,   636,    -1,   498,   540,   499,
     299,   536,   445,   636,    -1,   116,   446,    -1,   818,    -1,
     818,    37,   827,    -1,   498,   543,   499,   711,    -1,   286,
      87,   821,    -1,    -1,   641,    -1,    -1,   827,   805,    -1,
     544,   487,   748,    -1,   498,   537,   499,   487,   748,    -1,
     286,    85,   529,   132,   438,   375,   542,   711,    -1,   286,
      85,   529,   132,   272,    -1,    -1,   827,   538,   539,   655,
     656,    -1,   753,   538,   539,   655,   656,    -1,   498,   748,
     499,   538,   539,   655,   656,    -1,   349,   808,    -1,    -1,
     439,    -1,   404,    -1,   544,    -1,   537,   502,   544,    -1,
      74,   832,    -1,    -1,   832,    -1,    -1,   531,    -1,   540,
     502,   531,    -1,   532,    -1,   541,   502,   532,    -1,   541,
      -1,   541,   502,    -1,   534,    -1,   543,   502,   534,    -1,
     827,   805,    -1,    94,   427,   832,    37,   718,    -1,   313,
     827,    -1,   313,   827,   487,   871,    -1,   313,   827,   498,
     783,   499,    -1,    94,   606,   369,   818,   548,    -1,    94,
     606,   369,   189,   271,   151,   818,   548,    -1,   552,    -1,
      -1,   150,   821,   550,    -1,    94,   606,   405,   895,    37,
     150,   821,   550,   894,    -1,    94,   606,   405,   189,   271,
     151,   895,    37,   150,   821,   550,   894,    -1,   498,   781,
     499,    -1,    -1,    30,   369,   818,   552,    -1,    30,   369,
     189,   151,   818,   552,    -1,   555,    -1,   552,   555,    -1,
     460,    -1,   484,    -1,    -1,     4,    -1,   489,     4,    -1,
     490,     4,    -1,   557,    -1,    37,   720,    -1,    56,   554,
      -1,   107,    -1,   269,   107,    -1,   198,   556,   554,    -1,
     249,   554,    -1,   257,   554,    -1,   269,   249,    -1,   269,
     257,    -1,   300,    55,   832,    -1,   369,   262,   832,    -1,
     389,   553,   554,    -1,   347,    -1,   347,   553,   554,    -1,
      55,    -1,    -1,   825,    -1,   489,   825,    -1,   490,   825,
      -1,    20,   559,    -1,    48,   559,    -1,   389,   559,    -1,
      80,   559,    -1,   142,   559,    -1,   354,   559,    -1,   463,
      -1,   418,    -1,    -1,    94,   606,   405,   818,   498,   593,
     499,   582,   574,    -1,    94,   606,   405,   189,   271,   151,
     818,   498,   593,   499,   582,   574,    -1,    94,   291,   343,
     606,   405,   818,   498,   593,   499,   582,   574,    -1,    -1,
     561,   586,    -1,   601,    -1,   902,    -1,   777,    -1,   554,
      -1,   826,    -1,   270,    -1,   498,   552,   499,    -1,    -1,
     826,    -1,   269,    23,    -1,   348,    -1,    59,    -1,   375,
     276,    -1,   375,   116,    -1,    87,   821,   567,    -1,   567,
      -1,   581,    -1,    74,   832,    -1,   271,   276,    -1,   276,
      -1,   433,   592,    -1,   319,   223,   592,    -1,    68,   498,
     748,   499,   576,    -1,   440,    82,   821,    -1,   116,   749,
      -1,   335,   818,   595,   604,   573,    -1,   454,    -1,   395,
      -1,   568,    -1,    -1,   174,   607,    37,   188,   563,    -1,
     174,   607,    37,   498,   748,   499,   569,    -1,    37,   498,
     748,   499,   569,    -1,   585,   564,    -1,   286,   438,   565,
      -1,   572,    -1,   597,    -1,   572,   597,    -1,   597,   572,
      -1,    -1,   286,    80,   136,    -1,   286,    80,   121,   357,
      -1,   286,    80,   318,   357,    -1,    -1,   498,   579,   499,
      -1,   269,   201,    -1,    -1,    87,   821,   602,    -1,   602,
      -1,    79,    -1,    88,    -1,   117,    -1,   188,    -1,   200,
      -1,   391,    -1,   394,    -1,    28,    -1,   598,    -1,   579,
     502,   598,    -1,   440,   199,   589,    -1,   118,    -1,   271,
     118,    -1,   203,   119,    -1,   203,   192,    -1,   460,   575,
      -1,   460,   284,    -1,   462,   284,    -1,    -1,   498,   588,
     499,    -1,   584,   197,   578,    -1,   584,   148,   578,    -1,
      -1,   836,    -1,   271,   118,    -1,   118,    -1,   203,   192,
      -1,   203,   119,    -1,   271,   442,    -1,   269,   201,    -1,
     827,   718,   596,    -1,   827,   717,   570,   596,    -1,   591,
      -1,   588,   502,   591,    -1,   827,    -1,   587,    -1,   605,
      -1,   577,    -1,   836,   487,   562,    -1,   836,    -1,   460,
     583,    -1,    -1,   603,    -1,   603,   502,    -1,    -1,   827,
      -1,   498,   599,   499,    -1,    -1,   596,   566,    -1,    -1,
     286,   121,   565,    -1,   836,   487,   562,    -1,   836,    -1,
     836,   500,   836,   487,   562,    -1,   836,   500,   836,    -1,
     594,    -1,   599,   502,   594,    -1,   599,    -1,   599,   502,
      -1,   718,    -1,   829,   833,   493,   427,    -1,   376,   829,
     833,   493,   427,    -1,    68,   498,   748,   499,   561,    -1,
     433,   498,   600,   499,   592,   561,    -1,   433,   580,   561,
      -1,   319,   223,   498,   600,   499,   592,   561,    -1,   319,
     223,   580,   561,    -1,   167,   223,   498,   600,   499,   335,
     818,   595,   604,   573,   561,    -1,   590,    -1,   603,   502,
     590,    -1,   247,   171,    -1,   247,   304,    -1,   247,   381,
      -1,    -1,   233,   818,   584,    -1,   411,    -1,   409,    -1,
     237,   411,    -1,   237,   409,    -1,   176,   411,    -1,   176,
     409,    -1,   436,    -1,    -1,    31,    -1,    55,   116,    -1,
     136,   609,   189,   151,   611,   612,    -1,   136,   609,   611,
     612,    -1,   136,   610,   189,   151,   819,   612,    -1,   136,
     610,   819,   612,    -1,   136,   613,   821,   286,   832,   612,
      -1,   136,   613,   189,   151,   821,   286,   832,   612,    -1,
     136,   427,   614,   612,    -1,   136,   427,   189,   151,   614,
     612,    -1,   405,    -1,   369,    -1,   172,    -1,   244,    -1,
     244,   405,    -1,   452,    -1,   248,   452,    -1,   199,    -1,
     167,   405,    -1,    75,    -1,    91,    -1,   391,    -1,   412,
     364,   303,    -1,   412,   364,   128,    -1,   412,   364,   410,
      -1,   412,   364,    84,    -1,    22,   250,    -1,   145,   421,
      -1,   155,    -1,   167,   108,   464,    -1,   325,    -1,   361,
      -1,   372,    -1,   832,    -1,   611,   502,   832,    -1,    59,
      -1,   348,    -1,    -1,   311,    -1,   358,    -1,   421,    -1,
     718,    -1,   614,   502,   718,    -1,    94,   606,   616,   818,
     617,    37,   405,   636,    -1,    94,   606,   616,   818,   617,
      37,   748,    -1,   172,    -1,   244,    -1,   498,   499,    -1,
     498,   783,   499,    -1,   530,   438,   880,   375,   542,   694,
     881,   535,    -1,    92,   631,   818,   595,   629,   620,   625,
     634,   621,   553,   626,    -1,    92,   498,   840,   499,   416,
     625,   634,   553,   626,    -1,   170,    -1,   416,    -1,   623,
     123,   826,    -1,    -1,   633,    -1,   622,   502,   633,    -1,
     440,    -1,    -1,    37,    -1,    -1,   324,    -1,    -1,   630,
      -1,   498,   635,   499,    -1,   863,    -1,   554,    -1,   491,
      -1,   498,   622,   499,    -1,    -1,   836,   627,    -1,   460,
     284,    -1,    -1,   630,   632,    -1,    -1,    51,    -1,    -1,
      51,    -1,   284,    -1,   169,    -1,   122,   624,   826,    -1,
     276,   624,   826,    -1,    96,    -1,   184,    -1,   327,   624,
     826,    -1,   144,   624,   826,    -1,   166,   327,   599,    -1,
     166,   327,   491,    -1,   166,   271,   276,   599,    -1,   166,
     276,   599,    -1,   140,   826,    -1,   863,    -1,   826,    -1,
     392,    -1,   393,    -1,   628,    -1,   635,   502,   628,    -1,
     638,    -1,   637,    -1,   498,   638,   499,    -1,   498,   637,
     499,    -1,   640,    -1,   639,   652,    -1,   639,   651,   685,
     658,    -1,   639,   651,   657,   686,    -1,   641,   639,    -1,
     641,   639,   652,    -1,   641,   639,   651,   685,   658,    -1,
     641,   639,   651,   657,   686,    -1,   640,    -1,   637,    -1,
     368,   649,   807,   644,   694,   711,   674,   683,   758,   684,
     662,    -1,   368,   648,   809,   644,   694,   711,   674,   683,
     758,   684,   662,    -1,   693,    -1,   405,   705,    -1,   639,
     432,   647,   639,    -1,   639,   214,   647,   639,    -1,   639,
     146,   647,   639,    -1,   460,   642,    -1,   484,   642,    -1,
     460,   333,   642,    -1,   643,    -1,   642,   502,   643,    -1,
     821,   834,    37,   498,   840,   499,    -1,   216,   645,    -1,
      -1,   411,   646,   818,    -1,   409,   646,   818,    -1,   237,
     411,   646,   818,    -1,   237,   409,   646,   818,    -1,   176,
     411,   646,   818,    -1,   176,   409,   646,   818,    -1,   436,
     646,   818,    -1,   405,   818,    -1,   818,    -1,   405,    -1,
      -1,    28,    -1,   131,    -1,    -1,   131,    -1,   131,   286,
     498,   781,   499,    -1,    28,    -1,    -1,   190,   278,    -1,
     346,   278,    -1,    -1,   652,    -1,    -1,   292,    55,   653,
      -1,   292,    55,    28,   655,   656,    -1,   292,    55,   491,
     655,   656,    -1,   654,    -1,   653,   502,   654,    -1,   748,
     440,   777,   656,    -1,   748,   655,   656,    -1,    38,    -1,
     125,    -1,    -1,   483,   162,    -1,   483,   227,    -1,    -1,
     659,   660,    -1,   660,   659,    -1,   659,    -1,   660,    -1,
     657,    -1,    -1,   234,   668,    -1,   234,   668,   502,   669,
      -1,   160,   673,   670,   672,   287,    -1,   160,   673,   672,
     287,    -1,   283,   669,    -1,   283,   670,   672,    -1,     4,
     493,    -1,     9,   493,    -1,     4,   308,    -1,     9,   308,
      -1,     9,    -1,     9,   357,    -1,   440,   359,   664,    -1,
      -1,   827,    -1,    -1,   663,   498,   661,   499,   667,    -1,
     661,    -1,   661,   498,   827,   499,    -1,   661,   498,   827,
     502,     9,   499,    -1,   407,   664,    -1,   665,    -1,    -1,
     342,   498,     9,   499,    -1,    -1,   748,    -1,    28,    -1,
     748,   493,    -1,     4,   308,    -1,     9,   308,    -1,   748,
      -1,   750,    -1,   489,   671,    -1,   490,   671,    -1,   825,
      -1,     4,    -1,   356,    -1,   357,    -1,   162,    -1,   268,
      -1,   179,    55,   676,    -1,   179,    55,    28,    -1,   179,
      55,   491,    -1,    -1,   677,    -1,   675,   502,   677,    -1,
     675,    -1,   675,   502,    -1,   748,    -1,   678,    -1,   680,
      -1,   679,    -1,   681,    -1,   498,   499,    -1,   355,   498,
     781,   499,    -1,    97,   498,   781,   499,    -1,   180,   377,
     498,   676,   499,    -1,   180,    -1,   181,    -1,   183,   748,
      -1,    -1,   326,   748,    -1,    -1,   687,    -1,   165,   329,
     287,    -1,   685,    -1,    -1,   688,    -1,   687,   688,    -1,
     689,   690,   691,    -1,   165,   438,    -1,   165,   269,   223,
     438,    -1,   165,   378,    -1,   165,   223,   378,    -1,   281,
     817,    -1,    -1,   275,    -1,   382,   242,    -1,    -1,   446,
     498,   781,   499,    -1,   692,   502,   498,   781,   499,    -1,
     692,    -1,   692,   502,    -1,   170,   696,    -1,    -1,   697,
      -1,   695,   502,   697,    -1,   695,    -1,   695,   502,    -1,
     705,   700,   666,    -1,   706,   701,   666,    -1,   228,   706,
     701,    -1,   637,   700,   666,    -1,   228,   637,   700,    -1,
     698,    -1,   498,   698,   499,   699,    -1,   498,   698,   499,
      -1,   697,    95,   221,   697,    -1,   697,   702,   221,   697,
     704,    -1,   697,   221,   697,   704,    -1,   697,   265,   702,
     221,   697,    -1,   697,   265,   221,   697,    -1,    37,   827,
     498,   820,   499,    -1,    37,   828,    -1,   827,   498,   820,
     499,    -1,   827,    -1,   699,    -1,    -1,   699,    -1,    37,
     498,   712,   499,    -1,    37,   827,   498,   712,   499,    -1,
     827,   498,   712,   499,    -1,    -1,   171,   703,    -1,   231,
     703,    -1,   352,   703,    -1,   205,    -1,   295,    -1,    -1,
     440,   498,   820,   499,    -1,   286,   748,    -1,   818,    -1,
     818,   491,    -1,   287,   818,    -1,   287,   498,   818,   499,
      -1,   753,   710,    -1,   357,   170,   498,   708,   499,   710,
      -1,   753,   709,    -1,   707,    -1,   708,   502,   707,    -1,
      37,   498,   712,   499,    -1,    -1,   484,   293,    -1,    -1,
     457,   748,    -1,    -1,   713,    -1,   712,   502,   713,    -1,
     827,   718,   714,    -1,    74,   832,    -1,    -1,   827,   718,
      -1,   715,   502,   827,   718,    -1,   356,    -1,   398,    -1,
     718,    -1,    -1,   720,   719,    -1,   376,   720,   719,    -1,
     720,    36,   496,   825,   497,    -1,   376,   720,    36,   496,
     825,   497,    -1,   720,    36,    -1,   376,   720,    36,    -1,
     716,   498,   715,   499,   719,    -1,   245,   498,   785,   499,
     719,    -1,   719,   496,   497,    -1,   719,   496,   825,   497,
      -1,    -1,   722,    -1,   724,    -1,   726,    -1,   730,    -1,
     736,    -1,   737,   747,    -1,   737,   498,   825,   499,    -1,
     724,    -1,   727,    -1,   731,    -1,   736,    -1,   831,   723,
      -1,   498,   782,   499,    -1,    -1,   212,    -1,   213,    -1,
     383,    -1,    50,    -1,   330,    -1,   163,   725,    -1,   135,
     315,    -1,   114,   723,    -1,   113,   723,    -1,   279,   723,
      -1,    53,    -1,   498,   825,   499,    -1,    -1,   728,    -1,
     729,    -1,   728,    -1,   729,    -1,    52,   735,   498,   781,
     499,    -1,    52,   735,    -1,   732,    -1,   733,    -1,   732,
      -1,   733,    -1,   734,   498,   825,   499,    -1,   734,    -1,
      66,   735,    -1,    65,   735,    -1,   447,    -1,   264,    66,
     735,    -1,   264,    65,   735,    -1,   266,   735,    -1,   449,
      -1,    -1,   415,   498,   825,   499,   738,    -1,   415,   738,
      -1,   414,   498,   825,   499,   738,    -1,   414,   738,    -1,
     215,    -1,   484,   414,   481,    -1,   462,   414,   481,    -1,
      -1,   478,    -1,   479,    -1,   259,    -1,   260,    -1,   110,
      -1,   111,    -1,   186,    -1,   187,    -1,   255,    -1,   256,
      -1,   365,    -1,   366,    -1,   253,    -1,   254,    -1,   251,
      -1,   252,    -1,   739,    -1,   740,    -1,   741,    -1,   742,
      -1,   743,    -1,   744,    -1,   745,    -1,   746,    -1,   739,
     416,   740,    -1,   741,   416,   742,    -1,   741,   416,   743,
      -1,   741,   416,   744,    -1,   742,   416,   743,    -1,   742,
     416,   744,    -1,   743,   416,   744,    -1,    -1,   750,    -1,
     748,    11,   718,    -1,   748,    74,   832,    -1,   748,    42,
     414,   481,   748,    -1,   489,   748,    -1,   490,   748,    -1,
     748,   489,   748,    -1,   748,   490,   748,    -1,   748,   491,
     748,    -1,   748,   492,   748,    -1,   748,   493,   748,    -1,
     748,   494,   748,    -1,   748,    16,   748,    -1,   748,   485,
     748,    -1,   748,   486,   748,    -1,   748,   487,   748,    -1,
     748,    17,   748,    -1,   748,    18,   748,    -1,   748,    19,
     748,    -1,   748,   776,   748,    -1,   776,   748,    -1,   748,
     776,    -1,   748,    34,   748,    -1,   748,   291,   748,    -1,
     271,   748,    -1,   482,   748,    -1,   748,   175,   748,    -1,
     748,   233,   748,    -1,   748,   233,   748,   144,   748,    -1,
     748,   482,   233,   748,    -1,   748,   482,   233,   748,   144,
     748,    -1,   748,   191,   748,    -1,   748,   191,   748,   144,
     748,    -1,   748,   482,   191,   748,    -1,   748,   482,   191,
     748,   144,   748,    -1,   748,   380,   416,   748,    -1,   748,
     380,   416,   748,   144,   748,    -1,   748,   482,   380,   416,
     748,    -1,   748,   482,   380,   416,   748,   144,   748,    -1,
     748,   218,   276,    -1,   748,   219,    -1,   748,   218,   271,
     276,    -1,   748,   271,   276,    -1,   748,   274,    -1,   769,
      -1,   503,   772,   504,    -1,   496,   782,   497,    -1,   748,
      15,   748,    -1,   769,   297,   769,    -1,   748,   218,   423,
      -1,   748,   218,   271,   423,    -1,   748,   218,   158,    -1,
     748,   218,   271,   158,    -1,   748,   218,   434,    -1,   748,
     218,   271,   434,    -1,   748,   218,   131,   170,   748,    -1,
     748,   218,   271,   131,   170,   748,    -1,   748,   218,   281,
     498,   785,   499,    -1,   748,   218,   271,   281,   498,   785,
     499,    -1,   748,    49,   806,   749,    34,   748,    -1,   748,
     482,    49,   806,   749,    34,   748,    -1,   748,    49,   402,
     749,    34,   748,    -1,   748,   482,    49,   402,   749,    34,
     748,    -1,   748,   196,   795,    -1,   748,   482,   196,   795,
      -1,   748,   778,   773,   637,    -1,   748,   778,   773,   498,
     748,   499,    -1,   116,    -1,    36,   496,   782,   497,    -1,
     750,    -1,   749,    11,   718,    -1,   489,   749,    -1,   490,
     749,    -1,   749,   489,   749,    -1,   749,   490,   749,    -1,
     749,   491,   749,    -1,   749,   492,   749,    -1,   749,   493,
     749,    -1,   749,   494,   749,    -1,   749,    16,   749,    -1,
     749,   485,   749,    -1,   749,   486,   749,    -1,   749,   487,
     749,    -1,   749,    17,   749,    -1,   749,    18,   749,    -1,
     749,    19,   749,    -1,   749,   776,   749,    -1,   776,   749,
      -1,   749,   776,    -1,   749,   218,   131,   170,   749,    -1,
     749,   218,   271,   131,   170,   749,    -1,   749,   218,   281,
     498,   785,   499,    -1,   749,   218,   271,   281,   498,   785,
     499,    -1,   801,    -1,   824,    -1,   505,     9,    -1,   506,
     805,    -1,    10,   805,    -1,   498,   748,   499,   805,    -1,
     796,    -1,   752,   805,    -1,   637,    -1,   637,   804,    -1,
     151,   637,    -1,   682,   498,   781,   499,    -1,   823,   498,
     499,    -1,   823,   498,   783,   651,   650,   499,    -1,   823,
     498,   448,   784,   651,   650,   499,    -1,   823,   498,   783,
     502,   448,   784,   651,   650,   499,    -1,   823,   498,    28,
     783,   651,   650,   499,    -1,   823,   498,   131,   783,   651,
     650,   499,    -1,   823,   498,   491,   499,    -1,   751,   755,
     756,   757,   761,    -1,   754,    -1,   751,    -1,   754,    -1,
      75,   165,   498,   748,   499,    -1,   100,    -1,   103,    -1,
     103,   498,   825,   499,    -1,   104,    -1,   104,   498,   825,
     499,    -1,   238,    -1,   238,   498,   825,   499,    -1,   239,
      -1,   239,   498,   825,   499,    -1,   101,    -1,   105,    -1,
     374,    -1,   439,    -1,    99,    -1,   102,    -1,    62,   498,
     748,    37,   718,   499,    -1,   426,   498,   748,    37,   718,
     499,    -1,   157,   498,   786,   499,    -1,   298,   498,   788,
     499,    -1,   312,   498,   790,   499,    -1,   400,   498,   791,
     499,    -1,   420,   498,   748,    37,   718,   499,    -1,   422,
     498,    54,   794,   499,    -1,   422,   498,   229,   794,   499,
      -1,   422,   498,   417,   794,   499,    -1,   422,   498,   794,
     499,    -1,   277,   498,   748,   502,   748,   499,    -1,    73,
     498,   781,   499,    -1,   461,   179,   498,   652,   499,    -1,
      -1,   161,   498,   457,   748,   499,    -1,    -1,   154,    -1,
      -1,   459,   759,    -1,    -1,   760,    -1,   759,   502,   760,
      -1,   827,    37,   762,    -1,   296,   762,    -1,   296,   827,
      -1,    -1,   498,   763,   764,   651,   765,   499,    -1,   827,
      -1,    -1,   305,    55,   780,    -1,    -1,   328,   766,    -1,
     357,   766,    -1,    -1,   767,    -1,    49,   767,    34,   767,
      -1,   429,   314,    -1,   429,   164,    -1,    98,   356,    -1,
     748,   314,    -1,   748,   164,    -1,   356,   498,   781,   499,
      -1,   356,   498,   499,    -1,   768,    -1,   498,   780,   502,
     748,   499,    -1,   828,   507,   748,    -1,   770,    -1,   771,
     502,   770,    -1,   771,    -1,   771,   502,    -1,    35,    -1,
     385,    -1,    28,    -1,     8,    -1,   775,    -1,   489,    -1,
     490,    -1,   491,    -1,   492,    -1,   493,    -1,   494,    -1,
      16,    -1,   485,    -1,   486,    -1,   487,    -1,    17,    -1,
      18,    -1,    19,    -1,     8,    -1,   288,   498,   779,   499,
      -1,   774,    -1,   288,   498,   779,   499,    -1,   774,    -1,
     288,   498,   779,   499,    -1,   233,    -1,   482,   233,    -1,
     175,    -1,   482,   175,    -1,   191,    -1,   482,   191,    -1,
     774,    -1,   827,   500,   779,    -1,   748,    -1,   780,   502,
     748,    -1,   780,    -1,   780,   502,    -1,   781,    -1,    -1,
     784,    -1,   783,   502,   784,    -1,   748,    -1,   835,    13,
     748,    -1,   835,    14,   748,    -1,   718,    -1,   785,   502,
     718,    -1,   787,   170,   748,    -1,    -1,     3,    -1,   739,
      -1,   740,    -1,   741,    -1,   742,    -1,   743,    -1,   744,
      -1,   745,    -1,   746,    -1,   826,    -1,   748,   789,   792,
     793,    -1,   748,   789,   792,    -1,   309,   748,    -1,   749,
     196,   749,    -1,    -1,   748,   792,   793,    -1,   748,   793,
     792,    -1,   748,   792,    -1,   748,   793,    -1,   780,    -1,
      -1,   170,   748,    -1,   165,   748,    -1,   748,   170,   781,
      -1,   170,   781,    -1,   781,    -1,   637,    -1,   498,   781,
     499,    -1,    61,   800,   797,   799,   142,    -1,   798,    -1,
     797,   798,    -1,   456,   748,   413,   748,    -1,   138,   748,
      -1,    -1,   748,    -1,    -1,   827,    -1,   827,   804,    -1,
     500,   822,    -1,   496,   748,   497,    -1,   496,   803,   507,
     803,   497,    -1,   748,    -1,    -1,   802,    -1,   804,   802,
      -1,    -1,   805,   802,    -1,    41,    -1,    -1,   809,    -1,
      -1,   810,    -1,   808,   502,   810,    -1,   808,    -1,   808,
     502,    -1,   748,    37,   837,    -1,   748,     3,    -1,   748,
      -1,   491,   812,   816,    -1,   827,   500,   491,   812,   816,
      -1,   147,   498,   820,   499,    -1,   147,   827,    -1,   811,
      -1,    -1,   748,    37,   827,    -1,   813,    -1,   814,   502,
     813,    -1,   814,    -1,   814,   502,    -1,   343,   498,   815,
     499,    -1,   343,   813,    -1,    -1,   818,    -1,   817,   502,
     818,    -1,   828,    -1,   827,   804,    -1,   821,    -1,   819,
     502,   821,    -1,   819,    -1,   819,   502,    -1,   827,    -1,
     836,    -1,   830,    -1,   827,   804,    -1,   825,    -1,     4,
      -1,   826,   805,    -1,     6,    -1,     7,    -1,   823,   826,
      -1,   823,   498,   783,   651,   650,   499,   826,    -1,   721,
     826,    -1,   737,   498,   748,   499,   747,    -1,   737,   825,
     747,    -1,   737,   826,   747,    -1,   423,    -1,   158,    -1,
     276,    -1,     9,    -1,     5,    -1,     3,    -1,   896,    -1,
     897,    -1,   827,    -1,     5,    -1,     3,    -1,   896,    -1,
     901,    -1,     3,    -1,   896,    -1,   898,    -1,     3,    -1,
     896,    -1,   899,    -1,   827,    -1,   827,   833,    -1,   500,
     822,    -1,   833,   500,   822,    -1,   498,   819,   499,    -1,
      -1,   829,    -1,     3,    -1,   900,    -1,   896,    -1,   902,
      -1,   836,    -1,     5,    -1,   316,   821,   839,    37,   840,
      -1,   498,   785,   499,    -1,    -1,   636,    -1,   526,    -1,
     618,    -1,   879,    -1,    94,   361,   827,   842,    -1,    94,
     361,   189,   271,   151,   827,   842,    -1,   842,   843,    -1,
      -1,   560,    -1,   844,    -1,   547,    -1,   891,    -1,    94,
     850,   199,   847,   848,   286,   818,   846,   498,   543,   499,
     849,   711,    -1,    94,   850,   199,   847,   189,   271,   151,
     589,   286,   818,   846,   498,   543,   499,   849,   711,    -1,
     827,    -1,   440,   845,    -1,    -1,    83,    -1,    -1,   589,
      -1,    -1,   460,   575,    -1,    -1,   433,    -1,    -1,    30,
     405,   705,   375,   361,   821,    -1,    30,   405,   189,   151,
     705,   375,   361,   821,    -1,    30,   369,   818,   375,   361,
     821,    -1,    30,   369,   189,   151,   818,   375,   361,   821,
      -1,    30,   452,   818,   375,   361,   821,    -1,    30,   452,
     189,   151,   818,   375,   361,   821,    -1,   166,    69,    -1,
      69,    -1,   153,   109,   826,   626,    -1,   195,   109,   826,
      -1,   152,   858,    -1,   152,   862,   856,   858,    -1,   152,
     450,   858,    -1,   152,   498,   861,   499,   858,    -1,   450,
      -1,    -1,   863,    -1,   554,    -1,    -1,   636,    -1,   526,
      -1,   618,    -1,   879,    -1,   893,    -1,     3,    -1,   896,
      -1,   900,    -1,   859,    -1,   826,    -1,   864,    -1,   861,
     502,   864,    -1,    33,    -1,    32,    -1,   423,    -1,   158,
      -1,   286,    -1,   860,    -1,   865,   857,    -1,   859,    -1,
     862,    -1,   375,   867,    -1,   375,   237,   867,    -1,   375,
     373,   867,    -1,   375,   176,   867,    -1,   868,    -1,   889,
     170,    98,    -1,   414,   481,   870,    -1,   361,   826,    -1,
     889,   416,   871,    -1,   889,   487,   871,    -1,   889,   416,
     116,    -1,   889,   487,   116,    -1,   863,    -1,   554,    -1,
     826,    -1,     3,    -1,   737,   826,   747,    -1,   737,   498,
     825,   499,   826,    -1,   554,    -1,   116,    -1,   237,    -1,
     869,    -1,   871,   502,   869,    -1,   236,   873,    -1,   210,
     873,    -1,   166,   210,   873,    -1,   826,    -1,   827,    -1,
     441,   876,   878,   856,    -1,   441,   876,   878,   856,   818,
      -1,   441,   876,   878,   856,   883,    -1,   441,   498,   877,
     499,    -1,   441,   498,   877,   499,   818,   834,    -1,   862,
      -1,   450,    -1,   169,    -1,   171,    -1,     3,    -1,   171,
      -1,    -1,   875,    -1,   877,   502,   875,    -1,   169,    -1,
      -1,   530,   121,   170,   880,   882,   881,   535,    -1,   705,
      -1,   705,   827,    -1,   705,    37,   827,    -1,   457,   748,
      -1,    -1,   440,   696,    -1,    -1,   862,   856,    -1,   862,
     856,   818,   834,    -1,   345,   886,    -1,   889,    -1,    28,
      -1,   885,    -1,   414,   481,    -1,   418,   220,   232,    -1,
     888,   636,    -1,   401,   636,    -1,   401,   889,    -1,   888,
     889,    -1,   888,   414,   481,    -1,   888,   418,   220,   232,
      -1,   888,    28,    -1,   888,    -1,   379,    -1,   126,    -1,
     827,    -1,   889,   500,   827,    -1,    57,   751,    -1,    94,
     606,   452,   818,   595,   849,    37,   636,   892,    -1,    94,
     291,   343,   606,   452,   818,   595,   849,    37,   636,   892,
      -1,    94,   606,   333,   452,   818,   498,   599,   499,   849,
      37,   636,   892,    -1,    94,   291,   343,   606,   333,   452,
     818,   498,   599,   499,   849,    37,   636,   892,    -1,   460,
      68,   289,    -1,   460,    60,    68,   289,    -1,   460,   237,
      68,   289,    -1,    -1,    94,   606,   405,   895,    37,   636,
     894,    -1,    94,   606,   405,   189,   271,   151,   895,    37,
     636,   894,    -1,    94,   291,   343,   606,   405,   895,    37,
     636,   894,    -1,   460,   108,    -1,   460,   269,   108,    -1,
      -1,   818,   595,   582,   574,    -1,    20,    -1,    21,    -1,
      22,    -1,    23,    -1,    24,    -1,    25,    -1,    26,    -1,
      27,    -1,    29,    -1,    30,    -1,    31,    -1,    39,    -1,
      40,    -1,    42,    -1,    43,    -1,    44,    -1,    46,    -1,
      47,    -1,    48,    -1,    55,    -1,    56,    -1,    57,    -1,
      58,    -1,    59,    -1,    60,    -1,    63,    -1,    64,    -1,
      67,    -1,    69,    -1,    70,    -1,    71,    -1,    72,    -1,
      77,    -1,    78,    -1,    79,    -1,    80,    -1,    81,    -1,
      82,    -1,    84,    -1,    85,    -1,    86,    -1,    88,    -1,
      89,    -1,    90,    -1,    91,    -1,    92,    -1,    93,    -1,
      96,    -1,    97,    -1,    98,    -1,   106,    -1,   107,    -1,
     108,    -1,   109,    -1,   110,    -1,   111,    -1,   112,    -1,
     115,    -1,   117,    -1,   119,    -1,   120,    -1,   121,    -1,
     122,    -1,   123,    -1,   124,    -1,   126,    -1,   127,    -1,
     128,    -1,   129,    -1,   130,    -1,   133,    -1,   134,    -1,
     135,    -1,   136,    -1,   137,    -1,   139,    -1,   140,    -1,
     141,    -1,   143,    -1,   144,    -1,   145,    -1,   147,    -1,
     148,    -1,   149,    -1,   150,    -1,   152,    -1,   153,    -1,
     154,    -1,   155,    -1,   156,    -1,   159,    -1,   161,    -1,
     162,    -1,   164,    -1,   166,    -1,   168,    -1,   172,    -1,
     173,    -1,   176,    -1,   178,    -1,   182,    -1,   184,    -1,
     185,    -1,   186,    -1,   187,    -1,   188,    -1,   189,    -1,
     190,    -1,   192,    -1,   193,    -1,   194,    -1,   195,    -1,
     197,    -1,   198,    -1,   199,    -1,   200,    -1,   201,    -1,
     202,    -1,   204,    -1,   207,    -1,   208,    -1,   209,    -1,
     210,    -1,   211,    -1,   217,    -1,   220,    -1,   222,    -1,
     223,    -1,   224,    -1,   225,    -1,   226,    -1,   227,    -1,
     230,    -1,   232,    -1,   235,    -1,   236,    -1,   237,    -1,
     240,    -1,   241,    -1,   242,    -1,   243,    -1,   244,    -1,
     246,    -1,   247,    -1,   248,    -1,   249,    -1,   250,    -1,
     251,    -1,   252,    -1,   253,    -1,   254,    -1,   255,    -1,
     256,    -1,   257,    -1,   258,    -1,   259,    -1,   260,    -1,
     261,    -1,   262,    -1,   263,    -1,   267,    -1,   268,    -1,
     269,    -1,   272,    -1,   273,    -1,   275,    -1,   278,    -1,
     280,    -1,   281,    -1,   282,    -1,   284,    -1,   285,    -1,
     288,    -1,   289,    -1,   290,    -1,   293,    -1,   296,    -1,
     299,    -1,   300,    -1,   301,    -1,   302,    -1,   303,    -1,
     304,    -1,   305,    -1,   306,    -1,   307,    -1,   308,    -1,
     310,    -1,   311,    -1,   313,    -1,   314,    -1,   316,    -1,
     317,    -1,   318,    -1,   320,    -1,   321,    -1,   322,    -1,
     323,    -1,   324,    -1,   325,    -1,   327,    -1,   328,    -1,
     329,    -1,   331,    -1,   332,    -1,   333,    -1,   334,    -1,
     336,    -1,   337,    -1,   338,    -1,   339,    -1,   340,    -1,
     341,    -1,   342,    -1,   343,    -1,   344,    -1,   345,    -1,
     346,    -1,   347,    -1,   348,    -1,   350,    -1,   351,    -1,
     353,    -1,   354,    -1,   355,    -1,   357,    -1,   358,    -1,
     359,    -1,   360,    -1,   361,    -1,   362,    -1,   363,    -1,
     364,    -1,   365,    -1,   366,    -1,   367,    -1,   369,    -1,
     370,    -1,   371,    -1,   372,    -1,   373,    -1,   375,    -1,
     377,    -1,   378,    -1,   379,    -1,   381,    -1,   382,    -1,
     384,    -1,   386,    -1,   387,    -1,   388,    -1,   389,    -1,
     390,    -1,   391,    -1,   392,    -1,   393,    -1,   394,    -1,
     395,    -1,   396,    -1,   397,    -1,   399,    -1,   401,    -1,
     403,    -1,   404,    -1,   406,    -1,   408,    -1,   409,    -1,
     410,    -1,   411,    -1,   412,    -1,   418,    -1,   419,    -1,
     421,    -1,   424,    -1,   425,    -1,   427,    -1,   428,    -1,
     429,    -1,   430,    -1,   431,    -1,   434,    -1,   435,    -1,
     436,    -1,   437,    -1,   438,    -1,   441,    -1,   442,    -1,
     443,    -1,   444,    -1,   445,    -1,   449,    -1,   451,    -1,
     452,    -1,   453,    -1,   454,    -1,   455,    -1,   458,    -1,
     461,    -1,   462,    -1,   463,    -1,   464,    -1,   465,    -1,
     466,    -1,   478,    -1,   479,    -1,   480,    -1,   481,    -1,
      49,    -1,    50,    -1,    52,    -1,    53,    -1,    65,    -1,
      66,    -1,    73,    -1,   113,    -1,   114,    -1,   151,    -1,
     157,    -1,   163,    -1,   174,    -1,   180,    -1,   181,    -1,
     206,    -1,   212,    -1,   213,    -1,   215,    -1,   245,    -1,
     264,    -1,   266,    -1,   270,    -1,   277,    -1,   279,    -1,
     294,    -1,   298,    -1,   312,    -1,   315,    -1,   330,    -1,
     356,    -1,   376,    -1,   383,    -1,   398,    -1,   400,    -1,
     414,    -1,   415,    -1,   420,    -1,   422,    -1,   426,    -1,
     446,    -1,   447,    -1,   467,    -1,   468,    -1,   469,    -1,
     470,    -1,   471,    -1,   472,    -1,   473,    -1,   474,    -1,
     475,    -1,   476,    -1,   477,    -1,    45,    -1,    51,    -1,
      75,    -1,    83,    -1,    95,    -1,    99,    -1,   100,    -1,
     101,    -1,   102,    -1,   105,    -1,   169,    -1,   171,    -1,
     174,    -1,   175,    -1,   191,    -1,   205,    -1,   218,    -1,
     219,    -1,   221,    -1,   231,    -1,   233,    -1,   245,    -1,
     265,    -1,   274,    -1,   295,    -1,   297,    -1,   352,    -1,
     374,    -1,   380,    -1,   398,    -1,   407,    -1,   439,    -1,
     450,    -1,    45,    -1,    51,    -1,    75,    -1,    83,    -1,
      95,    -1,    99,    -1,   100,    -1,   101,    -1,   102,    -1,
     105,    -1,   169,    -1,   171,    -1,   175,    -1,   191,    -1,
     205,    -1,   218,    -1,   219,    -1,   221,    -1,   231,    -1,
     233,    -1,   265,    -1,   274,    -1,   295,    -1,   297,    -1,
     352,    -1,   374,    -1,   380,    -1,   407,    -1,   426,    -1,
     439,    -1,   450,    -1,    45,    -1,    49,    -1,    50,    -1,
      51,    -1,    52,    -1,    53,    -1,    66,    -1,    65,    -1,
      73,    -1,    75,    -1,    83,    -1,    95,    -1,    99,    -1,
     100,    -1,   101,    -1,   102,    -1,   105,    -1,   113,    -1,
     114,    -1,   151,    -1,   157,    -1,   163,    -1,   169,    -1,
     171,    -1,   174,    -1,   175,    -1,   180,    -1,   181,    -1,
     191,    -1,   205,    -1,   206,    -1,   213,    -1,   215,    -1,
     212,    -1,   218,    -1,   219,    -1,   221,    -1,   231,    -1,
     233,    -1,   245,    -1,   264,    -1,   265,    -1,   266,    -1,
     270,    -1,   274,    -1,   277,    -1,   279,    -1,   295,    -1,
     294,    -1,   297,    -1,   298,    -1,   312,    -1,   315,    -1,
     330,    -1,   352,    -1,   356,    -1,   374,    -1,   376,    -1,
     380,    -1,   383,    -1,   398,    -1,   400,    -1,   407,    -1,
     414,    -1,   415,    -1,   420,    -1,   422,    -1,   426,    -1,
     439,    -1,   446,    -1,   447,    -1,   450,    -1,   467,    -1,
     468,    -1,   469,    -1,   470,    -1,   471,    -1,   472,    -1,
     473,    -1,   474,    -1,   475,    -1,   476,    -1,   477,    -1,
      45,    -1,    51,    -1,    75,    -1,    83,    -1,    95,    -1,
      99,    -1,   100,    -1,   101,    -1,   102,    -1,   105,    -1,
     169,    -1,   171,    -1,   174,    -1,   175,    -1,   191,    -1,
     205,    -1,   218,    -1,   219,    -1,   221,    -1,   231,    -1,
     233,    -1,   245,    -1,   265,    -1,   274,    -1,   295,    -1,
     297,    -1,   352,    -1,   374,    -1,   380,    -1,   398,    -1,
     407,    -1,   426,    -1,   439,    -1,   450,    -1,    28,    -1,
      32,    -1,    33,    -1,    34,    -1,    35,    -1,    36,    -1,
      37,    -1,    38,    -1,    41,    -1,    54,    -1,    61,    -1,
      62,    -1,    68,    -1,    74,    -1,    76,    -1,    87,    -1,
      94,    -1,   103,    -1,   104,    -1,   116,    -1,   118,    -1,
     125,    -1,   131,    -1,   132,    -1,   138,    -1,   142,    -1,
     146,    -1,   158,    -1,   160,    -1,   165,    -1,   167,    -1,
     170,    -1,   177,    -1,   179,    -1,   183,    -1,   196,    -1,
     203,    -1,   214,    -1,   216,    -1,   228,    -1,   229,    -1,
     234,    -1,   238,    -1,   239,    -1,   271,    -1,   276,    -1,
     283,    -1,   286,    -1,   287,    -1,   291,    -1,   292,    -1,
     309,    -1,   319,    -1,   326,    -1,   335,    -1,   349,    -1,
     368,    -1,   385,    -1,   402,    -1,   405,    -1,   413,    -1,
     416,    -1,   417,    -1,   423,    -1,   432,    -1,   433,    -1,
     440,    -1,   448,    -1,   456,    -1,   457,    -1,   459,    -1,
     460,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   466,   466,   482,   494,   503,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   538,
       9,    18,    27,    36,    45,    54,    63,    72,    85,    87,
      93,    94,    99,   103,   107,   118,   126,   130,   139,   148,
     157,   166,   175,   184,   192,   200,   209,   218,   227,   236,
     253,   262,   271,   280,   290,   303,   318,   327,   335,   350,
     358,   368,   378,   385,   392,   400,   407,   418,   419,   424,
     428,   433,   438,   446,   447,   452,   456,   457,   458,     7,
      13,    19,    25,     6,    15,    25,    35,    45,    55,    65,
      75,    85,    95,   106,   117,   127,   140,   141,     8,    21,
      27,    34,    40,    47,    57,    61,    70,    79,    88,    95,
      96,   101,   113,   118,   143,   153,   163,   169,   180,   191,
     206,   207,   213,   214,   219,   220,   226,   227,   231,   232,
     237,   239,   245,   246,   250,   251,   254,   255,   260,     7,
       7,    14,    22,     9,    19,    32,    33,     7,    14,    31,
      51,    52,     9,    17,    29,    30,    34,    35,    36,    41,
      42,    43,    48,    52,    56,    60,    64,    68,    72,    76,
      80,    84,    88,    92,    97,   101,   105,   112,   113,   117,
     118,   119,     2,     9,    15,    21,    28,    35,    45,    46,
      47,     7,    21,    36,    56,    57,    84,    85,    86,    87,
      88,    89,    93,    94,    99,   104,   105,   106,   107,   108,
     113,   120,   121,   122,   139,   146,   153,   163,   173,   185,
     193,   202,   220,   221,   225,   226,   230,   239,   262,   276,
     283,   288,   290,   292,   294,   297,   300,   301,   302,   303,
     308,   312,   313,   318,   325,   330,   331,   332,   333,   334,
     335,   336,   337,   343,   344,   348,   353,   360,   367,   374,
     386,   387,   388,   389,   393,   398,   399,   400,   405,   410,
     411,   412,   413,   414,   415,   420,   440,   469,   470,   474,
     478,   479,   480,   484,   488,   496,   497,   502,   503,   504,
     508,   516,   517,   522,   523,   527,   532,   536,   540,   545,
     553,   554,   558,   559,   563,   564,   570,   581,   594,   608,
     622,   636,   650,   673,   677,   684,   688,   696,   701,   708,
     718,   719,   720,   721,   722,   729,   736,   737,   742,   743,
       9,    19,    29,    39,    49,    59,    69,    79,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   113,   114,   115,   116,   117,   118,
     119,   124,   125,   130,   131,   132,   137,   138,   139,   142,
     143,     8,    20,    36,    37,    41,    45,     7,     1,    30,
      53,    54,    59,    63,    68,    72,    80,    81,    85,    86,
      91,    92,    96,    97,   102,   103,   104,   105,   106,   111,
     119,   123,   128,   129,   134,   138,   143,   147,   151,   155,
     159,   163,   167,   171,   175,   179,   183,   187,   191,   195,
     203,   209,   210,   211,   216,   220,    47,    48,    52,    53,
      68,    69,    76,    84,    92,   100,   108,   116,   127,   128,
     155,   171,   188,   189,   208,   212,   216,   233,   240,   247,
     257,   258,   261,   273,   284,   292,   297,   302,   307,   312,
     320,   328,   333,   338,   345,   346,   350,   351,   352,   359,
     360,   364,   365,   369,   370,   371,   375,   376,   380,   381,
     391,   404,   405,   408,   417,   428,   429,   430,   433,   434,
     435,   439,   440,   441,   442,   446,   447,   451,   453,   469,
     471,   476,   479,   487,   491,   495,   499,   503,   507,   514,
     519,   526,   527,   531,   535,   539,   543,   550,   557,   558,
     563,   564,   568,   569,   574,   576,   578,   583,   603,   604,
     606,   611,   612,   616,   617,   620,   621,   646,   647,   652,
     657,   661,   662,   666,   667,   671,   672,   673,   674,   675,
     679,   692,   699,   706,   713,   714,   718,   719,   723,   724,
     728,   729,   733,   734,   738,   739,   743,   754,   755,   756,
     757,   761,   762,   767,   768,   769,   778,   784,   793,   794,
     807,   808,   812,   813,   817,   818,   824,   830,   838,   846,
     855,   864,   868,   894,   898,   911,   925,   940,   952,   968,
     974,   979,   985,   992,   993,  1001,  1005,  1009,  1015,  1022,
    1027,  1028,  1029,  1030,  1034,  1035,  1047,  1048,  1053,  1060,
    1067,  1074,  1106,  1117,  1130,  1135,  1136,  1139,  1140,  1143,
    1144,  1149,  1150,  1155,  1159,  1165,  1186,  1194,  1207,  1210,
    1214,  1214,  1217,  1218,  1220,  1225,  1232,  1237,  1243,  1248,
    1254,  1260,  1269,  1271,  1274,  1278,  1279,  1280,  1281,  1282,
    1283,  1288,  1308,  1309,  1310,  1311,  1322,  1336,  1337,  1343,
    1348,  1353,  1358,  1363,  1368,  1373,  1378,  1384,  1390,  1396,
    1403,  1425,  1434,  1438,  1446,  1450,  1458,  1470,  1491,  1495,
    1501,  1505,  1518,  1526,  1536,  1538,  1540,  1542,  1544,  1546,
    1551,  1552,  1559,  1568,  1576,  1585,  1596,  1604,  1605,  1606,
    1610,  1610,  1613,  1613,  1616,  1616,  1619,  1619,  1622,  1622,
    1625,  1625,  1628,  1628,  1631,  1631,  1634,  1636,  1638,  1640,
    1642,  1644,  1646,  1648,  1650,  1655,  1660,  1666,  1673,  1678,
    1684,  1690,  1721,  1723,  1725,  1733,  1748,  1750,  1752,  1754,
    1756,  1758,  1760,  1762,  1764,  1766,  1768,  1770,  1772,  1774,
    1776,  1779,  1781,  1783,  1786,  1788,  1790,  1792,  1795,  1800,
    1805,  1812,  1817,  1824,  1829,  1836,  1841,  1849,  1857,  1865,
    1873,  1891,  1899,  1907,  1915,  1923,  1931,  1935,  1939,  1943,
    1951,  1967,  1975,  1983,  1991,  1999,  2007,  2015,  2019,  2023,
    2027,  2031,  2039,  2047,  2055,  2063,  2083,  2105,  2116,  2123,
    2137,  2153,  2155,  2157,  2159,  2161,  2163,  2165,  2167,  2169,
    2171,  2173,  2175,  2177,  2179,  2181,  2183,  2185,  2187,  2189,
    2191,  2193,  2197,  2201,  2205,  2219,  2220,  2221,  2228,  2240,
    2255,  2267,  2269,  2281,  2292,  2316,  2327,  2336,  2340,  2347,
    2355,  2363,  2374,  2382,  2410,  2446,  2457,  2458,  2465,  2471,
    2475,  2479,  2483,  2487,  2491,  2495,  2499,  2503,  2507,  2511,
    2515,  2519,  2523,  2527,  2531,  2533,  2535,  2539,  2548,  2553,
    2560,  2575,  2582,  2586,  2590,  2594,  2598,  2612,  2613,  2617,
    2618,  2622,  2623,  2630,  2631,  2635,  2636,  2641,  2649,  2651,
    2665,  2668,  2695,  2696,  2699,  2700,  2711,  2717,  2724,  2733,
    2750,  2795,  2803,  2811,  2819,  2827,  2848,  2849,  2852,  2853,
    2857,  2867,  2868,  2872,  2873,  2877,  2878,  2879,  2882,  2883,
    2886,  2887,  2888,  2889,  2890,  2891,  2892,  2893,  2894,  2895,
    2896,  2897,  2898,  2901,  2903,  2908,  2910,  2915,  2917,  2919,
    2921,  2923,  2925,  2927,  2929,  2943,  2945,  2949,  2953,  2960,
    2965,  2972,  2977,  2985,  2989,  2995,  2999,  3008,  3019,  3020,
    3024,  3028,  3035,  3036,  3037,  3038,  3039,  3040,  3041,  3042,
    3043,  3044,  3054,  3058,  3065,  3072,  3073,  3089,  3093,  3098,
    3102,  3117,  3122,  3126,  3129,  3132,  3133,  3134,  3137,  3144,
    3154,  3168,  3169,  3173,  3184,  3185,  3188,  3189,  3192,  3196,
    3203,  3207,  3215,  3226,  3227,  3231,  3232,  3236,  3237,  3240,
    3241,  3251,  3252,  3256,  3257,  3261,  3262,  3265,  3281,  3289,
    3297,  3312,  3330,  3331,  3334,  3335,  3338,  3342,  3343,  3347,
    3348,  3351,  3352,  3353,  3363,  3364,  3375,  3379,  3406,  3408,
    3414,  3415,  3418,  3420,  3430,  3433,  3444,  3448,  3452,  3464,
    3468,  3477,  3484,  3522,  3526,  3530,  3534,  3538,  3542,  3546,
    3552,  3553,  3569,  3570,  3571,  3574,  3575,  3581,  3582,  3583,
    3586,  3587,  3588,  3591,  3592,  3593,  3596,  3597,  3600,  3602,
    3607,  3608,  3611,  3619,  3620,  3621,  3622,  3625,  3626,     7,
      18,    19,    23,    24,    25,    26,     7,    16,    34,    41,
      46,    47,    48,    49,     8,    33,    62,    66,    67,    72,
      73,    78,    79,    83,    84,    89,    90,     7,    16,    25,
      34,    43,    52,     5,    11,     7,    20,     9,    16,    26,
      33,    44,    45,    50,    51,    52,    57,    58,    59,    60,
      61,    65,    66,    67,    72,    73,    78,    82,    90,    91,
      96,    97,    98,   104,   109,   117,   118,    10,    16,    22,
      28,    38,    39,    47,    58,    70,    78,    86,    93,   103,
     105,   111,   115,   119,   134,   141,   142,   143,   147,   148,
       7,    14,    20,    28,    29,     8,    22,    36,    48,    56,
      70,    71,    72,    73,    74,    87,    88,    93,    94,    98,
      99,     7,    21,    25,    32,    43,    44,    50,    51,     9,
      19,     2,     7,    14,    24,    25,    32,     3,    10,    17,
      24,    31,    38,    45,    52,    61,    61,    63,    64,     6,
       8,    21,    34,    52,    74,    75,    76,    77,    11,    24,
      37,    54,    55,    56,    61,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENT", "FCONST", "SCONST", "BCONST",
  "XCONST", "Op", "ICONST", "PARAM", "TYPECAST", "DOT_DOT", "COLON_EQUALS",
  "EQUALS_GREATER", "LAMBDA_ARROW", "POWER_OF", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER",
  "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC_P",
  "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE",
  "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT",
  "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P", "CALLED",
  "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN", "CHAR_P",
  "CHARACTER", "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS",
  "CLOSE", "CLUSTER", "COALESCE", "COLLATE", "COLLATION", "COLUMN",
  "COLUMNS", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED", "COMPRESSION",
  "CONCURRENTLY", "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINT",
  "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", "CONVERSION_P", "COPY", "COST",
  "CREATE_P", "CROSS", "CSV", "CUBE", "CURRENT_P", "CURRENT_CATALOG",
  "CURRENT_DATE", "CURRENT_ROLE", "CURRENT_SCHEMA", "CURRENT_TIME",
  "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "CYCLE", "DATA_P",
  "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE", "DEC", "DECIMAL_P",
  "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE", "DEFERRED", "DEFINER",
  "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS", "DESC_P", "DESCRIBE",
  "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD", "DISTINCT", "DO",
  "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH", "ELSE", "ENABLE_P",
  "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE", "EVENT", "EXCEPT",
  "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXPLAIN",
  "EXPORT_P", "EXPORT_STATE", "EXTENSION", "EXTERNAL", "EXTRACT",
  "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
  "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
  "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
  "GRANTED", "GROUP_P", "GROUPING", "GROUPING_ID", "HANDLER", "HAVING",
  "HEADER_P", "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P",
  "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P",
  "IN_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT",
  "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT", "INPUT_P",
  "INSENSITIVE", "INSERT", "INSTALL", "INSTEAD", "INT_P", "INTEGER",
  "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION",
  "JOIN", "JSON", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P",
  "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT",
  "LISTEN", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATION",
  "LOCK_P", "LOCKED", "LOGGED", "MACRO", "MAP", "MAPPING", "MATCH",
  "MATERIALIZED", "MAXVALUE", "METHOD", "MICROSECOND_P", "MICROSECONDS_P",
  "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE",
  "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL",
  "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NONE", "NOT", "NOTHING",
  "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC",
  "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY",
  "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER", "ORDINALITY", "OUT_P",
  "OUTER_P", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER",
  "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD",
  "PERCENT", "PLACING", "PLANS", "POLICY", "POSITION", "PRAGMA_P",
  "PRECEDING", "PRECISION", "PREPARE", "PREPARED", "PRESERVE", "PRIMARY",
  "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM",
  "PUBLICATION", "QUALIFY", "QUOTE", "RANGE", "READ_P", "REAL", "REASSIGN",
  "RECHECK", "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH",
  "REINDEX", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE", "REPLACE",
  "REPLICA", "RESET", "RESPECT_P", "RESTART", "RESTRICT", "RETURNING",
  "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW",
  "ROWS", "RULE", "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCROLL",
  "SEARCH", "SECOND_P", "SECONDS_P", "SECURITY", "SELECT", "SEQUENCE",
  "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SESSION_USER", "SET",
  "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE", "SKIP",
  "SMALLINT", "SNAPSHOT", "SOME", "SQL_P", "STABLE", "STANDALONE_P",
  "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE",
  "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION", "SUBSTRING",
  "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES",
  "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P",
  "THEN", "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION",
  "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED",
  "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED",
  "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED",
  "UNTIL", "UPDATE", "USER", "USING", "VACUUM", "VALID", "VALIDATE",
  "VALIDATOR", "VALUE_P", "VALUES", "VARCHAR", "VARIADIC", "VARYING",
  "VERBOSE", "VERSION_P", "VIEW", "VIEWS", "VIRTUAL", "VOLATILE", "WHEN",
  "WHERE", "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK",
  "WRAPPER", "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT",
  "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE",
  "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P",
  "YES_P", "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "'{'", "'}'", "'#'", "'?'",
  "':'", "$accept", "stmtblock", "stmtmulti", "stmt", "AlterTableStmt",
  "alter_identity_column_option_list", "alter_column_default",
  "alter_identity_column_option", "alter_generic_option_list",
  "alter_table_cmd", "alter_using", "alter_generic_option_elem",
  "alter_table_cmds", "alter_generic_options", "opt_set_data",
  "DeallocateStmt", "RenameStmt", "opt_column", "InsertStmt",
  "insert_rest", "insert_target", "opt_conf_expr", "opt_with_clause",
  "insert_column_item", "set_clause", "opt_on_conflict", "index_elem",
  "returning_clause", "override_kind", "set_target_list", "opt_collate",
  "opt_class", "insert_column_list", "set_clause_list",
  "set_clause_list_opt_comma", "index_params", "set_target",
  "CreateTypeStmt", "PragmaStmt", "CreateSeqStmt", "OptSeqOptList",
  "ExecuteStmt", "execute_param_clause", "AlterSeqStmt", "SeqOptList",
  "opt_with", "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst",
  "TransactionStmt", "opt_transaction", "CreateStmt",
  "ConstraintAttributeSpec", "def_arg", "OptParenthesizedSeqOptList",
  "generic_option_arg", "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "DropStmt",
  "drop_type_any_name", "drop_type_name", "any_name_list",
  "opt_drop_behavior", "drop_type_name_on_any_name", "type_name_list",
  "CreateFunctionStmt", "macro_alias", "param_list", "UpdateStmt",
  "CopyStmt", "copy_from", "copy_delimiter", "copy_generic_opt_arg_list",
  "opt_using", "opt_as", "opt_program", "copy_options",
  "copy_generic_opt_arg", "copy_generic_opt_elem", "opt_oids",
  "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "SelectStmt", "select_with_parens",
  "select_no_parens", "select_clause", "simple_select", "with_clause",
  "cte_list", "common_table_expr", "into_clause", "OptTempTableName",
  "opt_table", "all_or_distinct", "distinct_clause", "opt_all_clause",
  "opt_ignore_nulls", "opt_sort_clause", "sort_clause", "sortby_list",
  "sortby", "opt_asc_desc", "opt_nulls_order", "select_limit",
  "opt_select_limit", "limit_clause", "offset_clause", "sample_count",
  "sample_clause", "opt_sample_func", "tablesample_entry",
  "tablesample_clause", "opt_tablesample_clause", "opt_repeatable_clause",
  "select_limit_value", "select_offset_value", "select_fetch_first_value",
  "I_or_F_const", "row_or_rows", "first_or_next", "group_clause",
  "group_by_list", "group_by_list_opt_comma", "group_by_item",
  "empty_grouping_set", "rollup_clause", "cube_clause",
  "grouping_sets_clause", "grouping_or_grouping_id", "having_clause",
  "qualify_clause", "for_locking_clause", "opt_for_locking_clause",
  "for_locking_items", "for_locking_item", "for_locking_strength",
  "locked_rels_list", "opt_nowait_or_skip", "values_clause",
  "values_clause_opt_comma", "from_clause", "from_list",
  "from_list_opt_comma", "table_ref", "joined_table", "alias_clause",
  "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
  "join_qual", "relation_expr", "func_table", "rowsfrom_item",
  "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "opt_array_bounds", "SimpleTypename", "ConstTypename", "GenericType",
  "opt_type_modifiers", "Numeric", "opt_float", "Bit", "ConstBit",
  "BitWithLength", "BitWithoutLength", "Character", "ConstCharacter",
  "CharacterWithLength", "CharacterWithoutLength", "character",
  "opt_varying", "ConstDatetime", "ConstInterval", "opt_timezone",
  "year_keyword", "month_keyword", "day_keyword", "hour_keyword",
  "minute_keyword", "second_keyword", "millisecond_keyword",
  "microsecond_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "func_application", "func_expr", "func_expr_windowless",
  "func_expr_common_subexpr", "within_group_clause", "filter_clause",
  "export_clause", "window_clause", "window_definition_list",
  "window_definition", "over_clause", "window_specification",
  "opt_existing_window_name", "opt_partition_clause", "opt_frame_clause",
  "frame_extent", "frame_bound", "qualified_row", "row", "dict_arg",
  "dict_arguments", "dict_arguments_opt_comma", "sub_type", "all_Op",
  "MathOp", "qual_Op", "qual_all_Op", "subquery_Op", "any_operator",
  "expr_list", "expr_list_opt_comma", "opt_expr_list_opt_comma",
  "func_arg_list", "func_arg_expr", "type_list", "extract_list",
  "extract_arg", "overlay_list", "overlay_placing", "position_list",
  "substr_list", "substr_from", "substr_for", "trim_list", "in_expr",
  "case_expr", "when_clause_list", "when_clause", "case_default",
  "case_arg", "columnref", "indirection_el", "opt_slice_bound",
  "indirection", "opt_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "qualified_name", "name_list",
  "name_list_opt_comma", "name", "attr_name", "func_name", "AexprConst",
  "Iconst", "Sconst", "ColId", "ColIdOrString", "type_function_name",
  "function_name_token", "type_name_token", "any_name", "attrs",
  "opt_name_list", "param_name", "ColLabel", "ColLabelOrString",
  "PrepareStmt", "prep_type_clause", "PreparableStmt", "CreateSchemaStmt",
  "OptSchemaEltList", "schema_stmt", "IndexStmt", "access_method",
  "access_method_clause", "opt_concurrently", "opt_index_name",
  "opt_reloptions", "opt_unique", "AlterObjectSchemaStmt",
  "CheckPointStmt", "ExportStmt", "ImportStmt", "ExplainStmt",
  "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "VariableSetStmt", "set_rest", "generic_set",
  "var_value", "zone_value", "var_list", "LoadStmt", "file_name",
  "VacuumStmt", "vacuum_option_elem", "opt_full", "vacuum_option_list",
  "opt_freeze", "DeleteStmt", "relation_expr_opt_alias",
  "where_or_current_clause", "using_clause", "AnalyzeStmt",
  "VariableResetStmt", "generic_reset", "reset_rest", "VariableShowStmt",
  "show_or_describe", "var_name", "CallStmt", "ViewStmt",
  "opt_check_option", "CreateAsStmt", "opt_with_data", "create_as_target",
  "unreserved_keyword", "col_name_keyword", "func_name_keyword",
  "type_name_keyword", "other_keyword", "type_func_name_keyword",
  "reserved_keyword", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,    60,    62,    61,   740,    43,
      45,    42,    47,    37,    94,   741,    91,    93,    40,    41,
      46,    59,    44,   123,   125,    35,    63,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   508,   509,   510,   510,   511,   511,   511,   511,   511,
     511,   511,   511,   511,   511,   511,   511,   511,   511,   511,
     511,   511,   511,   511,   511,   511,   511,   511,   511,   511,
     511,   511,   511,   511,   511,   511,   511,   511,   511,   511,
     512,   512,   512,   512,   512,   512,   512,   512,   513,   513,
     514,   514,   515,   515,   515,   515,   516,   516,   517,   517,
     517,   517,   517,   517,   517,   517,   517,   517,   517,   517,
     517,   517,   517,   517,   517,   517,   517,   517,   517,   517,
     517,   517,   517,   517,   517,   517,   517,   518,   518,   519,
     519,   519,   519,   520,   520,   521,   522,   522,   522,   523,
     523,   523,   523,   524,   524,   524,   524,   524,   524,   524,
     524,   524,   524,   524,   524,   524,   525,   525,   526,   527,
     527,   527,   527,   527,   528,   528,   529,   529,   529,   530,
     530,   531,   532,   532,   533,   533,   533,   534,   534,   534,
     535,   535,   536,   536,   537,   537,   538,   538,   539,   539,
     540,   540,   541,   541,   542,   542,   543,   543,   544,   545,
     546,   546,   546,   547,   547,   548,   548,   549,   549,   549,
     550,   550,   551,   551,   552,   552,   553,   553,   553,   554,
     554,   554,   554,   555,   555,   555,   555,   555,   555,   555,
     555,   555,   555,   555,   555,   555,   555,   556,   556,   557,
     557,   557,   558,   558,   558,   558,   558,   558,   559,   559,
     559,   560,   560,   560,   561,   561,   562,   562,   562,   562,
     562,   562,   563,   563,   564,   565,   565,   565,   565,   565,
     566,   566,   566,   566,   567,   567,   567,   567,   567,   567,
     567,   567,   568,   568,   569,   569,   570,   570,   570,   571,
     572,   573,   573,   573,   573,   573,   574,   574,   574,   574,
     575,   576,   576,   577,   577,   578,   578,   578,   578,   578,
     578,   578,   578,   579,   579,   580,   581,   581,   581,   581,
     582,   582,   582,   582,   583,   584,   584,   584,   585,   586,
     586,   586,   586,   586,   586,   587,   587,   588,   588,   589,
     590,   590,   590,   591,   591,   592,   592,   593,   593,   593,
     594,   595,   595,   596,   596,   597,   598,   598,   598,   598,
     599,   599,   600,   600,   601,   601,   601,   602,   602,   602,
     602,   602,   602,   603,   603,   604,   604,   604,   604,   605,
     606,   606,   606,   606,   606,   606,   606,   606,   607,   607,
     608,   608,   608,   608,   608,   608,   608,   608,   609,   609,
     609,   609,   609,   609,   609,   609,   609,   609,   609,   609,
     609,   609,   609,   609,   610,   610,   610,   610,   610,   610,
     610,   611,   611,   612,   612,   612,   613,   613,   613,   614,
     614,   615,   615,   616,   616,   617,   617,   618,   619,   619,
     620,   620,   621,   621,   622,   622,   623,   623,   624,   624,
     625,   625,   626,   626,   627,   627,   627,   627,   627,   628,
     629,   629,   630,   630,   631,   631,   632,   632,   632,   632,
     632,   632,   632,   632,   632,   632,   632,   632,   632,   632,
     633,   634,   634,   634,   635,   635,   636,   636,   637,   637,
     638,   638,   638,   638,   638,   638,   638,   638,   639,   639,
     640,   640,   640,   640,   640,   640,   640,   641,   641,   641,
     642,   642,   643,   644,   644,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   646,   646,   647,   647,   647,   648,
     648,   649,   649,   650,   650,   650,   651,   651,   652,   652,
     652,   653,   653,   654,   654,   655,   655,   655,   656,   656,
     656,   657,   657,   657,   657,   658,   658,   659,   659,   659,
     659,   660,   660,   661,   661,   661,   661,   661,   661,   662,
     662,   663,   663,   664,   664,   664,   664,   665,   666,   666,
     667,   667,   668,   668,   668,   668,   668,   669,   670,   670,
     670,   671,   671,   672,   672,   673,   673,   674,   674,   674,
     674,   675,   675,   676,   676,   677,   677,   677,   677,   677,
     678,   679,   680,   681,   682,   682,   683,   683,   684,   684,
     685,   685,   686,   686,   687,   687,   688,   689,   689,   689,
     689,   690,   690,   691,   691,   691,   692,   692,   693,   693,
     694,   694,   695,   695,   696,   696,   697,   697,   697,   697,
     697,   697,   697,   698,   698,   698,   698,   698,   698,   699,
     699,   699,   699,   700,   700,   701,   701,   701,   701,   701,
     702,   702,   702,   702,   703,   703,   704,   704,   705,   705,
     705,   705,   706,   706,   707,   708,   708,   709,   709,   710,
     710,   711,   711,   712,   712,   713,   714,   714,   715,   715,
     716,   716,   717,   717,   718,   718,   718,   718,   718,   718,
     718,   718,   719,   719,   719,   720,   720,   720,   720,   720,
     720,   720,   721,   721,   721,   721,   722,   723,   723,   724,
     724,   724,   724,   724,   724,   724,   724,   724,   724,   724,
     725,   725,   726,   726,   727,   727,   728,   729,   730,   730,
     731,   731,   732,   733,   734,   734,   734,   734,   734,   734,
     735,   735,   736,   736,   736,   736,   737,   738,   738,   738,
     739,   739,   740,   740,   741,   741,   742,   742,   743,   743,
     744,   744,   745,   745,   746,   746,   747,   747,   747,   747,
     747,   747,   747,   747,   747,   747,   747,   747,   747,   747,
     747,   747,   748,   748,   748,   748,   748,   748,   748,   748,
     748,   748,   748,   748,   748,   748,   748,   748,   748,   748,
     748,   748,   748,   748,   748,   748,   748,   748,   748,   748,
     748,   748,   748,   748,   748,   748,   748,   748,   748,   748,
     748,   748,   748,   748,   748,   748,   748,   748,   748,   748,
     748,   748,   748,   748,   748,   748,   748,   748,   748,   748,
     748,   748,   748,   748,   748,   748,   748,   748,   748,   748,
     748,   749,   749,   749,   749,   749,   749,   749,   749,   749,
     749,   749,   749,   749,   749,   749,   749,   749,   749,   749,
     749,   749,   749,   749,   749,   750,   750,   750,   750,   750,
     750,   750,   750,   750,   750,   750,   750,   751,   751,   751,
     751,   751,   751,   751,   752,   752,   753,   753,   754,   754,
     754,   754,   754,   754,   754,   754,   754,   754,   754,   754,
     754,   754,   754,   754,   754,   754,   754,   754,   754,   754,
     754,   754,   754,   754,   754,   754,   754,   755,   755,   756,
     756,   757,   757,   758,   758,   759,   759,   760,   761,   761,
     761,   762,   763,   763,   764,   764,   765,   765,   765,   766,
     766,   767,   767,   767,   767,   767,   768,   768,   769,   769,
     770,   771,   771,   772,   772,   773,   773,   773,   774,   774,
     775,   775,   775,   775,   775,   775,   775,   775,   775,   775,
     775,   775,   775,   776,   776,   777,   777,   778,   778,   778,
     778,   778,   778,   778,   778,   779,   779,   780,   780,   781,
     781,   782,   782,   783,   783,   784,   784,   784,   785,   785,
     786,   786,   787,   787,   787,   787,   787,   787,   787,   787,
     787,   787,   788,   788,   789,   790,   790,   791,   791,   791,
     791,   791,   791,   792,   793,   794,   794,   794,   795,   795,
     796,   797,   797,   798,   799,   799,   800,   800,   801,   801,
     802,   802,   802,   803,   803,   804,   804,   805,   805,   806,
     806,   807,   807,   808,   808,   809,   809,   810,   810,   810,
     810,   810,   811,   811,   812,   812,   813,   814,   814,   815,
     815,   816,   816,   816,   817,   817,   818,   818,   819,   819,
     820,   820,   821,   822,   823,   823,   824,   824,   824,   824,
     824,   824,   824,   824,   824,   824,   824,   824,   824,   824,
     825,   826,   827,   827,   827,   828,   828,   829,   829,   829,
     830,   830,   830,   831,   831,   831,   832,   832,   833,   833,
     834,   834,   835,   836,   836,   836,   836,   837,   837,   838,
     839,   839,   840,   840,   840,   840,   841,   841,   842,   842,
     843,   843,   843,   843,   844,   844,   845,   846,   846,   847,
     847,   848,   848,   849,   849,   850,   850,   851,   851,   851,
     851,   851,   851,   852,   852,   853,   854,   855,   855,   855,
     855,   856,   856,   857,   857,   857,   858,   858,   858,   858,
     858,   859,   859,   859,   860,   860,   861,   861,   862,   862,
     863,   863,   863,   863,   864,   865,   865,   866,   866,   866,
     866,   867,   867,   867,   867,   868,   868,   868,   868,   869,
     869,   870,   870,   870,   870,   870,   870,   870,   871,   871,
     872,   872,   872,   873,   873,   874,   874,   874,   874,   874,
     875,   875,   875,   875,   875,   876,   876,   877,   877,   878,
     878,   879,   880,   880,   880,   881,   881,   882,   882,   883,
     883,   884,   885,   885,   886,   886,   886,   887,   887,   887,
     887,   887,   887,   887,   887,   888,   888,   889,   889,   890,
     891,   891,   891,   891,   892,   892,   892,   892,   893,   893,
     893,   894,   894,   894,   895,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
     896,   896,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
     898,   898,   898,   898,   898,   898,   898,   898,   899,   899,
     899,   899,   899,   899,   899,   899,   899,   899,   899,   899,
     899,   899,   899,   899,   899,   899,   899,   899,   899,   899,
     899,   899,   899,   899,   899,   899,   899,   899,   899,   900,
     900,   900,   900,   900,   900,   900,   900,   900,   900,   900,
     900,   900,   900,   900,   900,   900,   900,   900,   900,   900,
     900,   900,   900,   900,   900,   900,   900,   900,   900,   900,
     900,   900,   900,   900,   900,   900,   900,   900,   900,   900,
     900,   900,   900,   900,   900,   900,   900,   900,   900,   900,
     900,   900,   900,   900,   900,   900,   900,   900,   900,   900,
     900,   900,   900,   900,   900,   900,   900,   900,   900,   900,
     900,   900,   900,   900,   900,   900,   900,   900,   900,   900,
     900,   900,   901,   901,   901,   901,   901,   901,   901,   901,
     901,   901,   901,   901,   901,   901,   901,   901,   901,   901,
     901,   901,   901,   901,   901,   901,   901,   901,   901,   901,
     901,   901,   901,   901,   901,   901,   902,   902,   902,   902,
     902,   902,   902,   902,   902,   902,   902,   902,   902,   902,
     902,   902,   902,   902,   902,   902,   902,   902,   902,   902,
     902,   902,   902,   902,   902,   902,   902,   902,   902,   902,
     902,   902,   902,   902,   902,   902,   902,   902,   902,   902,
     902,   902,   902,   902,   902,   902,   902,   902,   902,   902,
     902,   902,   902,   902,   902,   902,   902,   902,   902,   902,
     902,   902,   902,   902,   902,   902,   902,   902
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       4,     6,     4,     6,     4,     6,     4,     6,     1,     2,
       3,     2,     1,     3,     2,     3,     1,     3,     2,     5,
       3,     6,     4,     6,     6,     6,     5,     5,     6,     9,
       4,     5,     7,     6,     4,     8,     4,     2,     4,     3,
       6,     4,     2,     2,     2,     2,     1,     2,     0,     1,
       2,     2,     2,     1,     3,     4,     2,     1,     0,     2,
       3,     2,     3,     6,     6,     8,     6,     8,     6,     8,
       6,     8,     8,    10,     8,    10,     1,     0,     7,     1,
       4,     4,     7,     2,     1,     3,     4,     3,     0,     1,
       0,     2,     3,     5,     8,     5,     0,     5,     5,     7,
       2,     0,     1,     1,     1,     3,     2,     0,     1,     0,
       1,     3,     1,     3,     1,     2,     1,     3,     2,     5,
       2,     4,     5,     5,     8,     1,     0,     3,     9,    12,
       3,     0,     4,     6,     1,     2,     1,     1,     0,     1,
       2,     2,     1,     2,     2,     1,     2,     3,     2,     2,
       2,     2,     3,     3,     3,     1,     3,     1,     0,     1,
       2,     2,     2,     2,     2,     2,     2,     2,     1,     1,
       0,     9,    12,    11,     0,     2,     1,     1,     1,     1,
       1,     1,     3,     0,     1,     2,     1,     1,     2,     2,
       3,     1,     1,     2,     2,     1,     2,     3,     5,     3,
       2,     5,     1,     1,     1,     0,     5,     7,     5,     2,
       3,     1,     1,     2,     2,     0,     3,     4,     4,     0,
       3,     2,     0,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     3,     1,     2,     2,     2,
       2,     2,     2,     0,     3,     3,     3,     0,     1,     2,
       1,     2,     2,     2,     2,     3,     4,     1,     3,     1,
       1,     1,     1,     3,     1,     2,     0,     1,     2,     0,
       1,     3,     0,     2,     0,     3,     3,     1,     5,     3,
       1,     3,     1,     2,     1,     4,     5,     5,     6,     3,
       7,     4,    11,     1,     3,     2,     2,     2,     0,     3,
       1,     1,     2,     2,     2,     2,     1,     0,     1,     2,
       6,     4,     6,     4,     6,     8,     4,     6,     1,     1,
       1,     1,     2,     1,     2,     1,     2,     1,     1,     1,
       3,     3,     3,     3,     2,     2,     1,     3,     1,     1,
       1,     1,     3,     1,     1,     0,     1,     1,     1,     1,
       3,     8,     7,     1,     1,     2,     3,     8,    11,     9,
       1,     1,     3,     0,     1,     3,     1,     0,     1,     0,
       1,     0,     1,     3,     1,     1,     1,     3,     0,     2,
       2,     0,     2,     0,     1,     0,     1,     1,     1,     3,
       3,     1,     1,     3,     3,     3,     3,     4,     3,     2,
       1,     1,     1,     1,     1,     3,     1,     1,     3,     3,
       1,     2,     4,     4,     2,     3,     5,     5,     1,     1,
      11,    11,     1,     2,     4,     4,     4,     2,     2,     3,
       1,     3,     6,     2,     0,     3,     3,     4,     4,     4,
       4,     3,     2,     1,     1,     0,     1,     1,     0,     1,
       5,     1,     0,     2,     2,     0,     1,     0,     3,     5,
       5,     1,     3,     4,     3,     1,     1,     0,     2,     2,
       0,     2,     2,     1,     1,     1,     0,     2,     4,     5,
       4,     2,     3,     2,     2,     2,     2,     1,     2,     3,
       0,     1,     0,     5,     1,     4,     6,     2,     1,     0,
       4,     0,     1,     1,     2,     2,     2,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     1,     3,     3,     3,
       0,     1,     3,     1,     2,     1,     1,     1,     1,     1,
       2,     4,     4,     5,     1,     1,     2,     0,     2,     0,
       1,     3,     1,     0,     1,     2,     3,     2,     4,     2,
       3,     2,     0,     1,     2,     0,     4,     5,     1,     2,
       2,     0,     1,     3,     1,     2,     3,     3,     3,     3,
       3,     1,     4,     3,     4,     5,     4,     5,     4,     5,
       2,     4,     1,     1,     0,     1,     4,     5,     4,     0,
       2,     2,     2,     1,     1,     0,     4,     2,     1,     2,
       2,     4,     2,     6,     2,     1,     3,     4,     0,     2,
       0,     2,     0,     1,     3,     3,     2,     0,     2,     4,
       1,     1,     1,     0,     2,     3,     5,     6,     2,     3,
       5,     5,     3,     4,     0,     1,     1,     1,     1,     1,
       2,     4,     1,     1,     1,     1,     2,     3,     0,     1,
       1,     1,     1,     1,     2,     2,     2,     2,     2,     1,
       3,     0,     1,     1,     1,     1,     5,     2,     1,     1,
       1,     1,     4,     1,     2,     2,     1,     3,     3,     2,
       1,     0,     5,     2,     5,     2,     1,     3,     3,     0,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     3,     3,     3,     3,     3,
       3,     0,     1,     3,     3,     5,     2,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     2,     2,     3,     3,     2,     2,     3,     3,
       5,     4,     6,     3,     5,     4,     6,     4,     6,     5,
       7,     3,     2,     4,     3,     2,     1,     3,     3,     3,
       3,     3,     4,     3,     4,     3,     4,     5,     6,     6,
       7,     6,     7,     6,     7,     3,     4,     4,     6,     1,
       4,     1,     3,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
       2,     5,     6,     6,     7,     1,     1,     2,     2,     2,
       4,     1,     2,     1,     2,     2,     4,     3,     6,     7,
       9,     7,     7,     4,     5,     1,     1,     1,     5,     1,
       1,     4,     1,     4,     1,     4,     1,     4,     1,     1,
       1,     1,     1,     1,     6,     6,     4,     4,     4,     4,
       6,     5,     5,     5,     4,     6,     4,     5,     0,     5,
       0,     1,     0,     2,     0,     1,     3,     3,     2,     2,
       0,     6,     1,     0,     3,     0,     2,     2,     0,     1,
       4,     2,     2,     2,     2,     2,     4,     3,     1,     5,
       3,     1,     3,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     1,     4,     1,     4,     1,
       2,     1,     2,     1,     2,     1,     3,     1,     3,     1,
       2,     1,     0,     1,     3,     1,     3,     3,     1,     3,
       3,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     3,     2,     3,     0,     3,     3,     2,
       2,     1,     0,     2,     2,     3,     2,     1,     1,     3,
       5,     1,     2,     4,     2,     0,     1,     0,     1,     2,
       2,     3,     5,     1,     0,     1,     2,     0,     2,     1,
       0,     1,     0,     1,     3,     1,     2,     3,     2,     1,
       3,     5,     4,     2,     1,     0,     3,     1,     3,     1,
       2,     4,     2,     0,     1,     3,     1,     2,     1,     3,
       1,     2,     1,     1,     1,     2,     1,     1,     2,     1,
       1,     2,     7,     2,     5,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     3,
       3,     0,     1,     1,     1,     1,     1,     1,     1,     5,
       3,     0,     1,     1,     1,     1,     4,     7,     2,     0,
       1,     1,     1,     1,    13,    16,     1,     2,     0,     1,
       0,     1,     0,     2,     0,     1,     0,     6,     8,     6,
       8,     6,     8,     2,     1,     4,     3,     2,     4,     3,
       5,     1,     0,     1,     1,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     1,     1,
       1,     1,     1,     1,     2,     1,     1,     2,     3,     3,
       3,     1,     3,     3,     2,     3,     3,     3,     3,     1,
       1,     1,     1,     3,     5,     1,     1,     1,     1,     3,
       2,     2,     3,     1,     1,     4,     5,     5,     4,     6,
       1,     1,     1,     1,     1,     1,     0,     1,     3,     1,
       0,     7,     1,     2,     3,     2,     0,     2,     0,     2,
       4,     2,     1,     1,     1,     2,     3,     2,     2,     2,
       2,     3,     4,     2,     1,     1,     1,     1,     3,     2,
       9,    11,    12,    14,     3,     4,     4,     0,     7,    10,
       9,     2,     3,     0,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
     130,   210,     0,  1179,  1178,   210,     0,  1154,   210,   425,
     347,     0,  1256,     0,   210,     0,   130,     0,     0,     0,
       0,     0,     0,     0,     0,   210,   492,     0,  1255,   210,
       0,     0,  1226,     0,     0,     0,     0,     0,     2,     4,
       7,    18,    30,    26,     0,    17,    28,    15,    21,     6,
      32,    16,    20,    13,    33,    11,    31,   459,   446,   497,
     458,   129,   598,   462,    29,    14,    25,     5,    10,    23,
      24,    22,  1162,    36,    27,    34,    19,     8,    35,    37,
    1254,     9,    38,    12,   209,   208,   202,     0,     0,     0,
       0,     0,   203,  1092,  1275,  1276,  1277,  1278,  1279,  1280,
    1281,  1282,  1283,  1284,  1285,  1286,  1287,  1288,  1289,  1290,
    1635,  1291,  1292,  1293,  1582,  1583,  1636,  1584,  1585,  1294,
    1295,  1296,  1297,  1298,  1299,  1300,  1301,  1586,  1587,  1302,
    1303,  1304,  1305,  1306,  1588,  1637,  1307,  1308,  1309,  1310,
    1311,  1312,  1638,  1313,  1314,  1315,  1316,  1317,  1318,  1319,
    1320,  1321,  1639,  1322,  1323,  1324,  1640,  1641,  1642,  1643,
    1644,  1325,  1326,  1327,  1328,  1329,  1330,  1331,  1589,  1590,
    1332,  1333,  1334,  1335,  1336,  1337,  1338,  1339,  1340,  1341,
    1342,  1343,  1344,  1345,  1346,  1347,  1348,  1349,  1350,  1351,
    1352,  1353,  1354,  1355,  1356,  1357,  1358,  1359,  1591,  1360,
    1361,  1362,  1363,  1364,  1592,  1365,  1366,  1367,  1593,  1368,
    1369,  1370,  1645,  1646,  1371,  1372,  1594,  1648,  1373,  1374,
    1595,  1596,  1375,  1376,  1377,  1378,  1379,  1380,  1381,  1382,
    1649,  1383,  1384,  1385,  1386,  1387,  1388,  1389,  1390,  1391,
    1392,  1393,  1650,  1597,  1394,  1395,  1396,  1397,  1398,  1598,
    1599,  1600,  1399,  1651,  1652,  1400,  1653,  1401,  1402,  1403,
    1404,  1405,  1406,  1407,  1654,  1408,  1655,  1409,  1410,  1411,
    1412,  1413,  1414,  1415,  1416,  1601,  1417,  1418,  1419,  1420,
    1421,  1422,  1423,  1424,  1425,  1426,  1427,  1428,  1429,  1430,
    1431,  1432,  1433,  1434,  1602,  1657,  1603,  1435,  1436,  1437,
    1604,  1438,  1439,  1658,  1440,  1605,  1441,  1606,  1442,  1443,
    1444,  1445,  1446,  1447,  1448,  1449,  1450,  1607,  1659,  1451,
    1660,  1608,  1452,  1453,  1454,  1455,  1456,  1457,  1458,  1459,
    1460,  1461,  1462,  1463,  1609,  1464,  1465,  1610,  1466,  1467,
    1468,  1469,  1470,  1471,  1472,  1473,  1474,  1475,  1476,  1477,
    1611,  1478,  1479,  1480,  1481,  1482,  1483,  1484,  1485,  1486,
    1487,  1488,  1489,  1490,  1491,  1492,  1493,  1494,  1495,  1496,
    1661,  1497,  1498,  1499,  1612,  1500,  1501,  1502,  1503,  1504,
    1505,  1506,  1507,  1508,  1509,  1510,  1511,  1512,  1513,  1514,
    1515,  1662,  1516,  1613,  1517,  1518,  1519,  1663,  1520,  1521,
    1614,  1522,  1523,  1524,  1525,  1526,  1527,  1528,  1529,  1530,
    1531,  1532,  1533,  1534,  1615,  1535,  1616,  1536,  1537,  1538,
    1539,  1665,  1540,  1541,  1542,  1543,  1544,  1617,  1618,  1545,
    1546,  1619,  1547,  1620,  1548,  1549,  1621,  1550,  1551,  1552,
    1553,  1554,  1555,  1556,  1557,  1558,  1559,  1666,  1560,  1561,
    1562,  1563,  1564,  1622,  1623,  1565,  1667,  1566,  1567,  1568,
    1569,  1570,  1571,  1572,  1573,  1574,  1575,  1576,  1577,  1624,
    1625,  1626,  1627,  1628,  1629,  1630,  1631,  1632,  1633,  1634,
    1578,  1579,  1580,  1581,  1259,     0,     0,  1074,  1093,  1094,
    1102,   205,   424,   130,     0,     0,     0,     0,     0,   341,
     340,     0,  1145,   346,     0,     0,  1092,   101,  1594,  1601,
    1466,  1615,    99,  1072,  1093,     0,   367,   368,     0,   376,
       0,   360,   365,   361,     0,   386,   378,   387,   379,   359,
     380,   369,   358,     0,   388,     0,   363,     0,     0,     0,
     206,   171,   347,   130,     0,  1167,  1168,  1166,  1157,  1162,
    1169,  1170,     0,  1153,     0,     0,  1091,  1213,  1214,  1211,
    1210,   160,  1121,  1243,  1617,  1545,  1257,  1244,  1241,  1242,
     207,   491,   489,     0,  1042,  1373,  1411,  1504,  1515,  1617,
    1187,  1191,     0,   204,  1622,  1248,     0,  1249,  1096,     0,
     463,   638,  1095,  1066,  1225,     0,  1230,     0,  1480,   467,
     470,  1111,   468,   459,     0,     1,   130,     0,     0,     0,
     488,   488,     0,   488,     0,   451,   459,   454,   458,   599,
    1161,  1239,  1253,  1617,  1545,  1247,  1250,  1381,     0,     0,
    1381,     0,  1381,     0,  1381,     0,     0,  1034,     0,  1035,
    1075,  1123,  1124,  1122,     0,  1125,   312,   345,   344,   343,
     342,   347,  1381,  1129,  1106,     0,   393,   394,     0,     0,
       0,     0,     0,  1140,   102,   100,   374,   375,     0,   366,
     362,   364,     0,  1103,  1668,   692,  1669,   721,   699,   721,
     721,  1670,  1671,  1672,  1673,  1674,  1675,  1676,  1677,   688,
     688,  1347,   701,  1678,  1679,  1680,  1381,  1681,  1682,   689,
     690,   726,  1683,  1684,  1685,  1686,  1687,     0,     0,  1688,
     721,  1689,   688,  1690,  1691,   693,  1692,   660,  1693,     0,
    1694,   691,   661,  1695,   729,   729,  1696,  1697,   716,  1698,
     385,     0,   389,   674,   675,   676,   677,   702,   703,   678,
     708,   709,   713,   679,   761,   688,  1104,  1105,  1381,   385,
     381,  1381,   385,  1068,  1381,     0,     0,   167,     0,     0,
    1159,  1171,  1699,  1700,  1701,  1702,  1703,  1704,  1706,  1705,
    1707,  1708,  1709,  1710,  1711,  1712,  1713,  1714,  1715,  1716,
    1717,  1718,  1719,  1720,  1721,  1722,  1723,  1724,  1725,  1726,
    1727,  1728,  1729,  1732,  1730,  1731,  1733,  1734,  1735,  1736,
    1737,  1738,  1739,  1740,  1741,  1742,  1743,  1744,  1745,  1747,
    1746,  1748,  1749,  1750,  1751,  1752,  1753,  1754,  1755,  1756,
    1757,  1758,  1759,  1760,  1761,  1762,  1763,  1764,  1765,  1766,
    1767,  1768,  1769,  1770,  1771,  1772,  1773,  1774,  1775,  1776,
    1777,  1778,  1779,  1780,  1781,  1185,     0,  1186,  1176,  1165,
    1172,  1173,   130,   423,  1212,  1156,     0,     0,     0,     0,
    1245,     0,     0,     0,  1077,  1079,  1080,   963,  1090,  1037,
       0,  1583,  1584,  1585,  1027,     0,  1586,  1587,  1588,  1637,
     892,   879,   888,   893,   880,   882,   889,  1589,  1590,   829,
    1591,  1592,  1088,  1593,  1595,  1596,  1598,  1599,  1600,   884,
     886,  1602,  1603,     0,  1089,  1605,  1606,  1447,  1608,  1609,
    1611,  1612,   890,  1614,  1616,  1617,  1618,  1619,  1620,  1087,
    1621,   891,  1623,     0,     0,     0,  1055,   982,     0,     0,
       0,  1037,   863,     0,     0,   682,   683,   704,   705,   684,
     710,   711,   685,     0,  1049,   762,   908,  1037,   875,   938,
     806,     0,   861,   855,  1045,   474,  1043,     0,   856,  1076,
    1037,  1028,   474,  1041,  1190,  1188,  1194,  1189,     0,     0,
       0,     0,     0,   640,   639,  1067,  1224,  1222,  1223,  1221,
    1220,  1227,     0,  1229,  1162,   977,   979,     0,  1028,   469,
       0,     0,     0,   449,   448,     3,     0,     0,  1232,     0,
     486,   487,     0,     0,     0,     0,     0,     0,     0,     0,
     583,   513,   514,   516,   580,   584,   592,     0,   455,     0,
    1111,  1251,     0,     0,     0,   117,   117,     0,     0,     0,
       0,     0,    93,    42,    86,     0,     0,     0,     0,   185,
     198,     0,     0,     0,     0,     0,   195,     0,     0,   178,
      44,   172,   174,     0,   117,     0,    40,     0,     0,     0,
      46,  1092,     0,  1635,  1636,  1637,  1638,  1639,   892,   879,
     888,   893,   889,     0,  1645,  1646,  1594,  1648,  1649,  1650,
    1651,  1652,  1653,  1654,  1655,  1601,  1657,  1658,  1659,  1660,
    1661,   890,  1663,  1615,  1665,  1621,   891,     0,  1667,     0,
     867,   985,   497,   983,  1112,     0,  1093,  1099,  1033,     0,
    1113,  1816,  1817,  1818,  1819,  1820,  1821,  1822,  1823,  1824,
    1825,  1826,  1827,  1828,  1829,  1830,  1831,  1832,  1833,  1834,
    1835,  1836,  1837,  1838,  1839,  1840,  1841,  1842,  1843,  1844,
    1845,  1846,  1847,  1848,  1849,  1850,  1851,  1852,  1853,  1854,
    1855,  1856,  1857,  1858,  1859,  1860,  1861,  1862,  1863,  1864,
    1865,  1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,  1874,
    1875,  1876,  1877,  1878,  1879,  1880,  1881,  1882,  1768,  1883,
    1884,  1885,  1886,  1887,  1030,  1073,  1115,  1114,  1116,  1036,
       0,     0,   421,     0,     0,  1126,     0,  1107,     0,     0,
    1381,   166,  1381,   312,     0,   312,     0,  1139,  1142,   377,
     373,   371,   370,   372,   720,   707,   715,   714,   982,   697,
     696,   695,     0,   694,     0,     0,   721,   721,   719,   698,
     674,     0,     0,     0,   725,     0,   723,   383,   384,     0,
     356,     0,   668,   664,     0,   734,   735,   736,   737,   744,
     745,   742,   743,   738,   739,   732,   733,   740,   741,   730,
     731,     0,   746,   747,   748,   749,   750,   751,   752,   753,
     680,   686,     0,     0,   351,     0,     0,   353,     0,     0,
       0,   347,     0,   130,     0,   179,  1181,  1182,  1180,     0,
       0,  1164,   182,   199,  1175,  1184,  1174,  1183,  1163,  1158,
       0,  1155,   412,  1200,  1199,  1208,   161,     0,   988,     0,
     130,  1246,  1258,     0,   859,   982,  1026,     0,     0,     0,
       0,     0,     0,   865,   991,     0,     0,   786,     0,     0,
       0,  1006,     0,  1012,     0,     0,     0,   787,   766,   767,
       0,  1054,  1063,   981,     0,   863,   977,     0,   941,   943,
       0,  1095,     0,   857,   858,   864,     0,  1083,     0,   761,
     761,  1048,   963,     0,     0,   956,   960,   961,   962,     0,
       0,     0,  1040,     0,   971,   973,     0,     0,   802,   969,
       0,   805,     0,     0,     0,     0,   957,   958,   959,   950,
     951,   952,   953,   954,   955,   967,   949,   783,     0,     0,
     910,   862,     0,   782,  1046,     0,   601,     0,  1081,  1078,
       0,  1029,   601,  1202,  1206,  1207,  1205,     0,  1201,  1193,
    1192,  1197,  1195,  1198,  1196,     0,  1218,     0,  1215,   980,
     596,   471,     0,     0,  1238,     0,   124,     0,  1233,     0,
     466,   465,   507,   507,   498,   501,   507,   464,   555,   556,
       0,     0,     0,     0,   589,   587,  1077,  1090,   543,   517,
     542,     0,     0,   521,     0,   547,   762,   582,   453,   511,
     512,   515,   452,     0,   585,     0,   595,   583,   516,     0,
    1240,  1252,     0,     0,     0,     0,     0,  1381,     0,     0,
      77,    58,   264,   663,   116,     0,     0,     0,     0,     0,
       0,     0,    85,    82,    83,    84,     0,     0,     0,     0,
     183,   184,   197,     0,   188,   189,   186,   190,   191,     0,
       0,   176,   177,     0,     0,     0,     0,   175,     0,     0,
       0,     0,     0,     0,     0,     0,   497,   497,   497,   873,
       0,   495,   496,     0,     0,  1031,  1034,   411,   320,     0,
     310,     0,     0,     0,     0,     0,     0,   347,  1132,  1130,
    1128,  1131,  1133,  1108,     0,   159,     0,     0,   163,   165,
       0,   309,   283,     0,  1144,     0,     0,  1381,  1141,   299,
       0,     0,     0,     0,   385,     0,   718,   717,   669,   665,
       0,     0,     0,     0,   390,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   385,   382,   385,  1069,     0,
     385,   170,     0,  1381,   312,     0,  1160,  1177,   180,   200,
     181,   201,   444,     0,   418,   426,   431,   409,     0,   409,
       0,   428,   432,   409,   427,   409,   422,     0,   162,     0,
    1120,     0,  1119,     0,  1038,     0,     0,  1025,  1021,     0,
       0,     0,     0,     0,   992,   993,   994,   995,   996,   997,
     998,   999,  1000,     0,     0,  1001,     0,     0,     0,   948,
     956,   960,   961,   962,   957,   958,   959,   950,   951,   952,
     953,   954,   955,   975,     0,     0,     0,     0,     0,     0,
       0,     0,   831,     0,     0,   937,     0,   977,  1011,     0,
       0,     0,     0,     0,     0,   977,  1017,     0,     0,     0,
    1053,     0,  1050,   808,  1037,     0,   944,   807,     0,     0,
       0,  1085,  1086,   763,   809,   774,   778,   779,   780,   784,
    1118,  1117,  1047,     0,  1039,     0,     0,   764,   788,   793,
       0,  1018,   825,     0,   813,     0,   801,     0,   811,   815,
     789,   804,     0,   785,     0,  1040,   972,   974,     0,   970,
       0,   775,   776,   777,   768,   769,   770,   771,   772,   773,
     781,   947,   945,   946,     0,     0,     0,   912,     0,     0,
     810,  1044,  1373,  1411,     0,   485,   485,   485,   473,   483,
       0,   652,   497,  1055,   652,     0,   761,   641,  1111,  1228,
    1216,  1217,   978,  1110,   130,     0,  1236,     0,     0,     0,
     136,   119,     0,  1234,     0,   152,   154,   601,     0,  1037,
     505,   506,   510,   510,     0,     0,   510,  1612,  1500,     0,
       0,     0,     0,   548,   590,     0,   581,   545,   546,     0,
     544,  1077,   549,  1076,   550,   553,   554,   522,   591,  1064,
     593,     0,   586,   457,   456,   597,     0,    43,     0,  1381,
      60,     0,     0,     0,     0,     0,     0,   214,     0,   314,
     214,    98,  1381,   385,  1381,   385,  1279,  1348,  1516,     0,
      56,    89,     0,   288,   110,     0,   273,   317,    79,    94,
     103,     0,     0,    45,   173,   187,   192,   106,   196,   193,
    1149,   194,   117,     0,    41,     0,   104,     0,  1147,     0,
       0,    47,   108,  1151,   495,   495,   495,     0,   984,     0,
       0,     0,   986,   987,  1033,     0,   410,     0,   311,     0,
     420,   400,   401,   411,     0,   312,     0,   312,  1129,     0,
       0,  1109,     0,     0,     0,     0,   302,   300,   333,     0,
     307,   301,   310,     0,     0,   259,     0,  1273,     0,     0,
     395,     0,     0,     0,     0,     0,   687,   700,   357,   674,
       0,   728,   727,   729,   729,   674,     0,   658,     0,   672,
       0,   712,   681,   754,   755,   756,   757,   758,   759,   760,
     350,   352,     0,   354,     0,     0,     0,   413,     0,   416,
       0,   415,   419,   414,   408,     0,   439,     0,     0,     0,
       0,     0,     0,  1209,   989,   490,   830,     0,     0,  1022,
       0,     0,   906,     0,   881,   883,   896,     0,   885,   887,
       0,   964,     0,     0,     0,   897,   833,   834,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   850,   849,   898,   936,
       0,     0,  1009,  1010,     0,   899,     0,     0,  1016,     0,
       0,     0,   904,     0,  1070,     0,     0,     0,  1062,   860,
     978,   942,   940,   866,   761,     0,     0,     0,     0,     0,
       0,     0,   814,   803,     0,   812,   816,     0,     0,     0,
     797,     0,     0,   795,   826,   791,     0,     0,   827,     0,
       0,   911,   920,   485,   485,   485,   485,   482,   484,     0,
       0,     0,     0,  1500,     0,   624,   604,   600,   602,   611,
     624,   629,   876,   650,   877,  1095,     0,   560,   495,  1063,
     560,     0,  1203,  1219,     0,  1237,     0,   141,   123,   143,
     142,     0,   150,     0,  1037,     0,   141,   125,     0,   144,
     155,  1236,     0,   158,     0,   499,   500,   502,     0,   965,
     510,   504,   552,   551,     0,   520,   588,   518,     0,   594,
       0,     0,     0,   263,     0,     0,     0,   214,     0,   322,
       0,   329,     0,     0,   314,   295,    78,     0,     0,     0,
      52,    97,    70,    62,    48,    76,     0,     0,    81,     0,
      74,    91,    92,    90,    95,     0,   249,   224,   260,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   497,   493,   494,   868,  1032,
     442,   443,   178,   441,   321,     0,     0,   309,     0,  1144,
    1127,   347,     0,     0,   166,   312,     0,   287,   283,   308,
     281,   280,   282,     0,  1274,   171,     0,  1268,  1143,     0,
     396,     0,   392,     0,  1138,   706,   671,     0,   724,   722,
     670,     0,   666,   673,   385,     0,   445,     0,   404,   440,
     429,   434,     0,   438,   436,   435,   430,   433,     0,  1024,
    1020,     0,   878,   990,     0,   976,  1004,  1003,   832,   841,
     845,   846,   847,  1005,     0,     0,     0,   842,   843,   844,
     835,   836,   837,   838,   839,   840,   848,  1014,  1013,  1007,
    1008,     0,   901,   902,   903,  1015,     0,  1071,  1052,   977,
    1057,  1059,     0,     0,   939,  1084,   765,     0,     0,   794,
    1019,   817,     0,     0,     0,   790,   964,     0,     0,     0,
       0,     0,   799,     0,     0,     0,     0,   874,     0,     0,
       0,     0,   476,   475,   481,   624,   629,     0,   459,     0,
     611,     0,   623,   539,   622,   605,     0,   635,   633,     0,
     635,     0,   635,     0,   539,     0,   625,   539,   622,     0,
     642,  1067,   651,     0,   577,     0,  1051,   577,     0,   472,
    1235,     0,  1231,     0,     0,     0,   131,   128,   118,     0,
       0,   153,   141,   132,   508,   509,     0,   503,   519,  1065,
     111,   214,     0,     0,    59,     0,   331,   275,   323,   306,
     290,     0,     0,     0,   215,     0,   348,     0,     0,   296,
       0,     0,     0,     0,   276,     0,     0,   235,     0,     0,
     306,     0,   313,   231,   232,     0,    51,    71,     0,    67,
       0,    96,     0,     0,     0,     0,     0,    54,    66,     0,
      49,     0,   385,   385,    57,   274,  1103,  1668,  1669,  1670,
    1671,  1672,  1673,  1674,  1675,  1676,  1677,  1678,  1679,  1794,
    1680,  1681,  1682,  1683,  1684,  1685,  1686,  1687,  1803,  1688,
     221,  1689,  1447,  1690,  1691,  1692,  1693,     0,  1694,   661,
    1695,  1696,  1697,  1698,   950,   951,   219,   316,   216,   324,
     218,   220,     0,  1104,   217,   319,   107,  1150,     0,   105,
       0,  1148,   114,   112,   109,  1152,   871,   872,   869,   495,
     423,   403,     0,     0,  1273,     0,     0,  1381,     0,  1144,
     164,   309,     0,   339,   259,   334,     0,  1273,  1271,     0,
    1267,   391,     0,     0,     0,   667,   659,   355,     0,   417,
       0,   437,  1023,   894,   905,  1002,     0,     0,     0,     0,
     900,   895,  1060,  1061,  1056,   823,   821,   818,     0,   819,
     798,     0,     0,   796,   792,     0,   828,   907,     0,   923,
     918,   919,   480,   479,   478,   477,   610,   608,     0,   613,
    1095,   620,   532,   538,   609,     0,   603,     0,   634,   630,
       0,   631,     0,     0,   632,     0,   606,     0,  1095,   607,
       0,   649,     0,     0,   914,   868,   914,  1204,   140,   120,
       0,   121,   151,     0,     0,     0,     0,   145,   397,     0,
     327,    61,     0,   306,     0,   214,   292,   291,   294,   289,
     293,     0,   349,     0,     0,   233,     0,   240,   278,   279,
     277,   234,   306,   312,   236,     0,     0,     0,    63,    53,
      50,    55,    64,     0,     0,    65,    68,   657,    80,    73,
    1803,  1811,     0,     0,     0,     0,     0,     0,   399,   406,
     178,     0,     0,   283,  1270,     0,     0,     0,   309,     0,
       0,     0,  1273,     0,     0,   211,     0,   256,     0,   168,
    1272,     0,  1260,     0,  1136,  1137,     0,     0,   405,   851,
       0,     0,     0,  1058,   820,   824,   822,   800,   909,   925,
     922,   645,     0,   648,   612,     0,     0,   527,   534,     0,
     537,   531,     0,   614,     0,     0,   616,   618,     0,     0,
       0,   653,     0,     0,     0,  1072,   558,  1323,  1595,  1499,
     559,     0,   563,   557,   561,   566,   568,   567,   569,   565,
     576,     0,   579,  1082,   579,     0,     0,     0,     0,   156,
       0,   147,   147,     0,   133,   966,     0,   214,     0,   305,
     328,   245,   223,     0,     0,     0,   230,   237,   338,   239,
       0,    72,     0,    88,     0,     0,   318,   115,   113,   870,
     423,     0,  1144,   259,  1267,     0,     0,     0,   283,   171,
    1269,   272,   265,   266,   267,   268,   269,   270,   271,   286,
     285,   257,   258,     0,     0,     0,  1138,     0,   852,     0,
     853,     0,   497,   650,     0,     0,   644,     0,   525,   523,
     526,   528,   524,     0,     0,   621,   637,     0,   617,   615,
     626,     0,   657,     0,   628,     0,     0,     0,   570,   564,
     913,   915,     0,     0,   530,   530,     0,   127,     0,   652,
       0,     0,   149,   149,   135,     0,   312,   330,     0,   297,
     304,   243,   242,   244,   248,     0,   246,     0,   262,     0,
     255,   223,   656,     0,    75,     0,   325,   398,   402,     0,
     213,  1261,   309,     0,  1267,   259,  1273,     0,  1264,     0,
       0,  1144,   854,     0,   928,   643,   646,     0,   619,     0,
       0,     0,   654,   655,   627,     0,     0,     0,   562,     0,
       0,   578,     0,   461,   460,   122,   147,   126,   157,   146,
     507,   148,   507,     0,   338,   284,     0,     0,     0,   245,
       0,   238,   335,   336,   337,     0,   251,   241,   252,    69,
      87,   326,     0,   309,  1262,   212,   169,  1265,  1266,     0,
     652,   924,     0,     0,     0,     0,   535,     0,   541,   636,
     572,     0,   571,   916,   917,   532,   149,   510,   510,   652,
     255,   298,   303,   222,   247,   261,     0,     0,     0,   253,
       0,   254,  1267,     0,  1134,  1582,  1324,  1552,     0,   926,
     929,   927,   921,   647,     0,     0,   533,   573,   529,   507,
     138,   137,   134,   214,   227,     0,   226,     0,   315,   250,
    1263,  1144,     0,   933,   932,   931,   935,   934,   536,     0,
     510,   332,   225,   229,   228,   652,     0,     0,   139,  1135,
     930,   540
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    37,    38,    39,    40,  2202,  2203,  2204,  1879,  1032,
    2924,  1880,  1033,  1034,  2206,    41,    42,  1496,   545,  1810,
    1435,  2655,    44,  2152,  1815,  2156,  2799,  2412,  2151,  2158,
    2902,  2970,  2153,  1816,  1817,  2800,  1818,    45,    46,    47,
    1568,    48,   757,    49,  1569,  1523,  1303,  1052,  1513,  1292,
      50,    86,    51,  2191,  2527,  2916,  2216,  3058,  2462,  2463,
    2913,  2914,  2194,  1881,  2986,  2987,  2264,  1505,  2981,  1946,
    2849,  1885,  1867,  2464,  1955,  2809,  2563,  1882,  2444,  1947,
    2908,  1578,  1948,  2909,  2665,  1949,  1548,  1572,  2195,  2988,
    1886,  1549,  2190,  2528,  1492,  1950,  2920,  1951,   504,  2448,
      52,   537,   538,   749,  1240,   539,   730,    53,   662,  1576,
     546,    55,  1933,  2710,  2287,  2711,  2005,  1927,  1301,  2002,
    1622,  1552,  1302,   494,  1636,  2288,  2242,  1623,   547,   932,
      58,    59,    60,   586,   599,   600,  1406,  1788,  2119,  1002,
     573,   574,  1921,   614,  1542,  1444,  1445,  1822,  2165,  1471,
    1472,  1011,  1012,  2758,  2963,  2759,  2760,  2623,  2624,  3046,
    1459,  1463,  1464,  1842,  1832,  1450,  2404,  2782,  2783,  2784,
    2785,  2786,  2787,  2788,   933,  2644,  2894,  1467,  1468,  1014,
    1015,  1016,  1476,  1852,    62,    63,  1791,  2126,  2127,  2128,
    2129,  2382,  2383,  2397,  2393,  2629,  2766,  2130,  2131,  2751,
    2752,  2866,  2400,  2137,  2770,  2771,  2823,  1595,   731,  1868,
    1308,  1243,   733,   934,   734,  1219,   935,  1223,   736,   936,
     937,   938,   739,   939,   940,   941,   742,  1215,   942,   943,
    1234,  1262,  1263,  1264,  1265,  1266,  1267,  1268,  1269,  1270,
     985,  1691,   945,   946,   947,  2133,   948,  1400,  1777,  2112,
    2792,  2890,  2891,  2367,  2610,  2749,  2862,  3004,  3039,  3040,
     949,   950,  1348,  1349,  1350,  1774,  1395,  1396,   951,  2530,
    1398,  1684,   986,  1706,  1344,  1102,  1103,  1309,  1663,  1664,
    1687,  2034,  1694,  1699,  2062,  2063,  1707,  1742,   952,  1647,
    1648,  2020,  1317,   953,   639,  1109,   640,  1314,  1736,   962,
     954,   955,   956,  1341,  1342,  2078,  2341,  2342,  1712,  1848,
     591,  2074,  2762,   753,  1184,   957,   958,   959,   960,   988,
     593,  1104,   487,   745,  2971,  1197,   992,  1105,  1883,  1732,
      64,   859,   644,    65,  1195,  1560,    66,  2735,  2574,  1208,
    1580,  1959,   505,    67,    68,    69,    70,    71,   621,  1295,
     548,  1296,  1297,   846,    72,  1304,   848,   849,    73,   580,
     581,  1305,  1419,  1306,    74,   559,    75,   981,   596,   982,
     984,   550,   999,  2147,  1806,    77,    78,   567,   568,    79,
      80,   582,    81,    82,  2732,   551,  2267,  1936,   514,   489,
     490,   747,  1187,  1107,  1188
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -2709
static const int yypact[] =
{
    3201,  -111,   600, -2709, -2709,  -111, 35846, -2709,  -111,    54,
    1232, 40142, -2709,  6825,  -111, 47776,  1052,   238,   239,   255,
   40621, 40621, 47776, 47776, 41100,  -111,   266, 48255, -2709,  -111,
   24693, 38226,   -20,  -102, 48734, 47776,  1256,   408,   -38, -2709,
   -2709, -2709, -2709, -2709,   124, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709,   196, -2709,   211,
     205,   -84,   -16, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709,   222, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   24214, -2709, -2709, -2709, -2709, -2709, -2709, 41579, 47776, 42058,
   38705, 42537, -2709,   110, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709,   155, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709,   156, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709,   163, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709,    84,   622, -2709,   176, -2709,
   -2709, -2709, -2709,  1256, 43016,   639,   796,   261, 49213, -2709,
   -2709, 47776, -2709, -2709,  1316,   540, -2709, -2709, -2709, -2709,
   43495, -2709, -2709, -2709, -2709,   520, -2709, -2709,   375, -2709,
     136, -2709, -2709,   442,   405, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709,   502, -2709, 43974, -2709, 49692, 50171, 50650,
   -2709,   437,   665,   649, 22777, -2709, -2709, -2709, -2709,   222,
   -2709, -2709,   936, -2709, 40621,   936, -2709, -2709, -2709, -2709,
   -2709,   324,   457, -2709,   494,   769, -2709, -2709, -2709,   525,
   -2709, -2709,   754, 10807, 10807, 51129, 51129,   936, 51129,   594,
   -2709, -2709,   315, -2709,  -102, -2709,   -84,   525, -2709, 25173,
   -2709,   620,   622, -2709, -2709,   216,   924, 14335, 47776,   617,
   -2709,   633,   617,   674,   678, -2709,  3201,  1024,  1010, 38226,
     310,   310,  1186,   310,   545,   675, -2709,  1317, -2709,   767,
   -2709, 43016, -2709,   789,  1057, -2709,   525,  1132,   235,   951,
    1153,  4009,  1157,   824,  1180,   846,  7279, 14335, 33451, -2709,
     622, -2709, -2709, -2709,   837, -2709,   869, -2709, -2709, -2709,
   -2709,   740,  1124, -2709,   919,  1385, -2709, -2709,   984, 44438,
   44917, 43016, 43016,  1343, -2709, -2709, -2709, -2709,   986, -2709,
   -2709, -2709,   123, -2709, -2709, -2709, -2709,   980, -2709,   980,
     980, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,   982,
     982,  1143,   992, -2709, -2709, -2709,  1324, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709,  1001,  1017, -2709,
     980, -2709,   982, -2709, -2709, -2709, -2709, -2709, -2709, 54467,
   -2709, -2709, -2709, -2709,   654,   731, -2709, -2709, -2709, -2709,
      72,  1018, -2709,  1430, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709,  1045, -2709,  5229,   982, -2709, -2709,  1404,   166,
   -2709,  1444,   180, -2709,  1450,  1292, 14335, -2709,  1262,  1203,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709,  -102, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709,   712, -2709, -2709, 31026,
   -2709, -2709,   649,  1115, -2709, -2709, 31026, 14839, 45396,  1583,
   -2709,  1398, 47776,  1134, -2709, -2709, -2709, -2709, -2709, -2709,
    1146,  1653,   140,  1655, 14335,  1164,   140,   140,  1169,  1499,
     177,   178,   179,   182,  1179,  1188,   186,   187,   187, -2709,
    1194,  1195, -2709,   188,  1206,  1210,  1673,  1674,   141,  1216,
    1217,  1017,   140, 14335, -2709,  1219,   187,  1221,  1222,  1226,
    1696,  1227,   189,  1728,  1237,    97,   103,  1238,  1243, -2709,
    1244,   192,   195, 14335, 14335, 14335,  1592, 14335,  8287, 43016,
    1734, -2709,   622,  1252,   936, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709,   157,  5014, -2709,  1295, -2709, -2709, -2709,
    1455, 14335, -2709, -2709,  1255,  1543, -2709,   198, -2709, -2709,
   -2709,   625,  1543, -2709, -2709, -2709, -2709, -2709,   227,  1662,
   30068, 30547, 43016, -2709, -2709,   622, -2709, -2709, -2709, -2709,
   -2709, -2709,   721, -2709,   222, 32269,  1260,  1264,   622,   617,
   47776, 47776,  1730, -2709, -2709, -2709, 38226, 43016, 51608,  1394,
   -2709, -2709,   -84,   -84,  9799,   -84,   106,   630, 11311, 15343,
    1605,  1488,   585,   751,  1607, -2709,  1494,   545,   675, 14335,
     633, -2709,  1545, 43016, 36325,   747,   954,  1280,  1363,  1284,
     516,  1701, -2709,  1281, -2709,  1375, 43016, 54467,   231, -2709,
    1737,   231,   231,   683,  1739,  1382,   243,  1539,   -41,  -106,
    1281,  2808, -2709, 38226,    65,   469,  1281, 43016,  1387,   534,
    1281,    96, 14839,  1130,  1149,   268,  1241,  1274,   109,   114,
     119,   125,   130, 14839,  1285,  1301,   142,  1307,  1335,  1341,
    1427,  1471,  1534,  1549,  1553,   160,  1575,  1585,  1590,  1598,
    1602,   162,  1612,   165,  1614,    86,   172, 14839,  1624,  1305,
   -2709, 32269,   -46, -2709, -2709,  1633,   175, -2709, 28632,  1299,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
    1391, 47776,  1348,   -36,  1658,  1716, 33451,  1320, 45396, 43016,
    1550,  2808,  1551,  1318,  1792,   869,  1333, -2709, 52087, -2709,
   -2709, -2709, -2709, -2709, -2709,  1334, -2709, -2709, 14335, -2709,
   -2709, -2709,  1826, -2709, 45396, 45396,   980,   980, -2709, -2709,
    1800,  1423,  1424,  1826, -2709,  1826, -2709, -2709, -2709, 45396,
   -2709, 47776,  1344,  1345,  1826, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709,  1826,  1428, -2709,  1429,  1431,  1434, -2709, -2709, -2709,
   -2709, -2709, 47776, 47776, -2709, 47776, 47776, -2709, 47776, 47776,
    1340,   740, 45860,   649, 35367, -2709, -2709, -2709, -2709,  1053,
    1111, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   33451, -2709,  2760, -2709, -2709, -2709,  1351,   729, -2709,   757,
    1256, -2709, -2709, 14335,   622, 14335, 32269,  1399, 14335, 14335,
    1358,  1826,  1826, -2709,  4962,  1826,  1826,  3687, 14335, 28052,
   14335, 18871, 11815, 14335, 14335,  8791, 14335,  3687,  1846,  1846,
   26131, -2709,  1516, -2709,  1365,  1990,  5299,  1361, -2709,  1362,
    1378, -2709,  1359, -2709,   622,   622, 14335, -2709, 14335,  2845,
    2845, -2709,   296, 45396, 14335, 14335, 14335, 14335, 14335, 14335,
   32972,  1453,   122, 47776, 14335, 14335,  1371,  1030, -2709, 14335,
    1608, -2709,  1389, 14335,  1467,   257, 14335, 14335, 14335, 14335,
   14335, 14335, 14335, 14335, 14335, -2709, -2709, 20369,   313,  1706,
    1727,   622,   -99,   262, 10807, 39184,  1719,  7279, -2709,   622,
   29110,   120,  1719, -2709, -2709, -2709, -2709,   201, -2709, -2709,
   -2709, -2709,  1351, -2709,  1351,  1395, 43016,   216, 37283, 14335,
   -2709, -2709,   783,  1403,  1463,   644,  1856, 47776, -2709, 26610,
    1690, -2709,   708,   708,  1405, -2709, 31502,  1690, -2709, -2709,
   19361,  1530,  1689,  1626, -2709, -2709,  1610,  1613, -2709,  1414,
   32497, 15847, 15847, -2709,  1294, 32269,  1297, -2709, -2709, -2709,
   -2709, -2709, -2709,   651, -2709, 43016,    20,  1605,   751,  1421,
   -2709, -2709,   927,  1432, 52566, 47776,  1704,  1657,  1708,  -105,
   -2709, -2709, -2709, 45396, -2709, 47776, 47776, 53045, 53524, 33930,
   47776, 33451, -2709, -2709, -2709, -2709, 47776,   510, 47776,  6851,
   -2709, -2709, -2709,   231, -2709, -2709, -2709, -2709, -2709, 47776,
   47776, -2709, -2709,   231, 47776, 47776,   231, -2709,   996, 47776,
   47776, 47776, 47776,  1448, 47776, 47776,    33,    33,  1640, -2709,
   12319,    85, -2709, 14335, 14335, -2709, 14335,  1609, -2709,   836,
   -2709,  1650,   153,  1484, 43016, 43016, 47776,  1415, -2709, -2709,
   -2709, -2709, -2709, -2709, 33451, -2709,  1439,  1787, -2709,  2808,
    1788, 36804,   436,   905,  1481, 12823,  1905,  1672, -2709, -2709,
    1663, 14335,  1445,  1449,    72,   841, -2709, -2709,  1456,  1345,
    1470,  1472,  1458,  1459, -2709,   843, 45396,  1826,   139,  1460,
    1462,  1246,   832,   817,  1291,   166, -2709,   180, -2709,  1668,
     149, -2709,  1562,  1697,   869,  1932, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709,   845, 21819, -2709, -2709,  1933,   936,  1933,
     560, -2709, -2709,  1933, -2709,  1933, -2709, 31026, -2709, 14839,
   -2709, 45396, -2709,  1473, -2709,  1474, 14335,    71, -2709, 31563,
    1476, 14335,  1477,  1490, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709,  1491,  1810, -2709,  1496,  1498,  4568, -2709,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709, -2709,  1501,  1493, 31653,  1502, 18871, 18871,
    8287,  1492, -2709, 18871,  1503, -2709,  1506, 31515,  1489,  1507,
   31883, 13327, 14335, 13327, 13327, 31937, -2709,  1508, 32076, 47776,
   -2709, 16351, -2709, -2709, -2709, 14335, 43016, -2709, 14335,  1509,
    5385, -2709, -2709, -2709,   262,   838,  4939,  4939,  4939,  3687,
   -2709, -2709, -2709,  1517, -2709, 18871, 18871, -2709,  4034,  1386,
    8287, -2709, -2709,  1834, -2709,   707, -2709,  1511, -2709, -2709,
    2965, -2709, 28052,  2635, 14335,   154, -2709, 14335,  1371, 14335,
    1594,  4939,  4939,  4939,   333,   333,   200,   200,   200,   838,
     262, -2709, -2709, -2709,  1513,  1515,  1518,  1860,  1227, 14335,
   -2709, -2709,   965,  1161, 43016,   126,  3326,  4540, -2709, -2709,
   22298,  1560,   -46,  1592,  1560,  1826,  2845, -2709,   633, -2709,
   -2709, -2709, 32269, -2709,  1256, 22298,  1561,  1576,   400, 24693,
    1740, -2709, 47776, -2709, 47776, -2709,  1521,  1719,  1541, -2709,
   -2709, -2709,  1546,  1546, 14335,   920,  1546,  1743,  1744,  1141,
    1141,  1294,  1745, -2709, -2709,  1621, -2709, -2709, -2709, 14335,
    9295,  1313, -2709,  1315, -2709, -2709, -2709, -2709,  1538, -2709,
   -2709,  1809, -2709, -2709, -2709, -2709,  1645,  1281, 14335,  1795,
   -2709,   104,  1565,  1917,   286,  1870, 47776, -2709,   224,   280,
   -2709,   779,  1920,   149,  1921,   149, 33451, 33451, 33451,   854,
   -2709, -2709,   936, -2709, -2709,   876, -2709,  -184, -2709, -2709,
   -2709,  1659,   602,  1281,  2808, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709,   134,   650,  1281,  1660, -2709,  1661, -2709,  1664,
     773,  1281, -2709, -2709,    85,    85,    85, 14839, -2709,  1796,
    1803,  1579, 32269, 32269, 32269,  1586, -2709,   332, -2709, 47776,
   -2709, -2709, -2709,  1609, 43016,  1587,  2049,   869, -2709,  1746,
     827, -2709, 47776, 43016, 43016, 43016, -2709, -2709, -2709,  1588,
    1595, -2709, 37762,   -22,  1804,  1812, 47776,  1630,  1284,  2062,
   -2709,   897, 13831,  1951, 43016,  1604, -2709, -2709, -2709, -2709,
    1826, -2709, -2709,   488,   488, -2709, 47776, -2709,  1616, -2709,
    1617, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, 47776, -2709, 43016,  1953,  1256, -2709, 33451, -2709,
   34888, -2709, -2709, -2709, -2709,   936, -2709,   936,  1829, 47776,
   29589,   936,   936, -2709, -2709, -2709, -2709, 32161, 14335, -2709,
    1964, 45396, -2709,  5632, -2709, -2709, -2709, 14335, -2709, -2709,
   14335, -2709, 28052, 14335,  1937, -2709,  2098,  2098,  5299, 45396,
   18871, 18871, 18871, 18871, 18871,   663,  1221, 18871, 18871, 18871,
   18871, 18871, 18871, 18871, 18871, 18871, 19865,   272, -2709, -2709,
   14335, 14335,  1946,  1937, 14335, -2709, 45396,  1622, -2709,  1623,
    1628, 14335, -2709, 45396,  1618,  1629,  8287, 32215, -2709,   622,
    5910, -2709, 32269, -2709,  2845, 14335,  1906,  2497, 14335,  1634,
   14335,  1955, -2709, -2709,  1625, -2709, -2709, 45396, 14335,  1636,
    3366, 18871, 18871,  3519, -2709,  3975, 14335,  8287, -2709,  1640,
    1681, -2709,  1843,  1736,  1736,  1736,  1736, -2709, -2709, 43016,
   43016, 43016, 23256,  1973, 21337, 46339,  1643, -2709,  1069, -2709,
   46339, 46818, -2709,  1669, -2709,   622, 14335,  1967,    85,  1516,
    1967,  1648, -2709, -2709,  1670, -2709, 14335,  1805, -2709, -2709,
   -2709,  1707, -2709,   916, -2709,  2072,  1805, -2709,   925, -2709,
   26610,  1561, 14335,   622,   553, -2709, -2709, -2709,  1676, -2709,
    1546, -2709, -2709, -2709,  1871, -2709, -2709, -2709, 43016, -2709,
   47776,  6233,  2008, -2709, 47776, 47776, 47776, -2709, 47776,  1666,
    1671,   903,  1677,   349, -2709,  2256,   903,  1987,   212,  1284,
     243,  6665,   624, -2709, -2709, -2709,  1749, 47776, -2709, 47776,
   -2709, -2709, -2709, -2709, -2709, 33930, -2709, -2709, -2709, 33451,
   27572, 33451, 47776, 47776, 47776, 47776, 47776, 47776, 47776, 47776,
   47776, 47776,  1678,  1680,  1682,  1640, -2709, -2709, -2709, -2709,
   -2709, -2709,  -106, -2709, -2709,   332,  1684, 36804,  1256,  1481,
    1716,   740, 47297,   931,  2808,  1685,  2134, -2709,   436, 36804,
   -2709, -2709, -2709,  2092, -2709,   437,   150, -2709, -2709,  1256,
   -2709,  1256, 32269, 47776,  1747, -2709,  1345,  1687, -2709, -2709,
    1345, 45396, -2709, -2709,   149, 43016, -2709,   935, -2709, -2709,
   -2709, -2709, 47776,  1683, -2709,  1683, -2709, -2709, 14335, 32269,
   -2709,  1691, -2709, 32269,  6457, -2709, 32269,  1946, -2709,  2098,
    1028,  1028,  1028,  2560,  2016,   158,  1693,  1028,  1028,  1028,
     244,   244,   213,   213,   213,  2098,   272, 32269, 32269, -2709,
   -2709,  1694, -2709, -2709, -2709, -2709,  1698, 47776, -2709,  5063,
   -2709,  1686,  1700, 47776, -2709, -2709,   299, 14335, 14335,  4034,
   -2709,  3705, 14335, 45396,   946,  4034,   323, 14335,  4327,  4876,
   14335, 14335,  6247,  6639,  1702, 14335, 27089, -2709, 43016, 43016,
   43016, 43016, -2709, -2709, -2709, 46339, 46818,  1705, 20857,  1069,
    1703, 43016, -2709,  1782,  1709, 22298,  1971,  1900, -2709, 22298,
    1900,   658,  1900,  1975,  1782, 25652, -2709,  1782,  1710,  1907,
   -2709,   764, 32269,  2150,  2028,  1713, -2709,  2028,   936, -2709,
   32269, 10807, -2709,  1256,  1234, 47776,   622,     6, -2709,  1729,
   47776, -2709,  1805, 32269, -2709, -2709, 28052, -2709, -2709, -2709,
   -2709, -2709, 47776,  1718, -2709,  1720,   903, -2709, 47776,  1758,
   -2709,   194,  2020,    81, -2709, 14335, -2709,  2106,  2188,  2256,
    1731, 47776, 47776, 18871, -2709,   253,   161, -2709,  2003, 43016,
    1758,  2146, -2709, -2709, -2709,   349, -2709,  2041,  1956, -2709,
     231, -2709, 14335,   349,  1957,    88, 47776, -2709, -2709,  3218,
   -2709, 45396,   149,   149, -2709, -2709,  1735,  1738,  1741,  1750,
    1751,  1752,  1753,  1754,  1756,  1759,  1760,  1761,  1763, -2709,
    1764,  1765,  1766,  1767,  1768,  1770,  1771,  1772,  1001,  1774,
   -2709,  1777,  1676,  1779,  1780,  1781,  1783, 54003,  1784,  1785,
    1789,  1791,  1794,  1797,  1053,  1111, -2709, -2709, -2709, -2709,
   -2709, -2709,   919,  1798, -2709,  1757, -2709, -2709,  1815, -2709,
    1818, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,    85,
    1115,    75, 47776,  1748,  1630,  2199,   -35,  1966,  1742,  1481,
   -2709, 36804,  1229,   170,  1812, -2709,   133,  1630, -2709,  2135,
    1786, -2709,  1959, 47776,  1790, -2709, -2709, -2709,  2221, -2709,
   34888,  1683, 32269, -2709, -2709, -2709, 18871,  2129,  1807, 45396,
   -2709, -2709, 14335, -2709, -2709,  4034,  4034,  3705,   952, -2709,
    4034, 14335, 14335,  4034,  4034, 14335, -2709, -2709,  6742, 54931,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, 34409, 46339,
    1808, -2709, 39663, -2709, -2709, 47776,  1069, 22298, -2709, -2709,
     219, -2709, 22298,  2080, -2709, 22298, -2709, 47776,  1811, -2709,
   47776, -2709, 10303, 14335,  1844,   936,  1844, -2709,  1806, -2709,
     400, -2709, -2709,  2220, 23735,  2179, 14335, -2709, -2709,  1813,
     903, -2709,  1978,  1758,  1816, -2709, -2709, -2709, -2709, -2709,
   -2709,  6777, -2709,    55, 14335, -2709,   794,  2560, -2709, -2709,
   -2709, -2709,  1758,   869, -2709, 47776,  2280,  2167, -2709, -2709,
   32269, -2709, -2709,  1826,  1826, -2709, -2709,  2246, -2709, -2709,
   -2709, -2709,   919,   487, 27572, 47776, 47776,  1822, -2709, -2709,
    -106,  2200,   960,   436, -2709,  1256, 43016,  2171, 36804,  2289,
    1830, 47776,  1630,  1364,  1364, -2709,  1976, -2709,  1979, -2709,
   -2709,   725, -2709, 43016, -2709, -2709, 23735,  1256, -2709,  3952,
   18871, 45396,   968, -2709, -2709,  4034,  4034,  4034, -2709,  2023,
   -2709, -2709,   972,  2295, -2709, 47776,   -58,   -80,  1837,  1839,
   -2709, -2709,  1840, -2709, 14335,  1842, -2709, -2709, 22298,   219,
     977, -2709, 45396, 47776,   990, 45396, -2709,  1850,  -107,  1851,
   -2709,  7783,  1848, -2709, -2709, -2709, -2709, -2709, -2709, 32269,
   32269, 47776,  2018, -2709,  2018, 10807,  1908, 47776, 14335, -2709,
    1005,  2278,    46,    -9, 32269, -2709, 43016, -2709, 33451, -2709,
     903,   410,  1858, 14335, 28539,  2082, -2709, -2709,  2113, -2709,
    2173, -2709, 47776,  1922,   542,  1936, -2709, -2709, -2709, -2709,
    1115,   936,  1481,  1812,  1786,  1866, 43016,  1256,   436,   437,
   -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709, -2709,
   -2709, -2709, -2709,  2298,  2078,  2300,  1747,  1025,  3952,  1026,
   -2709,  2316,  1640,  1669, 34409,  1879, -2709,  1887, -2709, -2709,
   -2709, -2709, -2709, 47776,  1166, -2709, 32269, 47776, -2709, -2709,
   -2709, 47776,  2246,  1027, -2709, 14335,  1889, 14335, -2709, 16855,
    1886, -2709,  2352, 14335,  1954,  1954,  1256, -2709, 28568,  1560,
   23735, 47776, 47776, 47776, -2709,  2026,   869,   903,  1033, -2709,
    1915, -2709, -2709, -2709, -2709,  2808, -2709, 28603,  2138,    41,
    2117,  1858, -2709, 14335, -2709,  1977, -2709, -2709, -2709,  2371,
   -2709, -2709, 36804,  1913,  1786,  1812,  1630,  2126, -2709,  2127,
    1919,  1481, -2709, 14335,   576, -2709, -2709, 47776, -2709,  1040,
    1925,  1926, -2709, -2709, -2709,  1927, 16855,  1929, -2709, 47776,
    1935, 32269,  2059, -2709, -2709, -2709,  2278, -2709, -2709, -2709,
     708, -2709,   708, 26610,  2113, -2709, 33451, 27572,  2183,   410,
    2218, -2709, -2709, -2709, -2709,   132,  2144, -2709,  2145, -2709,
   32269, -2709,  1256, 36804, -2709, -2709, -2709, -2709, -2709, 23735,
    1560,  1489, 17359, 17359,  1938,  1042, -2709,  2426,  2094, -2709,
   -2709,  1939, -2709, -2709, -2709, 39663, 47776,  1546,  1546,  1560,
    2117, -2709, -2709, -2709, -2709, -2709,   304,   304,  2322, -2709,
    2006, -2709,  1786,  1054, -2709, 18367,  2090,   116, 31550, -2709,
   -2709, -2709, -2709, -2709,  1958,  1960, -2709, -2709, -2709,   708,
   -2709, -2709, -2709, -2709, -2709,  2432, -2709,   151, -2709, -2709,
   -2709,  1481,  2422, -2709, -2709, -2709, -2709, -2709, -2709,  2451,
    1546,   903, -2709, -2709, -2709,  1560, 17863,  1962, -2709, -2709,
   -2709, -2709
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2709, -2709, -2709,  1857, -2709, -2709, -2709,   260, -2709,   958,
   -2709,   252,  -555,   597, -2709, -2709, -2709,  -973,     9, -2709,
   -2709, -2709, -2709,    57,   311, -2709,  -426, -1915,  -172, -2709,
   -2538, -2610, -2709, -2709,  -494, -2522, -1737, -2709, -2709, -1154,
     228, -2709, -2172, -2709,  -628, -1029,  -804, -1033, -2709,    10,
   -2709,  1181, -1152, -1828, -2489,  -440, -2709,  -540, -2709,  -188,
   -2709,  -488, -2709,  -305,  -495,  -528, -2422,  -977, -2709,  1475,
    -230, -2709,   631, -2709, -2174, -2709, -2709,   621, -2709,  -985,
   -2709, -1858,   241,  -479, -2227, -2184, -1833,  -644,   307,  -483,
     285, -1783,  -610, -2709,   645, -2709,  -467, -2709,  -514, -1573,
   -2709, -2709, -2709,  1240,  -738, -2709,  1286, -2709, -2709, -2709,
      13, -2709, -2709, -2709, -2709, -2709,  -569,   586, -2337, -2709,
     511, -2709, -2709, -2709, -2709,   -62,   275, -2709,     7,    56,
     -14,   -11,     4,     8,    59,  1532,  1563, -2709, -1340,   974,
   -2709, -2709, -1826,  -613,   -53, -2709,   699, -1413, -1765,  -496,
    1046,  1514,  1522,  -345,  -357, -2709,  -475, -2709, -1131, -2709,
   -2709,   700,  1092, -1322, -1274, -2709,   403, -2709,  -412,  -343,
   -2709, -2709, -2709, -2709, -2709,   143,  -247,  -485,  1072, -2709,
    1540, -2709, -2709, -2709, -2709, -2709, -1299, -2709,   748, -2039,
     431, -2010, -1815,   183,   167,  -811,  -213,    26,   438,  -303,
   -2709, -2709,  -300, -1743, -2384,  -316,  -315, -2709, -2709, -2709,
    -456, -1168,  -698, -2709, -2709,   278,  -224, -2709, -2709, -2709,
    -147,   749, -2709, -2709,  1071,  1596, -2709,  -576,  1941,  -366,
    -693,  1242, -1107,  1249, -1106, -1123,  -655,  1257,  1258, -1286,
    3547, -1582,  -805,    -5, -2709, -2352, -1741, -2709, -2709, -2709,
     -76, -2709,  -375, -2709,  -373, -2709, -2709, -2709,  -418, -2708,
   -2709,  1187,   872, -2709, -2709, -2709, -1314, -2709,  4282,   765,
   -2709, -1677,  -923,  -585,  -933,  -786, -1042, -1196, -2709, -2709,
   -2709, -2709, -2709, -2709, -1010, -1728,  -523,   834, -2709, -2709,
     950, -2709, -2709, -2709,  -614,  1047,  -567,  -893,   847, -2709,
     190,  2024, -1370, -2709,   807, -1981, -2709, -2709,   464, -2709,
    1505,  -469, -1674,  1688, -1047,    38, -2709,  3440,   137,  1875,
    -898, -2161, -2709, -2709,  -491, -2310,  -984, -2709,  -598, -2709,
   -2709, -2709, -1212, -2709,   666, -2709, -1148, -2709,  -251, -2709,
   -2709, -2183, -2709, -2709, -2709, -2709, -2709, -2709,  -437, -2709,
    -473,  -476, -2709, -2709,    11,  -833,  1322, -2709, -2709,   626,
   -2709,   970, -2709,   720, -2709,    70, -2709,  1182, -2709, -2709,
   -2709,    23,  1619,   447, -2709,  1189, -2709, -2709, -2709, -2709,
   -2709,   762, -2709, -1147, -2090,    82, -2235,  -641,    -6, -2709,
   -2709, -2709,  -527, -2709, -2160
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1816
static const yytype_int16 yytable[] =
{
     488,   484,  1192,  1051,  1017,  1347,   615,    56,    61,    43,
     655,  1274,   987,    54,  1277,  1683,  1298,   851,  1527,  1204,
    1526,  1230,   604,    76,    61,   975,  1189,   549,   759,  1585,
    1823,  1352,  1236,  1826,  1781,  2075,  1480,   585,  1354,  1491,
    1185,  1558,  2196,  1559,   485,  1291,   750,  1561,  1562,  2134,
     617,  2140,  1502,  1498,  1401,  1538,    57,   590,  2166,  2532,
    2534,  2171,  1589,  2553,  2134,   618,  2555,  1409,   845,   752,
     760,  1307,    57,  1721,  1722,  2099,  1050,  2159,  1056,   732,
    1060,  1531,    83,  2189,  2564,  2379,    57,   625,  2232,  2233,
    2234,   560,   603,  2567,   602,  2340,  2244,   868,  1642, -1813,
   -1813, -1100,  -729,  1216,  1217,   492,  2036,  2037,  -729, -1097,
   -1097,  2057,   852,  1794, -1640, -1100,   633,   616,  1010, -1641,
    2901,  2396, -1787, -1787, -1642, -1075, -1541, -1788, -1788,  1013,
   -1643,  1237, -1789, -1789,  1228, -1644,    57,  1193, -1790, -1790,
    1844,  1494,  2725, -1791, -1791,  -721,  -726, -1647,   868,  1563,
    -726,   594,  1529,  2086,  2087, -1794, -1794,   557,   557,  2253,
   -1647, -1656,   556,  1734,  1416, -1656,   868, -1662, -1664,   744,
   -1664,  1280,  1483, -1803, -1803, -1809, -1809, -1666, -1811, -1811,
   -1101, -1101, -1640, -1641, -1642, -1814, -1814, -1643, -1098, -1098,
    1847, -1644,  -688,  -701, -1662,  1734,  -447, -1666,  -407,  2669,
    -716,  1659,  1503,   556,  1466,  -450,   556,  1210,  1237,  2018,
    1494,  1363,  2982,  2708,  2857,  2826,  1365,  1656,  1658,   976,
   -1541,  2224,  2703,  1236,  2039,  1237,  2293,  2295,  2870,  2040,
    1413,  1285,   556,  2684,  1511,  1285,   868,  1514,  1515,  1237,
     868,  2418,  1371,  2812,   668,   607,   612,  -178,     3,     4,
    2868,  1211,  -178,  3026,  2726,  2039,  2774,  1778,  2568,  1024,
    2040,  2192,  2260,  2904,  2903,  1025,  2753,  3073,  1448,  2727,
    2886,  1486, -1541,  1363,  1373,  1919,  1536,  2871,  1365,  2680,
    3064, -1784, -1784,  2039,    26,  1582, -1541,  1537,  2040,  2587,
    -447, -1541,  2653,  2972,   571,  1850, -1541,  1553,  1553,  -450,
    1216,  1217,  2801,  2220,  1371, -1541,  1755,    84,   553, -1541,
    1363,   735,  2405,  2666,  2386,  2394,  2221,  -662,  2723,  2714,
    1525,    31,   851,  1931,  -948,   612,  1228,  3062,  2466,   851,
    2437,  -948,  2729,   608,  2329,  1865,  1373,   556,  1000,  1510,
   -1541,  1771,  1343,  1414,  1363,  2983,  2626,   552,  1772,  1365,
    2630,  -968,    85,   744,  1521,  2305,  2702,   610,  -968,  2436,
   -1541,  1189,    33,  3054,   555,  1355,  2396,  2724,  3080,  1554,
    2716,  1026,  2678,  1373,  1449,  1371,  2719,  2720,  1522,  1299,
    2446,  2134,  1645,  2134,  2801,   977,  2667,   978,   737,  2883,
    2387,  -574,  2824,  1866,  1411,  1504,   597,   572,  2193,  1779,
    2467,  2189,  1851,  2189,  2447,  2427,  3049,  1373,   605, -1541,
    1698,  2930, -1541,  2872,    36,  2572,  1555,  1555, -1541,  2569,
    1238,  1411,  2984,  1488,  2388,   611,  1212,  3074,  3016,  2905,
    3065,  1920,  1756,  1320,  1479,  2869,  2807,  2681,  1683,  2588,
    2389,  1001,   701,   851,   851,  2679,  2120,  2121,  1757,   554,
    2390,  2728, -1541,  1758,  -662,  2817,  1540,  1501,  2309,  2310,
    2311,  2312,  2313,   606,  1415,  2317,  2318,  2319,  2320,  2321,
    2322,  2323,  2324,  2325,  2326, -1541,  1501,  3033,   595,  1985,
    1987,  1530,  -447,  2468,  2391,   969,   619,  2840,  3022,  1541,
    1759,  -450,   744,  2927,  1983,   735,  1984,  1238,  1918,  1860,
     643,    61,   641,   612,  2654,  2764,   642,  2658,  1844,  2581,
    2142,  2169,  2753,  2995,  1238,  2709,   645,  1941,  2161,  2358,
    2359,  1477,  1432,  2670,  1735,  1027,  1692,  1646,  1238,   746,
     604,  2118,  1478,  1213,  1024,  1639,  1527,  1489,   850,  2833,
    1025,   669,   637,  2532,  2534,  -447,   638,  1428,  2801,    57,
    2225,    61,   493,  2813,  -450,   847,  2101,  2174, -1541,  1231,
    2616,  1574,   609,  3005,  1018,  1231, -1541,   488,   488,  1932,
    3027,  2392,   737,  3055,  1239,   617,  1028,  2693,  2694,  2585,
    1029,  1232,   636, -1541,  1336, -1541, -1541,  1232,  2763,  1214,
     618,   488,  2144,  2767, -1100,  1233,  2769,  1918,  1185,    57,
     603,  1235,  1417,  2660,   651,  2244,   980, -1640, -1100,  2754,
    1030,  2743, -1641,    56,    61,    43,   637, -1642, -1075,    54,
     638,  1792, -1541, -1643,   854, -1541, -1541, -1541, -1644,    76,
    1106,   488,  1186,  1343,   735,   998,  1979,  1760,  -721,  -726,
   -1647,  1615,   616,   613,  2134,  1833,  1026,  2801,  2134,  2929,
    1586,  1587,  3056, -1647, -1656,  1358,  -447,   989, -1656,  2765,
   -1662, -1664,    57, -1664,  2935,  -450,   979,  2936,  1273,  1660,
   -1666,   744,   620, -1101, -1101, -1640, -1641, -1642,  1031,  3057,
   -1643,  -948,  1276,  2657, -1644,  1218,  1222, -1662,    83,   853,
   -1666,   557,   855,  -716,  1394,  -447,  1407,  -447,  1773,  1795,
    1644,  2996,  1624,  1521,  -450,  1006,  -450,  2055,  -968,  1895,
    1007,   737,  1503,   746,   966,  2424,  1289,  1290,  1683,  1898,
    1289,  1290,  1901,  2707,  2240,  2241,  1865,  1522,  1643,  2878,
    1343,   970,  -178,  -178,  1650,  2052,  2053,  2054,  2055,   663,
    1644,  1189,  1565,   542,  2931,  1006,  1820,  1696,  2553,  2659,
     488,  1389,  1390,  1391,  1392,  1393,  1394,   851,  3000,  1503,
    1807,  2050,  2051,  2052,  2053,  2054,  2055,  1612,   732,  2712,
     666,  1719,  1731,  2368,  2369,  2370,  2371,  1503,  1355,  1008,
    2425,   750,  1606,  1594,  2186,  2853,   569,  1644,  1610,  1961,
    1516,  2003,   587,  2854,  2314,  1644,   667,  1189,  2345,    87,
    1027,  2276,   971,  2197,  2149,  2911,  1607,  2280,   845,  2720,
    1616,   856,  1185,   735,  2143,   862,  2532,  2534,  1352,  1008,
    2001,  2079,   857,  1494,  1391,  1392,  1393,  1394,  1009,  2387,
    1532,  2008,   744,  1821,  1495,  -496,  2009,  2810,  2091,  2150,
    -496,   495,   626,   850,  2994,  1503,  1968,   670,  1024,  1363,
     850,  1106,   746,  1451,  1025,  1029,  1347,   671,   744,   744,
      61,  1527,  2450,  2388,  2912,  2092,   672,  1990,   488,  1991,
    1024,  2677,  1993,   744,  1451,  2235,  1025,  2134,  3075,  2632,
    1371,  1894,  1737,  1692,  1692,  1030,  2134,  2010,  1692,  2390,
     737,  2134,  2686,  1503,  2134,  1535,  1953,   488,  1954,  1452,
    2691,  2354,   496,  1887,  3002,  1504,  2169,  1723,    57,  -496,
    2453,  1006,  1373,  2134,   604,  2198,   495,   488,   488,   488,
    1452,   488,   488,  1914,  1915,  1916,  2163,  1857,  1669,  2226,
    1692,  1692,  1517,  3003,  2315,   756,  1670,  1671,  1672,  1673,
    1518,   556,  3060,  1808,  2316,   488,  1323,  1986,  1988,  1989,
    1231,  1024,  1504,  1031,  1893,   858,   758,  1025,  -496,  1453,
    1026,    88,  2855,  2223,   850,   850,  1185,  1501,  1220,    89,
    1504,  2200,  1232,  1904,   735,   860,  2261,   496,  1911,  2907,
    2825,  2268,  1026,  2093,  1345,  1008,  1294,  1564,  2094,   861,
    1229,  1440,  1441,  1294,  1447,  2134,  1965,   744,   488,  2479,
     735,   735,   488,   488,  2739,    90,   618,   618,  1454,   618,
    2392,  2227,    26,   488,  1501,   735,  1503,    26,  1247,  1248,
    1024,  2440,   998,  1271,  2307,   862,  1025,  2134,  1896,  1454,
    1494,   746,  1501,  1899,  1009,  2925,   867,  1869,  1504,  2039,
     863,  1497,  1564,  1940,  2040, -1816, -1816, -1816,   647,    31,
     648,   737,    91,  2330,    31,  1956,  1106,  1618,   616,   616,
    2007,   616,   868,  1026,  2011,  2815,  2012,  1106,  1455,  1027,
    2457,  1357,  1253,  1254,   499,   968,   500,   737,   737,  1528,
    1360,  2867,  1226,  1227,     3,     4,  1504,  1253,  1254,  1455,
      33,  1106,   737,   983,  1408,    33,  1558,   851,  1559,  2867,
    1501,   503,  1561,  1562,    34,  1418,  2441,  1294,  1294,    34,
     851,   974,  1683,  2458,  1027,  1620,  1231,  2068,   637,   990,
     868,   637,   638,  2134,  2199,  1410,  2200,   744,    35,  2459,
    2095,   991,  1026,    35,  2231,  2208,  1027,  2210,  1232,   735,
    1977,  2096,  1809, -1782, -1782,  2172,   542,    36,  1501,   499,
     868,   500,  1233,  1347,  2201,  2089,  2967,  2598,  2858,  2134,
     658,  1743, -1783, -1783,  2386,  1054,  1220,  2289,  2477,  1029,
    2756,  2470,  2442,   993,  2443,  2757,   503,   994,  2067,  2138,
    2069,  2070,  1257,  1258,  1229,  2014,    92,  1058,  1744,   491,
    1186,  1029,   746,  1231,   996,   540,   659,  1257,  1258,  1055,
    2434,   964,   965,  2951,   967,   649,   570,   650,  2168,  1504,
     583,  1283,   488,  2550,  1284,  1232,   737,  1027,   746,   746,
    1426,  1059,  2469,  1427,  2478,  3071,   997,  2460,  1638,  1235,
     744,  1639,  2252,   746,  2461,  1692,  1692,  1692,  1692,  1692,
    2387,  1004,  1692,  1692,  1692,  1692,  1692,  1692,  1692,  1692,
    1692,  1692,  3050,  3051, -1785, -1785,  1640,  3034,  2134,  1641,
     637,  2416, -1075,  2636,   638,  1019,  2639,  1031,  1856,   735,
    1021,  1501,  1029,    26,  2388,   744,  3052,  1022,   850,   661,
    2278,  2279,  1803,  1023,   738,  1276,  1027, -1786, -1786,  1031,
    2389,    61,  1035,  2249,  1186,   847,  1692,  1692, -1792, -1792,
    2390,  1745,  1030,  2256,  1036,  3078,  1746,   488,  1053,   488,
      31,  1747,   488,   488, -1793, -1793,  2046,   643,    61,   641,
   -1795, -1795,   488,   642,   488,   488,   488,   488,   488,   488,
     488,  1057,  3079,   645,  2391,  1928,  1190,  1902,  1929,    57,
    1969,  1029,  1975,  1641,  1997,  1976,   737,  1998, -1796, -1796,
     488,    33,   488,  2214, -1797, -1797,  2215,   746,   488,   488,
     488,   488,   488,   488,  1186,    34,    57,  1191,   488,   488,
    1031,  1903,   735,   488,  2113,  2218,  2114,   488,  2219,  2721,
     488,   488,   488,   488,   488,   488,   488,   488,   488,    35,
    2169,   488,  2841,  2742,  1362,  1194,  2270,  1363,   488,  1639,
    1624,  1106,  1365,    36,  1186,  1674,  1675,  1676,   495,  1677,
    1678,  1679,  1680,  1681,  1682,  2414,  2526,   735,  2415,  1196,
      26,  2392,  1198,   488,  2419,  1781,  1207,  2420,  1371,  1214,
    2559, -1146,  1741,  1929,  2579, -1816,  1199,  2580,   980,  1031,
   -1798, -1798,  1811,  2842,   488,  2599,  2477,  2661,  1641,   737,
    1209,  2744,  2843,  1748,  1641,   488,   488,    31,  1221,  2832,
    1373,  1665,  1929,   610,  1749,  1644,  1242,  2860,   738,   496,
    1641,  2863,  1024,   851,  2864,  1224,  2880,  -497,  1025,  2881,
    1218,  2844,  -497,  2621, -1799, -1799,  2335,   746,   656,  2884,
    1222,    57,  2881,  1186,   737,  1186,  1869,  2621,    33,  1225,
     867,  2284,   543,  2039,  2899,  1255,  1256,  2900,  2040,  2041,
    2042,  2043,    34, -1816, -1816, -1816,  1241,  2050,  2051,  2052,
    2053,  2054,  2055,   497,  2941,  2942,  2954,  2900,  1641,  2881,
    2088,   611,  2975,  2650,  1106,  2976,    35,   488,   488,  3006,
     488,  3043,  3007,  1244,  2881,  2859,  2577, -1800, -1800,  1644,
     544,  -497,  2845,  3061,  1796,  1272,  2900,  3017,  1186,  3018,
     657, -1816, -1801, -1801,  2846,  2301, -1802, -1802,  2401,  1106,
    2115,  2211,  2116,  2213,  2433,   488,  2435, -1816,  1279,  2631,
    1957,  2634, -1816,  2308,  1026,  1003,   744,  1005, -1804, -1804,
     746,   495,   628,   498,   631,  1275,   635,    26, -1805, -1805,
    -497,  1278,    26, -1806, -1806,  1281,   740,   738,  1282,   612,
    2331, -1807, -1807,  1300, -1146, -1808, -1808,  2336,   850, -1816,
    1310,  1887,  2549,  2535,    26, -1810, -1810, -1812, -1812,    57,
    1311,   850,  1313,  1106,    31,   746,  3070, -1815, -1815,    31,
     488,   499,  1315,   500,  2578,   488,  1543,  1544,  1692,   658,
    1845,  1846,   496,  -548,  -548,   744,  1257,  1258,  -692,   501,
    -699,    31,  1318,  2169,  1320,   502,  2689,  1319,   503,  -552,
    -552,  -551,  -551,   744,  1382,    33,   604,  1321,  -689,  -690,
      33,  2830,   488,   488,   488,   659,  1322,   488,  2044,    34,
    1422,  1424,    36,  1324,    34,   488,   488,   488,   488,   512,
     744,  -693,    33,   541,  -574,   488,  1939,   744,  -575,   488,
    2045,   562,   488,    35,  1325,  1326,    34,  1328,    35,  1329,
    1330,   660,   601,   601,  1331,  1332,   604,    36,   735,   488,
     488,   744,    36,  -691,   488,  1333,  1334,  2556,  1027,  1340,
      35,  1335,  1336,  1353,  2698,  2699,  1345,  2289,   488,   613,
    1356,   488,  1402,   488,    36,  2847,  1399,  1404,  2848,  1405,
    1420,  1294,  1429,  1430,  2529,  2006, -1816,  1433,   661,  1439,
    1007,  1009,  1473,   488,  1294,  1475,   629,  1481,  1499,  1500,
    2046,  1692,  1501,  1507,   488,  2132,   738,  1189,  1506,  1909,
     740,  1508,  1512,  1029,  1519,   604,  1345,   735,  1520,   488,
    2132,  1524,  1644,  1534,  1539,   737,  1546,  1547,  1551,  1556,
    1557,   643,    61,   641,  1741,   735,  1571,   642,   488,  1230,
    1564,  1567,  1570,  1910,   499,  2576,   500,   645,   485,  1573,
    2108,  1575,  1581,   488,   488,   868,  1588,  1590,  1591,  1611,
    1597,  1598,   735,   485,  1601,  1602,  2125,  1603,   502,   735,
    1604,   503,   488,  1637,   744,  1646,  1651,  1363,  1347,  1711,
      57,  2125,  1713,  1715,  1716,   603,  1718,  1733, -1816,  1740,
    1186,  1186,  1186,   735,   737,  1389,  1390,  1391,  1392,  1393,
    1394,   486,  1717,  1754,  1751,  1775,   513,  1752,  1776,  1790,
     513,  1031,   737,  1812,  1797,   558,   558,   561,   513,   566,
    2526,  1804,   566,  1805,   611,   566,   592,  1824,  1834,   513,
     513,  1106,  1835,  1836,   867,   744,  1839,  2039,  1837,   737,
    1855,  1838,  2040,  2041,  2042,  2043,   737,  1862,  1863,   740,
    1858,  1864,   612,  1926,  1930,  1692,  1934,  1942,  1943,  1944,
    2347,  1958,  1962,  1963,  1966,  1527,   746,   738,  1967,  1964,
     737,  1971,  1970,  1972,  1992,   566,   488,  1973,  1974,  1981,
    2675,  1982,   592,   513,   592,   592,   592,  1994,  1995,  1996,
    2004,  2016,  2015,   738,   738,  2022,  2024,  2047,  2048,  2049,
    2027,  2050,  2051,  2052,  2053,  2054,  2055,   744,   738,  2025,
    2026,  2064,  1186,  2032,   850,  2028,   735,  2029,  2085,   646,
    2031,  2035,  2058,  1957,  2090,  2059,  2065,  2072,  2083,  2097,
    2106,  2107,   488,  2109,  2111,   746,  2110,  2136,  2146,  2217,
    3001,   488,  2148,  2160,   488,  2697,  2155,   488,  2162,  2164,
    -553,  -554,  2175,   746,   488,   488,   488,   488,   488,  2818,
    2178,   488,   488,   488,   488,   488,   488,   488,   488,   488,
     488,  2179,    57,   851,   488,   488,  2364,   735,   488,  2176,
     746,  2180,   604,  2184,  2243,   488,  2182,   746,  2185,  2188,
     488,  2207,  2209,   737,  2236,  2222,  2228,  2229,  2238,   488,
    2230,  2237,   488,  2239,   488,  2247,  2248,  2258,  2262,  2251,
    2266,   746,   488,   604,   973,   488,   488,  2259,  2263,  2269,
     488,   488,  2273,  2275,  2285,  2292,  2300,  2061,   740,  2039,
     604,  2060,   738,  2282,  2283,   744,   488,  2132,   488,  2132,
    2337,  2332,  2333,  2353,  2045,  2352,  1020,  2334,  2338,   735,
     488,   741,  1345,  2350,   737,  2356,  -459,  1294,  2365,  2366,
     488,  2118,  2290,  2377,  2291,  2385,  2403,  2408,  2296,  2297,
    -459,   744,  2413,  2399,  2411,  -459,   488,  2417,  2428,  2432,
     485,  2465,   485,  1345,  1201,  1203,  1205,  1206,  2438,  2409,
    2439,  2562,  2566,  2526,  2426,  2445,  2481,  2546,  2375,  2547,
    2378,  2548,  2552,  2561,  2575,  1929,  2586,  2573,  2592,  2622,
    2583,  2589,  2627,  2590,  2046,  2628,  2635,  2591,   665,  2593,
    2641,  2607,  2619,  2618,  -459,  2642,   737,  2625,  2640,  1186,
    2910,  2643,  2645,  1186,  2533,  1186,  2656,  2662,  2664,  2663,
    1037,  2668,  2672,   744,  -459,  2673,  2682,   755,  2685,  2674,
    2687,  2705,  2688,  2692,  2706, -1097,  2715,  2717, -1782,  1038,
    2718, -1783,   738,  2730,  2704,  2733,  2731,  2713,  2529,  2944,
   -1784, -1785, -1786, -1787, -1788,  2554, -1789,   735,  2737, -1790,
   -1791, -1792,  2974, -1793, -1795, -1796, -1797, -1798, -1799,   740,
   -1800, -1801, -1802,  -459, -1804,   746,  2570, -1805,  2571, -1806,
   -1807, -1808,  -459, -1809, -1810, -1811,   601,  2978,  2736, -1812,
    1039, -1813,   488,   735, -1814,   740,   740, -1815, -1098,  2740,
    2955,  2768,  2957,  2791,    57,  2741,  2755,  2797,  2795,  2773,
     740,  2803,  2805,  2806,  2808,   741,  2882,  2820,  2821,  2882,
    2822,  2829,  2836,  2831,  2450,    57,  2837,    57,  2861,  2838,
    2451,  2922,  2865,  2851,   737,  2873,  2852,  2874,   744,  2875,
    2877,   488,   488,  2452,  2893,   738,   488,   746,  2885,  2887,
    2889,   488,  2901,  2896,   488,   488,  2915,  2531,  2681,   488,
    2919,  2921,  2923,  2926,  2932,   735,  2937,  2938,  2939,   592,
     737,  2943,  2453,   653,  2454,   744,   654,  2947,  2910,   488,
    2132,  1040,  2243,   488,  2132,   513,  2948,  2956,  2959,  2960,
     738,  2047,  2048,  2049,  2962,  2050,  2051,  2052,  2053,  2054,
    2055,  2973,  2977,  2985,  2991,   488,   744,  2980,  2992,   744,
    2969,  2993,   654,   513,   513,  2997,  2998,  2999,  3015,  3025,
    2649,  2651,  -459,   485,  3008,  3009,  3010,   485,  3012,   558,
    3028,  3030,  1041,  2609,   740,  3044,  3045,  3042,  3047,   488,
    1042,  2125,   737,  3026,  3027,  2125,  3063,   488,   961,   961,
     566,   566,  1043,   566,   741,  3072,  3076,  3068,  3069,  2455,
    3077,  3081,  2480,   995,   592,  1889,   488,  2484,  2205,    57,
      57,  2421,  2652,   513,  2968,   746,   743,  1425,  2796,  3019,
     735,  2989,  2560,  1044,   592,  2695,   637,  3059,  2816,   993,
     638,  3024,  3053,  3031,  2850,  2187,   592,  3021,  2212,  1490,
    2565,  2449,  1436,  3029,  2485,   867,  2183,  3020,  2039,  2286,
    1584,  2533,  1605,  2040,  2041,  2042,  2043,   735,  2738,  2245,
    2551,  2529,  1431,  2167,  1854,  1412,  1470,  2456,  1482,  2950,
    1046,  2348,  2457,  1469,   592,   592,   592,   592,  2964,  2177,
    3048,  1509,  1831,  2407,  3011,  2647,  2958,  2895,   735,  1853,
    2646,   735,  1047,  2145,  1474,  2380,  2879,   737,  2633,  2617,
    2376,  2946,  1533,  2945,   740,  2952,  1655,  2953,   867,  2722,
    2794,  2039,  1049,  1657,   850,  2458,  2040,  2041,  2042,  2043,
     488,  1661,  1662,   746,  3013,  3041,   488,  3014,  2081,  1780,
    2170,  2459,  2104,  1925,   737,   488,   488,  2019,   963,   488,
    2139,  2648,  2102,  2406,  2250,  2940,  1617,  2013,  2422,  1799,
       0,   744,   488,  2132,     0,  1434,     0,  1801,    57,     0,
       0,   488,  2132,     0,     0,   737,   488,  2132,   737,   488,
    2132,     0,     0,   741,     0,     0,   488,   488,     0,     0,
       0,     0,     0,  1362,     0,     0,  1363,     0,   488,  2132,
     488,  1365,  1366,  1367,  1368,     0,   485,     0,     0,     0,
     743,     0,     0,     0,     0,   485,     0,   740,   488,  1369,
     485,     0,     0,   485,     0,     0,     0,  1371,   601,     0,
       0,     0,  3023,  2125,  1372,     0,     0,     0,  2125,  2460,
       0,  2125,   485,     0,     0,     0,  2461,     0,  2533,     0,
       0,   738,     0,     0,  1566,     0,     0,     0,     0,  1373,
       0,     0,   740,     0,     0,  2045,     0,  1294,     0,     0,
       0,     0,  2834,     0,     0,     0,     0,     0,     0,     0,
     488,  2132,     0,     0,   488,   746,     0,  1312,     0,     0,
       0,     0,     0,     0,  2722,     0,     0,     0,     0,     0,
       0,     0,     0,   735,     0,     0,     0,     0,   488,     0,
       0,     0,   488,  2132,     0,     0,   746,   604,     0,   746,
     738,    57,     0,     0,   485,   488,     0,     0,  2045,     0,
       0,     0,  2793,     0,     0,  2046,     0,  1614,   738,   488,
       0,     0,   488,    57,   741,     0,     0,     0,     0,   743,
       0,     0,  1186,     0,  1351,     0,   485,   488,     0,     0,
    1374,  1625,     0,     0,     0,   738,     0,     0,     0,     0,
     741,   741,   738,     0,  2125,     0,  1375,     0,     0,     0,
     737,  1376,     0,     0,     0,   741,     0,  1345,     0,     0,
       0,  2531,     0,     0,  2934,  1037,   738,   592,  2046,     0,
       0,     0,     0,  1377,  1378,     0,  1626,     0,   488,  2132,
       0,     0,     0,     0,  1038,   513,   513,     0,  1379,     0,
       0,   592,   592,  1438,     0,     0,     0,     0,     0,   488,
       0,   488,  1627,   488,     0,     0,     0,   488,     0,     0,
       0,     0,     0,    57,   488,  2132,     0,     0,   592,  1493,
    1628,     0,   485,  2965,  1629,     0,  1380,     0,     0,  1381,
    1789,   592,     0,     0,     0,  1039,     0,   488,     0,     0,
       0,     0,     0,  1382,     0,     0,  1630,     0,   592,  1631,
       0,  1798,   592,  1800,     0,     0,     0,   488,   485,     0,
       0,     0,     0,     0,  1632,     0,     0,     0,     0,     0,
     488,     0,    57,     0,     0,  1245,  1246,     0,     0,   741,
       0,     0,     0,     0,  1608,     0,  1609,     0,  2928,   738,
    1186,  2533,     0,  1362,     0,     0,  1363,     0,   743,     0,
    1849,  1365,  2047,  2048,  2049,     0,  2050,  2051,  2052,  2053,
    2054,  2055,     0,   488,  2132,     0,   488,   488,     0,  3032,
       0,     0,     0,     0,     0,     0,  1040,  1371,     0,     0,
       0,     0,     0,     0, -1816,  1384,     0,     0,     0,     0,
       0,     0,     0,   740,     0,     0,     0,     0,     0,   488,
     738,  1247,  1248,     0,     0,     0,  1633,   485,     0,  1373,
       0,     0,     0,     0,  1634,  2047,  2048,  2049,    57,  2050,
    2051,  2052,  2053,  2054,  2055,     0,     0,  1041,     0,  1935,
    1937,     0,     0,     0,     0,  1042,  1550,     0,     0,     0,
     488,     0,     0,     0,   592,     0,     0,  1043,     0,     0,
       0,     0,     0,  1579,     0,     0,     0,  1635,     0,   741,
       0,     0,   740,     0,     0,     0,  1249,  1250,  1251,  1252,
    1253,  1254,   738,     0,  1255,  1256,     0,     0,  1044,  2098,
     740,     0,     0,     0,  2531,     0,  1596,  1385,     0,     0,
    1386,  1387,  1388,     0,  1389,  1390,  1391,  1392,  1393,  1394,
       0,     0,     0,     0,     0,     0,     0,   740,     0,   743,
   -1816,     0,     0,     0,   740,     0,     0,   654,   654,     0,
     513,   513,     0,   513,   654,  1046, -1816,   592,     0,     0,
       0, -1816,     0,     0,     0,   743,   743,     0,   740,     0,
       0,     0,     0,  1861,     0,     0,     0,  1047,     0,     0,
     743,     0,     0,  1870,     0,  1873,     0,     0,  1884,     0,
       0,     0,   741,     0,  1888,     0,  1890,  1049, -1816,     0,
       0,   -39,     0,     0,  1685,     0,     0,     0,  1897,     0,
    1257,  1258,     0,  1900,     0,  1710,     0,  1905,  1906,  1907,
    1908,     1,  1912,  1913,     0,     0,     0,     0,     0,     0,
     738,     2,     0,     3,     4,     0,     0,   741,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   654,     5,
       0,     0,     0,  1382,     0,  1037,     0,     0,     6,     0,
       0,     0,     0,     0,     0,     0,   738,     0,     0,     0,
       7,     0,     0,     0,  1038,     0,     0,     0,     0,   961,
     592,     8,     0,     0,     0,     0,     0,     0,     0,  2117,
       0,   740,     0,     9,     0,    10,     0,     0,     0,     0,
       0,   592,     0,   592,   743,     0,     0,     0,     0,     0,
       0,     0,  1813,    11,  1819,     0,     0,     0,     0,     0,
       0,     0,     0,  1259,  1260,  1039, -1543,    12,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    13,   738,     0,
       0,     0,     0,    14,     0, -1816,     0,     0,     0,     0,
     592,    15,   740,    16,    17,     0,     0,     0,     0,  1493,
     513,     0,     0,     0,     0,     0,     0,    18,     0,     0,
     513,  1871,   513,  1875,  1362,   513,     0,  1363,     0,     0,
       0,   513,  1365,   513,     0,     0,     0,     0,     0,     0,
       0,     0,  2473,     0,   654,   513,    19,     0,     0,   654,
     513,     0,     0,     0,   513,   513,   513,   513,  1371,   513,
     513,    20,     0,     0,     0, -1816,  1040,     0,     0,     0,
   -1543,     0,     0,     0,   740,     0,     0,     0,     0,   592,
     592,  1938,     0,     0,   743,     0,     0,    21,     0,  2246,
    1373,     0,     0,     0,     0,     0,  1952, -1816,  2254,  2255,
    2257,     0,     0,   738,  1389,  1390,  1391,  1392,  1393,  1394,
       0,     0,     0,     0,     0,     0,     0,  1041,     0,  2274,
       0,     0, -1543,     0,     0,  1042,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1543,  1043,     0,     0,
     738, -1543,     0,     0,     0,     0, -1543,     0,     0,  1614,
       0,     0,     0,     0,     0, -1543,     0,     0,     0, -1543,
    2357,     0,     0,     0,    22,     0,     0,    23,  1044,     0,
       0,   738,     0,     0,   738,     0,     0,  1362,     0,     0,
    1363,     0,     0,     0,     0,  1365,     0,   743,     0,     0,
   -1543, -1816,     0,     0,     0,     0,    24,     0,   741,     0,
       0,     0,   740,     0,     0,    25,     0, -1816,     0,     0,
   -1543,  1371, -1816,     0,     0,  1046,     0,     0, -1816,    26,
       0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
      28,     0,   743,     0,   513,     0,     0,  1047,   740,     0,
      29,  1351,     0,  1373,     0,     0,     0,     0,     0, -1816,
       0,     0,    30,     0,     0,     0,    31,  1049,     0, -1543,
       0,     0, -1543,     0,     0,     0,     0,   741, -1543,     0,
       0,     0,     0,     0,  2372,  2373,  2374,  1685,     0,     0,
       0,     0,     0,     0,     0,   741,     0,     0,     0,     0,
       0,     0,    32,     0,  2265,     0,     0,    33,     0,     0,
       0,     0, -1543,     0,  1382,     0,     0,     0,     0,   592,
     740,    34,   741,  2360,     0,  2135,     0,     0,     0,   741,
       0,     0,     0,     0,     0, -1543,     0,     0,     0,     0,
    2135,     0,     0,  2429,  2154,    35,     0,  2157,     0,  1819,
       0,     0,     0,   741, -1816,  1362,     0,     0,  1363,    36,
       0,     0,   -39,  1365,  1366,  1367,  1368,     0,     0,     0,
   -1816,     0,     0,  1362,     0, -1816,  1363,     0,     0,     0,
       0,  1365,  1366,  1367,  1368,     0,   738,     0,     0,  1371,
       0,  2118,     0,     0,     0,     0,  1372,     0,     0,     0,
       0,  1550,     0,     0,     0,     0, -1816,  1371,     0,     0,
       0,     0, -1816,     0,  1372,     0,     0,  2558, -1543,     0,
       0,  1373,     0,     0,     0,     0, -1543,     0,     0,     0,
       0,     0,     0,     0,     0,   740,     0,     0,     0,  1373,
       0,     0,     0, -1543,     0, -1543, -1543,     0,     0,     0,
    1614,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1550,     0,     0,  1382,     0,   592,
       0,     0,   740,     0,     0,     0,   741,  1550,   592,   592,
     592,     0, -1543,     0,     0, -1543, -1543, -1543,     0,     0,
       0,   513,     0,     0,     0,     0,     0,     0,     0,   592,
       0,     0,     0,   740,     0,     0,   740,     0, -1816,     0,
       0,  2281,     0,     0,     0,  1389,  1390,  1391,  1392,  1393,
    1394,     0,  1374,     0,     0,     0,     0,   654,  2430,   592,
       0,     0,     0,  2612,  2613,  2614,  2615,   741,  1375,     0,
    1374,     0,     0,  1376,  1550,  1550,     0,     0,     0,     0,
       0,     0,     0,   743,     0,  2482,  1375,     0,     0, -1816,
       0,  1376,     0,     0,     0,  1377,  1378,  1685,     0,     0,
    2536,  2537,  2538,  2539,  2540,  2541,  2542,  2543,  2544,  2545,
    1379,     0,     0, -1816, -1816,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1379,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   741,
       0,     0,     0,     0,     0,     0,     0,     0,  1380,     0,
     867,  1381,   743,  2039,  2683,     0,     0,     0,  2040,  2041,
    2042,  2043,     0,     0,     0,  1382,     0,     0,     0, -1816,
     743,     0,     0,  1362,     0,     0,  1363,     0,     0,     0,
       0,  1365,     0,  1382,   592,   592,   592,   486,     0,  2135,
    2384, -1816,     0,     0,     0,  2384,  2398,   743,  1389,  1390,
    1391,  1392,  1393,  1394,   743,     0,     0,  1371,     0,     0,
       0,     0,     0,     0, -1816,  1608,     0,     0,     0,     0,
       0,     0,     0,  1024,     0,  1819,     0,     0,   743,  1025,
       0,     0,  1362,     0,     0,  1363,  1037,     0,   740,  1373,
    1365,     0,     0,   592,     0,   513,     0,     0,     0,  1550,
    1493,  1550,     0,  1579,     0,  1038,     0,  1384,     0,     0,
       0,     0,     0,     0,     0,     0,  1371,   741,     0,     0,
       0,     0,   513, -1816,  2483,  1384,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   513,   513,   513,
     513,   513,   513,   513,   513,   513,   513,     0,  1373,     0,
       0,     0,     0,   741,     0,     0,  1039,     0,     0,  2361,
     944,   944,  1952,     0,     0,     0,     0,   592,     0,     0,
       0,     0,     0,     0,  1493,     0,     0,     0,     0,     0,
    2676,     0,     0,     0,     0,  1026,     0,     0,  1579,     0,
   -1816,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     592,   743,     0,     0,     0,     0, -1816,  1550,     0,  1385,
   -1816, -1816,  1386,  1387,  1388,     0,  1389,  1390,  1391,  1392,
    1393,  1394,     0,  1101,  1108,   741,     0,  1385,     0,     0,
    1386,  1387,  1388,     0,  1389,  1390,  1391,  1392,  1393,  1394,
       0,     0,     0,     0,     0,     0,     0,  1040, -1816, -1816,
       0,     0,   513,     0,     0,     0,     0,     0,  2594,     0,
       0,  2835,   743,     0,     0, -1816,     0,     0,     0,     0,
   -1816,     0,     0,     0,     0,     0,     0,     0,  2856,     0,
    2046,  2611,     0,   592,   592,   592,   592,     0,     0,     0,
    2384,  2398,     0,  2384,     0,     0,  2620,     0,  1041,     0,
    2135,     0,     0,  1382,  2135,     0,  1042, -1816,     0,     0,
    2638,     0,     0,     0,     0,     0,     0,     0,  1043,     0,
       0,     0,     0,     0,     0,     0,   961,     0,     0,  1293,
    2154,     0,     0,     0,   743,  1819,  1293,     0,     0,  1027,
     741,  1685,     0,     0,     0,     0,     0,  1493,     0,  1044,
       0,  2906,     0,  1550,     0,     0,     0,     0,     0,     0,
       0,     0,  1382,     0,     0,     0,   654,   513,     0,     0,
       0,     0,     0,     0,   592,   867,     0,   741,  2039,     0,
       0,  2933,     0,  2040,  2041,  2042,  2043,     0,     0,     0,
    1045,  2696,     0,     0,  1029, -1816,  1046,     0,     0,     0,
       0,  2601,     0,     0,     0,     0,     0,     0,   741,     0,
       0,   741,     0,  2819,     0,     0,     0,     0,  1047,     0,
       0,     0,     0,  1359,  1048,     0,     0,     0,     0,     0,
       0,     0,     0,  2827,  2828,     0,     0,     0,  1049,     0,
       0,     0,     0,     0,  1101,     0,     0,     0,  1293,  2839,
    1293,  1293,     0,     0, -1816,     0,     0,     0,     0,     0,
       0,  1316,   743,     0,     0,     0,     0,  1550,     0,     0,
       0,     0,     0,     0,     0,     0,  1952,  2047,  2048,  2049,
       0,  2050,  2051,  2052,  2053,  2054,  2055,     0,  2734,     0,
    1327,     0,  1031,     0,     0,     0,     0, -1816,   743,     0,
       0,     0,     0,     0,  1389,  1390,  1391,  1392,  1393,  1394,
    1337,  1338,  1339,     0,     0,  1346,     0,     0,  1293,     0,
       0,  1293,  1293,     0,  2750,  2897,     0,     0,     0,     0,
       0,     0,     0,   486,  2384,     0,     0,  2761,  1403,     0,
     513,     0,  2135,     0,     0,     0,     0,  2135,     0,     0,
    2135,     0,  2772,     0,     0,  2775, -1816,     0,     0,     0,
       0,     0,     0,  1389,  1390,  1391,  1392,  1393,  1394,  2802,
     743,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1557,     0,     0,     0,     0,  2045,     0,     0,     0,     0,
       0,  1446,     0,     0,     0,  1460,  1465,     0,     0,     0,
     513,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   741,     0,     0,  1362,     0,     0,  1363,
     513,   513,     0,  1364,  1365,  1366,  1367,  1368,     0,     0,
       0,   592,     0,  1493,     0,     0,   513,     0,     0,     0,
       0,     0,  1369,     0,     0,     0,     0,     0,   592,  1101,
    1371,  2802,     0,     0,     0,  2046,     0,  1372,     0,     0,
    1101,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     513,     0,     0,     0, -1557,     0,     0,     0,     0,     0,
       0,     0,  1373,  2135,  1101,   743,     0,     0,  2775,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1583,     0,     0,     0,  2892,     0,     0,     0,
     961,     0,   513,  1592,     0,  1593,     0,     0,     0,     0,
       0,   592,   743,     0,  1599,     0, -1557,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   654,     0,     0,
   -1557,  1600,     0,     0,     0, -1557,     0,     0,     0,     0,
   -1557,   592,     0,   743,     0,     0,   743,     0,     0, -1557,
       0,     0,     0, -1557,     0,     0,     0,     0,     0,  1619,
    1621,     0,     0,     0,     0,     0,     0,     0,     0,   486,
       0,     0,     0,  1374,     0,     0,     0,     0,  2949,     0,
       0,     0,   513,     0, -1557,     0,  2772,     0,     0,  1375,
       0,  1652,  1653,     0,  1376,  1666,  1667,     0,     0,     0,
       0,     0,     0,     0, -1557,  2802,   654,   654,   654,     0,
       0,     0,     0,     0,     0,     0,  1377,  1378,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1379,     0,     0,     0,     0,     0,  1493,     0,     0,
       0,     0,  2047,  2048,  2049,     0,  2050,  2051,  2052,  2053,
    2054,  2055,  2772, -1557,     0,     0, -1557,     0,     0,     0,
       0,     0, -1557,     0,  2892,     0,     0,     0,     0,  1380,
       0,     0,  1381,     0,     0,     0,     0,     0,  1819,     0,
       0,     0,     0,     0,     0,     0,  1382,     0,     0,  1383,
       0,     0,     0,     0,     0,  1649, -1557,     0,  1493,     0,
       0,     0,     0,     0,  2802,  1668,     0,  1686,     0,     0,
    1697,  1700,  1705,  1708,   867,     0,     0,  2039,     0, -1557,
    2761,   654,  2040,  2041,  2042,  2043,     0,     0,     0,     0,
       0,  1843,  1843,     0,     0,  1720,     0,     0,     0,     0,
    2602,  1724,  1725,  1726,  1727,  1728,  1729,     0,   743,     0,
       0,  1738,  1739,     0,     0,     0,  1750,     0,     0,     0,
    1753,     0,     0,  1761,  1762,  1763,  1764,  1765,  1766,  1767,
    1768,  1769,     0,     0,  1770,  2118,     0,  1362,  1384,     0,
    1363,   944,     0,  1293,  1101,  1365, -1816, -1816, -1816,     0,
       0,     0,     0,  1293,     0,  1654,  1293,   556,     0,     0,
       0,     0, -1557,     0,     0,     0,  1802,     0,     0,     0,
   -1557,  1371,     0,     0,     0,     0,     0,     0,  1372,     0,
       0,     0,     0,     0,     0,     0,     0, -1557,     0, -1557,
   -1557,     0,     0,     0,     0,     0,     0,     0,  1338,  1339,
       0,     0,     0,  1373,     0,     0,     0,  1361,     0,     0,
       0,     0,  1362,     0,     0,  1363,     0,     0,     0,  1364,
    1365,  1366,  1367,  1368,     0,     0, -1557,  1978,  1980, -1557,
   -1557, -1557,     0,     0,     0,     0,     0,     0,  1369,     0,
    1385,  1370,     0,  1386,  1387,  1388,  1371,  1389,  1390,  1391,
    1392,  1393,  1394,  1372,  1293,     0,     0,     0,     0,     0,
    2030,  1362,  1245,  1246,  1363,     0,     0,  1293,  1364,  1365,
    1366,  1367,  1368,     0,     0,     0,     0,  1101,  1373,     0,
    1922,  1923,     0,  1924,  2045,     0,     0,  1369,     0,     0,
    2343,     0,     0,     0,     0,  1371,     0,     0,     0,     0,
       0,     0,  1372,     0,  1374,     0,     0,     0,     0,     0,
       0,     0,  1101,     0,     0,     0,     0,     0,     0,     0,
    1375,     0,     0,     0,     0,  1376,     0,  1373,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1247,  1248,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2046,     0,     0,     0,     0,     0,
       0,     0,  1379,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1101,     0,     0,  1374,
       0,     0,     0,  2017,     0,     0,     0,     0,  2023,     0,
       0,     0,     0,     0,     0,  1375,     0,     0,     0,     0,
    1376,     0,     0,  1249,  1250,  1251,  1252,  1253,  1254,     0,
       0,  1255,  1256,     0,     0,     0,  1397,  1382,     0,     0,
       0,     0,  1377,  1378,     0,  2141,     0,  2038,  1374,     0,
       0,     0,     0,     0,     0,     0,     0,  1379,  1705,     0,
    1705,  1705,     0,     0,  1375,     0,     0,     0,  2077,  1376,
       0,     0,  2080,     0,     0,  2082,     0,  1397,     0,  2173,
    2173,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1377,  1378,     0,     0,  1380,     0,     0,  1381,     0,
       0,     0,     0,     0,     0,     0,  1379,     0,     0,     0,
       0,  2100,  1382,     0,  2103,  1383,  2105,  1362,     0,     0,
    1363,     0,     0,     0,  1364,  1365,  1366,  1367,  1368,  1384,
       0,     0,     0,     0,     0,     0,     0,  1257,  1258,     0,
       0,     0,     0,  1369,  1380,     0,     0,  1381,     0,  1245,
    1246,  1371,     0,     0,     0,     0,     0,     0,  1372,     0,
       0,  1382,     0,     0,  1383,     0,     0,     0,     0,     0,
       0,  2047,  2048,  2049,     0,  2050,  2051,  2052,  2053,  2054,
    2055,  1446,     0,  1373,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1397,     0,     0,  1465,  1768,     0,     0,
    1397,     0,     0,  1362,  1384,     0,  1363,     0,     0,     0,
    1364,  1365,  1366,  1367,  1368,  2181,     0,     0,     0,     0,
    2277,     0,     0,     0,     0,  1247,  1248,     0,     0,  1369,
       0,  1385,     0,     0, -1816, -1816, -1816,  1371,  1389,  1390,
    1391,  1392,  1393,  1394,  1372,     0,     0,     0,     0,     0,
    1259,  1260,     0,  1384,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1373,
       0,     0,     0,     0,  1101,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1374,     0,     0,     0,     0,     0,
    1249,  1250,  1251,  1252,  1253,  1254,     0,     0,  1255,  1256,
    1375,     0,     0,     0,     0,  1376,  1385,     0,     0,  1386,
    1387,  1388,     0,  1389,  1390,  1391,  1392,  1393,  1394,  2272,
       0,     0,     0,     0,     0,     0,     0,  1377,  1378,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1379,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1385,     0,     0,  1386,  1387,
    1388,     0,  1389,  1390,  1391,  1392,  1393,  1394,     0,     0,
    1374,     0,  1714,     0,     0,  2299,     0,     0,     0,     0,
    1380,     0,     0,  1381,  2303,     0,  1375,  2304,     0,     0,
    2306,  1376,     0,     0,     0,     0,     0,  1382,     0,     0,
    1383,     0,     0,     0,  1257,  1258,     0,     0,  1397,     0,
       0,     0,     0,  1377,  1378,     0,     0,  2327,  2328,  1397,
       0,  1802,     0,  1693,     0,     0,     0,     0,  1379,  1397,
    1397,  1397,     0,  2339,     0,     0,     0,     0,  1397,     0,
       0,     0,  2346,     0,     0,  2349,     0,  2351,     0,     0,
    1362,     0,     0,  1363,     0,  2355,     0,  1364,  1365,  1366,
    1367,  1368,     0,  2362,  2363,     0,  1380,     0,     0,  1381,
    1293,     0,     0,     0,     0,     0,  1369,     0,     0,     0,
       0,     0,     0,  1382,  1371,     0,  1383,     0,     0,  1384,
       0,  1372,     0,  2402,     0,  1397,     0,     0,     0,     0,
       0,     0,     0,  2410,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1373,  1259,  1260,  2423,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1261,  1397,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1397,     0,     0,     0,     0,  1397,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1384,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1385,     0,     0,  1386,  1387,  1388,     0,  1389,  1390,
    1391,  1392,  1393,  1394,     0,     0,     0,     0,  1714,     0,
       0,     0,     0,     0,     0,     0,     0,  1374,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1375,     0,     0,     0,     0,  1376,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2582,     0,     0,     0,     0,
    1377,  1378,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1379,     0,  1385,     0,     0,
    1386,  1387,  1388,     0,  1389,  1390,  1391,  1392,  1393,  1394,
       0,     0,     0,     0,  2084,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2595,  2596,     0,     0,     0,  2597,
       0,     0,     0,  1380,  2600,     0,  1381,  2603,  2604,     0,
    1293,     0,  2608,     0,     0,  1293,     0,     0,  1362,     0,
    1382,  1363,     0,  1383,     0,  1364,  1365,  1366,  1367,  1368,
       0,  1397,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1369,     0,     0,     0,     0,     0,
    1397,     0,  1371,     0,     0,     0,     0,     0,   944,  1372,
       0,     0,     0,     0,  1619,  1621,     0,     0,  1397,     0,
    1693,  1693,     0,  2056,     0,  1693,     0,     0,     0,  1397,
       0,     0,  1397,     0,  1373,     0,     0,  1397,     0,     0,
    1397,     0,  2671,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1397,     0,     0,     0,  1397,  1397,  1397,  1397,
    1397,  1397,  1384,     0,     0,     0,     0,  1693,  1693,  2690,
    1397,  1397,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1397,     0,     0,  1397,     0,     0,     0,     0,
       0,     0,     0,  1397,  1397,  1397,  1397,  1397,  1397,  1397,
    1397,  1397,  1397,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1397,  1374,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1375,     0,     0,     0,     0,  1376,     0,     0,     0,
       0,     0,     0,     0,  1385,     0,     0,  1386,  1387,  1388,
       0,  1389,  1390,  1391,  1392,  1393,  1394,     0,  1377,  1378,
       0,  2302,     0,  1619,  1621,     0,     0,     0,     0,  2077,
       0,     0,     0,  1379,  1293,     0,     0,     0,  2745,  2746,
       0,     0,  2747,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1380,     0,     0,  1381,     0,     0,     0,     0,  2789,
    2790,     0,     0,     0,     0,     0,     0,     0,  1382,     0,
       0,  1383,     0,  2804,  1397,  1397,  1397,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2814,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1362,     0,     0,  1363,     0,     0,     0,  1364,  1365,
    1366,  1367,  1368,     0,     0,  1362,     0,     0,  1363,     0,
       0,     0,     0,  1365,     0,     0,     0,  1369,     0,     0,
       0,     0,     0,     0,     0,  1371,     0,     0,     0,     0,
       0,     0,  1372,     0,     0,     0,     0,     0,     0,  1371,
    1384,     0,     0,     0,     0,     0, -1816,     0,     0,  1397,
       0,     0,     0,     0,     0,  1397,     0,  1373,     0,     0,
       0,  2876,     0,     0,     0,     0,     0,     0,  2056,  2056,
    1397,  1373,  1693,  1693,  1693,  1693,  1693,     0,  1346,  1693,
    1693,  1693,  1693,  1693,  1693,  1693,  1693,  1693,  1693,  2056,
       0,     0,   944,     0,     0,  2898,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1397,
    2917,     0,  1397,     0,  1397,     0,     0,     0,  2056,  2056,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1397,  1693,  1693,  1397,     0,  1397,     0,     0,
       0,  2605,  1385,     0,     0,  1386,  1387,  1388,     0,  1389,
    1390,  1391,  1392,  1393,  1394,     0,     0,     0,  1374,  2344,
       0,     0,     0,     0,     0,     0,     0,  1293,     0,     0,
       0,     0, -1816,     0,  1375,     0,     0,     0,     0,  1376,
       0,     0,     0,     0,     0,     0,  2789,     0, -1816,     0,
    2961,     0,     0, -1816,     0,     0,     0,     0,     0,     0,
       0,  1377,  1378,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1397,     0,  1362,  1379,     0,  1363,     0,
    2990,     0,  1364,  1365,  1366,  1367,  1368,     0,     0,     0,
   -1816,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1369,     0,     0,     0,     0,     0,     0,     0,  1371,
       0,     0,     0,  2789,  1380,     0,  1372,  1381,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1382,     0,     0,  1383,     0,     0,     0,     0,     0,
       0,  1373,     0,     0,     0,  1382,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3038,
    3038,     0,     0,     0,  1397,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1397,  3038,     0,     0,  1397,  1397,     0,  1397,     0,
       0,  2056,  2056,  2056,  2056,  2056,     0,     0,     0,  2056,
    2056,  2056,  2056,  2056,  2056,  2056,  2056,  2056,  2056,  1397,
    1397,     0,     0,  1384,     0,     0,     0,     0,     0,     0,
       0,  1397,     0,  3038,     0,     0,     0, -1816,  1397,     0,
       0,  1397,  1374,  1397,     0,     0,     0,  1397,     0,     0,
    2056,  2056,     0,     0,  1397,  1397,     0,  1362,  1375,     0,
    1363,     0,     0,  1376,  1364,  1365,  1366,  1367,  1368,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1369,     0,  1377,  1378,     0,     0,     0,
       0,  1371,     0,     0,  1397,     0,     0,     0,  1372,     0,
    1379,     0,  1397,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1037,     0,     0,  1397,     0,     0,     0,     0,
       0,     0,     0,  1373,     0,  1385,     0,     0,  1386,  1387,
    1388,  1038,  1389,  1390,  1391,  1392,  1393,  1394,  1380, -1816,
       0,  1381,  2431,     0,     0,  1693,  1389,  1390,  1391,  1392,
    1393,  1394,     0,     0,     0,  1382,     0,     0,  1383,     0,
    1362,     0,     0,  1363,     0,     0,     0,  1364,  1365,  1366,
    1367,  1368,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1039,  2471,     0,     0,  1369,     0,     0,     0,
       0,  2472,     0,     0,  1371,  1362,     0,     0,  1363,     0,
       0,  1372,  1364,  1365,  1366,  1367,  1368,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1369,     0,     0,  1374,     0,  1373,     0,     0,  1371,
       0,     0,     0,     0,     0,     0,  1372,     0,     0,     0,
    1375,     0,     0,     0,     0,  1376,     0,  1384,     0,  2473,
       0,     0,     0,     0,     0,     0,     0,   515,     0,     0,
       0,  1373,     0,     0,     0,     0,     0,  1377,  1378,     0,
       0,     0,     0,  1040,  1397,     0,     0,     0,  1693,     0,
       0,     0,  1379,     0,     0,  1024,     0,  1397,  1397,  1397,
       0,  1025,  1397,     0,     0,  1397,  1397,     0,  1037,     0,
    1397,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     516,     0,     0,     0,     0,     0,     0,  1038,     0,     0,
    1380,     0,     0,  1381,  1041,     0,   517,  1374,     0,     0,
       0,     0,  1042,     0,     0,     0,     0,  1382,     0,     0,
    1383,     0,     0,  1375,  1043,     0,  2474,     0,  1376,  1385,
       0,     0,  1386,  1387,  1388,     0,  1389,  1390,  1391,  1392,
    1393,  1394,  1374,  1397,     0,     0,  2584,     0,  1039,  2056,
    1377,  1378,     0,     0,     0,  1044,     0,     0,  1375,     0,
     518,     0,  1397,  1376,     0,  1379,     0,     0,     0,     0,
     519,     0,     0,     0,     0,     0,     0,  1026,     0,     0,
       0,     0,   520,     0,     0,  1377,  1378,   521,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1379,     0,  1046,  1380,     0,     0,  1381,     0,     0,  1384,
       0,  2056,  1693,     0,   522,     0,     0,  1397,  1397,  1397,
    1382,     0,     0,  1383,  1047,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1380,  1040,
       0,  1381,     0,     0,  1049,     0,  2475,     0,     0,  2476,
       0,     0,     0,     0,     0,  1382,     0,     0,  1383,   523,
       0,  1397,  1397,   524,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1397,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1397,     0,     0,     0,
    1041,     0,     0,     0,     0,     0,     0,     0,  1042,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1043,  1385,  1384,     0,  1386,  1387,  1388,     0,  1389,  1390,
    1391,  1392,  1393,  1394,     0,     0,   525,     0,  2606,     0,
    2056,  1027,     0,     0,     0,     0,     0,     0,     0,     0,
     526,  1044,     0,     0,     0,     0,     0,  1384,  1397,     0,
       0,     0,     0,  1501,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1397,     0,     0,   527,     0,     0,   528,     0,     0,     0,
       0,     0,  1891,     0,   529,     0,  1029,   530,  1046,  1397,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   531,     0,     0,     0,
    1047,     0,     0,     0,  1385,     0,  1892,  1386,  1387,  1388,
     532,  1389,  1390,  1391,  1392,  1393,  1394,   533,     0,     0,
    1049,  2748,     0,  1397,     0,     0,   534,     0,     0,     0,
       0,     0,   535,     0,     0,     0,     0,     0,     0,  1385,
       0,     0,  1386,  1387,  1388,     0,  1389,  1390,  1391,  1392,
    1393,  1394,  1397,     0,     0,     0,  2811,   536,     0,     0,
       0,     0,  1061,   864,   556,   865,   866,   867,   868,   869,
       0,     0,     0,     0,  1031,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,  1062,   102,   103,
     104,     0,     0,     0,     0,   870,     0,     0,   105,   106,
    1397,   107,   108,   109,  1063,   111,   112,   113,   114,   871,
    1064,   872,   873,     0,   119,   120,   121,   122,   123,   124,
     874,   875,   125,   126,   876,   877,   129,     0,   130,   131,
     132,   133,   878,     0,  1065,     0,   136,   137,   138,   139,
     140,   141,  1066,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,  1067,   153,   154,   155,  1068,  1069,
    1070,  1071,   884,   885,  1072,   161,   162,   163,   164,   165,
     166,   167,   887,   888,   170,   889,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
    1073,     0,   183,   184,   691,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     890,   199,   200,   201,   202,   203,   891,   892,   205,     0,
     206,   207,   893,   209,     0,   210,     0,   211,  1074,     0,
    1075,   214,   215,  1076,  1077,   218,     0,   219,     0,   894,
     895,   222,     0,   223,   224,   225,   226,   227,   228,   229,
    1078,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,  1079,   243,   244,   245,   246,   247,
     248,   896,   897,     0,   898,     0,   252,  1080,  1081,   255,
    1082,   257,   258,   259,   260,   261,   262,     0,     0,   263,
    1083,   265,  1084,     0,   267,   268,   269,   899,   900,   270,
     271,   272,   273,   274,  1085,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   901,  1086,   902,   297,   298,   299,   300,
     903,   301,   302,  1087,   304,   904,   905,   306,   906,   308,
     309,   310,     0,   311,   312,     0,     0,   907,   314,   315,
       0,     0,   316,   317,  1088,   319,  1089,   908,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   909,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   910,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,  1090,   371,   372,   373,   911,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,  1091,   392,   393,   394,   395,   396,  1092,
     398,   399,   913,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,  1093,   415,   914,
     417,     0,   418,   419,     0,   420,  1094,   422,   423,   424,
     425,   426,     0,   915,   916,     0,     0,   429,   430,   917,
     432,   918,   919,   434,   435,  1095,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,  1096,     0,
     448,   449,   450,   451,   452,   453,   922,  1097,   455,  1098,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   923,     0,     0,     0,     0,     0,     0,   924,   925,
    1099,     0,     0,     0,     0,   927,     0,   928,  1100,     0,
       0,     0,   929,     0,   930,   931,    93,   864,   556,   865,
     866,   867,   868,   869,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,   870,
       0,     0,   105,   106,     0,   107,   108,   109,   110,   111,
     112,   113,   114,   871,   116,   872,   873,     0,   119,   120,
     121,   122,   123,   124,   874,   875,   125,   126,   876,   877,
     129,     0,   130,   131,   132,   133,   878,     0,   879,     0,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   880,   881,   882,   883,   884,   885,   886,   161,
     162,   163,   164,   165,   166,   167,   887,   888,   170,   889,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   691,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   890,   199,   200,   201,   202,   203,
     891,   892,   205,     0,   206,   207,   893,   209,     0,   210,
       0,   211,   212,     0,   213,   214,   215,   216,   217,   218,
       0,   219,     0,   894,   895,   222,     0,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,   242,   243,
     244,   245,   246,   247,   248,   896,   897,     0,   898,     0,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,     0,     0,   263,   264,   265,   266,     0,   267,   268,
     269,   899,   900,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   901,   295,   902,
     297,   298,   299,   300,   903,   301,   302,   303,   304,   904,
     905,   306,   906,   308,   309,   310,     0,   311,   312,     0,
       0,   907,   314,   315,     0,     0,   316,   317,   318,   319,
     320,   908,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   909,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   910,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,   370,   371,   372,   373,   911,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    26,   386,   387,   388,   389,   390,   912,   392,   393,
     394,   395,   396,   397,   398,   399,   913,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   914,   417,     0,   418,   419,    31,   420,
     421,   422,   423,   424,   425,   426,     0,   915,   916,     0,
       0,   429,   430,   917,   432,   918,   919,   434,   435,   920,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,   921,     0,   448,   449,   450,   451,   452,   584,
     922,     0,   455,   456,   457,   458,   459,   460,   461,     0,
       0,   462,     0,    34,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   923,     0,    35,     0,     0,
       0,     0,   924,   925,     0,     0,     0,     0,     0,   927,
       0,   928,  2888,     0,     0,     0,   929,     0,   930,   931,
      93,   864,   556,   865,   866,   867,   868,   869,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,   870,     0,     0,   105,   106,     0,   107,
     108,   109,   110,   111,   112,   113,   114,   871,   116,   872,
     873,     0,   119,   120,   121,   122,   123,   124,   874,   875,
     125,   126,   876,   877,   129,     0,   130,   131,   132,   133,
     878,     0,   879,     0,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   880,   881,   882,   883,
     884,   885,   886,   161,   162,   163,   164,   165,   166,   167,
     887,   888,   170,   889,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   691,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   890,   199,
     200,   201,   202,   203,   891,   892,   205,     0,   206,   207,
     893,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   219,     0,   894,   895,   222,
       0,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,   242,   243,   244,   245,   246,   247,   248,   896,
     897,     0,   898,     0,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,     0,     0,   263,   264,   265,
     266,     0,   267,   268,   269,   899,   900,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   901,   295,   902,   297,   298,   299,   300,   903,   301,
     302,   303,   304,   904,   905,   306,   906,   308,   309,   310,
       0,   311,   312,     0,     0,   907,   314,   315,     0,     0,
     316,   317,   318,   319,   320,   908,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   909,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   910,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,   370,
     371,   372,   373,   911,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,    26,   386,   387,   388,   389,
     390,   912,   392,   393,   394,   395,   396,   397,   398,   399,
     913,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   914,   417,     0,
     418,   419,    31,   420,   421,   422,   423,   424,   425,   426,
       0,   915,   916,     0,     0,   429,   430,   917,   432,   918,
     919,   434,   435,   920,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,   921,     0,   448,   449,
     450,   451,   452,   584,   922,     0,   455,   456,   457,   458,
     459,   460,   461,     0,     0,   462,     0,    34,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   923,
       0,    35,     0,     0,     0,     0,   924,   925,     0,     0,
       0,     0,     0,   927,     0,   928,     0,     0,     0,     0,
     929,     0,   930,   931,    93,   864,   556,   865,   866,   867,
     868,   869,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,   870,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   871,   116,   872,   873,  1701,   119,   120,   121,   122,
     123,   124,   874,   875,   125,   126,   876,   877,   129,     0,
     130,   131,   132,   133,   878,     0,   879,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     880,   881,   882,   883,   884,   885,   886,   161,   162,   163,
     164,   165,   166,   167,   887,   888,   170,   889,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   691,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   890,   199,   200,   201,   202,   203,   891,   892,
     205,     0,   206,   207,   893,   209,     0,   210,     0,   211,
     212,  1702,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   894,   895,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   896,   897,     0,   898,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
    1703,   263,   264,   265,   266,     0,   267,   268,   269,   899,
     900,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   901,   295,   902,   297,   298,
     299,   300,   903,   301,   302,   303,   304,   904,   905,   306,
     906,   308,   309,   310,     0,   311,   312,     0,     0,   907,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   908,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   909,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   910,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,   373,   911,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   912,   392,   393,   394,   395,
     396,   397,   398,   399,   913,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   914,   417,     0,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,     0,   915,   916,     0,  1704,   429,
     430,   917,   432,   918,   919,   434,   435,   920,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     921,     0,   448,   449,   450,   451,   452,   453,   922,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   923,     0,     0,     0,     0,     0,     0,
     924,   925,     0,     0,     0,     0,     0,   927,     0,   928,
       0,     0,     0,     0,   929,     0,   930,   931,    93,   864,
     556,   865,   866,   867,   868,   869,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    94,    95,    96,    97,    98,
      99,   100,   101,  -954,   102,   103,   104,     0,     0,     0,
    -954,   870,     0,     0,   105,   106,     0,   107,   108,   109,
     110,   111,   112,   113,   114,   871,   116,   872,   873,     0,
     119,   120,   121,   122,   123,   124,   874,   875,   125,   126,
     876,   877,   129,     0,   130,   131,   132,   133,   878,     0,
     879,     0,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
     152,   153,   154,   155,   880,   881,   882,   883,   884,   885,
     886,   161,   162,   163,   164,   165,   166,   167,   887,   888,
     170,   889,   171,     0,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     691,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   890,   199,   200,   201,
     202,   203,   891,   892,   205,     0,   206,   207,   893,   209,
       0,   210,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,     0,   219,     0,   894,   895,   222,     0,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
     242,   243,   244,   245,   246,   247,   248,   896,   897,     0,
     898,     0,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,     0,     0,   263,   264,   265,   266,     0,
     267,   268,   269,   899,   900,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   901,
     295,   902,   297,   298,   299,   300,   903,   301,   302,   303,
     304,   904,   905,   306,   906,   308,   309,   310,     0,   311,
     312,     0,     0,   907,   314,   315,     0,     0,   316,   317,
     318,   319,   320,   908,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   909,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,     0,   347,   348,   349,   910,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,   368,   369,   370,   371,   372,
     373,   911,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   912,
     392,   393,   394,   395,   396,   397,   398,   399,   913,   401,
    -954,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   914,   417,     0,   418,   419,
       0,   420,   421,   422,   423,   424,   425,   426,     0,   915,
     916,     0,     0,   429,   430,   917,   432,   918,   919,   434,
     435,   920,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,   446,   921,     0,   448,   449,   450,   451,
     452,   453,   922,     0,   455,   456,   457,   458,   459,   460,
     461,     0,     0,   462,     0,     0,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   923,     0,     0,
       0,     0,     0,     0,   924,   925,     0,     0,     0,     0,
       0,   927,     0,   928,     0,     0,     0,     0,   929,     0,
     930,   931,    93,   864,   556,   865,   866,   867,   868,   869,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,  1442,   102,   103,
     104,     0,     0,     0,     0,   870,     0,     0,   105,   106,
       0,   107,   108,   109,   110,   111,   112,   113,   114,   871,
     116,   872,   873,     0,   119,   120,   121,   122,   123,   124,
     874,   875,   125,   126,   876,   877,   129,     0,   130,   131,
     132,   133,   878,     0,   879,     0,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,   153,   154,   155,   880,   881,
     882,   883,   884,   885,   886,   161,   162,   163,   164,   165,
     166,   167,   887,   888,   170,   889,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   691,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     890,   199,   200,   201,   202,   203,   891,   892,   205,     0,
     206,   207,   893,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   219,     0,   894,
     895,   222,     0,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,   242,   243,   244,   245,   246,   247,
     248,   896,   897,     0,   898,     0,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,     0,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   899,   900,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   901,   295,   902,   297,   298,   299,   300,
     903,   301,   302,   303,   304,   904,   905,   306,   906,   308,
     309,   310,     0,   311,   312,     0,     0,   907,   314,   315,
       0,     0,   316,   317,   318,   319,   320,   908,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   909,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   910,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,   370,   371,   372,   373,   911,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   912,   392,   393,   394,   395,   396,   397,
     398,   399,   913,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   914,
     417,     0,   418,   419,     0,   420,   421,   422,   423,   424,
     425,   426,     0,   915,   916,     0,     0,   429,   430,   917,
     432,   918,   919,   434,   435,   920,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,   921,     0,
     448,   449,   450,   451,   452,   453,   922,     0,   455,   456,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   923,     0,     0,     0,     0,     0,     0,   924,   925,
    1443,     0,     0,     0,     0,   927,     0,   928,     0,     0,
       0,     0,   929,     0,   930,   931,    93,   864,   556,   865,
     866,   867,   868,   869,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,  2776,   102,   103,   104,     0,     0,     0,     0,   870,
       0,     0,   105,   106,     0,   107,   108,   109,   110,   111,
     112,   113,   114,   871,   116,   872,   873,     0,   119,   120,
     121,   122,   123,   124,   874,   875,   125,   126,   876,   877,
     129,     0,   130,   131,   132,   133,   878,     0,   879,     0,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   152,   153,
    2777,   155,   880,   881,   882,   883,   884,   885,   886,   161,
     162,   163,   164,   165,   166,   167,   887,   888,   170,   889,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   691,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   890,   199,   200,   201,   202,   203,
     891,   892,   205,     0,   206,   207,   893,   209,     0,   210,
       0,   211,   212,     0,   213,   214,   215,   216,   217,   218,
       0,   219,     0,  2778,   895,   222,     0,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,   242,   243,
     244,   245,   246,   247,   248,   896,   897,     0,   898,     0,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,     0,     0,   263,   264,   265,   266,     0,   267,   268,
     269,   899,   900,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   901,   295,   902,
     297,   298,   299,   300,   903,   301,   302,   303,   304,   904,
     905,   306,   906,   308,   309,   310,     0,   311,   312,     0,
       0,   907,   314,   315,     0,     0,   316,   317,   318,   319,
     320,   908,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   909,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   910,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,   370,   371,   372,  2779,   911,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   912,   392,   393,
     394,   395,   396,   397,   398,   399,   913,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   914,   417,     0,   418,   419,     0,   420,
     421,   422,   423,   424,   425,   426,     0,   915,   916,     0,
       0,   429,   430,   917,   432,   918,   919,   434,   435,   920,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,   921,     0,   448,   449,   450,   451,   452,   453,
     922,     0,   455,   456,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   923,     0,     0,     0,     0,
       0,     0,   924,   925,  2780,     0,     0,     0,     0,   927,
       0,  2781,     0,     0,     0,     0,   929,     0,   930,   931,
      93,   864,   556,   865,   866,   867,   868,   869,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,   870,     0,     0,   105,   106,     0,   107,
     108,   109,   110,   111,   112,   113,   114,   871,   116,   872,
     873,     0,   119,   120,   121,   122,   123,   124,   874,   875,
     125,   126,   876,   877,   129,     0,   130,   131,   132,   133,
     878,     0,   879,     0,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   880,   881,   882,   883,
     884,   885,   886,   161,   162,   163,   164,   165,   166,   167,
     887,   888,   170,   889,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   691,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   890,   199,
     200,   201,   202,   203,   891,   892,   205,     0,   206,   207,
     893,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   219,     0,   894,   895,   222,
       0,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,   242,   243,   244,   245,   246,   247,   248,   896,
     897,     0,   898,     0,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,     0,     0,   263,   264,   265,
     266,     0,   267,   268,   269,   899,   900,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   901,   295,   902,   297,   298,   299,   300,   903,   301,
     302,   303,   304,   904,   905,   306,   906,   308,   309,   310,
       0,   311,   312,     0,     0,   907,   314,   315,     0,     0,
     316,   317,   318,   319,   320,   908,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   909,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   910,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,   370,
     371,   372,   373,   911,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   912,   392,   393,   394,   395,   396,   397,   398,   399,
     913,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   914,   417,     0,
     418,   419,     0,   420,   421,   422,   423,   424,   425,   426,
       0,   915,   916,     0,     0,   429,   430,   917,   432,   918,
     919,   434,   435,   920,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,   921,     0,   448,   449,
     450,   451,   452,   453,   922,     0,   455,   456,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   923,
       0,     0,     0,     0,     0,     0,   924,   925,   926,     0,
       0,     0,     0,   927,     0,   928,     0,     0,     0,     0,
     929,     0,   930,   931,    93,  1456,   556,   865,   866,   867,
    1457,   869,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,  1458,
     102,   103,   104,     0,     0,     0,     0,   870,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   871,   116,   872,   873,     0,   119,   120,   121,   122,
     123,   124,   874,   875,   125,   126,   876,   877,   129,     0,
     130,   131,   132,   133,   878,     0,   879,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     880,   881,   882,   883,   884,   885,   886,   161,   162,   163,
     164,   165,   166,   167,   887,   888,   170,   889,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   691,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   890,   199,   200,   201,   202,   203,   891,   892,
     205,     0,   206,   207,   893,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   894,   895,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   896,   897,     0,   898,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   899,
     900,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   901,   295,   902,   297,   298,
     299,   300,   903,   301,   302,   303,   304,   904,   905,   306,
     906,   308,   309,   310,     0,   311,   312,     0,     0,   907,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   908,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   909,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   910,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,   373,   911,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   912,   392,   393,   394,   395,
     396,   397,   398,   399,   913,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   914,   417,     0,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,     0,   915,   916,     0,     0,   429,
     430,   917,   432,   918,   919,   434,   435,   920,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     921,     0,   448,   449,   450,   451,   452,   453,   922,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   923,     0,     0,     0,     0,     0,     0,
     924,   925,     0,     0,     0,     0,     0,   927,     0,   928,
       0,     0,     0,     0,   929,     0,   930,   931,    93,   864,
     556,   865,   866,   867,   868,   869,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    94,    95,    96,    97,    98,
      99,   100,   101,     0,   102,   103,   104,     0,     0,     0,
       0,   870,     0,     0,   105,   106,     0,   107,   108,   109,
     110,   111,   112,   113,   114,   871,   116,   872,   873,     0,
     119,   120,   121,   122,   123,   124,   874,   875,   125,   126,
     876,   877,   129,     0,   130,   131,   132,   133,   878,     0,
     879,     0,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
     152,   153,   154,   155,   880,   881,   882,   883,   884,   885,
     886,   161,   162,   163,   164,   165,   166,   167,   887,   888,
     170,   889,   171,     0,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     691,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   890,   199,   200,   201,
     202,   203,   891,   892,   205,     0,   206,   207,   893,   209,
       0,   210,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,     0,   219,     0,   894,   895,   222,     0,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
     242,   243,   244,   245,   246,   247,   248,   896,   897,     0,
     898,     0,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,     0,     0,   263,   264,   265,   266,     0,
     267,   268,   269,   899,   900,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   901,
     295,   902,   297,   298,   299,   300,   903,   301,   302,   303,
     304,   904,   905,   306,   906,   308,   309,   310,     0,   311,
     312,     0,     0,   907,   314,   315,     0,     0,   316,   317,
     318,   319,   320,   908,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   909,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,     0,   347,   348,   349,   910,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,   368,   369,   370,   371,   372,
     373,   911,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   912,
     392,   393,   394,   395,   396,   397,   398,   399,   913,   401,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   914,   417,     0,   418,   419,
       0,   420,   421,   422,   423,   424,   425,   426,     0,   915,
     916,     0,     0,   429,   430,   917,   432,   918,   919,   434,
     435,   920,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,   446,   921,     0,   448,   449,   450,   451,
     452,   453,   922,     0,   455,   456,   457,   458,   459,   460,
     461,     0,     0,   462,     0,     0,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   923,     0,     0,
       0,     0,     0,     0,   924,   925,     0,     0,     0,     0,
       0,   927,     0,   928,  1695,     0,     0,     0,   929,     0,
     930,   931,  1061,   864,   556,   865,   866,   867,   868,   869,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,   870,     0,     0,   105,   106,
       0,   107,   108,   109,  1063,   111,   112,   113,   114,   871,
    1064,   872,   873,     0,   119,   120,   121,   122,   123,   124,
     874,   875,   125,   126,   876,   877,   129,     0,   130,   131,
     132,   133,   878,     0,  1065,     0,   136,   137,   138,   139,
     140,   141,  1066,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,  1067,   153,   154,   155,  1068,  1069,
    1070,  1071,   884,   885,  1072,   161,   162,   163,   164,   165,
     166,   167,   887,   888,   170,   889,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   691,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     890,   199,   200,   201,   202,   203,   891,   892,   205,     0,
     206,   207,   893,   209,     0,   210,     0,   211,  1074,     0,
    1075,   214,   215,  1076,  1077,   218,     0,   219,     0,   894,
     895,   222,     0,   223,   224,   225,   226,   227,   228,   229,
    1078,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,  1079,   243,   244,   245,   246,   247,
     248,   896,   897,     0,   898,     0,   252,  1080,  1081,   255,
    1082,   257,   258,   259,   260,   261,   262,     0,     0,   263,
    1083,   265,  1084,     0,   267,   268,   269,   899,   900,   270,
     271,   272,   273,   274,  1085,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   901,  1086,   902,   297,   298,   299,   300,
     903,   301,   302,  1087,   304,   904,   905,   306,   906,   308,
     309,   310,     0,   311,   312,     0,     0,   907,   314,   315,
       0,     0,   316,   317,  1088,   319,  1089,   908,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   909,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   910,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,  1090,   371,   372,   373,   911,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,  1091,   392,   393,   394,   395,   396,  1092,
     398,   399,   913,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,  1093,   415,   914,
     417,     0,   418,   419,     0,   420,  1094,   422,   423,   424,
     425,   426,     0,   915,   916,     0,     0,   429,   430,   917,
     432,   918,   919,   434,   435,  1095,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,  1096,     0,
     448,   449,   450,   451,   452,   453,   922,  1917,   455,  1098,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   923,     0,     0,     0,     0,     0,     0,   924,   925,
       0,     0,     0,     0,     0,   927,     0,   928,     0,     0,
       0,     0,   929,     0,   930,   931,  1061,   864,   556,   865,
     866,   867,   868,   869,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,   870,
       0,     0,   105,   106,     0,   107,   108,   109,  1063,   111,
     112,   113,   114,   871,  1064,   872,   873,     0,   119,   120,
     121,   122,   123,   124,   874,   875,   125,   126,   876,   877,
     129,     0,   130,   131,   132,   133,   878,     0,  1065,     0,
     136,   137,   138,   139,   140,   141,  1066,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,  1067,   153,
     154,   155,  1068,  1069,  1070,  1071,   884,   885,  1072,   161,
     162,   163,   164,   165,   166,   167,   887,   888,   170,   889,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   691,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   890,   199,   200,   201,   202,   203,
     891,   892,   205,     0,   206,   207,   893,   209,     0,   210,
       0,   211,  1074,     0,  1075,   214,   215,  1076,  1077,   218,
       0,   219,     0,   894,   895,   222,     0,   223,   224,   225,
     226,   227,   228,   229,  1078,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,  1079,   243,
     244,   245,   246,   247,   248,   896,   897,     0,   898,     0,
     252,  1080,  1081,   255,  1082,   257,   258,   259,   260,   261,
     262,     0,     0,   263,  1083,   265,  1084,     0,   267,   268,
     269,   899,   900,   270,   271,   272,   273,   274,  1085,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   901,  1086,   902,
     297,   298,   299,   300,   903,   301,   302,  1087,   304,   904,
     905,   306,   906,   308,   309,   310,     0,   311,   312,     0,
       0,   907,   314,   315,     0,     0,   316,   317,  1088,   319,
    1089,   908,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   909,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   910,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,  1090,   371,   372,   373,   911,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,  1091,   392,   393,
     394,   395,   396,  1092,   398,   399,   913,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,  1093,   415,   914,   417,     0,   418,   419,     0,   420,
    1094,   422,   423,   424,   425,   426,     0,   915,   916,     0,
       0,   429,   430,   917,   432,   918,   919,   434,   435,  1095,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,  1096,     0,   448,   449,   450,   451,   452,   453,
     922,     0,   455,  1098,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   923,     0,     0,     0,     0,
       0,     0,   924,   925,     0,     0,     0,     0,     0,   927,
       0,   928,  1960,     0,     0,     0,   929,     0,   930,   931,
      93,   864,   556,   865,   866,   867,   868,   869,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,   870,     0,     0,   105,   106,     0,   107,
     108,   109,   110,   111,   112,   113,   114,   871,   116,   872,
     873,     0,   119,   120,   121,   122,   123,   124,   874,   875,
     125,   126,   876,   877,   129,     0,   130,   131,   132,   133,
     878,     0,   879,     0,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   880,   881,   882,   883,
     884,   885,   886,   161,   162,   163,   164,   165,   166,   167,
     887,   888,   170,   889,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   691,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   890,   199,
     200,   201,   202,   203,   891,   892,   205,     0,   206,   207,
     893,   209,     0,   210,     0,   211,   212,  1702,   213,   214,
     215,   216,   217,   218,     0,   219,     0,   894,   895,   222,
       0,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,   242,   243,   244,   245,   246,   247,   248,   896,
     897,     0,   898,     0,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,     0,     0,   263,   264,   265,
     266,     0,   267,   268,   269,   899,   900,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   901,   295,   902,   297,   298,   299,   300,   903,   301,
     302,   303,   304,   904,   905,   306,   906,   308,   309,   310,
       0,   311,   312,     0,     0,   907,   314,   315,     0,     0,
     316,   317,   318,   319,   320,   908,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   909,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   910,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,   370,
     371,   372,   373,   911,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   912,   392,   393,   394,   395,   396,   397,   398,   399,
     913,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   914,   417,     0,
     418,   419,     0,   420,   421,   422,   423,   424,   425,   426,
       0,   915,   916,     0,     0,   429,   430,   917,   432,   918,
     919,   434,   435,   920,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,   921,     0,   448,   449,
     450,   451,   452,   453,   922,     0,   455,   456,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   923,
       0,     0,     0,     0,     0,     0,   924,   925,     0,     0,
       0,     0,     0,   927,     0,   928,     0,     0,     0,     0,
     929,     0,   930,   931,    93,   864,   556,   865,   866,   867,
     868,   869,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,   870,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   871,   116,   872,   873,     0,   119,   120,   121,   122,
     123,   124,   874,   875,   125,   126,   876,   877,   129,     0,
     130,   131,   132,   133,   878,     0,   879,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     880,   881,   882,   883,   884,   885,   886,   161,   162,   163,
     164,   165,   166,   167,   887,   888,   170,   889,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   691,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   890,   199,   200,   201,   202,   203,   891,   892,
     205,     0,   206,   207,   893,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   894,   895,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   896,   897,     0,   898,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   899,
     900,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   901,   295,   902,   297,   298,
     299,   300,   903,   301,   302,   303,   304,   904,   905,   306,
     906,   308,   309,   310,     0,   311,   312,     0,     0,   907,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   908,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   909,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   910,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,   373,   911,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   912,   392,   393,   394,   395,
     396,   397,   398,   399,   913,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   914,   417,     0,   418,   419,  2271,   420,   421,   422,
     423,   424,   425,   426,     0,   915,   916,     0,     0,   429,
     430,   917,   432,   918,   919,   434,   435,   920,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     921,     0,   448,   449,   450,   451,   452,   453,   922,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   923,     0,     0,     0,     0,     0,     0,
     924,   925,     0,     0,     0,     0,     0,   927,     0,   928,
       0,     0,     0,     0,   929,     0,   930,   931,    93,   864,
     556,   865,   866,   867,   868,   869,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    94,    95,    96,    97,    98,
      99,   100,   101,     0,   102,   103,   104,     0,     0,     0,
       0,   870,     0,     0,   105,   106,     0,   107,   108,   109,
     110,   111,   112,   113,   114,   871,   116,   872,   873,     0,
     119,   120,   121,   122,   123,   124,   874,   875,   125,   126,
     876,   877,   129,     0,   130,   131,   132,   133,   878,     0,
     879,     0,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
     152,   153,   154,   155,   880,   881,   882,   883,   884,   885,
     886,   161,   162,   163,   164,   165,   166,   167,   887,   888,
     170,   889,   171,     0,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     691,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   890,   199,   200,   201,
     202,   203,   891,   892,   205,     0,   206,   207,   893,   209,
       0,   210,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,     0,   219,     0,   894,   895,   222,     0,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
     242,   243,   244,   245,   246,   247,   248,   896,   897,     0,
     898,     0,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,     0,     0,   263,   264,   265,   266,     0,
     267,   268,   269,   899,   900,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   901,
     295,   902,   297,   298,   299,   300,   903,   301,   302,   303,
     304,   904,   905,   306,   906,   308,   309,   310,     0,   311,
     312,     0,     0,   907,   314,   315,     0,     0,   316,   317,
     318,   319,   320,   908,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   909,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,     0,   347,   348,   349,   910,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,   368,   369,   370,   371,   372,
     373,   911,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   912,
     392,   393,   394,   395,   396,   397,   398,   399,   913,   401,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   914,   417,     0,   418,   419,
       0,   420,   421,   422,   423,   424,   425,   426,     0,   915,
     916,     0,     0,   429,   430,   917,   432,   918,   919,   434,
     435,   920,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,   446,   921,     0,   448,   449,   450,   451,
     452,   453,   922,     0,   455,   456,   457,   458,   459,   460,
     461,     0,     0,   462,     0,     0,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   923,     0,     0,
       0,     0,     0,     0,   924,   925,     0,     0,     0,     0,
       0,   927,     0,   928,     0,     0,     0,     0,   929,     0,
     930,   931,  1061,   864,   556,   865,   866,   867,   868,   869,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,   870,     0,     0,   105,   106,
       0,   107,   108,   109,  1063,   111,   112,   113,   114,   871,
    1064,   872,   873,     0,   119,   120,   121,   122,   123,   124,
     874,   875,   125,   126,   876,   877,   129,     0,   130,   131,
     132,   133,   878,     0,  1065,     0,   136,   137,   138,   139,
     140,   141,  1066,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,  1067,   153,   154,   155,  1068,  1069,
    1070,  1071,   884,   885,  1072,   161,   162,   163,   164,   165,
     166,   167,   887,   888,   170,   889,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   691,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     890,   199,   200,   201,   202,   203,   891,   892,   205,     0,
     206,   207,   893,   209,     0,   210,     0,   211,  1074,     0,
    1075,   214,   215,  1076,  1077,   218,     0,   219,     0,   894,
     895,   222,     0,   223,   224,   225,   226,   227,   228,   229,
    1078,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,  1079,   243,   244,   245,   246,   247,
     248,   896,   897,     0,   898,     0,   252,  1080,  1081,   255,
    1082,   257,   258,   259,   260,   261,   262,     0,     0,   263,
    1083,   265,  1084,     0,   267,   268,   269,   899,   900,   270,
     271,   272,   273,   274,  1085,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   901,  1086,   902,   297,   298,   299,   300,
     903,   301,   302,  1087,   304,   904,   905,   306,   906,   308,
     309,   310,     0,   311,   312,     0,     0,   907,   314,   315,
       0,     0,   316,   317,  1088,   319,  1089,   908,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   909,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   910,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,  1090,   371,   372,   373,   911,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,  1091,   392,   393,   394,   395,   396,  1092,
     398,   399,   913,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,  1093,   415,   914,
     417,     0,   418,   419,     0,   420,  1094,   422,   423,   424,
     425,   426,     0,   915,   916,     0,     0,   429,   430,   917,
     432,   918,   919,   434,   435,  1095,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,  1096,     0,
     448,   449,   450,   451,   452,   453,   922,     0,   455,  1098,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   923,     0,     0,     0,     0,     0,     0,   924,   925,
       0,     0,     0,     0,     0,   927,     0,   928,     0,     0,
       0,     0,   929,     0,   930,   931,    93,   864,   556,   865,
     866,   867,   868,   869,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,   870,
       0,     0,   105,   106,     0,   107,   108,   109,   110,   111,
     112,   113,   114,   871,   116,   872,   873,     0,   119,   120,
     121,   122,   123,   124,   874,   875,   125,   126,   876,   877,
     129,     0,   130,   131,   132,   133,   878,     0,   879,     0,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,   155,   880,   881,   882,   883,   884,   885,   886,   161,
     162,   163,   164,   165,   166,   167,   887,   888,   170,   889,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   691,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   890,   199,   200,   201,   202,   203,
     891,   892,   205,     0,   206,   207,   893,   209,     0,   210,
       0,   211,   212,     0,   213,   214,   215,   216,   217,   218,
       0,   219,     0,   894,   895,   222,     0,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,   242,   243,
     244,   245,   246,   247,   248,   896,   897,     0,   898,     0,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,     0,     0,   263,   264,   265,   266,     0,   267,   268,
     269,   899,   900,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   901,   295,   902,
     297,   298,   299,   300,   903,   301,   302,   303,   304,   904,
     905,   306,   906,   308,   309,   310,     0,   311,   312,     0,
       0,   907,   314,   315,     0,     0,   316,   317,   318,   319,
     320,   908,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   909,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   910,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,   370,   371,   372,   373,   911,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   912,   392,   393,
     394,   395,   396,   397,   398,   399,   913,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   914,   417,     0,   418,   419,     0,   420,
     421,   422,   423,   424,   425,   426,     0,   915,   916,     0,
       0,   429,   430,   917,   432,   918,   919,   434,   435,   920,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,   921,     0,   448,   449,   450,   451,   452,   453,
     922,     0,   455,   456,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   923,     0,     0,     0,     0,
       0,     0,  1461,  1462,     0,     0,     0,     0,     0,   927,
       0,   928,     0,     0,     0,     0,   929,     0,   930,   931,
      93,  1841,   556,   865,   866,   867,   868,   869,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,   870,     0,     0,   105,   106,     0,   107,
     108,   109,   110,   111,   112,   113,   114,   871,   116,   872,
     873,     0,   119,   120,   121,   122,   123,   124,   874,   875,
     125,   126,   876,   877,   129,     0,   130,   131,   132,   133,
     878,     0,   879,     0,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   880,   881,   882,   883,
     884,   885,   886,   161,   162,   163,   164,   165,   166,   167,
     887,   888,   170,   889,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   691,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   890,   199,
     200,   201,   202,   203,   891,   892,   205,     0,   206,   207,
     893,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   219,     0,   894,   895,   222,
       0,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,   242,   243,   244,   245,   246,   247,   248,   896,
     897,     0,   898,     0,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,     0,     0,   263,   264,   265,
     266,     0,   267,   268,   269,   899,   900,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   901,   295,   902,   297,   298,   299,   300,   903,   301,
     302,   303,   304,   904,   905,   306,   906,   308,   309,   310,
       0,   311,   312,     0,     0,   907,   314,   315,     0,     0,
     316,   317,   318,   319,   320,   908,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   909,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   910,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,   370,
     371,   372,   373,   911,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   912,   392,   393,   394,   395,   396,   397,   398,   399,
     913,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   914,   417,     0,
     418,   419,     0,   420,   421,   422,   423,   424,   425,   426,
       0,   915,   916,     0,     0,   429,   430,   917,   432,   918,
     919,   434,   435,   920,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,   921,     0,   448,   449,
     450,   451,   452,   453,   922,     0,   455,   456,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   923,
       0,     0,     0,     0,     0,     0,   924,   925,     0,     0,
       0,     0,     0,   927,     0,   928,     0,     0,     0,     0,
     929,     0,   930,   931,    93,   864,   556,   865,   866,   867,
     868,   869,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,   870,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   871,   116,   872,   873,     0,   119,   120,   121,   122,
     123,   124,   874,   875,   125,   126,   876,   877,   129,     0,
     130,   131,   132,   133,   878,     0,   879,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     880,   881,   882,   883,   884,   885,   886,   161,   162,   163,
     164,   165,   166,   167,   887,   888,   170,   889,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   691,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   890,   199,   200,   201,   202,   203,   891,   892,
     205,     0,   206,   207,   893,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   894,   895,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   896,   897,     0,   898,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   899,
     900,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   901,   295,   902,   297,   298,
     299,   300,   903,   301,   302,   303,   304,   904,   905,   306,
     906,   308,   309,   310,     0,   311,   312,     0,     0,   907,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   908,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   909,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   910,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,   373,   911,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   912,   392,   393,   394,   395,
     396,   397,   398,   399,   913,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   914,   417,     0,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,     0,   915,   916,     0,     0,   429,
     430,   917,   432,   918,   919,   434,   435,   920,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     921,     0,   448,   449,   450,   451,   452,   453,   922,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   923,     0,     0,     0,     0,     0,     0,
     924,   925,     0,     0,     0,     0,     0,   927,     0,  2076,
       0,     0,     0,     0,   929,     0,   930,   931,    93,   864,
     556,   865,   866,   867,   868,   869,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    94,    95,    96,    97,    98,
      99,   100,   101,     0,   102,   103,   104,     0,     0,     0,
       0,   870,     0,     0,   105,   106,     0,   107,   108,   109,
     110,   111,   112,   113,   114,   871,   116,   872,   873,     0,
     119,   120,   121,   122,   123,   124,   874,   875,   125,   126,
     876,   877,   129,     0,   130,   131,   132,   133,   878,     0,
     879,     0,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
     152,   153,  2777,   155,   880,   881,   882,   883,   884,   885,
     886,   161,   162,   163,   164,   165,   166,   167,   887,   888,
     170,   889,   171,     0,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     691,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   890,   199,   200,   201,
     202,   203,   891,   892,   205,     0,   206,   207,   893,   209,
       0,   210,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,     0,   219,     0,  2778,   895,   222,     0,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
     242,   243,   244,   245,   246,   247,   248,   896,   897,     0,
     898,     0,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,     0,     0,   263,   264,   265,   266,     0,
     267,   268,   269,   899,   900,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   901,
     295,   902,   297,   298,   299,   300,   903,   301,   302,   303,
     304,   904,   905,   306,   906,   308,   309,   310,     0,   311,
     312,     0,     0,   907,   314,   315,     0,     0,   316,   317,
     318,   319,   320,   908,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   909,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,     0,   347,   348,   349,   910,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,   368,   369,   370,   371,   372,
    2779,   911,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   912,
     392,   393,   394,   395,   396,   397,   398,   399,   913,   401,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   914,   417,     0,   418,   419,
       0,   420,   421,   422,   423,   424,   425,   426,     0,   915,
     916,     0,     0,   429,   430,   917,   432,   918,   919,   434,
     435,   920,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,   446,   921,     0,   448,   449,   450,   451,
     452,   453,   922,     0,   455,   456,   457,   458,   459,   460,
     461,     0,     0,   462,     0,     0,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   923,     0,     0,
       0,     0,     0,     0,   924,   925,     0,     0,     0,     0,
       0,   927,     0,  2781,     0,     0,     0,     0,   929,     0,
     930,   931,    93,   864,   556,   865,   866,   867,   868,   869,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,   870,     0,     0,   105,   106,
       0,   107,   108,   109,   110,   111,   112,   113,  3035,   871,
     116,   872,   873,     0,   119,   120,   121,   122,   123,   124,
     874,   875,   125,   126,   876,   877,   129,     0,   130,   131,
     132,   133,   878,     0,   879,     0,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,   153,   154,  3036,   880,   881,
     882,   883,   884,   885,   886,   161,   162,   163,   164,   165,
     166,   167,   887,   888,   170,   889,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   691,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     890,   199,   200,   201,   202,   203,   891,   892,   205,     0,
     206,   207,   893,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   219,     0,   894,
     895,   222,     0,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,   242,   243,   244,   245,   246,   247,
     248,   896,   897,     0,   898,     0,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,     0,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   899,   900,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   901,   295,   902,   297,   298,   299,   300,
     903,   301,   302,   303,   304,   904,   905,   306,   906,   308,
     309,   310,     0,   311,   312,     0,     0,   907,   314,   315,
       0,     0,   316,   317,   318,   319,   320,   908,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   909,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   910,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,   370,   371,   372,   373,   911,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   912,   392,   393,   394,   395,   396,   397,
     398,   399,   913,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   914,
     417,     0,   418,   419,     0,   420,   421,   422,   423,   424,
     425,   426,     0,   915,   916,     0,     0,   429,   430,   917,
     432,   918,   919,   434,   435,   920,   437,   438,  3037,   440,
     441,     0,     0,   442,   443,   444,   445,   446,   921,     0,
     448,   449,   450,   451,   452,   453,   922,     0,   455,   456,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   923,     0,     0,     0,     0,     0,     0,   924,   925,
       0,     0,     0,     0,     0,   927,     0,   928,     0,     0,
       0,     0,   929,     0,   930,   931,    93,   864,   556,   865,
     866,   867,   868,   869,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,   870,
       0,     0,   105,   106,     0,   107,   108,   109,   110,   111,
     112,   113,   114,   871,   116,   872,   873,     0,   119,   120,
     121,   122,   123,   124,   874,   875,   125,   126,   876,   877,
     129,     0,   130,   131,   132,   133,   878,     0,   879,     0,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   152,   153,
     154,  3036,   880,   881,   882,   883,   884,   885,   886,   161,
     162,   163,   164,   165,   166,   167,   887,   888,   170,   889,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   691,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   890,   199,   200,   201,   202,   203,
     891,   892,   205,     0,   206,   207,   893,   209,     0,   210,
       0,   211,   212,     0,   213,   214,   215,   216,   217,   218,
       0,   219,     0,   894,   895,   222,     0,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,   242,   243,
     244,   245,   246,   247,   248,   896,   897,     0,   898,     0,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,     0,     0,   263,   264,   265,   266,     0,   267,   268,
     269,   899,   900,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   901,   295,   902,
     297,   298,   299,   300,   903,   301,   302,   303,   304,   904,
     905,   306,   906,   308,   309,   310,     0,   311,   312,     0,
       0,   907,   314,   315,     0,     0,   316,   317,   318,   319,
     320,   908,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   909,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   910,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,   370,   371,   372,   373,   911,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,   912,   392,   393,
     394,   395,   396,   397,   398,   399,   913,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   914,   417,     0,   418,   419,     0,   420,
     421,   422,   423,   424,   425,   426,     0,   915,   916,     0,
       0,   429,   430,   917,   432,   918,   919,   434,   435,   920,
     437,   438,  3037,   440,   441,     0,     0,   442,   443,   444,
     445,   446,   921,     0,   448,   449,   450,   451,   452,   453,
     922,     0,   455,   456,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   923,     0,     0,     0,     0,
       0,     0,   924,   925,     0,     0,     0,     0,     0,   927,
       0,   928,     0,     0,     0,     0,   929,     0,   930,   931,
      93,   864,   556,   865,   866,   867,   868,   869,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,   870,     0,     0,   105,   106,     0,   107,
     108,   109,   110,   111,   112,   113, -1816,   871,   116,   872,
     873,     0,   119,   120,   121,   122,   123,   124,   874,   875,
     125,   126,   876,   877,   129,     0,   130,   131,   132,   133,
     878,     0,   879,     0,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,   153,   154,  3036,   880,   881,   882,   883,
     884,   885,   886,   161,   162,   163,   164,   165,   166,   167,
     887,   888,   170,   889,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   691,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   890,   199,
     200,   201,   202,   203,   891,   892,   205,     0,   206,   207,
     893,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216, -1816,   218,     0,   219,     0,   894,   895,   222,
       0,   223,   224,   225,   226,   227,   228,   229, -1816,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,   242,   243,   244,   245,   246,   247,   248,   896,
     897,     0,   898,     0,   252,     0,     0,   255,   256,   257,
     258,   259,   260,   261,   262,     0,     0,   263,   264,   265,
   -1816,     0,   267,   268,   269,   899,   900,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   901,   295,   902,   297,   298,   299,   300,     0,   301,
     302,     0,   304,   904,   905,   306,   906,   308,   309,   310,
       0,   311,   312,     0,     0,   907,   314,   315,     0,     0,
     316,   317,   318,   319,   320,   908,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   909,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   910,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,   370,
     371,   372,   373,   911,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   912,   392,   393,   394,   395,   396, -1816,   398,   399,
     913,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   914,   417,     0,
     418,   419,     0,   420,   421,   422,   423,   424,   425,   426,
       0,   915,   916,     0,     0,   429,   430,   917,   432,   918,
     919,   434,   435,   920,   437,   438,  3037,   440,   441,     0,
       0,   442,   443,   444,   445,   446,   921,     0,   448,   449,
     450,   451,   452,   453,   922,     0,   455,   456,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483, -1816,
       0,     0,     0,     0,     0,     0,   924,   925,     0,     0,
       0,     0,     0,   927,     0,   928,     0,     0,     0,     0,
     929,     0,   930,   931,    93,   864,   556,   865,   866,   867,
     868,   869,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   871,   116,   872,   873,     0,   119,   120,   121,   122,
     123,   124,   874,   875,   125,   126,   876,   877,   129,     0,
     130,   131,   132,   133,   878,     0,   879,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     880,   881,   882,   883,   884,   885,   886,   161,   162,   163,
     164,   165,   166,   167,   887,   888,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   691,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   890,   199,   200,   201,   202,   203,   891,   892,
     205,     0,   206,   207,   893,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   894,   895,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   896,   897,     0,   898,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   899,
     900,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   901,   295,   902,   297,   298,
     299,   300,     0,   301,   302,   303,   304,   904,   905,   306,
     906,   308,   309,   310,     0,   311,   312,     0,     0,   907,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   908,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   909,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   910,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   912,   392,   393,   394,   395,
     396,   397,   398,   399,   913,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   914,   417,     0,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,     0,   915,   916,     0,     0,   429,
     430,   917,   432,   918,   919,   434,   435,   920,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     921,     0,   448,   449,   450,   451,   452,   453,   922,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,     0,     0,     0,     0,     0,     0,     0,
    1688,  1689,     0,     0,    93,   864,   556,   865,   866,  1690,
     868,   869,     0,     0,     0,     0,   930,   931,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,   110,   111,   112,   113,
     114,   871,   116,   872,   873,     0,   119,   120,   121,   122,
     123,   124,   874,   875,   125,   126,   876,   877,   129,     0,
     130,   131,   132,   133,   878,     0,   879,     0,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,   153,   154,   155,
     880,   881,   882,   883,   884,   885,   886,   161,   162,   163,
     164,   165,   166,   167,   887,   888,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   691,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   890,   199,   200,   201,   202,   203,   891,   892,
     205,     0,   206,   207,   893,   209,     0,   210,     0,   211,
     212,     0,   213,   214,   215,   216,   217,   218,     0,   219,
       0,   894,   895,   222,     0,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   896,   897,     0,   898,     0,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,     0,
       0,   263,   264,   265,   266,     0,   267,   268,   269,   899,
     900,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   901,   295,   902,   297,   298,
     299,   300,     0,   301,   302,   303,   304,   904,   905,   306,
     906,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,   318,   319,   320,   908,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   909,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   910,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,   370,   371,   372,   373,  1827,  1828,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,   912,   392,   393,   394,   395,
     396,   397,   398,   399,   913,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   914,   417,     0,   418,   419,     0,   420,   421,   422,
     423,   424,   425,   426,     0,   915,   916,     0,     0,   429,
     430,   917,   432,   918,   919,   434,   435,   920,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
     921,     0,   448,   449,   450,   451,   452,   453,   922,     0,
     455,   456,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,     0,     0,     0,     0,     0,     0,     0,
    1829,  1830,     0,     0,     0,     0,     0,     0,     0,  1690,
       0,     0,     0,     0,     0,     0,   930,   931,    93,   864,
     556,   865,   866,   867,   868,   869,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    94,    95,    96,    97,    98,
      99,   100,   101,     0,   102,   103,   104,     0,     0,     0,
       0,     0,     0,     0,   105,   106,     0,   107,   108,   109,
     110,   111,   112,   113,   114,   871,   116,   872,   873,     0,
     119,   120,   121,   122,   123,   124,   874,   875,   125,   126,
     876,   877,   129,     0,   130,   131,   132,   133,   878,     0,
     879,     0,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
     152,   153,   154,   155,   880,   881,   882,   883,   884,   885,
     886,   161,   162,   163,   164,   165,   166,   167,   887,   888,
     170,     0,   171,     0,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     691,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   890,   199,   200,   201,
     202,   203,   891,   892,   205,     0,   206,   207,   893,   209,
       0,   210,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,     0,   219,     0,   894,   895,   222,     0,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
     242,   243,   244,   245,   246,   247,   248,   896,   897,     0,
     898,     0,   252,     0,   254,   255,   256,   257,   258,   259,
     260,   261,   262,     0,     0,   263,   264,   265,   266,     0,
     267,   268,   269,   899,   900,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   901,
     295,   902,   297,   298,   299,   300,     0,   301,   302,   303,
     304,   904,   905,   306,   906,   308,   309,   310,     0,   311,
     312,     0,     0,   907,   314,   315,     0,     0,   316,   317,
     318,   319,   320,   908,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   909,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,     0,   347,   348,   349,   910,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   912,
     392,   393,   394,   395,   396,   397,   398,   399,   913,   401,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   914,   417,     0,   418,   419,
       0,   420,   421,   422,   423,   424,   425,   426,     0,   915,
     916,     0,     0,   429,   430,   917,   432,   918,   919,   434,
     435,   920,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,   446,   921,     0,   448,   449,   450,   451,
     452,   453,   922,     0,   455,   456,   457,   458,   459,   460,
     461,     0,     0,   462,     0,     0,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,     0,     0,     0,
       0,     0,     0,     0,  1688,  1689,     0,     0,     0,     0,
       0,     0,     0,  1690,     0,     0,     0,     0,     0,     0,
     930,   931,    93,   864,   556,   865,   866,   867,   868,   869,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,   870,     0,     0,   105,   106,
       0,   107,   108,   109,   110,   111,   112,   113,     0,   871,
     116,   872,   873,     0,   119,   120,   121,   122,   123,   124,
     874,   875,   125,   126,   876,   877,   129,     0,   130,   131,
     132,   133,   878,     0,   879,     0,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,   153,   154,   155,   880,   881,
     882,   883,   884,   885,   886,   161,   162,   163,   164,   165,
     166,   167,   887,   888,   170,   889,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   691,   186,   187,     0,   188,   189,
     190,     0,   191,     0,   193,     0,   194,   195,   196,   197,
     890,   199,   200,   201,   202,   203,   891,   892,   205,     0,
     206,   207,   893,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,     0,   218,     0,   219,     0,   894,
     895,   222,     0,   223,   224,   225,   226,   227,   228,   229,
       0,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,   242,   243,   244,   245,   246,   247,
     248,   896,   897,     0,   898,     0,   252,     0,     0,   255,
     256,   257,   258,   259,   260,   261,   262,     0,     0,   263,
     264,   265,     0,     0,   267,   268,   269,   899,   900,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   901,   295,   902,   297,   298,   299,   300,
       0,   301,   302,     0,   304,   904,   905,   306,   906,   308,
     309,   310,     0,   311,   312,     0,     0,   907,   314,   315,
       0,     0,   316,   317,   318,   319,   320,   908,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   909,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   910,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,   370,   371,   372,   373,   911,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   912,   392,   393,   394,   395,   396,     0,
     398,   399,   913,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   914,
     417,     0,   418,   419,     0,   420,   421,   422,   423,   424,
     425,   426,     0,   915,   916,     0,     0,   429,   430,   917,
     432,   918,   919,   434,   435,   920,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,   921,     0,
     448,   449,   450,   451,   452,   453,   922,     0,   455,   456,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,     0,     0,     0,     0,     0,     0,     0,   924,   925,
     506,     0,     0,     0,     0,   927,     0,   928,     0,     0,
       0,     0,   929,     0,   930,   931,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,  2381,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,  -624,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,  -624,   214,
     215,   508,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,  -624,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,  -624,   257,
     258,   259,   260,   261,   262,     0,     0,   263,  -624,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   509,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,  -624,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,  -624,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   511,   415,   416,   417,     0,
     418,   419,     0,   420,  -624,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,     0,
      93,     0,   588,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   993,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,   875,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     878,     0,   879,     0,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,   153,   154,   155,   880,   881,   882,   883,
     884,   885,   886,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   891,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,   212,     0,   213,   214,
     215,   216,   217,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,  2122,     0,   263,   264,   265,
     266,     0,   267,   268,   269,   899,   900,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,     0,   301,
     302,   303,   304,     0,   905,   306,   307,   308,   309,   310,
       0,   311,   312,     0,   589,   313,   314,   315,     0,     0,
     316,   317,   318,   319,   320,   908,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   909,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,   370,
     371,   372,   373,   374,  2123,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,    26,   386,   387,   388,   389,
     390,   912,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   914,   417,     0,
     418,   419,    31,   420,   421,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   917,   432,   918,
       0,   434,   435,   920,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,   921,     0,   448,   449,
     450,   451,   452,   584,   454,     0,   455,   456,   457,   458,
     459,   460,   461,     0,     0,   462,     0,    34,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,     0,
       0,    35,   761,  1285,   556,     0,     0,     0,   868,     0,
       0,     0,     0,     0,     0,  2124,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,     0,     0,     0,   105,   106,
       0,   107,   108,   109,   762,   111,   112,   113,   763,   764,
     765,   766,   767,     0,   119,   120,   121,   122,   123,   124,
       0,     0,   125,   126,   768,   769,   129,     0,   130,   131,
     132,   133,   770,     0,   771,     0,   136,   137,   138,   139,
     140,   141,   772,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   773,   153,   154,   155,   774,   775,
     776,   777,     0,     0,   778,   161,   162,   163,   164,   165,
     166,   167,   779,   780,   170,     0,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   185,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     781,   199,   200,   201,   202,   203,   782,  1286,   205,     0,
     206,   207,   783,   209,     0,   210,     0,   211,   784,     0,
     785,   214,   215,   786,   787,   218,     0,   219,     0,   788,
     789,   222,     0,   223,   224,   225,   226,   227,   228,   229,
     790,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,   791,   792,   244,   245,   246,   247,
     248,   793,   794,     0,   795,     0,   252,   796,   797,   255,
     798,   257,   258,   259,   260,   261,   262,     0,     0,   263,
     799,   265,   800,     0,   267,   268,   269,     0,     0,   270,
     271,   272,   273,   274,   801,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   802,   803,   804,   297,   298,   299,   805,
       0,   301,   302,   806,   304,     0,   807,   306,   808,   308,
     309,   310,     0,   311,   312,  1287,     0,   313,   314,   315,
       0,     0,   316,   809,   810,   319,   811,   812,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   813,   335,   336,   814,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   815,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,   816,   371,   372,   373,   817,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   818,   392,   819,   394,   395,   396,   820,
     398,   399,   821,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   822,   415,   823,
     417,     0,   418,   419,     0,   420,   824,   422,   423,   424,
     425,   426,     0,   825,   826,     0,     0,   429,   430,   827,
     432,   828,  1288,   434,   435,   829,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,   830,     0,
     448,   449,   450,   451,   452,  1178,   832,     0,   455,   833,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   834,   835,   836,   837,
     838,   839,   840,   841,   842,   843,   844,   480,   481,   482,
     483,    93,     0,   588,     0,     0,     0,     0,  1289,  1290,
    1999,     0,     0,     0,     0,     0,     0,  2000,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
     875,   125,   126,   127,   128,   129,     0,   130,   131,   132,
     133,   878,     0,   879,     0,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,     0,   146,   147,   148,   149,
     150,   151,     0,   152,   153,   154,   155,   880,   881,   882,
     883,   884,   885,   886,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,     0,   171,     0,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,     0,
       0,   183,   184,   185,   186,   187,     0,   188,   189,   190,
       0,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   891,     0,   205,     0,   206,
     207,   208,   209,     0,   210,     0,   211,   212,     0,   213,
     214,   215,   216,   217,   218,     0,   219,     0,   220,   221,
     222,     0,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,     0,   235,   236,   237,   238,   239,
     240,     0,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,     0,   251,     0,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,  2122,     0,   263,   264,
     265,   266,     0,   267,   268,   269,   899,   900,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,     0,
     301,   302,   303,   304,     0,   905,   306,   307,   308,   309,
     310,     0,   311,   312,     0,   589,   313,   314,   315,     0,
       0,   316,   317,   318,   319,   320,   908,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     909,   335,   336,   337,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,     0,   347,   348,   349,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,   368,   369,
     370,   371,   372,   373,   374,  2123,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   912,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   914,   417,
       0,   418,   419,     0,   420,   421,   422,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   917,   432,
     918,     0,   434,   435,   920,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,   446,   921,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,   456,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     761,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2124,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     3,
       4,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,   762,   111,   112,   113,   763,   764,   765,   766,
     767,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   768,   769,   129,     0,   130,   131,   132,   133,
     770,     0,   771,     0,   136,   137,   138,   139,   140,   141,
     772,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   773,   153,   154,   155,   774,   775,   776,   777,
       0,     0,   778,   161,   162,   163,   164,   165,   166,   167,
     779,   780,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   781,   199,
     200,   201,   202,   203,   782,     0,   205,     0,   206,   207,
     783,   209,     0,   210,     0,   211,   784,     0,   785,   214,
     215,   786,   787,   218,     0,   219,     0,   788,   789,   222,
       0,   223,   224,   225,   226,   227,   228,   229,   790,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,   791,   792,   244,   245,   246,   247,   248,   793,
     794,     0,   795,     0,   252,   796,   797,   255,   798,   257,
     258,   259,   260,   261,   262,     0,     0,   263,   799,   265,
     800,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   801,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   802,   803,   804,   297,   298,   299,   805,     0,   301,
     302,   806,   304,     0,   807,   306,   808,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   809,   810,   319,   811,   812,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   813,
     335,   336,   814,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   815,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,   816,
     371,   372,   373,   817,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,    26,   386,   387,   388,   389,
     390,   818,   392,   819,   394,   395,   396,   820,   398,   399,
     821,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   822,   415,   823,   417,     0,
     418,   419,    31,   420,   824,   422,   423,   424,   425,   426,
       0,   825,   826,     0,     0,   429,   430,   827,   432,   828,
       0,   434,   435,   829,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,   830,     0,   448,   449,
     450,   451,   452,   831,   832,     0,   455,   833,   457,   458,
     459,   460,   461,     0,     0,   462,     0,    34,   463,   464,
     465,   466,   467,   468,   834,   835,   836,   837,   838,   839,
     840,   841,   842,   843,   844,   480,   481,   482,   483,    93,
       0,    35,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    36,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,   875,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   878,
       0,   879,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   880,   881,   882,   883,   884,
     885,   886,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   891,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   264,   265,   266,
       0,   267,   268,   269,   899,   900,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,     0,   301,   302,
     303,   304,     0,   905,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   908,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   909,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   374,  2123,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     912,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   914,   417,     0,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   917,   432,   918,     0,
     434,   435,   920,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   921,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,    93,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    36,    94,    95,    96,    97,    98,
      99,   100,   101,     0,   102,   103,   104,     0,     0,     0,
       0,     0,     0,     0,   105,   106,     0,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,   120,   121,   122,   123,   124,     0,   875,   125,   126,
     127,   128,   129,     0,   130,   131,   132,   133,   878,     0,
     879,     0,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
     152,   153,   154,   155,   880,   881,   882,   883,   884,   885,
     886,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,     0,   171,     0,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   891,     0,   205,     0,   206,   207,   208,   209,
       0,   210,     0,   211,   212,     0,   213,   214,   215,   216,
     217,   218,     0,   219,     0,   220,   221,   222,     0,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,     0,
     251,     0,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,     0,     0,   263,   264,   265,   266,     0,
     267,   268,   269,   899,   900,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,     0,   301,   302,   303,
     304,     0,   905,   306,   307,   308,   309,   310,     0,   311,
     312,     0,     0,   313,   314,   315,     0,     0,   316,   317,
     318,   319,   320,   908,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   909,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,     0,   347,   348,   349,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,   912,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   914,   417,     0,   418,   419,
       0,   420,   421,   422,   423,   424,   425,   426,     0,   427,
     428,     0,     0,   429,   430,   917,   432,   918,     0,   434,
     435,   920,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,   446,   921,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,   456,   457,   458,   459,   460,
     461,     0,     0,   462,     0,     0,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   506,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2798,    94,    95,    96,    97,    98,    99,
     100,   101,   622,   102,   103,   104,     0,     0,     0,     0,
       0,     0,     0,   105,   106,     0,   107,   108,   109,     0,
     111,   112,   113,   114,   115,     0,   117,   118,     0,   119,
     120,   121,   122,   123,   124,     0,     0,   125,   126,   127,
     128,   129,     0,   130,   131,   132,   133,   134,     0,     0,
       0,   136,   137,   138,   139,   140,   141,     0,   143,   144,
     145,     0,   146,   147,   148,   149,   150,   151,     0,     0,
     153,   154,   155,     0,     0,     0,     0,     0,     0,     0,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
       0,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,     0,     0,   183,   184,   185,
     186,   187,     0,   188,   189,   190,     0,   191,   192,   193,
       0,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,     0,   205,     0,   206,   207,   208,   209,     0,
     210,     0,   211,     0,     0,     0,   214,   215,   508,     0,
     218,     0,   219,     0,   220,   221,   222,     0,   223,   224,
     225,   226,   227,   228,   229,     0,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
     243,   244,   245,   246,   247,   248,   249,   250,     0,   251,
       0,   252,     0,     0,   255,     0,   257,   258,   259,   260,
     261,   262,     0,     0,   263,     0,   265,     0,     0,   267,
     268,   269,     0,     0,   270,   271,   272,   273,   274,   509,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,     0,
     296,   297,   298,   299,   300,     0,   301,   302,     0,   304,
       0,   305,   306,   307,   308,   309,   310,     0,   311,   312,
       0,     0,   313,   314,   315,     0,     0,   316,   317,     0,
     319,     0,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
       0,   347,   348,   349,   350,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,   368,   369,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,    26,   386,   387,   388,   389,   390,     0,   392,
     393,   394,   395,   396,     0,   398,   399,   400,   401,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   511,   415,   416,   417,     0,   418,   419,    31,
     420,     0,   422,   423,   424,   425,   426,     0,   623,   428,
       0,     0,   624,   430,   431,   432,   433,     0,   434,   435,
     436,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,   446,     0,     0,   448,   449,   450,   451,   452,
     584,   454,     0,   455,     0,   457,   458,   459,   460,   461,
       0,     0,   462,     0,    34,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   506,     0,    35,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    36,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   508,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   509,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    26,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   511,   415,   416,   417,     0,   418,   419,    31,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   584,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,    34,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,     0,   506,    35,   588,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    36,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   508,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   509,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   511,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   506,     0,   588,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   972,    94,    95,    96,    97,    98,    99,   100,   101,
       0,   102,   103,   104,     0,     0,     0,     0,     0,     0,
       0,   105,   106,     0,   107,   108,   109,     0,   111,   112,
     113,   114,   115,     0,   117,   118,     0,   119,   120,   121,
     122,   123,   124,     0,     0,   125,   126,   127,   128,   129,
       0,   130,   131,   132,   133,   134,     0,     0,     0,   136,
     137,   138,   139,   140,   141,     0,   143,   144,   145,     0,
     146,   147,   148,   149,   150,   151,     0,     0,   153,   154,
     155,     0,     0,     0,     0,     0,     0,     0,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,     0,   171,
       0,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,     0,     0,   183,   184,   185,   186,   187,
       0,   188,   189,   190,     0,   191,   192,   193,     0,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
       0,   205,     0,   206,   207,   208,   209,     0,   210,     0,
     211,     0,     0,     0,   214,   215,   508,     0,   218,     0,
     219,     0,   220,   221,   222,     0,   223,   224,   225,   226,
     227,   228,   229,     0,   231,   232,   233,   234,     0,   235,
     236,   237,   238,   239,   240,     0,   241,     0,   243,   244,
     245,   246,   247,   248,   249,   250,     0,   251,     0,   252,
       0,     0,   255,     0,   257,   258,   259,   260,   261,   262,
       0,     0,   263,     0,   265,     0,     0,   267,   268,   269,
       0,     0,   270,   271,   272,   273,   274,   509,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,     0,   296,   297,
     298,   299,   300,     0,   301,   302,     0,   304,     0,   305,
     306,   307,   308,   309,   310,     0,   311,   312,     0,     0,
     313,   314,   315,     0,     0,   316,   317,     0,   319,     0,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,     0,   347,
     348,   349,   350,   351,   352,   353,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,   368,   369,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,     0,   392,   393,   394,
     395,   396,     0,   398,   399,   400,   401,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     511,   415,   416,   417,     0,   418,   419,     0,   420,     0,
     422,   423,   424,   425,   426,     0,   427,   428,     0,     0,
     429,   430,   431,   432,   433,     0,   434,   435,   436,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
     446,     0,     0,   448,   449,   450,   451,   452,   453,   454,
       0,   455,     0,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   506,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2637,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
     114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   127,   128,   129,     0,
     130,   131,   132,   133,   134,     0,     0,     0,   136,   137,
     138,   139,   140,   141,     0,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   153,   154,   155,
       0,     0,     0,     0,     0,     0,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   508,     0,   218,     0,   219,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
     228,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,   262,     0,
       0,   263,     0,   265,     0,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,   509,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,     0,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,     0,   392,   393,   394,   395,
     396,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   511,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,   452,   453,   454,     0,
     455,     0,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   506,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1709,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     0,     0,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,     0,   111,   112,   113,   114,
     115,     0,   117,   118,     0,   119,   120,   121,   122,   123,
     124,     0,     0,   125,   126,   127,   128,   129,     0,   130,
     131,   132,   133,   134,     0,     0,     0,   136,   137,   138,
     139,   140,   141,     0,   143,   144,   145,     0,   146,   147,
     148,   149,   150,   151,     0,     0,   153,   154,   155,     0,
       0,     0,     0,     0,     0,     0,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,     0,   171,     0,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,     0,   205,
       0,   206,   207,   208,   209,     0,   210,     0,   211,     0,
       0,     0,   214,   215,   508,     0,   218,     0,   219,     0,
     220,   221,   222,     0,   223,   224,   225,   226,   227,   228,
     229,     0,   231,   232,   233,   234,     0,   235,   236,   237,
     238,   239,   240,     0,   241,     0,   243,   244,   245,   246,
     247,   248,   249,   250,     0,   251,     0,   252,     0,     0,
     255,     0,   257,   258,   259,   260,   261,   262,     0,     0,
     263,     0,   265,     0,     0,   267,   268,   269,     0,     0,
     270,   271,   272,   273,   274,   509,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,     0,   296,   297,   298,   299,
     300,     0,   301,   302,     0,   304,     0,   305,   306,   307,
     308,   309,   310,     0,   311,   312,     0,     0,   313,   314,
     315,     0,     0,   316,   317,     0,   319,     0,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,     0,   347,   348,   349,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
     368,   369,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,     0,   392,   393,   394,   395,   396,
       0,   398,   399,   400,   401,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   511,   415,
     416,   417,     0,   418,   419,     0,   420,     0,   422,   423,
     424,   425,   426,     0,   427,   428,     0,     0,   429,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,   446,     0,
       0,   448,   449,   450,   451,   452,   453,   454,     0,   455,
       0,   457,   458,   459,   460,   461,     0,     0,   462,     0,
       0,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   506,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1814,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,     0,     0,     0,   105,   106,
       0,   107,   108,   109,     0,   111,   112,   113,   114,   115,
       0,   117,   118,     0,   119,   120,   121,   122,   123,   124,
       0,     0,   125,   126,   127,   128,   129,     0,   130,   131,
     132,   133,   134,     0,     0,     0,   136,   137,   138,   139,
     140,   141,     0,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,     0,   153,   154,   155,     0,     0,
       0,     0,     0,     0,     0,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   185,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,     0,   205,     0,
     206,   207,   208,   209,     0,   210,     0,   211,     0,     0,
       0,   214,   215,   508,     0,   218,     0,   219,     0,   220,
     221,   222,     0,   223,   224,   225,   226,   227,   228,   229,
       0,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,     0,   243,   244,   245,   246,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,   255,
       0,   257,   258,   259,   260,   261,   262,     0,     0,   263,
       0,   265,     0,     0,   267,   268,   269,     0,     0,   270,
     271,   272,   273,   274,   509,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,     0,   296,   297,   298,   299,   300,
       0,   301,   302,     0,   304,     0,   305,   306,   307,   308,
     309,   310,     0,   311,   312,     0,     0,   313,   314,   315,
       0,     0,   316,   317,     0,   319,     0,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   350,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,     0,   392,   393,   394,   395,   396,     0,
     398,   399,   400,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   511,   415,   416,
     417,     0,   418,   419,     0,   420,     0,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,   429,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,     0,     0,
     448,   449,   450,   451,   452,   453,   454,     0,   455,     0,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,     0,     0,     0,     0,  2486,  1285,   556,     0,     0,
    1669,   868,     0,     0,     0,     0,     0,  2609,  1670,  1671,
    1672,  1673,    94,    95,    96,    97,    98,    99,   100,   101,
    1111,   102,   103,   104,  1112,  1113,  1114,  1115,  1116,  1117,
    1118,   105,   106,  1119,   107,   108,   109,  2487,   111,   112,
     113,     0,   675,  2488,   677,   678,  1120,   119,   120,   121,
     122,   123,   124,  1121,  1122,   125,   126,   679,   680,   129,
    1123,   130,   131,   132,   133,     0,  1124,  2489,  1125,   136,
     137,   138,   139,   140,   141,  2490,   143,   144,   145,  1126,
     146,   147,   148,   149,   150,   151,  1127,  2491,   153,   154,
     155,  2492,  2493,  2494,  2495,  1128,  1129,  2496,   161,   162,
     163,   164,   165,   166,   167,   689,   690,   170,  1130,   171,
    1131,   172,   173,   174,   175,   176,   177,  1132,   178,   179,
     180,   181,   182,  1133,  1134,   183,   184,   691,   186,   187,
    1135,   188,   189,   190,  1136,   191,   192,   193,  1137,   194,
     195,   196,   197,     0,   199,   200,   201,   202,   203,     0,
    1138,   205,  1139,   206,   207,   692,   209,  1140,   210,  1141,
     211,  2497,  1142,  2498,   214,   215,  2499,  2500,   218,  1143,
     219,  1144,     0,     0,   222,  1145,   223,   224,   225,   226,
     227,   228,   229,  2501,   231,   232,   233,   234,  1146,   235,
     236,   237,   238,   239,   240,  1147,   241,  2502,     0,   244,
     245,   246,   247,   248,   699,   700,  1148,   701,  1149,   252,
    2503,  2504,   255,  2505,   257,   258,   259,   260,   261,   262,
    1150,  1151,   263,  2506,   265,  2507,  1152,   267,   268,   269,
    1153,  1154,   270,   271,   272,   273,   274,  2508,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   708,  2509,   710,   297,
     298,   299,  2510,  1155,   301,   302,  2511,   304,  1156,     0,
     306,   712,   308,   309,   310,  1157,   311,   312,  1158,  1159,
    2512,   314,   315,  1160,  1161,   316,     0,  2513,   319,  2514,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,  1162,   332,   333,     0,   335,   336,     0,   338,   339,
     340,  1163,   341,   342,   343,   344,   345,   346,  1164,   347,
     348,   349,   715,   351,   352,   353,   354,  1165,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,  1166,   368,   369,  2515,   371,   372,   373,   717,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
    1167,   386,   387,   388,   389,   390,  2516,   392,  2517,   394,
     395,   396,  2518,   398,   399,   721,   401,  1168,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
    2519,   415,     0,   417,  1169,   418,   419,  1170,   420,  2520,
     422,   423,   424,   425,   426,  1171,   724,   725,  1172,  1173,
     429,   430,     0,   432,     0,  1174,   434,   435,  2521,   437,
     438,   439,   440,   441,  1175,  1176,   442,   443,   444,   445,
     446,  2522,  1177,   448,   449,   450,   451,   452,     0,   728,
    1179,   455,  2523,   457,   458,   459,   460,   461,  1180,  1181,
     462,  1182,  1183,   463,   464,   465,   466,   467,   468,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     480,   481,   482,   483,     0,   506,     0,  1674,  1675,  1676,
    1669,  2524,  2525,  1679,  1680,  1681,  1682,     0,  1670,  1671,
    1672,  1673,    94,    95,    96,    97,    98,    99,   100,   101,
       0,   102,   103,   104,     0,     0,     0,     0,     0,     0,
       0,   105,   106,     0,   107,   108,   109,     0,   111,   112,
     113,   114,   115,     0,   117,   118,     0,   119,   120,   121,
     122,   123,   124,     0,     0,   125,   126,   127,   128,   129,
       0,   130,   131,   132,   133,   134,     0,     0,     0,   136,
     137,   138,   139,   140,   141,     0,   143,   144,   145,     0,
     146,   147,   148,   149,   150,   151,     0,     0,   153,   154,
     155,     0,     0,     0,     0,     0,     0,     0,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,     0,   171,
       0,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,     0,     0,   183,   184,   185,   186,   187,
       0,   188,   189,   190,     0,   191,   192,   193,     0,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
       0,   205,     0,   206,   207,   208,   209,     0,   210,     0,
     211,     0,     0,     0,   214,   215,   508,     0,   218,     0,
     219,     0,   220,   221,   222,     0,   223,   224,   225,   226,
     227,   228,   229,     0,   231,   232,   233,   234,     0,   235,
     236,   237,   238,   239,   240,     0,   241,     0,   243,   244,
     245,   246,   247,   248,   249,   250,     0,   251,     0,   252,
       0,     0,   255,     0,   257,   258,   259,   260,   261,   262,
       0,     0,   263,     0,   265,     0,     0,   267,   268,   269,
       0,     0,   270,   271,   272,   273,   274,   509,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,     0,   296,   297,
     298,   299,   300,     0,   301,   302,     0,   304,     0,   305,
     306,   307,   308,   309,   310,     0,   311,   312,     0,     0,
     313,   314,   315,     0,     0,   316,   317,     0,   319,     0,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,     0,   347,
     348,   349,   350,   351,   352,   353,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,   368,   369,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,     0,   392,   393,   394,
     395,   396,     0,   398,   399,   400,   401,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     511,   415,   416,   417,     0,   418,   419,     0,   420,     0,
     422,   423,   424,   425,   426,     0,   427,   428,     0,     0,
     429,   430,   431,   432,   433,     0,   434,   435,   436,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
     446,     0,     0,   448,   449,   450,   451,   452,   453,   454,
       0,   455,     0,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,     0,     0,     0,  1674,  1675,  1676,
       0,  1677,  1678,  1679,  1680,  1681,  1682,  1362,     0,     0,
    1363,     0,     0,     0,  1364,  1365,  1366,  1367,  1368,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1369,     0,     0,  1362,     0,     0,  1363,
       0,  1371,     0,  1364,  1365,  1366,  1367,  1368,  1372,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1369,     0,     0,     0,     0,     0,     0,     0,
    1371,  1362,     0,  1373,  1363,     0,     0,  1372,  1364,  1365,
    1366,  1367,  1368,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1369,     0,     0,
    1362,     0,  1373,  1363,     0,  1371,     0,  1364,  1365,  1366,
    1367,  1368,  1372,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1369,     0,     0,     0,
       0,     0,     0,     0,  1371,     0,     0,  1373,     0,     0,
       0,  1372,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1373,     0,     0,     0,
       0,     0,     0,     0,  1374,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1375,     0,     0,     0,     0,  1376,     0,     0,     0,     0,
       0,     0,     0,  1374,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1377,  1378,  1375,
       0,     0,     0,     0,  1376,     0,     0,     0,     0,     0,
       0,     0,  1379,     0,     0,     0,     0,     0,  1374,     0,
       0,     0,     0,     0,     0,     0,  1377,  1378,     0,     0,
       0,     0,     0,     0,  1375,     0,     0,     0,     0,  1376,
       0,  1379,     0,     0,     0,     0,     0,  1374,     0,     0,
    1380,     0,     0,  1381,     0,     0,     0,     0,     0,     0,
       0,  1377,  1378,  1375,     0,     0,     0,  1382,  1376,     0,
    1383,     0,     0,     0,     0,     0,  1379,     0,     0,  1380,
       0,     0,  1381,     0,     0,     0,     0,     0,     0,     0,
    1377,  1378,     0,     0,     0,     0,  1382,     0,     0,  1383,
       0,     0,     0,     0,     0,  1379,     0,     0,     0,     0,
       0,     0,     0,     0,  1380,     0,     0,  1381,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1382,     0,     0,  1383,     0,     0,     0,     0,     0,
       0,     0,     0,  1380,     0,     0,  1381,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1384,
    1382,     0,     0,  1383,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1384,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1384,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1384,     0,     0,     0,     0,     0,     0,     0,
       0,  1385,     0,     0,  1386,  1387,  1388,     0,  1389,  1390,
    1391,  1392,  1393,  1394,     0,     0,     0,     0,  2918,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1385,     0,     0,  1386,  1387,  1388,     0,  1389,  1390,  1391,
    1392,  1393,  1394,     0,     0,     0,     0,  2966,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1385,     0,     0,  1386,  1387,
    1388,     0,  1389,  1390,  1391,  1392,  1393,  1394,     0,     0,
       0,     0,  2979,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1110,  1385,     0,     0,  1386,  1387,  1388,
       0,  1389,  1390,  1391,  1392,  1393,  1394,     0,     0,  1545,
      94,    95,    96,    97,    98,    99,   100,   101,  1111,   102,
     103,   104,  1112,  1113,  1114,  1115,  1116,  1117,  1118,   105,
     106,  1119,   107,   108,   109,   762,   111,   112,   113,   763,
     764,   765,   766,   767,  1120,   119,   120,   121,   122,   123,
     124,  1121,  1122,   125,   126,   768,   769,   129,  1123,   130,
     131,   132,   133,   770,  1124,   771,  1125,   136,   137,   138,
     139,   140,   141,   772,   143,   144,   145,  1126,   146,   147,
     148,   149,   150,   151,  1127,   773,   153,   154,   155,   774,
     775,   776,   777,  1128,  1129,   778,   161,   162,   163,   164,
     165,   166,   167,   779,   780,   170,  1130,   171,  1131,   172,
     173,   174,   175,   176,   177,  1132,   178,   179,   180,   181,
     182,  1133,  1134,   183,   184,   185,   186,   187,  1135,   188,
     189,   190,  1136,   191,   192,   193,  1137,   194,   195,   196,
     197,   781,   199,   200,   201,   202,   203,   782,  1138,   205,
    1139,   206,   207,   783,   209,  1140,   210,  1141,   211,   784,
    1142,   785,   214,   215,   786,   787,   218,  1143,   219,  1144,
     788,   789,   222,  1145,   223,   224,   225,   226,   227,   228,
     229,   790,   231,   232,   233,   234,  1146,   235,   236,   237,
     238,   239,   240,  1147,   241,   791,   792,   244,   245,   246,
     247,   248,   793,   794,  1148,   795,  1149,   252,   796,   797,
     255,   798,   257,   258,   259,   260,   261,   262,  1150,  1151,
     263,   799,   265,   800,  1152,   267,   268,   269,  1153,  1154,
     270,   271,   272,   273,   274,   801,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   802,   803,   804,   297,   298,   299,
     805,  1155,   301,   302,   806,   304,  1156,   807,   306,   808,
     308,   309,   310,  1157,   311,   312,  1158,  1159,   313,   314,
     315,  1160,  1161,   316,   809,   810,   319,   811,   812,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,  1162,
     332,   333,   813,   335,   336,   814,   338,   339,   340,  1163,
     341,   342,   343,   344,   345,   346,  1164,   347,   348,   349,
     815,   351,   352,   353,   354,  1165,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,  1166,
     368,   369,   816,   371,   372,   373,   817,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,  1167,   386,
     387,   388,   389,   390,   818,   392,   819,   394,   395,   396,
     820,   398,   399,   821,   401,  1168,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   822,   415,
     823,   417,  1169,   418,   419,  1170,   420,   824,   422,   423,
     424,   425,   426,  1171,   825,   826,  1172,  1173,   429,   430,
     827,   432,   828,  1174,   434,   435,   829,   437,   438,   439,
     440,   441,  1175,  1176,   442,   443,   444,   445,   446,   830,
    1177,   448,   449,   450,   451,   452,  1178,   832,  1179,   455,
     833,   457,   458,   459,   460,   461,  1180,  1181,   462,  1182,
    1183,   463,   464,   465,   466,   467,   468,   834,   835,   836,
     837,   838,   839,   840,   841,   842,   843,   844,   480,   481,
     482,   483,   506,     0,     0,     0,     0,     0,     0,     0,
       0,  1793,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,     0,     0,     0,   105,   106,
       0,   107,   108,   109,     0,   111,   112,   113,   114,   115,
       0,   117,   118,     0,   119,   120,   121,   122,   123,   124,
       0,     0,   125,   126,   127,   128,   129,     0,   130,   131,
     132,   133,   134,     0,     0,     0,   136,   137,   138,   139,
     140,   141,     0,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,     0,   153,   154,   155,     0,     0,
       0,     0,     0,     0,     0,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   185,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,     0,   205,     0,
     206,   207,   208,   209,     0,   210,     0,   211,     0,     0,
       0,   214,   215,   508,     0,   218,     0,   219,     0,   220,
     221,   222,     0,   223,   224,   225,   226,   227,   228,   229,
       0,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,     0,   243,   244,   245,   246,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,   255,
       0,   257,   258,   259,   260,   261,   262,     0,     0,   263,
       0,   265,     0,     0,   267,   268,   269,     0,     0,   270,
     271,   272,   273,   274,   509,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,     0,   296,   297,   298,   299,   300,
       0,   301,   302,     0,   304,     0,   305,   306,   307,   308,
     309,   310,     0,   311,   312,     0,     0,   313,   314,   315,
       0,     0,   316,   317,     0,   319,     0,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   350,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,     0,   392,   393,   394,   395,   396,     0,
     398,   399,   400,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   511,   415,   416,
     417,     0,   418,   419,     0,   420,     0,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,   429,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,     0,     0,
     448,   449,   450,   451,   452,   453,   454,     0,   455,     0,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   761,  1285,   556,     0,     0,     0,   868,     0,     0,
    2294,     0,     0,     0,     0,     0,     0,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
     107,   108,   109,   762,   111,   112,   113,   763,   764,   765,
     766,   767,     0,   119,   120,   121,   122,   123,   124,     0,
       0,   125,   126,   768,   769,   129,     0,   130,   131,   132,
     133,   770,     0,   771,     0,   136,   137,   138,   139,   140,
     141,   772,   143,   144,   145,     0,   146,   147,   148,   149,
     150,   151,     0,   773,   153,   154,   155,   774,   775,   776,
     777,     0,     0,   778,   161,   162,   163,   164,   165,   166,
     167,   779,   780,   170,  1421,   171,     0,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,     0,
       0,   183,   184,   185,   186,   187,     0,   188,   189,   190,
       0,   191,   192,   193,     0,   194,   195,   196,   197,   781,
     199,   200,   201,   202,   203,   782,  1286,   205,     0,   206,
     207,   783,   209,     0,   210,     0,   211,   784,     0,   785,
     214,   215,   786,   787,   218,     0,   219,     0,   788,   789,
     222,     0,   223,   224,   225,   226,   227,   228,   229,   790,
     231,   232,   233,   234,     0,   235,   236,   237,   238,   239,
     240,     0,   241,   791,   792,   244,   245,   246,   247,   248,
     793,   794,     0,   795,     0,   252,   796,   797,   255,   798,
     257,   258,   259,   260,   261,   262,     0,     0,   263,   799,
     265,   800,     0,   267,   268,   269,     0,     0,   270,   271,
     272,   273,   274,   801,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   802,   803,   804,   297,   298,   299,   805,     0,
     301,   302,   806,   304,     0,   807,   306,   808,   308,   309,
     310,     0,   311,   312,  1287,     0,   313,   314,   315,     0,
       0,   316,   809,   810,   319,   811,   812,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     813,   335,   336,   814,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,     0,   347,   348,   349,   815,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,   368,   369,
     816,   371,   372,   373,   817,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   818,   392,   819,   394,   395,   396,   820,   398,
     399,   821,   401,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   822,   415,   823,   417,
       0,   418,   419,     0,   420,   824,   422,   423,   424,   425,
     426,     0,   825,   826,     0,     0,   429,   430,   827,   432,
     828,  1288,   434,   435,   829,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,   446,   830,     0,   448,
     449,   450,   451,   452,  1178,   832,     0,   455,   833,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   834,   835,   836,   837,   838,
     839,   840,   841,   842,   843,   844,   480,   481,   482,   483,
     761,  1285,   556,     0,     0,     0,   868,  1289,  1290,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,   762,   111,   112,   113,   763,   764,   765,   766,
     767,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   768,   769,   129,     0,   130,   131,   132,   133,
     770,     0,   771,     0,   136,   137,   138,   139,   140,   141,
     772,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   773,   153,   154,   155,   774,   775,   776,   777,
       0,     0,   778,   161,   162,   163,   164,   165,   166,   167,
     779,   780,   170,  1423,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   781,   199,
     200,   201,   202,   203,   782,  1286,   205,     0,   206,   207,
     783,   209,     0,   210,     0,   211,   784,     0,   785,   214,
     215,   786,   787,   218,     0,   219,     0,   788,   789,   222,
       0,   223,   224,   225,   226,   227,   228,   229,   790,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,   791,   792,   244,   245,   246,   247,   248,   793,
     794,     0,   795,     0,   252,   796,   797,   255,   798,   257,
     258,   259,   260,   261,   262,     0,     0,   263,   799,   265,
     800,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   801,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   802,   803,   804,   297,   298,   299,   805,     0,   301,
     302,   806,   304,     0,   807,   306,   808,   308,   309,   310,
       0,   311,   312,  1287,     0,   313,   314,   315,     0,     0,
     316,   809,   810,   319,   811,   812,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   813,
     335,   336,   814,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   815,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,   816,
     371,   372,   373,   817,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   818,   392,   819,   394,   395,   396,   820,   398,   399,
     821,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   822,   415,   823,   417,     0,
     418,   419,     0,   420,   824,   422,   423,   424,   425,   426,
       0,   825,   826,     0,     0,   429,   430,   827,   432,   828,
    1288,   434,   435,   829,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,   830,     0,   448,   449,
     450,   451,   452,  1178,   832,     0,   455,   833,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   834,   835,   836,   837,   838,   839,
     840,   841,   842,   843,   844,   480,   481,   482,   483,   761,
    1285,   556,     0,     0,     0,   868,  1289,  1290,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,   762,   111,   112,   113,   763,   764,   765,   766,   767,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   768,   769,   129,     0,   130,   131,   132,   133,   770,
       0,   771,     0,   136,   137,   138,   139,   140,   141,   772,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   773,   153,   154,   155,   774,   775,   776,   777,     0,
       0,   778,   161,   162,   163,   164,   165,   166,   167,   779,
     780,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   781,   199,   200,
     201,   202,   203,   782,  1286,   205,     0,   206,   207,   783,
     209,     0,   210,     0,   211,   784,     0,   785,   214,   215,
     786,   787,   218,     0,   219,     0,   788,   789,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   790,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   791,   792,   244,   245,   246,   247,   248,   793,   794,
       0,   795,     0,   252,   796,   797,   255,   798,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   799,   265,   800,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   801,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     802,   803,   804,   297,   298,   299,   805,     0,   301,   302,
     806,   304,     0,   807,   306,   808,   308,   309,   310,     0,
     311,   312,  1287,     0,   313,   314,   315,     0,     0,   316,
     809,   810,   319,   811,   812,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   813,   335,
     336,   814,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   815,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   816,   371,
     372,   373,   817,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     818,   392,   819,   394,   395,   396,   820,   398,   399,   821,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   822,   415,   823,   417,     0,   418,
     419,     0,   420,   824,   422,   423,   424,   425,   426,     0,
     825,   826,     0,     0,   429,   430,   827,   432,   828,  1288,
     434,   435,   829,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   830,     0,   448,   449,   450,
     451,   452,  1178,   832,     0,   455,   833,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   834,   835,   836,   837,   838,   839,   840,
     841,   842,   843,   844,   480,   481,   482,   483,     0,     0,
    1362,     0,     0,  1363,     0,  1289,  1290,  1364,  1365,  1366,
    1367,  1368,     0,  1362,     0,     0,  1363,     0,     0,     0,
    1364,  1365,  1366,  1367,  1368,     0,  1369,     0,     0,     0,
    1820,     0,     0,     0,  1371,     0,     0,     0,     0,  1369,
       0,  1372,     0,     0,     0,     0,     0,  1371,  1362,     0,
       0,  1363,     0,     0,  1372,  1364,  1365,  1366,  1367,  1368,
       0,  1362,     0,     0,  1363,     0,  1373,     0,  1364,  1365,
    1366,  1367,  1368,     0,  1369,     0,     0,     0,     0,  1373,
       0,     0,  1371,     0,     0,     0,     0,  1369,     0,  1372,
    2021,     0,     0,     0,     0,  1371,     0,     0,     0,     0,
       0,     0,  1372,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1373,     0,     0,  1821,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1373,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1362,     0,     0,  1363,     0,     0,     0,  1364,  1365,
    1366,  1367,  1368,     0,     0,     0,     0,  1374,     0,     0,
    2060,     0,     0,     0,     0,  2061,     0,  1369,     0,     0,
    1374,     0,     0,  1375,     0,  1371,     0,     0,  1376,     0,
       0,     0,  1372,     0,     0,     0,  1375,     0,     0,     0,
       0,  1376,     0,     0,  3066,     0,     0,     0,     0,     0,
    1377,  1378,     0,     0,     0,  1374,     0,  1373,     0,     0,
       0,     0,     0,  1377,  1378,  1379,     0,     0,  1374,     0,
       0,  1375,     0,     0,     0,     0,  1376,     0,  1379,     0,
       0,     0,     0,     0,  1375,     0,     0,     0,     0,  1376,
       0,     0,     0,     0,     0,     0,     0,     0,  1377,  1378,
       0,     0,     0,  1380,     0,     0,  1381,     0,     0,     0,
       0,  1377,  1378,  1379,     0,     0,  1380,     0,     0,  1381,
    1382,     0,     0,  1383,     0,     0,  1379,     0,     0,     0,
       0,     0,     0,  1382,     0,     0,  1383,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1380,     0,     0,  1381,     0,     0,     0,  1374,     0,
       0,     0,     0,     0,  1380,     0,     0,  1381,  1382,     0,
       0,  1383,     0,     0,  1375,     0,     0,     0,     0,  1376,
       0,  1382,     0,     0,  1383,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3067,     0,     0,     0,     0,     0,
       0,  1377,  1378,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1384,     0,     0,     0,  1379,     0,     0,     0,
       0,  1362,     0,     0,  1363,  1384,     0,     0,  1364,  1365,
    1366,  1367,  1368,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1369,     0,     0,
    2066,     0,     0,     0,  1380,  1371,     0,  1381,     0,     0,
    1384,     0,  1372,     0,     0,     0,     0,     0,     0,     0,
       0,  1382,  1825,  1384,  1383,  1362,     0,     0,  1363,     0,
       0,     0,  1364,  1365,  1366,  1367,  1368,  1373,     0,     0,
       0,     0,  2033,     0,     0,     0,     0,     0,     0,     0,
       0,  1369,     0,     0,     0,     0,     0,     0,     0,  1371,
       0,     0,     0,     0,  1385,     0,  1372,  1386,  1387,  1388,
       0,  1389,  1390,  1391,  1392,  1393,  1394,  1385,     0,     0,
    1386,  1387,  1388,     0,  1389,  1390,  1391,  1392,  1393,  1394,
       0,  1373,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1385,  1384,     0,  1386,  1387,  1388,     0,  1389,
    1390,  1391,  1392,  1393,  1394,  1385,     0,     0,  1386,  1387,
    1388,     0,  1389,  1390,  1391,  1392,  1393,  1394,  1374,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1375,     0,     0,     0,     0,  1376,
       0,     0,     0,     0,  1362,     0,     0,  1363,     0,     0,
       0,  1364,  1365,  1366,  1367,  1368,     0,     0,     0,     0,
       0,  1377,  1378,     0,     0,     0,     0,  2071,     0,     0,
    1369,     0,  1374,  2073,     0,     0,  1379,     0,  1371,     0,
       0,     0,     0,     0,     0,  1372,     0,     0,  1375,     0,
       0,     0,     0,  1376,     0,  1385,     0,     0,  1386,  1387,
    1388,     0,  1389,  1390,  1391,  1392,  1393,  1394,     0,     0,
    1373,     0,     0,     0,  1380,  1377,  1378,  1381,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1362,
    1379,  1382,  1363,     0,  1383,     0,  1364,  1365,  1366,  1367,
    1368,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1369,     0,     0,     0,     0,
       0,     0,     0,  1371,     0,     0,     0,     0,  1380,     0,
    1372,  1381,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1362,     0,  1382,  1363,     0,  1383,     0,
    1364,  1365,  1366,  1367,  1368,  1373,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1369,
       0,  1374,  2343,     0,     0,     0,     0,  1371,     0,     0,
       0,     0,     0,  1384,  1372,     0,     0,  1375,     0,     0,
       0,     0,  1376,     0,     0,     0,     0,  1362,     0,     0,
    1363,     0,     0,     0,  1364,  1365,  1366,  1367,  1368,  1373,
       0,     0,     0,     0,  1377,  1378,     0,     0,     0,     0,
       0,     0,     0,  1369,     0,     0,     0,     0,     0,  1379,
       0,  1371,     0,     0,     0,     0,     0,  1384,  1372,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1374,     0,     0,     0,
       0,     0,     0,  1373,     0,     0,     0,  1380,     0,     0,
    1381,     0,  1375,     0,     0,     0,     0,  1376,     0,     0,
       0,     0,     0,     0,  1382,  1385,     0,  1383,  1386,  1387,
    1388,     0,  1389,  1390,  1391,  1392,  1393,  1394,     0,  1377,
    1378,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1374,     0,     0,     0,  1379,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1375,     0,     0,     0,
       0,  1376,     0,     0,     0,     0,     0,     0,     0,  1385,
       0,     0,  1386,  1387,  1388,     0,  1389,  1390,  1391,  1392,
    1393,  1394,  1380,  1377,  1378,  1381,     0,     0,     0,     0,
       0,     0,     0,     0,  1374,     0,     0,     0,  1379,  1382,
       0,     0,  1383,     0,     0,     0,  1384,     0,     0,     0,
    1375,     0,     0,     0,     0,  1376,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1380,  1377,  1378,  1381,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1379,  1382,     0,  1362,  1383,     0,  1363,     0,
       0,     0,  1364,  1365,  1366,  1367,  1368,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1369,     0,     0,     0,     0,     0,     0,     0,  1371,
    1380,  1384,     0,  1381,     0,     0,  1372,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1382,  1385,     0,
    1383,  1386,  1387,  1388,     0,  1389,  1390,  1391,  1392,  1393,
    1394,  1373,     0,     0,  2298,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1384,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1385,     0,     0,  1386,  1387,  1388,  1384,
    1389,  1390,  1391,  1392,  1393,  1394,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1374,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1375,     0,
       0,     0,     0,  1376,     0,     0,     0,  1385,     0,     0,
    1386,  1387,  1388,     0,  1389,  1390,  1391,  1392,  1393,  1394,
       0,     0,     0,     0,     0,  1377,  1378,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1379,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1385,     0,     0,  1386,  1387,  1388,     0,  1389,  1390,
    1391,  1392,  1393,  1394,     0,     0,     0,     0,  1380,     0,
       0,  1381,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1382,     0,     0,  1383,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1384,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1110,     0,  1730,     0,  1385,
       0,     0,  1386,  1387,  1388,     0,  1389,  1390,  1391,  1392,
    1840,  1394,    94,    95,    96,    97,    98,    99,   100,   101,
    1111,   102,   103,   104,  1112,  1113,  1114,  1115,  1116,  1117,
    1118,   105,   106,  1119,   107,   108,   109,   762,   111,   112,
     113,   763,   764,   765,   766,   767,  1120,   119,   120,   121,
     122,   123,   124,  1121,  1122,   125,   126,   768,   769,   129,
    1123,   130,   131,   132,   133,   770,  1124,   771,  1125,   136,
     137,   138,   139,   140,   141,   772,   143,   144,   145,  1126,
     146,   147,   148,   149,   150,   151,  1127,   773,   153,   154,
     155,   774,   775,   776,   777,  1128,  1129,   778,   161,   162,
     163,   164,   165,   166,   167,   779,   780,   170,  1130,   171,
    1131,   172,   173,   174,   175,   176,   177,  1132,   178,   179,
     180,   181,   182,  1133,  1134,   183,   184,   185,   186,   187,
    1135,   188,   189,   190,  1136,   191,   192,   193,  1137,   194,
     195,   196,   197,   781,   199,   200,   201,   202,   203,   782,
    1138,   205,  1139,   206,   207,   783,   209,  1140,   210,  1141,
     211,   784,  1142,   785,   214,   215,   786,   787,   218,  1143,
     219,  1144,   788,   789,   222,  1145,   223,   224,   225,   226,
     227,   228,   229,   790,   231,   232,   233,   234,  1146,   235,
     236,   237,   238,   239,   240,  1147,   241,   791,   792,   244,
     245,   246,   247,   248,   793,   794,  1148,   795,  1149,   252,
     796,   797,   255,   798,   257,   258,   259,   260,   261,   262,
    1150,  1151,   263,   799,   265,   800,  1152,   267,   268,   269,
    1153,  1154,   270,   271,   272,   273,   274,   801,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   802,   803,   804,   297,
     298,   299,   805,  1155,   301,   302,   806,   304,  1156,   807,
     306,   808,   308,   309,   310,  1157,   311,   312,  1158,  1159,
     313,   314,   315,  1160,  1161,   316,   809,   810,   319,   811,
     812,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,  1162,   332,   333,   813,   335,   336,   814,   338,   339,
     340,  1163,   341,   342,   343,   344,   345,   346,  1164,   347,
     348,   349,   815,   351,   352,   353,   354,  1165,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,  1166,   368,   369,   816,   371,   372,   373,   817,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
    1167,   386,   387,   388,   389,   390,   818,   392,   819,   394,
     395,   396,   820,   398,   399,   821,   401,  1168,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     822,   415,   823,   417,  1169,   418,   419,  1170,   420,   824,
     422,   423,   424,   425,   426,  1171,   825,   826,  1172,  1173,
     429,   430,   827,   432,   828,  1174,   434,   435,   829,   437,
     438,   439,   440,   441,  1175,  1176,   442,   443,   444,   445,
     446,   830,  1177,   448,   449,   450,   451,   452,  1178,   832,
    1179,   455,   833,   457,   458,   459,   460,   461,  1180,  1181,
     462,  1182,  1183,   463,   464,   465,   466,   467,   468,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     480,   481,   482,   483,  1110,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,  1111,
     102,   103,   104,  1112,  1113,  1114,  1115,  1116,  1117,  1118,
     105,   106,  1119,   107,   108,   109,   762,   111,   112,   113,
     763,   764,   765,   766,   767,  1120,   119,   120,   121,   122,
     123,   124,  1121,  1122,   125,   126,   768,   769,   129,  1123,
     130,   131,   132,   133,   770,  1124,   771,  1125,   136,   137,
     138,   139,   140,   141,   772,   143,   144,   145,  1126,   146,
     147,   148,   149,   150,   151,  1127,   773,   153,   154,   155,
     774,   775,   776,   777,  1128,  1129,   778,   161,   162,   163,
     164,   165,   166,   167,   779,   780,   170,  1130,   171,  1131,
     172,   173,   174,   175,   176,   177,  1132,   178,   179,   180,
     181,   182,  1133,  1134,   183,   184,   185,   186,   187,  1135,
     188,   189,   190,  1136,   191,   192,   193,  1137,   194,   195,
     196,   197,   781,   199,   200,   201,   202,   203,   782,  1138,
     205,  1139,   206,   207,   783,   209,  1140,   210,  1141,   211,
     784,  1142,   785,   214,   215,   786,   787,   218,  1143,   219,
    1144,   788,   789,   222,  1145,   223,   224,   225,   226,   227,
     228,   229,   790,   231,   232,   233,   234,  1146,   235,   236,
     237,   238,   239,   240,  1147,   241,   791,   792,   244,   245,
     246,   247,   248,   793,   794,  1148,   795,  1149,   252,   796,
     797,   255,   798,   257,   258,   259,   260,   261,   262,  1150,
    1151,   263,   799,   265,   800,  1152,   267,   268,   269,  1153,
    1154,   270,   271,   272,   273,   274,   801,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   802,   803,   804,   297,   298,
     299,   805,  1155,   301,   302,   806,   304,  1156,   807,   306,
     808,   308,   309,   310,  1157,   311,   312,  1158,  1159,   313,
     314,   315,  1160,  1161,   316,   809,   810,   319,   811,   812,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
    1162,   332,   333,   813,   335,   336,   814,   338,   339,   340,
    1163,   341,   342,   343,   344,   345,   346,  1164,   347,   348,
     349,   815,   351,   352,   353,   354,  1165,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
    1166,   368,   369,   816,   371,   372,   373,   817,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,  1167,
     386,   387,   388,   389,   390,   818,   392,   819,   394,   395,
     396,   820,   398,   399,   821,   401,  1168,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   822,
     415,   823,   417,  1169,   418,   419,  1170,   420,   824,   422,
     423,   424,   425,   426,  1171,   825,   826,  1172,  1173,   429,
     430,   827,   432,   828,  1174,   434,   435,   829,   437,   438,
     439,   440,   441,  1175,  1176,   442,   443,   444,   445,   446,
     830,  1177,   448,   449,   450,   451,   452,  1178,   832,  1179,
     455,   833,   457,   458,   459,   460,   461,  1180,  1181,   462,
    1182,  1183,   463,   464,   465,   466,   467,   468,   834,   835,
     836,   837,   838,   839,   840,   841,   842,   843,   844,   480,
     481,   482,   483,  1110,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      94,    95,    96,    97,  1876,    99,   100,   101,  1111,   102,
     103,   104,  1112,  1113,  1114,  1115,  1116,  1117,  1118,   105,
     106,  1119,   107,   108,   109,   762,   111,   112,   113,   763,
     764,   765,   766,   767,  1120,   119,   120,   121,   122,   123,
     124,  1121,  1122,   125,   126,   768,   769,   129,  1123,   130,
     131,   132,   133,   770,  1124,   771,  1125,   136,   137,   138,
     139,   140,   141,   772,   143,   144,   145,  1126,   146,   147,
     148,   149,   150,   151,  1127,   773,   153,   154,   155,   774,
     775,   776,   777,  1128,  1129,   778,   161,   162,   163,   164,
     165,   166,   167,   779,   780,   170,  1130,   171,  1131,   172,
     173,   174,   175,   176,   177,  1132,   178,   179,   180,   181,
     182,  1133,  1134,   183,   184,   185,  1877,   187,  1135,   188,
     189,   190,  1136,   191,   192,   193,  1137,   194,   195,   196,
     197,   781,   199,   200,   201,   202,   203,   782,  1138,   205,
    1139,   206,   207,   783,   209,  1140,   210,  1141,   211,   784,
    1142,   785,   214,   215,   786,   787,   218,  1143,   219,  1144,
     788,   789,   222,  1145,   223,   224,   225,   226,   227,   228,
     229,   790,   231,   232,   233,   234,  1146,   235,   236,   237,
     238,   239,   240,  1147,   241,   791,   792,   244,   245,   246,
     247,   248,   793,   794,  1148,   795,  1149,   252,   796,   797,
     255,   798,   257,   258,   259,   260,   261,   262,  1150,  1151,
     263,   799,   265,   800,  1152,   267,   268,   269,  1153,  1154,
     270,   271,   272,   273,   274,   801,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   802,   803,   804,   297,   298,   299,
     805,  1155,   301,   302,   806,   304,  1156,   807,   306,   808,
     308,   309,   310,  1157,   311,   312,  1158,  1159,   313,   314,
     315,  1160,  1161,   316,   809,   810,   319,   811,   812,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,  1162,
     332,   333,   813,   335,   336,   814,   338,   339,   340,  1163,
     341,   342,   343,   344,   345,   346,  1164,   347,   348,   349,
     815,   351,   352,   353,   354,  1165,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,  1166,
     368,   369,   816,   371,   372,   373,   817,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,  1167,   386,
     387,   388,   389,   390,   818,  1878,   819,   394,   395,   396,
     820,   398,   399,   821,   401,  1168,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   822,   415,
     823,   417,  1169,   418,   419,  1170,   420,   824,   422,   423,
     424,   425,   426,  1171,   825,   826,  1172,  1173,   429,   430,
     827,   432,   828,  1174,   434,   435,   829,   437,   438,   439,
     440,   441,  1175,  1176,   442,   443,   444,   445,   446,   830,
    1177,   448,   449,   450,   451,   452,  1178,   832,  1179,   455,
     833,   457,   458,   459,   460,   461,  1180,  1181,   462,  1182,
    1183,   463,   464,   465,   466,   467,   468,   834,   835,   836,
     837,   838,   839,   840,   841,   842,   843,   844,   480,   481,
     482,   483,    93,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,     0,     0,     0,   105,   106,
       0,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,   120,   121,   122,   123,   124,
       0,   875,   125,   126,   127,   128,   129,     0,   130,   131,
     132,   133,   878,     0,   879,     0,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,   153,   154,   155,   880,   881,
     882,   883,   884,   885,   886,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   185,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   891,     0,   205,     0,
     206,   207,   208,   209,     0,   210,     0,   211,   212,     0,
     213,   214,   215,   216,   217,   218,     0,   219,     0,   220,
     221,   222,     0,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,     0,   251,     0,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,     0,     0,   263,
     264,   265,   266,     0,   267,   268,   269,   899,   900,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
       0,   301,   302,   303,   304,     0,   905,   306,   307,   308,
     309,   310,     0,   311,   312,     0,     0,   313,   314,   315,
       0,     0,   316,   317,   318,   319,   320,   908,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   909,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   350,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,   912,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   914,
     417,     0,   418,   419,     0,   420,   421,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,   429,   430,   917,
     432,   918,     0,   434,   435,   920,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,   921,     0,
     448,   449,   450,   451,   452,   453,   454,     0,   455,   456,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   761,     0,   556,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
     107,   108,   109,   762,   111,   112,   113,   763,   764,   765,
     766,   767,     0,   119,   120,   121,   122,   123,   124,     0,
       0,   125,   126,   768,   769,   129,     0,   130,   131,   132,
     133,   770,     0,   771,     0,   136,   137,   138,   139,   140,
     141,   772,   143,   144,   145,     0,   146,   147,   148,   149,
     150,   151,     0,   773,   153,   154,   155,   774,   775,   776,
     777,     0,     0,   778,   161,   162,   163,   164,   165,   166,
     167,   779,   780,   170,     0,   171,     0,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,     0,
       0,   183,   184,   185,   186,   187,     0,   188,   189,   190,
       0,   191,   192,   193,     0,   194,   195,   196,   197,   781,
     199,   200,   201,   202,   203,   782,  1286,   205,     0,   206,
     207,   783,   209,     0,   210,     0,   211,   784,     0,   785,
     214,   215,   786,   787,   218,     0,   219,     0,   788,   789,
     222,     0,   223,   224,   225,   226,   227,   228,   229,   790,
     231,   232,   233,   234,     0,   235,   236,   237,   238,   239,
     240,     0,   241,   791,   792,   244,   245,   246,   247,   248,
     793,   794,     0,   795,     0,   252,   796,   797,   255,   798,
     257,   258,   259,   260,   261,   262,     0,     0,   263,   799,
     265,   800,     0,   267,   268,   269,     0,     0,   270,   271,
     272,   273,   274,   801,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   802,   803,   804,   297,   298,   299,   805,     0,
     301,   302,   806,   304,     0,   807,   306,   808,   308,   309,
     310,     0,   311,   312,  1287,     0,   313,   314,   315,     0,
       0,   316,   809,   810,   319,   811,   812,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     813,   335,   336,   814,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,     0,   347,   348,   349,   815,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,   368,   369,
     816,   371,   372,   373,   817,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,   818,   392,   819,   394,   395,   396,   820,   398,
     399,   821,   401,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   822,   415,   823,   417,
       0,   418,   419,     0,   420,   824,   422,   423,   424,   425,
     426,     0,   825,   826,     0,     0,   429,   430,   827,   432,
     828,  1288,   434,   435,   829,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,   446,   830,     0,   448,
     449,   450,   451,   452,  1178,   832,     0,   455,   833,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   834,   835,   836,   837,   838,
     839,   840,   841,   842,   843,   844,   480,   481,   482,   483,
     761,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     3,
       4,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,   762,   111,   112,   113,   763,   764,   765,   766,
     767,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   768,   769,   129,     0,   130,   131,   132,   133,
     770,     0,   771,     0,   136,   137,   138,   139,   140,   141,
     772,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   773,   153,   154,   155,   774,   775,   776,   777,
       0,     0,   778,   161,   162,   163,   164,   165,   166,   167,
     779,   780,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   781,   199,
     200,   201,   202,   203,   782,     0,   205,     0,   206,   207,
     783,   209,     0,   210,     0,   211,   784,     0,   785,   214,
     215,   786,   787,   218,     0,   219,     0,   788,   789,   222,
       0,   223,   224,   225,   226,   227,   228,   229,   790,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,   791,   792,   244,   245,   246,   247,   248,   793,
     794,     0,   795,     0,   252,   796,   797,   255,   798,   257,
     258,   259,   260,   261,   262,     0,     0,   263,   799,   265,
     800,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   801,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   802,   803,   804,   297,   298,   299,   805,     0,   301,
     302,   806,   304,     0,   807,   306,   808,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   809,   810,   319,   811,   812,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   813,
     335,   336,   814,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   815,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,   816,
     371,   372,   373,   817,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   818,   392,   819,   394,   395,   396,   820,   398,   399,
     821,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   822,   415,   823,   417,     0,
     418,   419,     0,   420,   824,   422,   423,   424,   425,   426,
       0,   825,   826,     0,     0,   429,   430,   827,   432,   828,
       0,   434,   435,   829,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,   830,     0,   448,   449,
     450,   451,   452,  1178,   832,     0,   455,   833,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   834,   835,   836,   837,   838,   839,
     840,   841,   842,   843,   844,   480,   481,   482,   483,    93,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,   135,     0,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,   153,   154,   155,   156,   157,   158,   159,     0,
       0,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,   212,     0,   213,   214,   215,
     216,   217,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   264,   265,   266,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,     0,   301,   302,
     303,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,     0,   418,
     419,     0,   420,   421,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   447,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,   456,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    94,    95,    96,    97,    98,
      99,   100,   101,     0,   102,   103,   104,     0,     0,     0,
       0,     0,     0,     0,   105,   106,     0,   107,   108,   109,
       0,   111,   112,   113,   114,   115,     0,   117,   118,     0,
     119,   120,   121,   122,   123,   124,     0,     0,   125,   126,
     127,   128,   129,  1483,   130,   131,   132,   133,   134,     0,
       0,  1484,   136,   137,   138,   139,   140,   141,     0,   143,
     144,   145,  1485,   146,   147,   148,   149,   150,   151,     0,
       0,   153,   154,   155,     0,     0,     0,     0,     0,     0,
       0,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,     0,   171,     0,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,     0,   205,     0,   206,   207,   208,   209,
       0,   210,  1486,   211,     0,     0,     0,   214,   215,   508,
       0,   218,     0,   219,     0,   220,   221,   222,     0,   223,
     224,   225,   226,   227,  1487,   229,     0,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
       0,   243,   244,   245,   246,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,   255,     0,   257,   258,   259,
     260,   261,   262,     0,     0,   263,     0,   265,     0,     0,
     267,   268,   269,     0,     0,   270,   271,   272,   273,   274,
     509,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
       0,   296,   297,   298,   299,   300,     0,   301,   302,     0,
     304,     0,   305,   306,   307,   308,   309,   310,     0,   311,
     312,     0,     0,   313,   314,   315,     0,     0,   316,   317,
       0,   319,     0,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,  1488,   341,   342,   343,   344,   345,
     346,     0,   347,   348,   349,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,   368,   369,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,     0,
     392,   393,   394,   395,   396,     0,   398,   399,   400,   401,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   511,   415,   416,   417,     0,   418,   419,
       0,   420,     0,   422,   423,   424,   425,   426,     0,   427,
     428,     0,     0,   429,   430,   431,   432,   433,     0,   434,
     435,   436,   437,   438,   439,   440,   441,     0,  1489,   442,
     443,   444,   445,   446,     0,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,     0,   457,   458,   459,   460,
     461,     0,     0,   462,     0,     0,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   506,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
       0,     0,     0,   105,   106,     0,   107,   108,   109,     0,
     111,   112,   113,   114,   115,     0,   117,   118,     0,   119,
     120,   121,   122,   123,   124,     0,     0,   125,   126,   127,
     128,   129,  1483,   130,   131,   132,   133,   134,     0,     0,
       0,   136,   137,   138,   139,   140,   141,     0,   143,   144,
     145,  1485,   146,   147,   148,   149,   150,   151,     0,     0,
     153,   154,   155,     0,     0,     0,     0,     0,     0,     0,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
       0,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,     0,     0,   183,   184,   185,
     186,   187,     0,   188,   189,   190,     0,   191,   192,   193,
       0,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,     0,   205,     0,   206,   207,   208,   209,     0,
     210,  1486,   211,     0,     0,     0,   214,   215,   508,     0,
     218,     0,   219,     0,   220,   221,   222,     0,   223,   224,
     225,   226,   227,   228,   229,     0,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
     243,   244,   245,   246,   247,   248,   249,   250,     0,   251,
       0,   252,     0,     0,   255,     0,   257,   258,   259,   260,
     261,   262,     0,     0,   263,     0,   265,  1945,     0,   267,
     268,   269,     0,     0,   270,   271,   272,   273,   274,   509,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,     0,
     296,   297,   298,   299,   300,     0,   301,   302,     0,   304,
       0,   305,   306,   307,   308,   309,   310,     0,   311,   312,
       0,     0,   313,   314,   315,     0,     0,   316,   317,     0,
     319,     0,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,  1488,   341,   342,   343,   344,   345,   346,
       0,   347,   348,   349,   350,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,   368,   369,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,     0,   392,
     393,   394,   395,   396,     0,   398,   399,   400,   401,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   511,   415,   416,   417,     0,   418,   419,     0,
     420,     0,   422,   423,   424,   425,   426,     0,   427,   428,
       0,     0,   429,   430,   431,   432,   433,     0,   434,   435,
     436,   437,   438,   439,   440,   441,     0,  1489,   442,   443,
     444,   445,   446,     0,     0,   448,   449,   450,   451,   452,
     453,   454,     0,   455,     0,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   506,     0,   588,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     3,     4,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   508,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   509,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   511,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   673,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    94,    95,    96,    97,    98,    99,   100,   101,
       0,   102,   103,   104,     0,     0,     0,     0,     0,  -663,
       0,   105,   106,     0,   107,   108,   109,   674,   111,   112,
     113,     0,   675,   676,   677,   678,     0,   119,   120,   121,
     122,   123,   124,     0,     0,   125,   126,   679,   680,   129,
       0,   130,   131,   132,   133,     0,     0,   681,     0,   136,
     137,   138,   139,   140,   141,   682,   143,   144,   145,     0,
     146,   147,   148,   149,   150,   151,     0,   683,   153,   154,
     155,   684,   685,   686,   687,     0,     0,   688,   161,   162,
     163,   164,   165,   166,   167,   689,   690,   170,     0,   171,
       0,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,     0,     0,   183,   184,   691,   186,   187,
       0,   188,   189,   190,     0,   191,   192,   193,     0,   194,
     195,   196,   197,     0,   199,   200,   201,   202,   203,     0,
       0,   205,     0,   206,   207,   692,   209,     0,   210,     0,
     211,   693,     0,   694,   214,   215,  -663,   695,   218,     0,
     219,     0,     0,     0,   222,     0,   223,   224,   225,   226,
     227,   228,   229,   697,   231,   232,   233,   234,     0,   235,
     236,   237,   238,   239,   240,     0,   241,   698,     0,   244,
     245,   246,   247,   248,   699,   700,     0,   701,     0,   252,
     702,   703,   255,   704,   257,   258,   259,   260,   261,   262,
       0,     0,   263,   705,   265,   706,     0,   267,   268,   269,
       0,     0,   270,   271,   272,   273,   274,   707,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   708,   709,   710,   297,
     298,   299,     0,     0,   301,   302,   711,   304,     0,     0,
     306,   712,   308,   309,   310,     0,   311,   312,     0,     0,
     313,   314,   315,     0,     0,   316,     0,   713,   319,   714,
       0,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,   332,   333,     0,   335,   336,     0,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,     0,   347,
     348,   349,   715,   351,   352,   353,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,   368,   369,   716,   371,   372,   373,   717,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,   718,   392,   719,   394,
     395,   396,   720,   398,   399,   721,   401,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     722,   415,     0,   417,     0,   418,   419,     0,   420,   723,
     422,   423,   424,   425,   426,     0,   724,   725,     0,     0,
     429,   430,     0,   432,     0,     0,   434,   435,   726,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
     446,   727,     0,   448,   449,   450,   451,   452,     0,   728,
       0,   455,   729,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   506,
       0,   588,     0,     0,     0,     0,     0,     0,     0,     0,
     480,   481,   482,   483,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     508,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   509,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,   589,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   511,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
     588,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    94,    95,    96,    97,    98,
      99,   100,   101,     0,   102,   103,   104,     0,     0,     0,
       0,     0,     0,     0,   105,   106,     0,   107,   108,   109,
       0,   111,   112,   113,   114,   115,     0,   117,   118,     0,
     119,   120,   121,   122,   123,   124,     0,     0,   125,   126,
     127,   128,   129,     0,   130,   131,   132,   133,   134,     0,
       0,     0,   136,   137,   138,   139,   140,   141,     0,   143,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
       0,   153,   154,   155,     0,     0,     0,     0,     0,     0,
       0,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,     0,   171,     0,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,     0,   205,     0,   206,   207,   208,   209,
       0,   210,     0,   211,     0,     0,     0,   214,   215,   508,
       0,   218,     0,   219,     0,   220,   221,   222,     0,   223,
     224,   225,   226,   227,   632,   229,     0,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
       0,   243,   244,   245,   246,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,   255,     0,   257,   258,   259,
     260,   261,   262,     0,     0,   263,     0,   265,     0,     0,
     267,   268,   269,     0,     0,   270,   271,   272,   273,   274,
     509,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
       0,   296,   297,   298,   299,   300,     0,   301,   302,     0,
     304,     0,   305,   306,   307,   308,   309,   310,     0,   311,
     312,     0,   589,   313,   314,   315,     0,     0,   316,   317,
       0,   319,     0,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,     0,   347,   348,   349,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,   368,   369,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,     0,
     392,   393,   394,   395,   396,     0,   398,   399,   400,   401,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   511,   415,   416,   417,     0,   418,   419,
       0,   420,     0,   422,   423,   424,   425,   426,     0,   427,
     428,     0,     0,   429,   430,   431,   432,   433,     0,   434,
     435,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,   446,     0,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,     0,   457,   458,   459,   460,
     461,     0,     0,   462,     0,     0,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   506,     0,   588,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
       0,     0,     0,   105,   106,     0,   107,   108,   109,     0,
     111,   112,   113,   114,   115,     0,   117,   118,     0,   119,
     120,   121,   122,   123,   124,     0,     0,   125,   126,   127,
     128,   129,     0,   130,   131,   132,   133,   134,     0,     0,
       0,   136,   137,   138,   139,   140,   141,     0,   143,   144,
     145,     0,   146,   147,   148,   149,   150,   151,     0,     0,
     153,   154,   155,     0,     0,     0,     0,     0,     0,     0,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
       0,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,     0,     0,   183,   184,   185,
     186,   187,     0,   188,   189,   190,     0,   191,   192,   193,
       0,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,     0,   205,     0,   206,   207,   208,   209,     0,
     210,     0,   211,     0,     0,     0,   214,   215,   508,     0,
    1782,     0,   219,     0,   220,   221,   222,     0,   223,   224,
     225,   226,   227,   228,   229,     0,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
     243,   244,   245,   246,   247,   248,   249,   250,     0,   251,
       0,   252,     0,     0,   255,     0,   257,   258,   259,   260,
     261,   262,     0,     0,   263,     0,   265,     0,     0,   267,
     268,  1783,     0,     0,   270,   271,   272,   273,   274,   509,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,     0,
     296,   297,   298,   299,   300,     0,   301,   302,     0,   304,
       0,   305,   306,   307,   308,   309,   310,     0,   311,   312,
       0,     0,   313,   314,   315,     0,     0,   316,   317,     0,
     319,     0,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
       0,   347,   348,   349,   350,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,   368,   369,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,     0,   392,
     393,   394,   395,   396,     0,   398,   399,   400,   401,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   511,   415,   416,   417,     0,   418,   419,  1784,
     420,     0,   422,  1785,   424,  1786,   426,     0,   427,   428,
       0,     0,   429,   430,   431,   432,   433,     0,   434,   435,
     436,   437,   438,   439,   440,   441,     0,     0,   442,   443,
    1787,   445,   446,     0,     0,   448,   449,   450,   451,   452,
     453,   454,     0,   455,     0,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   506,  2756,     0,     0,
       0,     0,  2757,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   508,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   228,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   509,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   511,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   506,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    94,    95,    96,    97,    98,    99,   100,   101,
     507,   102,   103,   104,     0,     0,     0,     0,     0,     0,
       0,   105,   106,     0,   107,   108,   109,     0,   111,   112,
     113,   114,   115,     0,   117,   118,     0,   119,   120,   121,
     122,   123,   124,     0,     0,   125,   126,   127,   128,   129,
       0,   130,   131,   132,   133,   134,     0,     0,     0,   136,
     137,   138,   139,   140,   141,     0,   143,   144,   145,     0,
     146,   147,   148,   149,   150,   151,     0,     0,   153,   154,
     155,     0,     0,     0,     0,     0,     0,     0,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,     0,   171,
       0,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,     0,     0,   183,   184,   185,   186,   187,
       0,   188,   189,   190,     0,   191,   192,   193,     0,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
       0,   205,     0,   206,   207,   208,   209,     0,   210,     0,
     211,     0,     0,     0,   214,   215,   508,     0,   218,     0,
     219,     0,   220,   221,   222,     0,   223,   224,   225,   226,
     227,   228,   229,     0,   231,   232,   233,   234,     0,   235,
     236,   237,   238,   239,   240,     0,   241,     0,   243,   244,
     245,   246,   247,   248,   249,   250,     0,   251,     0,   252,
       0,     0,   255,     0,   257,   258,   259,   260,   261,   262,
       0,     0,   263,     0,   265,     0,     0,   267,   268,   269,
       0,     0,   270,   271,   272,   273,   274,   509,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,     0,   296,   297,
     298,   299,   300,     0,   301,   302,     0,   304,     0,   305,
     306,   307,   308,   309,   310,     0,   311,   312,     0,     0,
     313,   314,   315,     0,     0,   316,   317,     0,   319,     0,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,   332,   333,   334,   335,   336,   337,   510,   339,
     340,     0,   341,   342,   343,   344,   345,   346,     0,   347,
     348,   349,   350,   351,   352,   353,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,   368,   369,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,     0,   392,   393,   394,
     395,   396,     0,   398,   399,   400,   401,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     511,   415,   416,   417,     0,   418,   419,     0,   420,     0,
     422,   423,   424,   425,   426,     0,   427,   428,     0,     0,
     429,   430,   431,   432,   433,     0,   434,   435,   436,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
     446,     0,     0,   448,   449,   450,   451,   452,   453,   454,
       0,   455,     0,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   506,     0,   556,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
     114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   127,   128,   129,     0,
     130,   131,   132,   133,   134,     0,     0,     0,   136,   137,
     138,   139,   140,   141,     0,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   153,   154,   155,
       0,     0,     0,     0,     0,     0,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   508,     0,   218,     0,   219,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
     228,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,   262,     0,
       0,   263,     0,   265,     0,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,   509,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,     0,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,     0,   392,   393,   394,   395,
     396,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   511,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,   452,   453,   454,     0,
     455,     0,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   506,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      94,    95,    96,    97,    98,    99,   100,   101,   563,   102,
     103,   104,     0,     0,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,     0,   111,   112,   113,   114,
     115,     0,   117,   118,     0,   119,   120,   121,   122,   123,
     124,     0,     0,   125,   126,   127,   128,   129,     0,   130,
     131,   132,   133,   134,     0,     0,     0,   136,   137,   138,
     139,   140,   141,     0,   143,   144,   145,     0,   146,   147,
     148,   149,   150,   151,     0,     0,   153,   154,   155,     0,
       0,     0,     0,     0,     0,     0,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,     0,   171,     0,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,     0,   205,
       0,   206,   207,   208,   209,     0,   210,     0,   211,     0,
       0,     0,   214,   215,   508,     0,   218,     0,   219,     0,
     220,   221,   222,     0,   223,   224,   225,   226,   227,   228,
     229,     0,   231,   232,   233,   234,     0,   235,   236,   237,
     238,   239,   240,     0,   241,     0,   243,   244,   245,   246,
     247,   248,   249,   250,     0,   251,     0,   252,     0,     0,
     255,     0,   257,   258,   259,   260,   261,   262,     0,     0,
     263,     0,   265,     0,     0,   267,   268,   269,     0,     0,
     270,   271,   272,   273,   274,   509,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,     0,   296,   297,   298,   299,
     300,     0,   301,   302,     0,   304,     0,   305,   306,   307,
     308,   309,   310,     0,   311,   312,     0,     0,   313,   314,
     315,     0,     0,   316,   317,     0,   319,     0,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,     0,   347,   348,   349,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
     368,   369,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,     0,   392,   393,   394,   395,   396,
       0,   398,   399,   400,   401,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   511,   415,
     416,   417,     0,   418,   419,     0,   420,     0,   422,   423,
     424,   425,   426,     0,   564,   428,     0,     0,   565,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,   446,     0,
       0,   448,   449,   450,   451,   452,   453,   454,     0,   455,
       0,   457,   458,   459,   460,   461,     0,     0,   462,     0,
       0,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   506,     0,   588,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,     0,     0,     0,   105,   106,
       0,   107,   108,   109,     0,   111,   112,   113,   114,   115,
       0,   117,   118,     0,   119,   120,   121,   122,   123,   124,
       0,     0,   125,   126,   127,   128,   129,     0,   130,   131,
     132,   133,   134,     0,     0,     0,   136,   137,   138,   139,
     140,   141,     0,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,     0,   153,   154,   155,     0,     0,
       0,     0,     0,     0,     0,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   185,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,     0,   205,     0,
     206,   207,   208,   209,     0,   210,     0,   211,     0,     0,
       0,   214,   215,   508,     0,   218,     0,   219,     0,   220,
     221,   222,     0,   223,   224,   225,   226,   227,   627,   229,
       0,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,     0,   243,   244,   245,   246,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,   255,
       0,   257,   258,   259,   260,   261,   262,     0,     0,   263,
       0,   265,     0,     0,   267,   268,   269,     0,     0,   270,
     271,   272,   273,   274,   509,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,     0,   296,   297,   298,   299,   300,
       0,   301,   302,     0,   304,     0,   305,   306,   307,   308,
     309,   310,     0,   311,   312,     0,     0,   313,   314,   315,
       0,     0,   316,   317,     0,   319,     0,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   350,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,     0,   392,   393,   394,   395,   396,     0,
     398,   399,   400,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   511,   415,   416,
     417,     0,   418,   419,     0,   420,     0,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,   429,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,     0,     0,
     448,   449,   450,   451,   452,   453,   454,     0,   455,     0,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   506,     0,   588,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
     107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
     117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
       0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
     133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
     141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
     150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
       0,     0,     0,     0,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,     0,   171,     0,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,     0,
       0,   183,   184,   185,   186,   187,     0,   188,   189,   190,
       0,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,     0,   205,     0,   206,
     207,   208,   209,     0,   210,     0,   211,     0,     0,     0,
     214,   215,   508,     0,   218,     0,   219,     0,   220,   221,
     222,     0,   223,   224,   225,   226,   227,   630,   229,     0,
     231,   232,   233,   234,     0,   235,   236,   237,   238,   239,
     240,     0,   241,     0,   243,   244,   245,   246,   247,   248,
     249,   250,     0,   251,     0,   252,     0,     0,   255,     0,
     257,   258,   259,   260,   261,   262,     0,     0,   263,     0,
     265,     0,     0,   267,   268,   269,     0,     0,   270,   271,
     272,   273,   274,   509,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,     0,   296,   297,   298,   299,   300,     0,
     301,   302,     0,   304,     0,   305,   306,   307,   308,   309,
     310,     0,   311,   312,     0,     0,   313,   314,   315,     0,
       0,   316,   317,     0,   319,     0,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,     0,   347,   348,   349,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,   368,   369,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,     0,   392,   393,   394,   395,   396,     0,   398,
     399,   400,   401,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   511,   415,   416,   417,
       0,   418,   419,     0,   420,     0,   422,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   431,   432,
     433,     0,   434,   435,   436,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,   446,     0,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,     0,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     506,     0,   588,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   508,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,   634,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   509,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   511,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   506,
       0,   588,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     508,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   509,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   511,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    94,    95,    96,    97,    98,
      99,   100,   101,   664,   102,   103,   104,     0,     0,     0,
       0,     0,     0,     0,   105,   106,     0,   107,   108,   109,
       0,   111,   112,   113,   114,   115,     0,   117,   118,     0,
     119,   120,   121,   122,   123,   124,     0,     0,   125,   126,
     127,   128,   129,     0,   130,   131,   132,   133,   134,     0,
       0,     0,   136,   137,   138,   139,   140,   141,     0,   143,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
       0,   153,   154,   155,     0,     0,     0,     0,     0,     0,
       0,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,     0,   171,     0,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,     0,   205,     0,   206,   207,   208,   209,
       0,   210,     0,   211,     0,     0,     0,   214,   215,   508,
       0,   218,     0,   219,     0,   220,   221,   222,     0,   223,
     224,   225,   226,   227,   228,   229,     0,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
       0,   243,   244,   245,   246,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,   255,     0,   257,   258,   259,
     260,   261,   262,     0,     0,   263,     0,   265,     0,     0,
     267,   268,   269,     0,     0,   270,   271,   272,   273,   274,
     509,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
       0,   296,   297,   298,   299,   300,     0,   301,   302,     0,
     304,     0,   305,   306,   307,   308,   309,   310,     0,   311,
     312,     0,     0,   313,   314,   315,     0,     0,   316,   317,
       0,   319,     0,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,     0,   347,   348,   349,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,   368,   369,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,     0,
     392,   393,   394,   395,   396,     0,   398,   399,   400,   401,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   511,   415,   416,   417,     0,   418,   419,
       0,   420,     0,   422,   423,   424,   425,   426,     0,   427,
     428,     0,     0,   429,   430,   431,   432,   433,     0,   434,
     435,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,   446,     0,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,     0,   457,   458,   459,   460,
     461,     0,     0,   462,     0,     0,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   673,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
       0,     0,     0,   105,   106,     0,   107,   108,   109,   674,
     111,   112,   113,     0,   675,   676,   677,   678,     0,   119,
     120,   121,   122,   123,   124,     0,     0,   125,   126,   679,
     680,   129,     0,   130,   131,   132,   133,     0,     0,   681,
       0,   136,   137,   138,   139,   140,   141,   682,   143,   144,
     145,     0,   146,   147,   148,   149,   150,   151,     0,   683,
     153,   154,   155,   684,   685,   686,   687,     0,     0,   688,
     161,   162,   163,   164,   165,   166,   167,   689,   690,   170,
       0,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,     0,     0,   183,   184,   691,
     186,   187,     0,   188,   189,   190,     0,   191,   192,   193,
       0,   194,   195,   196,   197,     0,   199,   200,   201,   202,
     203,     0,     0,   205,     0,   206,   207,   692,   209,     0,
     210,     0,   211,   693,     0,   694,   214,   215,     0,   695,
     218,     0,   219,     0,     0,     0,   222,     0,   223,   224,
     225,   226,   227,   696,   229,   697,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,   698,
       0,   244,   245,   246,   247,   248,   699,   700,     0,   701,
       0,   252,   702,   703,   255,   704,   257,   258,   259,   260,
     261,   262,     0,     0,   263,   705,   265,   706,     0,   267,
     268,   269,     0,     0,   270,   271,   272,   273,   274,   707,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   708,   709,
     710,   297,   298,   299,     0,     0,   301,   302,   711,   304,
       0,     0,   306,   712,   308,   309,   310,     0,   311,   312,
       0,     0,   313,   314,   315,     0,     0,   316,     0,   713,
     319,   714,     0,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,     0,   335,   336,     0,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
       0,   347,   348,   349,   715,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,   368,   369,   716,   371,   372,   373,
     717,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,   718,   392,
     719,   394,   395,   396,   720,   398,   399,   721,   401,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   722,   415,     0,   417,     0,   418,   419,     0,
     420,   723,   422,   423,   424,   425,   426,     0,   724,   725,
       0,     0,   429,   430,     0,   432,     0,     0,   434,   435,
     726,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,   446,   727,     0,   448,   449,   450,   451,   452,
       0,   728,     0,   455,   729,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   506,     0,   588,     0,     0,     0,     0,     0,     0,
       0,     0,   480,   481,   482,   483,     0,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
     107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
     117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
       0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
     133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
     141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
     150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
       0,     0,     0,     0,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,     0,   171,     0,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,     0,
       0,   183,   184,   185,   186,   187,     0,   188,   189,   190,
       0,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,     0,   205,     0,   206,
     207,   208,   209,     0,   210,     0,   211,     0,     0,     0,
     214,   215,   508,     0,   218,     0,   219,     0,   220,   221,
     222,     0,   223,   224,   225,   226,   227,  1200,   229,     0,
     231,   232,   233,   234,     0,   235,   236,   237,   238,   239,
     240,     0,   241,     0,   243,   244,   245,   246,   247,   248,
     249,   250,     0,   251,     0,   252,     0,     0,   255,     0,
     257,   258,   259,   260,   261,   262,     0,     0,   263,     0,
     265,     0,     0,   267,   268,   269,     0,     0,   270,   271,
     272,   273,   274,   509,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,     0,   296,   297,   298,   299,   300,     0,
     301,   302,     0,   304,     0,   305,   306,   307,   308,   309,
     310,     0,   311,   312,     0,     0,   313,   314,   315,     0,
       0,   316,   317,     0,   319,     0,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,     0,   347,   348,   349,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,   368,   369,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,     0,   392,   393,   394,   395,   396,     0,   398,
     399,   400,   401,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   511,   415,   416,   417,
       0,   418,   419,     0,   420,     0,   422,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   431,   432,
     433,     0,   434,   435,   436,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,   446,     0,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,     0,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     506,     0,   588,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   508,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,  1202,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   509,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   511,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   673,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,   674,   111,   112,   113,     0,   675,   676,   677,   678,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   679,   680,   129,     0,   130,   131,   132,   133,     0,
       0,   681,     0,   136,   137,   138,   139,   140,   141,   682,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   683,   153,   154,   155,   684,   685,   686,   687,     0,
       0,   688,   161,   162,   163,   164,   165,   166,   167,   689,
     690,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   691,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,     0,   199,   200,
     201,   202,   203,     0,     0,   205,     0,   206,   207,   692,
     209,     0,   210,     0,   211,   693,     0,   694,   214,   215,
       0,   695,   218,     0,   219,     0,     0,     0,   222,     0,
     223,   224,   225,   226,   227,   228,   229,   697,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,   698,     0,   244,   245,   246,   247,   248,   699,   700,
       0,   701,     0,   252,   702,   703,   255,   704,   257,   258,
     259,   260,   261,   262,     0,     0,   263,   705,   265,   706,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   707,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     708,   709,   710,   297,   298,   299,     0,     0,   301,   302,
     711,   304,     0,     0,   306,   712,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,   713,   319,   714,     0,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,     0,   335,
     336,     0,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   715,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,   716,   371,
     372,   373,   717,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
     718,   392,   719,   394,   395,   396,   720,   398,   399,   721,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   722,   415,     0,   417,     0,   418,
     419,     0,   420,   723,   422,   423,   424,   425,   426,     0,
     724,   725,     0,     0,   429,   430,     0,   432,     0,     0,
     434,   435,   726,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,   727,     0,   448,   449,   450,
     451,   452,     0,   728,     0,   455,   729,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   506,     0,   588,     0,     0,     0,     0,
       0,     0,     0,     0,   480,   481,   482,   483,     0,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     0,     0,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,     0,   111,   112,   113,   114,
     115,     0,   117,   118,     0,   119,   120,   121,   122,   123,
     124,     0,     0,   125,   126,   127,   128,   129,     0,   130,
     131,   132,   133,   134,     0,     0,     0,   136,   137,   138,
     139,   140,   141,     0,   143,   144,   145,     0,   146,   147,
     148,   149,   150,   151,     0,     0,   153,   154,   155,     0,
       0,     0,     0,     0,     0,     0,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,     0,   171,     0,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,     0,   205,
       0,   206,   207,   208,   209,     0,   210,     0,   211,     0,
       0,     0,   214,   215,   508,     0,   218,     0,   219,     0,
     220,   221,   222,     0,   223,   224,   225,   226,   227,  1613,
     229,     0,   231,   232,   233,   234,     0,   235,   236,   237,
     238,   239,   240,     0,   241,     0,   243,   244,   245,   246,
     247,   248,   249,   250,     0,   251,     0,   252,     0,     0,
     255,     0,   257,   258,   259,   260,   261,   262,     0,     0,
     263,     0,   265,     0,     0,   267,   268,   269,     0,     0,
     270,   271,   272,   273,   274,   509,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,     0,   296,   297,   298,   299,
     300,     0,   301,   302,     0,   304,     0,   305,   306,   307,
     308,   309,   310,     0,   311,   312,     0,     0,   313,   314,
     315,     0,     0,   316,   317,     0,   319,     0,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,     0,   347,   348,   349,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
     368,   369,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,     0,   392,   393,   394,   395,   396,
       0,   398,   399,   400,   401,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   511,   415,
     416,   417,     0,   418,   419,     0,   420,     0,   422,   423,
     424,   425,   426,     0,   427,   428,     0,     0,   429,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,   446,     0,
       0,   448,   449,   450,   451,   452,   453,   454,     0,   455,
       0,   457,   458,   459,   460,   461,     0,     0,   462,     0,
       0,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   506,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,     0,  2381,     0,   105,   106,
       0,   107,   108,   109,     0,   111,   112,   113,   114,   115,
       0,   117,   118,     0,   119,   120,   121,   122,   123,   124,
       0,     0,   125,   126,   127,   128,   129,     0,   130,   131,
     132,   133,   134,     0,     0,     0,   136,   137,   138,   139,
     140,   141,     0,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,     0,   153,   154,   155,     0,     0,
       0,     0,     0,     0,     0,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   185,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,     0,   205,     0,
     206,   207,   208,   209,     0,   210,     0,   211,     0,     0,
       0,   214,   215,   508,     0,   218,     0,   219,     0,   220,
     221,   222,     0,   223,   224,   225,   226,   227,   228,   229,
       0,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,     0,   243,   244,   245,   246,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,   255,
       0,   257,   258,   259,   260,   261,   262,     0,     0,   263,
       0,   265,     0,     0,   267,   268,   269,     0,     0,   270,
     271,   272,   273,   274,   509,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,     0,   296,   297,   298,   299,   300,
       0,   301,   302,     0,   304,     0,   305,   306,   307,   308,
     309,   310,     0,   311,   312,     0,     0,   313,   314,   315,
       0,     0,   316,   317,     0,   319,     0,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   350,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,     0,   392,   393,   394,   395,   396,     0,
     398,   399,   400,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   511,   415,   416,
     417,     0,   418,   419,     0,   420,     0,   422,   423,   424,
     425,   426,     0,   427,   428,     0,     0,   429,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,     0,     0,
     448,   449,   450,   451,   452,   453,   454,     0,   455,     0,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   506,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,     0,  2395,     0,   105,   106,     0,
     107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
     117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
       0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
     133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
     141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
     150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
       0,     0,     0,     0,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,     0,   171,     0,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,     0,
       0,   183,   184,   185,   186,   187,     0,   188,   189,   190,
       0,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,     0,   205,     0,   206,
     207,   208,   209,     0,   210,     0,   211,     0,     0,     0,
     214,   215,   508,     0,   218,     0,   219,     0,   220,   221,
     222,     0,   223,   224,   225,   226,   227,   228,   229,     0,
     231,   232,   233,   234,     0,   235,   236,   237,   238,   239,
     240,     0,   241,     0,   243,   244,   245,   246,   247,   248,
     249,   250,     0,   251,     0,   252,     0,     0,   255,     0,
     257,   258,   259,   260,   261,   262,     0,     0,   263,     0,
     265,     0,     0,   267,   268,   269,     0,     0,   270,   271,
     272,   273,   274,   509,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,     0,   296,   297,   298,   299,   300,     0,
     301,   302,     0,   304,     0,   305,   306,   307,   308,   309,
     310,     0,   311,   312,     0,     0,   313,   314,   315,     0,
       0,   316,   317,     0,   319,     0,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,     0,   347,   348,   349,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,   368,   369,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,     0,   392,   393,   394,   395,   396,     0,   398,
     399,   400,   401,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   511,   415,   416,   417,
       0,   418,   419,     0,   420,     0,   422,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   431,   432,
     433,     0,   434,   435,   436,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,   446,     0,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,     0,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     506,     0,   588,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   508,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,  2557,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   509,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   511,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   506,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     508,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,   228,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   509,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   511,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    94,    95,    96,    97,    98,
      99,   100,   101,     0,   102,   103,   104,     0,     0,     0,
       0,     0,     0,     0,   105,   106,     0,   107,   108,   109,
       0,   111,   112,   113,   114,   115,     0,   117,   118,     0,
     119,   120,   121,   122,   123,   124,     0,     0,   125,   126,
     127,   128,   129,     0,   130,   131,   132,   133,   134,     0,
       0,     0,   136,   137,   138,   139,   140,   141,     0,   143,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
       0,   153,   154,   155,     0,     0,     0,     0,     0,     0,
       0,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,     0,   171,     0,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,     0,   205,     0,   206,   207,   208,   209,
       0,   210,     0,   211,     0,     0,     0,   214,   215,   508,
       0,   575,     0,   219,     0,   220,   221,   222,     0,   223,
     224,   225,   226,   227,   228,   229,     0,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
       0,   243,   244,   245,   246,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,   255,     0,   257,   258,   259,
     260,   261,   262,     0,     0,   263,     0,   265,     0,     0,
     267,   268,   576,     0,     0,   270,   271,   272,   273,   274,
     509,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
       0,   296,   297,   298,   299,   300,     0,   301,   302,     0,
     304,     0,   305,   306,   307,   308,   309,   310,     0,   311,
     312,     0,     0,   313,   314,   315,     0,     0,   316,   317,
       0,   319,     0,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,     0,   347,   348,   349,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,   368,   369,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   577,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   578,     0,
     392,   393,   394,   395,   396,     0,   398,   399,   400,   401,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   511,   415,   416,   417,     0,   418,   419,
       0,   420,     0,   422,   423,   424,   425,   426,     0,   579,
     428,     0,     0,   429,   430,   431,   432,   433,     0,   434,
     435,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,   446,     0,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,     0,   457,   458,   459,   460,
     461,     0,     0,   462,     0,     0,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   506,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
       0,     0,     0,   105,   106,     0,   107,   108,   109,     0,
     111,   112,   113,   114,   115,     0,   117,   118,     0,   119,
     120,   121,   122,   123,   124,     0,     0,   125,   126,   127,
     128,   129,     0,   130,   131,   132,   133,   134,     0,     0,
       0,   136,   137,   138,   139,   140,   141,     0,   143,   144,
     145,     0,   146,   147,   148,   149,   150,   151,     0,     0,
     153,   154,   155,     0,     0,     0,     0,     0,     0,     0,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
       0,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,     0,     0,   183,   184,   185,
     186,   187,     0,   188,   189,   190,     0,   191,   192,   193,
       0,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,     0,   205,     0,   206,   207,   208,   209,     0,
     210,     0,   211,     0,     0,     0,   214,   215,   508,     0,
     218,     0,   219,     0,   220,   221,   222,     0,   223,   224,
     225,   226,   227,   228,   229,     0,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
     243,   244,   245,   246,   247,   248,   249,   250,     0,   251,
       0,   252,     0,     0,   255,     0,   257,   258,   259,   260,
     261,   262,     0,     0,   263,     0,   265,     0,     0,   267,
     268,   269,     0,     0,   270,   271,   272,   273,   274,   509,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,     0,
     296,   297,   298,   299,   300,     0,   301,   302,     0,   304,
       0,   305,   306,   307,   308,   309,   310,     0,   311,   312,
       0,     0,   313,   314,   315,     0,     0,   316,   317,     0,
     319,     0,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
       0,   347,   348,   349,   350,   351,   352,   598,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,   368,   369,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,     0,   392,
     393,   394,   395,   396,     0,   398,   399,   400,   401,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   511,   415,   416,   417,     0,   418,   419,     0,
     420,     0,   422,   423,   424,   425,   426,     0,   427,   428,
       0,     0,   429,   430,   431,   432,   433,     0,   434,   435,
     436,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,   446,     0,     0,   448,   449,   450,   451,   452,
     453,   454,     0,   455,     0,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   506,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
     129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
     136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   185,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,     0,   205,     0,   206,   207,   208,   209,     0,   210,
       0,   211,     0,     0,     0,   214,   215,   508,     0,   218,
       0,   219,     0,   220,   221,   222,     0,   223,   224,   225,
     226,   227,   652,   229,     0,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,     0,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     252,     0,     0,   255,     0,   257,   258,   259,   260,   261,
     262,     0,     0,   263,     0,   265,     0,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,   509,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,     0,   296,
     297,   298,   299,   300,     0,   301,   302,     0,   304,     0,
     305,   306,   307,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,   317,     0,   319,
       0,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,   334,   335,   336,   337,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,     0,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
     394,   395,   396,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   511,   415,   416,   417,     0,   418,   419,     0,   420,
       0,   422,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,     0,     0,   448,   449,   450,   451,   452,   453,
     454,     0,   455,     0,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   506,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    94,    95,    96,    97,    98,    99,   100,   101,
       0,   102,   103,   104,     0,     0,     0,     0,     0,     0,
       0,   105,   106,     0,   107,   108,   109,     0,   111,   112,
     113,   114,   115,     0,   117,   118,     0,   119,   120,   121,
     122,   123,   124,     0,     0,   125,   126,   127,   128,   129,
       0,   130,   131,   132,   133,   134,     0,     0,     0,   136,
     137,   138,   139,   140,   141,     0,   143,   144,   145,     0,
     146,   147,   148,   149,   150,   151,     0,     0,   153,   154,
     155,     0,     0,     0,     0,     0,     0,     0,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,     0,   171,
       0,   172,   173,   174,   175,   176,   177,     0,   178,   179,
     180,   181,   182,     0,     0,   183,   184,   185,   186,   187,
       0,   188,   189,   190,     0,   191,   192,   193,     0,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
       0,   205,     0,   206,   207,   208,   209,     0,   210,     0,
     211,     0,     0,     0,   214,   215,   508,     0,   218,     0,
     219,     0,   220,   221,   222,     0,   223,   224,   225,   226,
     227,   748,   229,     0,   231,   232,   233,   234,     0,   235,
     236,   237,   238,   239,   240,     0,   241,     0,   243,   244,
     245,   246,   247,   248,   249,   250,     0,   251,     0,   252,
       0,     0,   255,     0,   257,   258,   259,   260,   261,   262,
       0,     0,   263,     0,   265,     0,     0,   267,   268,   269,
       0,     0,   270,   271,   272,   273,   274,   509,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,     0,   296,   297,
     298,   299,   300,     0,   301,   302,     0,   304,     0,   305,
     306,   307,   308,   309,   310,     0,   311,   312,     0,     0,
     313,   314,   315,     0,     0,   316,   317,     0,   319,     0,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,     0,   341,   342,   343,   344,   345,   346,     0,   347,
     348,   349,   350,   351,   352,   353,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,   368,   369,     0,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
       0,   386,   387,   388,   389,   390,     0,   392,   393,   394,
     395,   396,     0,   398,   399,   400,   401,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     511,   415,   416,   417,     0,   418,   419,     0,   420,     0,
     422,   423,   424,   425,   426,     0,   427,   428,     0,     0,
     429,   430,   431,   432,   433,     0,   434,   435,   436,   437,
     438,   439,   440,   441,     0,     0,   442,   443,   444,   445,
     446,     0,     0,   448,   449,   450,   451,   452,   453,   454,
       0,   455,     0,   457,   458,   459,   460,   461,     0,     0,
     462,     0,     0,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   506,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
     114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   127,   128,   129,     0,
     130,   131,   132,   133,   134,     0,     0,     0,   136,   137,
     138,   139,   140,   141,     0,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   153,   154,   155,
       0,     0,     0,     0,     0,     0,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   508,     0,   218,     0,   219,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
     751,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,   262,     0,
       0,   263,     0,   265,     0,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,   509,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,     0,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,     0,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,     0,   392,   393,   394,   395,
     396,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   511,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,   452,   453,   454,     0,
     455,     0,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   506,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     0,     0,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,     0,   111,   112,   113,   114,
     115,     0,   117,   118,     0,   119,   120,   121,   122,   123,
     124,     0,     0,   125,   126,   127,   128,   129,     0,   130,
     131,   132,   133,   134,     0,     0,     0,   136,   137,   138,
     139,   140,   141,     0,   143,   144,   145,     0,   146,   147,
     148,   149,   150,   151,     0,     0,   153,   154,   155,     0,
       0,     0,     0,     0,     0,     0,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,     0,   171,     0,   172,
     173,   174,   175,   176,   177,     0,   178,   179,   180,   181,
     182,     0,     0,   183,   184,   185,   186,   187,     0,   188,
     189,   190,     0,   191,   192,   193,     0,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,     0,   205,
       0,   206,   207,   208,   209,     0,   210,     0,   211,     0,
       0,     0,   214,   215,   508,     0,   218,     0,   219,     0,
     220,   221,   222,     0,   223,   224,   225,   226,   227,   754,
     229,     0,   231,   232,   233,   234,     0,   235,   236,   237,
     238,   239,   240,     0,   241,     0,   243,   244,   245,   246,
     247,   248,   249,   250,     0,   251,     0,   252,     0,     0,
     255,     0,   257,   258,   259,   260,   261,   262,     0,     0,
     263,     0,   265,     0,     0,   267,   268,   269,     0,     0,
     270,   271,   272,   273,   274,   509,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,     0,   296,   297,   298,   299,
     300,     0,   301,   302,     0,   304,     0,   305,   306,   307,
     308,   309,   310,     0,   311,   312,     0,     0,   313,   314,
     315,     0,     0,   316,   317,     0,   319,     0,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   333,   334,   335,   336,   337,   338,   339,   340,     0,
     341,   342,   343,   344,   345,   346,     0,   347,   348,   349,
     350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
     368,   369,     0,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,     0,   386,
     387,   388,   389,   390,     0,   392,   393,   394,   395,   396,
       0,   398,   399,   400,   401,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   511,   415,
     416,   417,     0,   418,   419,     0,   420,     0,   422,   423,
     424,   425,   426,     0,   427,   428,     0,     0,   429,   430,
     431,   432,   433,     0,   434,   435,   436,   437,   438,   439,
     440,   441,     0,     0,   442,   443,   444,   445,   446,     0,
       0,   448,   449,   450,   451,   452,   453,   454,     0,   455,
       0,   457,   458,   459,   460,   461,     0,     0,   462,     0,
       0,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   506,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,     0,     0,     0,   105,   106,
       0,   107,   108,   109,     0,   111,   112,   113,   114,   115,
       0,   117,   118,     0,   119,   120,   121,   122,   123,   124,
       0,     0,   125,   126,   127,   128,   129,     0,   130,   131,
     132,   133,   134,     0,     0,     0,   136,   137,   138,   139,
     140,   141,     0,   143,   144,   145,     0,   146,   147,   148,
     149,   150,   151,     0,     0,   153,   154,   155,     0,     0,
       0,     0,     0,     0,     0,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,     0,   171,     0,   172,   173,
     174,   175,   176,   177,     0,   178,   179,   180,   181,   182,
       0,     0,   183,   184,   185,   186,   187,     0,   188,   189,
     190,     0,   191,   192,   193,     0,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,     0,   205,     0,
     206,   207,   208,   209,     0,   210,     0,   211,     0,     0,
       0,   214,   215,   508,     0,   218,     0,   219,     0,   220,
     221,   222,     0,   223,   224,   225,   226,   227,   228,   229,
       0,   231,   232,   233,   234,     0,   235,   236,   237,   238,
     239,   240,     0,   241,     0,   243,   244,   245,   246,   247,
     248,   249,   250,     0,   251,     0,   252,     0,     0,   255,
       0,   257,   258,   259,   260,   261,   262,     0,     0,   263,
       0,   265,     0,     0,   267,   268,   269,     0,     0,   270,
     271,   272,   273,   274,   509,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,     0,   296,   297,   298,   299,   300,
       0,   301,   302,     0,   304,     0,   305,   306,   307,   308,
     309,   310,     0,   311,   312,     0,     0,   313,   314,   315,
       0,     0,   316,   317,     0,   319,     0,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,     0,   341,
     342,   343,   344,   345,   346,     0,   347,   348,   349,   350,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,   368,
     369,     0,   371,   372,   373,   374,   375,   376,   377,   378,
     577,   380,   381,   382,   383,   384,   385,     0,   386,   387,
     388,   389,   390,     0,   392,   393,   394,   395,   396,     0,
     398,   399,   400,   401,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   511,   415,   416,
     417,     0,   418,   419,     0,   420,     0,   422,   423,   424,
     425,   426,     0,   579,   428,     0,     0,   429,   430,   431,
     432,   433,     0,   434,   435,   436,   437,   438,   439,   440,
     441,     0,     0,   442,   443,   444,   445,   446,     0,     0,
     448,   449,   450,   451,   452,   453,   454,     0,   455,     0,
     457,   458,   459,   460,   461,     0,     0,   462,     0,     0,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   506,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,     0,  1437,     0,   105,   106,     0,
     107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
     117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
       0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
     133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
     141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
     150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
       0,     0,     0,     0,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,     0,   171,     0,   172,   173,   174,
     175,   176,   177,     0,   178,   179,   180,   181,   182,     0,
       0,   183,   184,   185,   186,   187,     0,   188,   189,   190,
       0,   191,   192,   193,     0,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,     0,   205,     0,   206,
     207,   208,   209,     0,   210,     0,   211,     0,     0,     0,
     214,   215,   508,     0,   218,     0,   219,     0,   220,   221,
     222,     0,   223,   224,   225,   226,   227,   228,   229,     0,
     231,   232,   233,   234,     0,   235,   236,   237,   238,   239,
     240,     0,   241,     0,   243,   244,   245,   246,   247,   248,
     249,   250,     0,   251,     0,   252,     0,     0,   255,     0,
     257,   258,   259,   260,   261,   262,     0,     0,   263,     0,
     265,     0,     0,   267,   268,   269,     0,     0,   270,   271,
     272,   273,   274,   509,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,     0,   296,   297,   298,   299,   300,     0,
     301,   302,     0,   304,     0,   305,   306,   307,   308,   309,
     310,     0,   311,   312,     0,     0,   313,   314,   315,     0,
       0,   316,   317,     0,   319,     0,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,     0,   341,   342,
     343,   344,   345,   346,     0,   347,   348,   349,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,   368,   369,
       0,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,     0,   386,   387,   388,
     389,   390,     0,     0,   393,   394,   395,   396,     0,   398,
     399,   400,   401,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   511,   415,   416,   417,
       0,   418,   419,     0,   420,     0,   422,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   431,   432,
     433,     0,   434,   435,   436,   437,   438,   439,   440,   441,
       0,     0,   442,   443,   444,   445,   446,     0,     0,   448,
     449,   450,   451,   452,   453,   454,     0,   455,     0,   457,
     458,   459,   460,   461,     0,     0,   462,     0,     0,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     506,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
     134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
       0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
       0,     0,     0,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   185,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,     0,   205,     0,   206,   207,
     208,   209,     0,   210,     0,   211,     0,     0,     0,   214,
     215,   508,     0,   218,     0,   219,     0,   220,   221,   222,
       0,   223,   224,   225,   226,   227,  1577,   229,     0,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,     0,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   252,     0,     0,   255,     0,   257,
     258,   259,   260,   261,   262,     0,     0,   263,     0,   265,
       0,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,   509,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,     0,   296,   297,   298,   299,   300,     0,   301,
     302,     0,   304,     0,   305,   306,   307,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,   317,     0,   319,     0,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,   334,
     335,   336,   337,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,     0,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,     0,   392,   393,   394,   395,   396,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   511,   415,   416,   417,     0,
     418,   419,     0,   420,     0,   422,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,     0,     0,   448,   449,
     450,   451,   452,   453,   454,     0,   455,     0,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   506,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
     126,   127,   128,   129,     0,   130,   131,   132,   133,   134,
       0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
     143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
       0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
       0,     0,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,     0,   171,     0,   172,   173,   174,   175,   176,
     177,     0,   178,   179,   180,   181,   182,     0,     0,   183,
     184,   185,   186,   187,     0,   188,   189,   190,     0,   191,
     192,   193,     0,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,     0,   205,     0,   206,   207,   208,
     209,     0,   210,     0,   211,     0,     0,     0,   214,   215,
     508,     0,   218,     0,   219,     0,   220,   221,   222,     0,
     223,   224,   225,   226,   227,  1859,   229,     0,   231,   232,
     233,   234,     0,   235,   236,   237,   238,   239,   240,     0,
     241,     0,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   252,     0,     0,   255,     0,   257,   258,
     259,   260,   261,   262,     0,     0,   263,     0,   265,     0,
       0,   267,   268,   269,     0,     0,   270,   271,   272,   273,
     274,   509,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,     0,   296,   297,   298,   299,   300,     0,   301,   302,
       0,   304,     0,   305,   306,   307,   308,   309,   310,     0,
     311,   312,     0,     0,   313,   314,   315,     0,     0,   316,
     317,     0,   319,     0,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,     0,   341,   342,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,   368,   369,     0,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
       0,   392,   393,   394,   395,   396,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   511,   415,   416,   417,     0,   418,
     419,     0,   420,     0,   422,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,   441,     0,     0,
     442,   443,   444,   445,   446,     0,     0,   448,   449,   450,
     451,   452,   453,   454,     0,   455,     0,   457,   458,   459,
     460,   461,     0,     0,   462,     0,     0,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   506,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    94,    95,    96,    97,    98,
      99,   100,   101,     0,   102,   103,   104,     0,     0,     0,
       0,     0,     0,     0,   105,   106,     0,   107,   108,   109,
       0,   111,   112,   113,   114,   115,     0,   117,   118,     0,
     119,   120,   121,   122,   123,   124,     0,     0,   125,   126,
     127,   128,   129,     0,   130,   131,   132,   133,   134,     0,
       0,     0,   136,   137,   138,   139,   140,   141,     0,   143,
     144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
       0,   153,   154,   155,     0,     0,     0,     0,     0,     0,
       0,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,     0,   171,     0,   172,   173,   174,   175,   176,   177,
       0,   178,   179,   180,   181,   182,     0,     0,   183,   184,
     185,   186,   187,     0,   188,   189,   190,     0,   191,   192,
     193,     0,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,     0,   205,     0,   206,   207,   208,   209,
       0,   210,     0,   211,     0,     0,     0,   214,   215,   508,
       0,   218,     0,   219,     0,   220,   221,   222,     0,   223,
     224,   225,   226,   227,  1872,   229,     0,   231,   232,   233,
     234,     0,   235,   236,   237,   238,   239,   240,     0,   241,
       0,   243,   244,   245,   246,   247,   248,   249,   250,     0,
     251,     0,   252,     0,     0,   255,     0,   257,   258,   259,
     260,   261,   262,     0,     0,   263,     0,   265,     0,     0,
     267,   268,   269,     0,     0,   270,   271,   272,   273,   274,
     509,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
       0,   296,   297,   298,   299,   300,     0,   301,   302,     0,
     304,     0,   305,   306,   307,   308,   309,   310,     0,   311,
     312,     0,     0,   313,   314,   315,     0,     0,   316,   317,
       0,   319,     0,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,     0,   341,   342,   343,   344,   345,
     346,     0,   347,   348,   349,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,   368,   369,     0,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,     0,   386,   387,   388,   389,   390,     0,
     392,   393,   394,   395,   396,     0,   398,   399,   400,   401,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   511,   415,   416,   417,     0,   418,   419,
       0,   420,     0,   422,   423,   424,   425,   426,     0,   427,
     428,     0,     0,   429,   430,   431,   432,   433,     0,   434,
     435,   436,   437,   438,   439,   440,   441,     0,     0,   442,
     443,   444,   445,   446,     0,     0,   448,   449,   450,   451,
     452,   453,   454,     0,   455,     0,   457,   458,   459,   460,
     461,     0,     0,   462,     0,     0,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   506,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
       0,     0,     0,   105,   106,     0,   107,   108,   109,     0,
     111,   112,   113,   114,   115,     0,   117,   118,     0,   119,
     120,   121,   122,   123,   124,     0,     0,   125,   126,   127,
     128,   129,     0,   130,   131,   132,   133,   134,     0,     0,
       0,   136,   137,   138,   139,   140,   141,     0,   143,   144,
     145,     0,   146,   147,   148,   149,   150,   151,     0,     0,
     153,   154,   155,     0,     0,     0,     0,     0,     0,     0,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
       0,   171,     0,   172,   173,   174,   175,   176,   177,     0,
     178,   179,   180,   181,   182,     0,     0,   183,   184,   185,
     186,   187,     0,   188,   189,   190,     0,   191,   192,   193,
       0,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,     0,   205,     0,   206,   207,   208,   209,     0,
     210,     0,   211,     0,     0,     0,   214,   215,   508,     0,
     218,     0,   219,     0,   220,   221,   222,     0,   223,   224,
     225,   226,   227,  1874,   229,     0,   231,   232,   233,   234,
       0,   235,   236,   237,   238,   239,   240,     0,   241,     0,
     243,   244,   245,   246,   247,   248,   249,   250,     0,   251,
       0,   252,     0,     0,   255,     0,   257,   258,   259,   260,
     261,   262,     0,     0,   263,     0,   265,     0,     0,   267,
     268,   269,     0,     0,   270,   271,   272,   273,   274,   509,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,     0,
     296,   297,   298,   299,   300,     0,   301,   302,     0,   304,
       0,   305,   306,   307,   308,   309,   310,     0,   311,   312,
       0,     0,   313,   314,   315,     0,     0,   316,   317,     0,
     319,     0,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,   332,   333,   334,   335,   336,   337,
     338,   339,   340,     0,   341,   342,   343,   344,   345,   346,
       0,   347,   348,   349,   350,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,   368,   369,     0,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,     0,   386,   387,   388,   389,   390,     0,   392,
     393,   394,   395,   396,     0,   398,   399,   400,   401,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   511,   415,   416,   417,     0,   418,   419,     0,
     420,     0,   422,   423,   424,   425,   426,     0,   427,   428,
       0,     0,   429,   430,   431,   432,   433,     0,   434,   435,
     436,   437,   438,   439,   440,   441,     0,     0,   442,   443,
     444,   445,   446,     0,     0,   448,   449,   450,   451,   452,
     453,   454,     0,   455,     0,   457,   458,   459,   460,   461,
       0,     0,   462,     0,     0,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,  2486,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,  2487,   111,
     112,   113,     0,   675,  2488,   677,   678,     0,   119,   120,
     121,   122,   123,   124,     0,     0,   125,   126,   679,   680,
     129,     0,   130,   131,   132,   133,     0,     0,  2489,     0,
     136,   137,   138,   139,   140,   141,  2490,   143,   144,   145,
       0,   146,   147,   148,   149,   150,   151,     0,  2491,   153,
     154,   155,  2492,  2493,  2494,  2495,     0,     0,  2496,   161,
     162,   163,   164,   165,   166,   167,   689,   690,   170,     0,
     171,     0,   172,   173,   174,   175,   176,   177,     0,   178,
     179,   180,   181,   182,     0,     0,   183,   184,   691,   186,
     187,     0,   188,   189,   190,     0,   191,   192,   193,     0,
     194,   195,   196,   197,     0,   199,   200,   201,   202,   203,
       0,     0,   205,     0,   206,   207,   692,   209,     0,   210,
       0,   211,  2497,     0,  2498,   214,   215,  2499,  2500,   218,
       0,   219,     0,     0,     0,   222,     0,   223,   224,   225,
     226,   227,   228,   229,  2501,   231,   232,   233,   234,     0,
     235,   236,   237,   238,   239,   240,     0,   241,  2502,     0,
     244,   245,   246,   247,   248,   699,   700,     0,   701,     0,
     252,  2503,  2504,   255,  2505,   257,   258,   259,   260,   261,
     262,     0,     0,   263,  2506,   265,  2507,     0,   267,   268,
     269,     0,     0,   270,   271,   272,   273,   274,  2700,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   708,  2509,   710,
     297,   298,   299,     0,     0,   301,   302,  2511,   304,     0,
       0,   306,   712,   308,   309,   310,     0,   311,   312,     0,
       0,   313,   314,   315,     0,     0,   316,     0,  2513,   319,
    2514,     0,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,   332,   333,     0,   335,   336,     0,   338,
     339,   340,     0,   341,   342,   343,   344,   345,   346,     0,
     347,   348,   349,   715,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,   368,   369,  2515,   371,   372,   373,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,     0,   386,   387,   388,   389,   390,  2516,   392,     0,
     394,   395,   396,  2518,   398,   399,   721,   401,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,  2701,   415,     0,   417,     0,   418,   419,     0,   420,
    2520,   422,   423,   424,   425,   426,     0,   724,   725,     0,
       0,   429,   430,     0,   432,     0,     0,   434,   435,  2521,
     437,   438,   439,   440,   441,     0,     0,   442,   443,   444,
     445,   446,  2522,     0,   448,   449,   450,   451,   452,     0,
     728,     0,   455,  2523,   457,   458,   459,   460,   461,     0,
       0,   462,     0,     0,   463,   464,   465,   466,   467,   468,
     673,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   480,   481,   482,   483,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,   674,   111,   112,   113,     0,   675,   676,   677,
     678,     0,   119,   120,   121,   122,   123,   124,     0,     0,
     125,   126,   679,   680,   129,     0,   130,   131,   132,   133,
       0,     0,   681,     0,   136,   137,   138,   139,   140,   141,
     682,   143,   144,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   683,   153,   154,   155,   684,   685,   686,   687,
       0,     0,   688,   161,   162,   163,   164,   165,   166,   167,
     689,   690,   170,     0,   171,     0,   172,   173,   174,   175,
     176,   177,     0,   178,   179,   180,   181,   182,     0,     0,
     183,   184,   691,   186,   187,     0,   188,   189,   190,     0,
     191,   192,   193,     0,   194,   195,   196,   197,     0,   199,
     200,   201,   202,   203,     0,     0,   205,     0,   206,   207,
     692,   209,     0,   210,     0,   211,   693,     0,   694,   214,
     215,     0,   695,   218,     0,   219,     0,     0,     0,   222,
       0,   223,   224,   225,   226,   227,   228,   229,   697,   231,
     232,   233,   234,     0,   235,   236,   237,   238,   239,   240,
       0,   241,   698,     0,   244,   245,   246,   247,   248,   699,
     700,     0,   701,     0,   252,   702,   703,   255,   704,   257,
     258,   259,   260,   261,   262,     0,     0,   263,   705,   265,
     706,     0,   267,   268,   269,     0,     0,   270,   271,   272,
     273,   274,     0,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   708,   709,   710,   297,   298,   299,     0,     0,   301,
     302,   711,   304,     0,     0,   306,   712,   308,   309,   310,
       0,   311,   312,     0,     0,   313,   314,   315,     0,     0,
     316,     0,   713,   319,   714,     0,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,   332,   333,     0,
     335,   336,     0,   338,   339,   340,     0,   341,   342,   343,
     344,   345,   346,     0,   347,   348,   349,   715,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,   368,   369,   716,
     371,   372,   373,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,     0,   386,   387,   388,   389,
     390,   718,   392,     0,   394,   395,   396,   720,   398,   399,
     721,   401,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,   415,     0,   417,     0,
     418,   419,     0,   420,   723,   422,   423,   424,   425,   426,
       0,   724,   725,     0,     0,   429,   430,     0,   432,     0,
       0,   434,   435,   726,   437,   438,   439,   440,   441,     0,
       0,   442,   443,   444,   445,   446,   727,     0,   448,   449,
     450,   451,   452,     0,   728,     0,   455,   729,   457,   458,
     459,   460,   461,     0,     0,   462,     0,     0,   463,   464,
     465,   466,   467,   468,   506,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   480,   481,   482,   483,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
     114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
     123,   124,     0,     0,   125,   126,   127,   128,   129,     0,
     130,   131,   132,   133,   134,     0,     0,     0,   136,   137,
     138,   139,   140,   141,     0,   143,   144,   145,     0,   146,
     147,   148,   149,   150,   151,     0,     0,   153,   154,   155,
       0,     0,     0,     0,     0,     0,     0,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,     0,   171,     0,
     172,   173,   174,   175,   176,   177,     0,   178,   179,   180,
     181,   182,     0,     0,   183,   184,   185,   186,   187,     0,
     188,   189,   190,     0,   191,   192,   193,     0,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,     0,
     205,     0,   206,   207,   208,   209,     0,   210,     0,   211,
       0,     0,     0,   214,   215,   508,     0,   218,     0,   219,
       0,   220,   221,   222,     0,   223,   224,   225,   226,   227,
     228,   229,     0,   231,   232,   233,   234,     0,   235,   236,
     237,   238,   239,   240,     0,   241,     0,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   252,     0,
       0,   255,     0,   257,   258,   259,   260,   261,   262,     0,
       0,   263,     0,   265,     0,     0,   267,   268,   269,     0,
       0,   270,   271,   272,   273,   274,   509,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,     0,   296,   297,   298,
     299,   300,     0,   301,   302,     0,   304,     0,   305,   306,
     307,   308,   309,   310,     0,   311,   312,     0,     0,   313,
     314,   315,     0,     0,   316,   317,     0,   319,     0,   321,
     322,   323,   324,   325,   326,   327,     0,   329,   330,   331,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
       0,   341,   342,   343,   344,   345,   346,     0,   347,     0,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,   368,   369,     0,   371,   372,   373,   374,     0,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,     0,
     386,   387,   388,   389,   390,     0,   392,   393,   394,   395,
     396,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   511,
     415,   416,   417,     0,   418,   419,     0,   420,     0,   422,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,   433,     0,   434,   435,   436,   437,   438,
     439,   440,   441,     0,     0,   442,   443,   444,   445,   446,
       0,     0,   448,   449,   450,   451,   452,   453,   454,     0,
     455,     0,   457,   458,   459,   460,   461,     0,     0,   462,
       0,     0,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483
};

static const yytype_int16 yycheck[] =
{
       6,     6,   646,   631,   617,   928,    59,     0,     0,     0,
     501,   749,   597,     0,   752,  1329,   849,   544,  1051,   660,
    1049,   719,    36,     0,    16,   592,   640,    16,   542,  1225,
    1443,   929,   725,  1446,  1404,  1709,  1020,    30,   931,  1024,
     638,  1195,  1870,  1195,     6,   849,   537,  1195,  1195,  1790,
      61,  1794,  1029,  1026,   947,  1097,     0,    31,  1823,  2220,
    2220,  1826,  1230,  2247,  1805,    61,  2249,   960,   544,   538,
     543,   857,    16,  1359,  1360,  1752,   631,  1814,   633,   535,
     635,  1054,     0,  1866,  2258,  2124,    30,    80,  1914,  1915,
    1916,    21,    36,  2265,    35,  2076,  1929,     9,  1310,    13,
      14,     5,     5,   679,   680,    51,  1688,  1689,     5,    13,
      14,  1693,   549,  1412,     5,     5,    90,    61,   614,     5,
      74,  2131,    13,    14,     5,     5,     0,    13,    14,   614,
       5,    59,    13,    14,   710,     5,    80,   651,    13,    14,
    1462,    76,  2564,    13,    14,     5,     5,     5,     9,  1196,
       9,   171,    87,  1735,  1736,    13,    14,    20,    21,  1942,
       5,     5,     5,    41,   968,     5,     9,     5,     5,   535,
       5,   756,    68,    13,    14,    13,    14,     5,    13,    14,
       5,     5,     5,     5,     5,    13,    14,     5,    13,    14,
    1464,     5,     5,     5,     5,    41,     0,     5,   123,   118,
       5,  1324,   243,     5,  1009,     0,     5,    84,    59,   138,
      76,    11,   171,  2550,  2736,  2704,    16,  1324,  1324,     3,
      94,    87,  2532,   916,    11,    59,  2009,  2010,   308,    16,
       3,     4,     5,  2460,  1038,     4,     9,  1041,  1042,    59,
       9,  2156,    42,   188,   108,   121,   292,     4,    32,    33,
     308,   128,     9,   121,   121,    11,  2640,   356,   108,    24,
      16,    37,   284,   272,  2802,    30,  2618,   116,   162,   136,
     377,   167,   146,    11,    74,   190,  1062,   357,    16,   118,
     164,    13,    14,    11,   368,  1218,   160,  1073,    16,   131,
      94,   165,   286,  2903,    28,   275,   170,   333,   333,    94,
     876,   877,  2654,   487,    42,   179,    49,   418,    69,   183,
      11,   535,  2138,   119,    95,  2130,   500,    37,   148,  2554,
     361,   405,   849,   170,    28,   292,   902,  3035,   116,   856,
    2188,    35,  2567,   209,  2062,   440,    74,     5,    28,  1037,
     214,    28,   927,   116,    11,   304,  2385,   109,    35,    16,
    2389,    28,   463,   719,   460,  2032,  2517,   146,    35,  2187,
     234,   975,   446,    59,   109,   932,  2376,   197,  3076,   405,
     405,   136,   119,    74,   268,    42,  2559,  2561,   484,   852,
      31,  2122,  1315,  2124,  2736,   169,   192,   171,   535,  2773,
     171,   498,  2702,   498,   961,   436,   498,   131,   174,   498,
     188,  2184,   382,  2186,    55,  2170,  3016,    74,     0,   283,
    1333,  2833,   286,   493,   498,  2273,   452,   452,   292,   269,
     348,   988,   381,   319,   205,   214,   303,   276,  2966,   438,
     314,   346,   175,   165,  1019,   493,  2663,   276,  1752,   281,
     221,   131,   215,   970,   971,   192,  1786,  1787,   191,   210,
     231,   318,   326,   196,   174,  2682,   502,   498,  2040,  2041,
    2042,  2043,  2044,   501,   237,  2047,  2048,  2049,  2050,  2051,
    2052,  2053,  2054,  2055,  2056,   349,   498,  2999,   498,  1602,
    1603,   416,   286,   271,   265,   170,   502,  2722,  2977,  1102,
     233,   286,   858,  2830,  1601,   719,  1602,   348,  1540,  1484,
     493,   493,   493,   292,   498,   286,   493,  2422,  1830,  2292,
    1796,  1825,  2864,  2935,   348,   440,   493,  1564,  1817,  2101,
    2102,  1017,   991,   442,   402,   290,  1331,   456,   348,   535,
     544,   405,  1017,   410,    24,   502,  1569,   433,   544,  2713,
      30,   405,   496,  2704,  2704,   349,   500,   984,  2900,   493,
     416,   543,   498,   498,   349,   544,   402,  1831,   432,   462,
    2375,  1205,   438,  2947,   617,   462,   440,   573,   574,   416,
     438,   352,   719,   269,   502,   586,   341,   489,   490,  2307,
     345,   484,   498,   457,   498,   459,   460,   484,  2627,   449,
     586,   597,  1804,  2632,   498,   498,  2635,  1639,  1196,   543,
     544,   498,   968,  2431,   343,  2438,   595,   498,   498,  2619,
     375,  2592,   498,   606,   606,   606,   496,   498,   498,   606,
     500,  1407,   496,   498,   554,   499,   500,   501,   498,   606,
     636,   637,   638,  1218,   858,   609,   497,   380,   498,   498,
     498,  1282,   586,   432,  2385,  1450,   136,  2999,  2389,  2832,
    1226,  1227,   348,   498,   498,   498,   460,   598,   498,   440,
     498,   498,   606,   498,  2838,   460,   450,  2839,   502,  1324,
     498,  1037,   450,   498,   498,   498,   498,   498,   443,   375,
     498,   385,   502,  2420,   498,   498,   498,   498,   606,   552,
     498,   554,   555,   498,   494,   499,   498,   501,   385,   498,
    1314,  2936,  1300,   460,   499,   160,   501,   494,   385,  1513,
     165,   858,   243,   719,   577,   162,   489,   490,  2032,  1523,
     489,   490,  1526,  2549,   392,   393,   440,   484,  1313,  2768,
    1315,   416,   489,   490,  1319,   491,   492,   493,   494,   199,
    1354,  1355,  1198,    94,  2834,   160,    38,  1332,  2932,  2426,
     756,   489,   490,   491,   492,   493,   494,  1284,  2941,   243,
     116,   489,   490,   491,   492,   493,   494,  1281,  1224,  2552,
     250,  1356,  1370,  2113,  2114,  2115,  2116,   243,  1345,   234,
     227,  1272,  1273,  1239,   498,    60,    24,  1401,  1279,  1575,
     107,  1624,    30,    68,   131,  1409,   421,  1411,  2084,   199,
     290,  1969,   487,    24,   404,   395,  1275,  1975,  1284,  2993,
    1283,   487,  1410,  1037,  1798,   500,  2977,  2977,  1716,   234,
    1624,  1714,   498,    76,   491,   492,   493,   494,   283,   171,
     361,   271,  1198,   125,    87,   160,   276,  2665,   131,   439,
     165,   176,    80,   849,  2934,   243,  1584,   405,    24,    11,
     856,   857,   858,   223,    30,   345,  1779,   452,  1224,  1225,
     852,  1894,    68,   205,   454,   158,   364,  1605,   874,  1607,
      24,  2453,  1610,  1239,   223,  1917,    30,  2618,  3061,   221,
      42,  1509,  1373,  1688,  1689,   375,  2627,   327,  1693,   231,
    1037,  2632,  2465,   243,  2635,   361,   460,   903,   462,   269,
    2473,  2097,   237,  1501,   328,   436,  2220,  1363,   852,   234,
     116,   160,    74,  2654,   928,   136,   176,   923,   924,   925,
     269,   927,   928,  1536,  1537,  1538,  1819,  1482,     8,  1902,
    1735,  1736,   249,   357,   271,   498,    16,    17,    18,    19,
     257,     5,  3032,   299,   281,   951,   890,  1602,  1603,  1604,
     462,    24,   436,   443,  1509,   498,   291,    30,   283,   329,
     136,   361,   237,   361,   970,   971,  1564,   498,   690,   369,
     436,   347,   484,  1528,  1198,   481,  1953,   237,  1533,  2807,
     493,  1958,   136,   276,   928,   234,   849,   500,   281,   220,
     712,  1002,  1003,   856,  1005,  2736,  1581,  1363,  1004,   375,
    1224,  1225,  1008,  1009,  2586,   405,  1002,  1003,   378,  1005,
     352,   361,   368,  1019,   498,  1239,   243,   368,   186,   187,
      24,   118,   996,   745,  2034,   500,    30,  2768,  1519,   378,
      76,  1037,   498,  1524,   283,   493,     8,  1493,   436,    11,
     286,    87,   500,  1557,    16,    17,    18,    19,   409,   405,
     411,  1198,   452,  2063,   405,   150,  1062,     4,  1002,  1003,
    1629,  1005,     9,   136,  1633,   271,  1635,  1073,   438,   290,
     276,   934,   255,   256,   409,   481,   411,  1224,  1225,  1053,
     943,  2755,    65,    66,    32,    33,   436,   255,   256,   438,
     446,  1097,  1239,   169,   957,   446,  2250,  1624,  2250,  2773,
     498,   436,  2250,  2250,   460,   968,   203,   970,   971,   460,
    1637,   491,  2426,   319,   290,     4,   462,  1702,   496,   502,
       9,   496,   500,  2864,   345,   500,   347,  1493,   484,   335,
     423,   498,   136,   484,   361,  1873,   290,  1875,   484,  1363,
    1596,   434,   498,    13,    14,     4,    94,   498,   498,   409,
       9,   411,   498,  2076,   375,  1740,  2899,  2353,  2740,  2900,
     333,   131,    13,    14,    95,   341,   888,  2000,  2201,   345,
       4,  2200,   269,   499,   271,     9,   436,   499,  1701,  1792,
    1703,  1704,   365,   366,   906,  1641,     5,   341,   158,     8,
    1196,   345,  1198,   462,   170,    14,   369,   365,   366,   375,
    2185,   575,   576,  2877,   578,   409,    25,   411,   288,   436,
      29,   499,  1218,  2242,   502,   484,  1363,   290,  1224,  1225,
     499,   375,  2199,   502,  2201,  3053,   216,   433,   499,   498,
    1596,   502,   405,  1239,   440,  2040,  2041,  2042,  2043,  2044,
     171,    55,  2047,  2048,  2049,  2050,  2051,  2052,  2053,  2054,
    2055,  2056,  3017,  3018,    13,    14,   499,  3000,  2999,   502,
     496,  2154,   498,  2394,   500,   498,  2397,   443,   341,  1493,
     481,   498,   345,   368,   205,  1641,  3019,   220,  1284,   452,
    1973,  1974,   499,   151,   535,   502,   290,    13,    14,   443,
     221,  1283,   341,  1937,  1300,  1284,  2101,  2102,    13,    14,
     231,   271,   375,  1944,   151,  3070,   276,  1313,   151,  1315,
     405,   281,  1318,  1319,    13,    14,   288,  1310,  1310,  1310,
      13,    14,  1328,  1310,  1330,  1331,  1332,  1333,  1334,  1335,
    1336,   151,  3075,  1310,   265,   499,   499,   341,   502,  1283,
     499,   345,   499,   502,   499,   502,  1493,   502,    13,    14,
    1356,   446,  1358,   499,    13,    14,   502,  1363,  1364,  1365,
    1366,  1367,  1368,  1369,  1370,   460,  1310,   498,  1374,  1375,
     443,   375,  1596,  1379,   409,   499,   411,  1383,   502,   150,
    1386,  1387,  1388,  1389,  1390,  1391,  1392,  1393,  1394,   484,
    2704,  1397,    28,  2589,     8,   271,   499,    11,  1404,   502,
    1998,  1407,    16,   498,  1410,   485,   486,   487,   176,   489,
     490,   491,   492,   493,   494,   499,  2220,  1641,   502,   500,
     368,   352,    37,  1429,   499,  2795,    83,   502,    42,   449,
     499,   199,  1376,   502,   499,    49,   452,   502,  1427,   443,
      13,    14,  1435,    79,  1450,   499,  2479,  2432,   502,  1596,
     464,   499,    88,   423,   502,  1461,  1462,   405,   315,   499,
      74,  1324,   502,   146,   434,  2079,    36,   499,   719,   237,
     502,   499,    24,  2000,   502,   151,   499,   160,    30,   502,
     498,   117,   165,  2381,    13,    14,  2071,  1493,   172,   499,
     498,  1435,   502,  1499,  1641,  1501,  1952,  2395,   446,   498,
       8,  1992,   450,    11,   499,   259,   260,   502,    16,    17,
      18,    19,   460,   485,   486,   487,   498,   489,   490,   491,
     492,   493,   494,   291,   499,   499,   499,   502,   502,   502,
     144,   214,   499,   299,  1540,   502,   484,  1543,  1544,   499,
    1546,   499,   502,   498,   502,  2741,  2284,    13,    14,  2163,
     498,   234,   188,   499,  1417,   151,   502,  2970,  1564,  2972,
     244,   175,    13,    14,   200,  2021,    13,    14,  2135,  1575,
     409,  1876,   411,  1878,  2184,  1581,  2186,   191,   286,  2390,
    1573,  2392,   196,  2039,   136,   611,  1952,   613,    13,    14,
    1596,   176,    87,   361,    89,   151,    91,   368,    13,    14,
     283,   151,   368,    13,    14,   343,   535,   858,   405,   292,
    2066,    13,    14,   498,   199,    13,    14,  2073,  1624,   233,
      37,  2219,  2235,  2221,   368,    13,    14,    13,    14,  1573,
     232,  1637,   498,  1639,   405,  1641,  3049,    13,    14,   405,
    1646,   409,   496,   411,  2285,  1651,    13,    14,  2453,   333,
     356,   357,   237,   356,   357,  2021,   365,   366,     5,   427,
       5,   405,   498,  2977,   165,   433,  2470,   498,   436,   356,
     357,   356,   357,  2039,   288,   446,  1690,   498,     5,     5,
     446,  2710,  1688,  1689,  1690,   369,   498,  1693,   196,   460,
     970,   971,   498,   498,   460,  1701,  1702,  1703,  1704,    11,
    2066,     5,   446,    15,   498,  1711,   291,  2073,   498,  1715,
     218,    23,  1718,   484,   498,   498,   460,   498,   484,   498,
     498,   405,    34,    35,   498,   498,  1740,   498,  1952,  1735,
    1736,  2097,   498,     5,  1740,   498,   498,  2251,   290,   147,
     484,   498,   498,     9,  2482,  2483,  1690,  2580,  1754,   432,
     498,  1757,   297,  1759,   498,   391,   461,   502,   394,   216,
      98,  1624,   502,   499,  2220,  1628,   380,    37,   452,   375,
     165,   283,   165,  1779,  1637,   281,    88,   232,   498,   416,
     288,  2586,   498,   502,  1790,  1790,  1037,  2401,    87,   341,
     719,   416,    55,   345,    55,  1809,  1740,  2021,   416,  1805,
    1805,   262,  2416,   416,   499,  1952,   507,   416,   460,   151,
      94,  1804,  1804,  1804,  1758,  2039,   498,  1804,  1824,  2517,
     500,   271,   271,   375,   409,  2281,   411,  1804,  1790,    37,
    1774,   498,   498,  1839,  1840,     9,    36,   414,   414,   499,
     496,   496,  2066,  1805,   416,   416,  1790,   416,   433,  2073,
     416,   436,  1858,   502,  2220,   456,   498,    11,  2781,   343,
    1804,  1805,   497,   502,   502,  1809,   507,   414,   482,   498,
    1876,  1877,  1878,  2097,  2021,   489,   490,   491,   492,   493,
     494,     6,   504,   416,   276,   179,    11,   498,   161,   170,
      15,   443,  2039,    37,   499,    20,    21,    22,    23,    24,
    2704,   498,    27,   440,   214,    30,    31,   502,   378,    34,
      35,  1917,   223,   287,     8,  2281,   502,    11,   308,  2066,
     499,   308,    16,    17,    18,    19,  2073,   223,   271,   858,
     498,   223,   292,   324,   284,  2740,   452,   498,   151,   151,
      34,   460,    37,   271,   499,  2978,  1952,  1198,   499,   286,
    2097,   481,   496,   481,   286,    80,  1962,   499,   499,   499,
    2451,   499,    87,    88,    89,    90,    91,   405,   271,    37,
      37,   497,   499,  1224,  1225,   499,   499,   485,   486,   487,
     170,   489,   490,   491,   492,   493,   494,  2353,  1239,   499,
     499,   502,  1998,   500,  2000,   499,  2220,   499,   481,   494,
     499,   499,   499,  1996,   170,   499,   499,   499,   499,   498,
     416,   498,  2018,   498,   154,  2021,   498,   457,   457,  1882,
    2943,  2027,   446,   502,  2030,  2481,   286,  2033,   487,   483,
     287,   287,   287,  2039,  2040,  2041,  2042,  2043,  2044,  2683,
     502,  2047,  2048,  2049,  2050,  2051,  2052,  2053,  2054,  2055,
    2056,   242,  1996,  2580,  2060,  2061,  2109,  2281,  2064,   438,
    2066,   416,  2076,   498,  1927,  2071,   271,  2073,   151,   199,
    2076,   151,   151,  2220,   278,   416,   416,   416,   499,  2085,
     416,   278,  2088,   497,  2090,   498,    37,   499,   284,   343,
     460,  2097,  2098,  2107,   589,  2101,  2102,   502,   286,    37,
    2106,  2107,   151,   499,   151,   276,   142,   170,  1037,    11,
    2124,   165,  1363,   497,   497,  2481,  2122,  2122,  2124,  2124,
     502,   499,   499,   498,   218,   170,   621,   499,   499,  2353,
    2136,   535,  2076,   499,  2281,   499,   146,  2000,   457,   296,
    2146,   405,  2005,   170,  2007,   502,   179,   499,  2011,  2012,
     160,  2517,   445,   484,   349,   165,  2162,    85,   287,   151,
    2122,   174,  2124,  2107,   659,   660,   661,   662,   502,   499,
     499,    37,    80,  2977,   498,   498,   427,   499,  2122,   499,
    2124,   499,   498,   498,   497,   502,   170,   440,   502,   407,
     499,   498,   221,   499,   288,   295,   221,   499,   510,   499,
     293,   499,   499,   498,   214,    55,  2353,   498,   498,  2215,
    2808,   183,   499,  2219,  2220,  2221,   487,   499,   460,   499,
      37,   201,   116,  2589,   234,    37,   223,   539,    82,   498,
     189,   416,   276,   276,   416,   500,    37,   271,   500,    56,
     498,   500,  1493,   108,   487,   286,   460,   499,  2704,  2862,
     500,   500,   500,   500,   500,  2248,   500,  2481,    37,   500,
     500,   500,  2906,   500,   500,   500,   500,   500,   500,  1198,
     500,   500,   500,   283,   500,  2281,  2269,   500,  2271,   500,
     500,   500,   292,   500,   500,   500,   598,  2915,   498,   500,
     107,   500,  2298,  2517,   500,  1224,  1225,   500,   500,   170,
    2885,   221,  2887,   459,  2248,   498,   498,    87,   502,   498,
    1239,   132,   499,   335,   498,   719,  2772,    37,   151,  2775,
      74,   499,   151,   123,    68,  2269,    37,  2271,   305,   499,
      74,  2822,    37,   357,  2481,   498,   357,   498,  2704,   499,
     498,  2347,  2348,    87,   326,  1596,  2352,  2353,   498,   498,
     502,  2357,    74,   445,  2360,  2361,   498,  2220,   276,  2365,
     247,   188,   440,   427,   498,  2589,    68,   289,    68,   494,
    2517,    55,   116,   498,   118,  2741,   501,   498,  2976,  2385,
    2385,   198,  2245,  2389,  2389,   510,   499,   498,   502,    37,
    1641,   485,   486,   487,   440,   489,   490,   491,   492,   493,
     494,   375,   487,   286,   427,  2411,  2772,   269,    37,  2775,
    2901,   498,   537,   538,   539,   289,   289,   498,   359,   201,
    2413,  2414,   432,  2385,   499,   499,   499,  2389,   499,   554,
     286,   286,   249,   498,  1363,     9,   342,   499,   499,  2445,
     257,  2385,  2589,   121,   438,  2389,   356,  2453,   573,   574,
     575,   576,   269,   578,   858,    23,    34,   499,   498,   203,
       9,   499,  2202,   606,   589,  1507,  2472,  2215,  1871,  2413,
    2414,  2160,  2415,   598,  2900,  2481,   535,   972,  2650,  2973,
    2704,  2921,  2254,   300,   609,  2475,   496,  3027,  2676,   499,
     500,  2979,  3020,  2988,  2724,  1864,   621,  2976,  1877,  1024,
    2259,  2194,   997,  2986,  2219,     8,  1861,  2974,    11,  1998,
    1224,  2517,  1272,    16,    17,    18,    19,  2741,  2580,  1933,
    2245,  2977,   990,  1824,  1478,   962,  1012,   271,  1023,  2874,
     347,    34,   276,  1011,   659,   660,   661,   662,  2895,  1839,
    3015,  1036,  1450,  2140,  2956,  2408,  2889,  2794,  2772,  1477,
    2407,  2775,   369,  1805,  1014,  2124,  2769,  2704,  2391,  2376,
    2122,  2864,  1057,  2863,  1493,  2881,  1324,  2882,     8,  2562,
    2646,    11,   389,  1324,  2580,   319,    16,    17,    18,    19,
    2586,  1324,  1324,  2589,  2959,  3003,  2592,  2960,  1716,  1402,
    1825,   335,  1758,  1546,  2741,  2601,  2602,  1647,   574,  2605,
    1793,  2411,  1755,  2139,  1938,  2856,  1284,  1637,  2161,  1427,
      -1,  2977,  2618,  2618,    -1,   996,    -1,  1428,  2562,    -1,
      -1,  2627,  2627,    -1,    -1,  2772,  2632,  2632,  2775,  2635,
    2635,    -1,    -1,  1037,    -1,    -1,  2642,  2643,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,  2654,  2654,
    2656,    16,    17,    18,    19,    -1,  2618,    -1,    -1,    -1,
     719,    -1,    -1,    -1,    -1,  2627,    -1,  1596,  2674,    34,
    2632,    -1,    -1,  2635,    -1,    -1,    -1,    42,   990,    -1,
      -1,    -1,   499,  2627,    49,    -1,    -1,    -1,  2632,   433,
      -1,  2635,  2654,    -1,    -1,    -1,   440,    -1,  2704,    -1,
      -1,  1952,    -1,    -1,  1199,    -1,    -1,    -1,    -1,    74,
      -1,    -1,  1641,    -1,    -1,   218,    -1,  2580,    -1,    -1,
      -1,    -1,  2715,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2736,  2736,    -1,    -1,  2740,  2741,    -1,   862,    -1,    -1,
      -1,    -1,    -1,    -1,  2737,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2977,    -1,    -1,    -1,    -1,  2764,    -1,
      -1,    -1,  2768,  2768,    -1,    -1,  2772,  2781,    -1,  2775,
    2021,  2715,    -1,    -1,  2736,  2781,    -1,    -1,   218,    -1,
      -1,    -1,  2645,    -1,    -1,   288,    -1,  1282,  2039,  2795,
      -1,    -1,  2798,  2737,  1198,    -1,    -1,    -1,    -1,   858,
      -1,    -1,  2808,    -1,   929,    -1,  2768,  2813,    -1,    -1,
     175,    51,    -1,    -1,    -1,  2066,    -1,    -1,    -1,    -1,
    1224,  1225,  2073,    -1,  2768,    -1,   191,    -1,    -1,    -1,
    2977,   196,    -1,    -1,    -1,  1239,    -1,  2781,    -1,    -1,
      -1,  2704,    -1,    -1,  2837,    37,  2097,   972,   288,    -1,
      -1,    -1,    -1,   218,   219,    -1,    96,    -1,  2864,  2864,
      -1,    -1,    -1,    -1,    56,   990,   991,    -1,   233,    -1,
      -1,   996,   997,   998,    -1,    -1,    -1,    -1,    -1,  2885,
      -1,  2887,   122,  2889,    -1,    -1,    -1,  2893,    -1,    -1,
      -1,    -1,    -1,  2837,  2900,  2900,    -1,    -1,  1023,  1024,
     140,    -1,  2864,  2896,   144,    -1,   271,    -1,    -1,   274,
    1405,  1036,    -1,    -1,    -1,   107,    -1,  2923,    -1,    -1,
      -1,    -1,    -1,   288,    -1,    -1,   166,    -1,  1053,   169,
      -1,  1426,  1057,  1428,    -1,    -1,    -1,  2943,  2900,    -1,
      -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,    -1,    -1,
    2956,    -1,  2896,    -1,    -1,   110,   111,    -1,    -1,  1363,
      -1,    -1,    -1,    -1,  1276,    -1,  1278,    -1,  2831,  2220,
    2976,  2977,    -1,     8,    -1,    -1,    11,    -1,  1037,    -1,
    1475,    16,   485,   486,   487,    -1,   489,   490,   491,   492,
     493,   494,    -1,  2999,  2999,    -1,  3002,  3003,    -1,  2992,
      -1,    -1,    -1,    -1,    -1,    -1,   198,    42,    -1,    -1,
      -1,    -1,    -1,    -1,    49,   380,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1952,    -1,    -1,    -1,    -1,    -1,  3035,
    2281,   186,   187,    -1,    -1,    -1,   276,  2999,    -1,    74,
      -1,    -1,    -1,    -1,   284,   485,   486,   487,  2992,   489,
     490,   491,   492,   493,   494,    -1,    -1,   249,    -1,  1554,
    1555,    -1,    -1,    -1,    -1,   257,  1191,    -1,    -1,    -1,
    3076,    -1,    -1,    -1,  1199,    -1,    -1,   269,    -1,    -1,
      -1,    -1,    -1,  1208,    -1,    -1,    -1,   327,    -1,  1493,
      -1,    -1,  2021,    -1,    -1,    -1,   251,   252,   253,   254,
     255,   256,  2353,    -1,   259,   260,    -1,    -1,   300,   144,
    2039,    -1,    -1,    -1,  2977,    -1,  1241,   482,    -1,    -1,
     485,   486,   487,    -1,   489,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2066,    -1,  1198,
     175,    -1,    -1,    -1,  2073,    -1,    -1,  1272,  1273,    -1,
    1275,  1276,    -1,  1278,  1279,   347,   191,  1282,    -1,    -1,
      -1,   196,    -1,    -1,    -1,  1224,  1225,    -1,  2097,    -1,
      -1,    -1,    -1,  1485,    -1,    -1,    -1,   369,    -1,    -1,
    1239,    -1,    -1,  1495,    -1,  1497,    -1,    -1,  1500,    -1,
      -1,    -1,  1596,    -1,  1506,    -1,  1508,   389,   233,    -1,
      -1,     0,    -1,    -1,  1329,    -1,    -1,    -1,  1520,    -1,
     365,   366,    -1,  1525,    -1,  1340,    -1,  1529,  1530,  1531,
    1532,    20,  1534,  1535,    -1,    -1,    -1,    -1,    -1,    -1,
    2481,    30,    -1,    32,    33,    -1,    -1,  1641,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1373,    48,
      -1,    -1,    -1,   288,    -1,    37,    -1,    -1,    57,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2517,    -1,    -1,    -1,
      69,    -1,    -1,    -1,    56,    -1,    -1,    -1,    -1,  1404,
    1405,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1784,
      -1,  2220,    -1,    92,    -1,    94,    -1,    -1,    -1,    -1,
      -1,  1426,    -1,  1428,  1363,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1437,   112,  1439,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   478,   479,   107,     0,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,  2589,    -1,
      -1,    -1,    -1,   142,    -1,   380,    -1,    -1,    -1,    -1,
    1475,   150,  2281,   152,   153,    -1,    -1,    -1,    -1,  1484,
    1485,    -1,    -1,    -1,    -1,    -1,    -1,   166,    -1,    -1,
    1495,  1496,  1497,  1498,     8,  1500,    -1,    11,    -1,    -1,
      -1,  1506,    16,  1508,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   174,    -1,  1519,  1520,   195,    -1,    -1,  1524,
    1525,    -1,    -1,    -1,  1529,  1530,  1531,  1532,    42,  1534,
    1535,   210,    -1,    -1,    -1,    49,   198,    -1,    -1,    -1,
      94,    -1,    -1,    -1,  2353,    -1,    -1,    -1,    -1,  1554,
    1555,  1556,    -1,    -1,  1493,    -1,    -1,   236,    -1,  1934,
      74,    -1,    -1,    -1,    -1,    -1,  1571,   482,  1943,  1944,
    1945,    -1,    -1,  2704,   489,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   249,    -1,  1964,
      -1,    -1,   146,    -1,    -1,   257,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   160,   269,    -1,    -1,
    2741,   165,    -1,    -1,    -1,    -1,   170,    -1,    -1,  1994,
      -1,    -1,    -1,    -1,    -1,   179,    -1,    -1,    -1,   183,
     144,    -1,    -1,    -1,   313,    -1,    -1,   316,   300,    -1,
      -1,  2772,    -1,    -1,  2775,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    -1,    16,    -1,  1596,    -1,    -1,
     214,   175,    -1,    -1,    -1,    -1,   345,    -1,  1952,    -1,
      -1,    -1,  2481,    -1,    -1,   354,    -1,   191,    -1,    -1,
     234,    42,   196,    -1,    -1,   347,    -1,    -1,    49,   368,
      -1,    -1,    -1,    -1,    -1,    -1,   375,    -1,    -1,    -1,
     379,    -1,  1641,    -1,  1709,    -1,    -1,   369,  2517,    -1,
     389,  1716,    -1,    74,    -1,    -1,    -1,    -1,    -1,   233,
      -1,    -1,   401,    -1,    -1,    -1,   405,   389,    -1,   283,
      -1,    -1,   286,    -1,    -1,    -1,    -1,  2021,   292,    -1,
      -1,    -1,    -1,    -1,  2119,  2120,  2121,  1752,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2039,    -1,    -1,    -1,    -1,
      -1,    -1,   441,    -1,  1956,    -1,    -1,   446,    -1,    -1,
      -1,    -1,   326,    -1,   288,    -1,    -1,    -1,    -1,  1784,
    2589,   460,  2066,   144,    -1,  1790,    -1,    -1,    -1,  2073,
      -1,    -1,    -1,    -1,    -1,   349,    -1,    -1,    -1,    -1,
    1805,    -1,    -1,  2178,  1809,   484,    -1,  1812,    -1,  1814,
      -1,    -1,    -1,  2097,   175,     8,    -1,    -1,    11,   498,
      -1,    -1,   501,    16,    17,    18,    19,    -1,    -1,    -1,
     191,    -1,    -1,     8,    -1,   196,    11,    -1,    -1,    -1,
      -1,    16,    17,    18,    19,    -1,  2977,    -1,    -1,    42,
      -1,   405,    -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,
      -1,  1866,    -1,    -1,    -1,    -1,   380,    42,    -1,    -1,
      -1,    -1,   233,    -1,    49,    -1,    -1,  2252,   432,    -1,
      -1,    74,    -1,    -1,    -1,    -1,   440,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2704,    -1,    -1,    -1,    74,
      -1,    -1,    -1,   457,    -1,   459,   460,    -1,    -1,    -1,
    2285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1929,    -1,    -1,   288,    -1,  1934,
      -1,    -1,  2741,    -1,    -1,    -1,  2220,  1942,  1943,  1944,
    1945,    -1,   496,    -1,    -1,   499,   500,   501,    -1,    -1,
      -1,  1956,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1964,
      -1,    -1,    -1,  2772,    -1,    -1,  2775,    -1,   482,    -1,
      -1,  1976,    -1,    -1,    -1,   489,   490,   491,   492,   493,
     494,    -1,   175,    -1,    -1,    -1,    -1,  1992,  2180,  1994,
      -1,    -1,    -1,  2368,  2369,  2370,  2371,  2281,   191,    -1,
     175,    -1,    -1,   196,  2009,  2010,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1952,    -1,  2207,   191,    -1,    -1,   380,
      -1,   196,    -1,    -1,    -1,   218,   219,  2032,    -1,    -1,
    2222,  2223,  2224,  2225,  2226,  2227,  2228,  2229,  2230,  2231,
     233,    -1,    -1,   218,   219,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2353,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   271,    -1,
       8,   274,  2021,    11,  2459,    -1,    -1,    -1,    16,    17,
      18,    19,    -1,    -1,    -1,   288,    -1,    -1,    -1,   274,
    2039,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      -1,    16,    -1,   288,  2119,  2120,  2121,  2122,    -1,  2124,
    2125,   482,    -1,    -1,    -1,  2130,  2131,  2066,   489,   490,
     491,   492,   493,   494,  2073,    -1,    -1,    42,    -1,    -1,
      -1,    -1,    -1,    -1,    49,  2337,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    24,    -1,  2160,    -1,    -1,  2097,    30,
      -1,    -1,     8,    -1,    -1,    11,    37,    -1,  2977,    74,
      16,    -1,    -1,  2178,    -1,  2180,    -1,    -1,    -1,  2184,
    2185,  2186,    -1,  2188,    -1,    56,    -1,   380,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,  2481,    -1,    -1,
      -1,    -1,  2207,    49,  2209,   380,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2222,  2223,  2224,
    2225,  2226,  2227,  2228,  2229,  2230,  2231,    -1,    74,    -1,
      -1,    -1,    -1,  2517,    -1,    -1,   107,    -1,    -1,   144,
     573,   574,  2247,    -1,    -1,    -1,    -1,  2252,    -1,    -1,
      -1,    -1,    -1,    -1,  2259,    -1,    -1,    -1,    -1,    -1,
    2452,    -1,    -1,    -1,    -1,   136,    -1,    -1,  2273,    -1,
     175,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2285,  2220,    -1,    -1,    -1,    -1,   191,  2292,    -1,   482,
     218,   196,   485,   486,   487,    -1,   489,   490,   491,   492,
     493,   494,    -1,   636,   637,  2589,    -1,   482,    -1,    -1,
     485,   486,   487,    -1,   489,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   198,   233,   175,
      -1,    -1,  2337,    -1,    -1,    -1,    -1,    -1,  2343,    -1,
      -1,  2716,  2281,    -1,    -1,   191,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2733,    -1,
     288,  2366,    -1,  2368,  2369,  2370,  2371,    -1,    -1,    -1,
    2375,  2376,    -1,  2378,    -1,    -1,  2381,    -1,   249,    -1,
    2385,    -1,    -1,   288,  2389,    -1,   257,   233,    -1,    -1,
    2395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   269,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2411,    -1,    -1,   849,
    2415,    -1,    -1,    -1,  2353,  2420,   856,    -1,    -1,   290,
    2704,  2426,    -1,    -1,    -1,    -1,    -1,  2432,    -1,   300,
      -1,  2806,    -1,  2438,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   288,    -1,    -1,    -1,  2451,  2452,    -1,    -1,
      -1,    -1,    -1,    -1,  2459,     8,    -1,  2741,    11,    -1,
      -1,  2836,    -1,    16,    17,    18,    19,    -1,    -1,    -1,
     341,  2476,    -1,    -1,   345,   380,   347,    -1,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,  2772,    -1,
      -1,  2775,    -1,  2685,    -1,    -1,    -1,    -1,   369,    -1,
      -1,    -1,    -1,   943,   375,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2705,  2706,    -1,    -1,    -1,   389,    -1,
      -1,    -1,    -1,    -1,   857,    -1,    -1,    -1,   968,  2721,
     970,   971,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,   874,  2481,    -1,    -1,    -1,    -1,  2552,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2561,   485,   486,   487,
      -1,   489,   490,   491,   492,   493,   494,    -1,  2573,    -1,
     903,    -1,   443,    -1,    -1,    -1,    -1,   482,  2517,    -1,
      -1,    -1,    -1,    -1,   489,   490,   491,   492,   493,   494,
     923,   924,   925,    -1,    -1,   928,    -1,    -1,  1038,    -1,
      -1,  1041,  1042,    -1,  2609,  2797,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2618,  2619,    -1,    -1,  2622,   951,    -1,
    2625,    -1,  2627,    -1,    -1,    -1,    -1,  2632,    -1,    -1,
    2635,    -1,  2637,    -1,    -1,  2640,   482,    -1,    -1,    -1,
      -1,    -1,    -1,   489,   490,   491,   492,   493,   494,  2654,
    2589,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       0,    -1,    -1,    -1,    -1,   218,    -1,    -1,    -1,    -1,
      -1,  1004,    -1,    -1,    -1,  1008,  1009,    -1,    -1,    -1,
    2685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2977,    -1,    -1,     8,    -1,    -1,    11,
    2705,  2706,    -1,    15,    16,    17,    18,    19,    -1,    -1,
      -1,  2716,    -1,  2718,    -1,    -1,  2721,    -1,    -1,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,  2733,  1062,
      42,  2736,    -1,    -1,    -1,   288,    -1,    49,    -1,    -1,
    1073,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2755,    -1,    -1,    -1,    94,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,  2768,  1097,  2704,    -1,    -1,  2773,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1222,    -1,    -1,    -1,  2791,    -1,    -1,    -1,
    2795,    -1,  2797,  1233,    -1,  1235,    -1,    -1,    -1,    -1,
      -1,  2806,  2741,    -1,  1244,    -1,   146,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2822,    -1,    -1,
     160,  1261,    -1,    -1,    -1,   165,    -1,    -1,    -1,    -1,
     170,  2836,    -1,  2772,    -1,    -1,  2775,    -1,    -1,   179,
      -1,    -1,    -1,   183,    -1,    -1,    -1,    -1,    -1,  1289,
    1290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2864,
      -1,    -1,    -1,   175,    -1,    -1,    -1,    -1,  2873,    -1,
      -1,    -1,  2877,    -1,   214,    -1,  2881,    -1,    -1,   191,
      -1,  1321,  1322,    -1,   196,  1325,  1326,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   234,  2900,  2901,  2902,  2903,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   218,   219,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   233,    -1,    -1,    -1,    -1,    -1,  2932,    -1,    -1,
      -1,    -1,   485,   486,   487,    -1,   489,   490,   491,   492,
     493,   494,  2947,   283,    -1,    -1,   286,    -1,    -1,    -1,
      -1,    -1,   292,    -1,  2959,    -1,    -1,    -1,    -1,   271,
      -1,    -1,   274,    -1,    -1,    -1,    -1,    -1,  2973,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   288,    -1,    -1,   291,
      -1,    -1,    -1,    -1,    -1,  1318,   326,    -1,  2993,    -1,
      -1,    -1,    -1,    -1,  2999,  1328,    -1,  1330,    -1,    -1,
    1333,  1334,  1335,  1336,     8,    -1,    -1,    11,    -1,   349,
    3015,  3016,    16,    17,    18,    19,    -1,    -1,    -1,    -1,
      -1,  1461,  1462,    -1,    -1,  1358,    -1,    -1,    -1,    -1,
      34,  1364,  1365,  1366,  1367,  1368,  1369,    -1,  2977,    -1,
      -1,  1374,  1375,    -1,    -1,    -1,  1379,    -1,    -1,    -1,
    1383,    -1,    -1,  1386,  1387,  1388,  1389,  1390,  1391,  1392,
    1393,  1394,    -1,    -1,  1397,   405,    -1,     8,   380,    -1,
      11,  1404,    -1,  1513,  1407,    16,    17,    18,    19,    -1,
      -1,    -1,    -1,  1523,    -1,     3,  1526,     5,    -1,    -1,
      -1,    -1,   432,    -1,    -1,    -1,  1429,    -1,    -1,    -1,
     440,    42,    -1,    -1,    -1,    -1,    -1,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   457,    -1,   459,
     460,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1461,  1462,
      -1,    -1,    -1,    74,    -1,    -1,    -1,     3,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    -1,    -1,   496,  1597,  1598,   499,
     500,   501,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,
     482,    37,    -1,   485,   486,   487,    42,   489,   490,   491,
     492,   493,   494,    49,  1624,    -1,    -1,    -1,    -1,    -1,
     502,     8,   110,   111,    11,    -1,    -1,  1637,    15,    16,
      17,    18,    19,    -1,    -1,    -1,    -1,  1540,    74,    -1,
    1543,  1544,    -1,  1546,   218,    -1,    -1,    34,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    42,    -1,    -1,    -1,    -1,
      -1,    -1,    49,    -1,   175,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1575,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     191,    -1,    -1,    -1,    -1,   196,    -1,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1639,    -1,    -1,   175,
      -1,    -1,    -1,  1646,    -1,    -1,    -1,    -1,  1651,    -1,
      -1,    -1,    -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,
     196,    -1,    -1,   251,   252,   253,   254,   255,   256,    -1,
      -1,   259,   260,    -1,    -1,    -1,   944,   288,    -1,    -1,
      -1,    -1,   218,   219,    -1,  1795,    -1,  1690,   175,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,  1701,    -1,
    1703,  1704,    -1,    -1,   191,    -1,    -1,    -1,  1711,   196,
      -1,    -1,  1715,    -1,    -1,  1718,    -1,   985,    -1,  1829,
    1830,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   218,   219,    -1,    -1,   271,    -1,    -1,   274,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,
      -1,  1754,   288,    -1,  1757,   291,  1759,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,   380,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   365,   366,    -1,
      -1,    -1,    -1,    34,   271,    -1,    -1,   274,    -1,   110,
     111,    42,    -1,    -1,    -1,    -1,    -1,    -1,    49,    -1,
      -1,   288,    -1,    -1,   291,    -1,    -1,    -1,    -1,    -1,
      -1,   485,   486,   487,    -1,   489,   490,   491,   492,   493,
     494,  1824,    -1,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1101,    -1,    -1,  1839,  1840,    -1,    -1,
    1108,    -1,    -1,     8,   380,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,  1858,    -1,    -1,    -1,    -1,
    1970,    -1,    -1,    -1,    -1,   186,   187,    -1,    -1,    34,
      -1,   482,    -1,    -1,   485,   486,   487,    42,   489,   490,
     491,   492,   493,   494,    49,    -1,    -1,    -1,    -1,    -1,
     478,   479,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      -1,    -1,    -1,    -1,  1917,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   175,    -1,    -1,    -1,    -1,    -1,
     251,   252,   253,   254,   255,   256,    -1,    -1,   259,   260,
     191,    -1,    -1,    -1,    -1,   196,   482,    -1,    -1,   485,
     486,   487,    -1,   489,   490,   491,   492,   493,   494,  1962,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   218,   219,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   482,    -1,    -1,   485,   486,
     487,    -1,   489,   490,   491,   492,   493,   494,    -1,    -1,
     175,    -1,   499,    -1,    -1,  2018,    -1,    -1,    -1,    -1,
     271,    -1,    -1,   274,  2027,    -1,   191,  2030,    -1,    -1,
    2033,   196,    -1,    -1,    -1,    -1,    -1,   288,    -1,    -1,
     291,    -1,    -1,    -1,   365,   366,    -1,    -1,  1316,    -1,
      -1,    -1,    -1,   218,   219,    -1,    -1,  2060,  2061,  1327,
      -1,  2064,    -1,  1331,    -1,    -1,    -1,    -1,   233,  1337,
    1338,  1339,    -1,  2076,    -1,    -1,    -1,    -1,  1346,    -1,
      -1,    -1,  2085,    -1,    -1,  2088,    -1,  2090,    -1,    -1,
       8,    -1,    -1,    11,    -1,  2098,    -1,    15,    16,    17,
      18,    19,    -1,  2106,  2107,    -1,   271,    -1,    -1,   274,
    2220,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      -1,    -1,    -1,   288,    42,    -1,   291,    -1,    -1,   380,
      -1,    49,    -1,  2136,    -1,  1403,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2146,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,   478,   479,  2162,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   498,  1446,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1460,    -1,    -1,    -1,    -1,  1465,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   482,    -1,    -1,   485,   486,   487,    -1,   489,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,   499,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   175,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,   196,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2298,    -1,    -1,    -1,    -1,
     218,   219,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   233,    -1,   482,    -1,    -1,
     485,   486,   487,    -1,   489,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,   499,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2347,  2348,    -1,    -1,    -1,  2352,
      -1,    -1,    -1,   271,  2357,    -1,   274,  2360,  2361,    -1,
    2470,    -1,  2365,    -1,    -1,  2475,    -1,    -1,     8,    -1,
     288,    11,    -1,   291,    -1,    15,    16,    17,    18,    19,
      -1,  1649,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,
    1668,    -1,    42,    -1,    -1,    -1,    -1,    -1,  2411,    49,
      -1,    -1,    -1,    -1,  2524,  2525,    -1,    -1,  1686,    -1,
    1688,  1689,    -1,  1691,    -1,  1693,    -1,    -1,    -1,  1697,
      -1,    -1,  1700,    -1,    74,    -1,    -1,  1705,    -1,    -1,
    1708,    -1,  2445,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1720,    -1,    -1,    -1,  1724,  1725,  1726,  1727,
    1728,  1729,   380,    -1,    -1,    -1,    -1,  1735,  1736,  2472,
    1738,  1739,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1750,    -1,    -1,  1753,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1761,  1762,  1763,  1764,  1765,  1766,  1767,
    1768,  1769,  1770,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1802,   175,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   191,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   482,    -1,    -1,   485,   486,   487,
      -1,   489,   490,   491,   492,   493,   494,    -1,   218,   219,
      -1,   499,    -1,  2693,  2694,    -1,    -1,    -1,    -1,  2592,
      -1,    -1,    -1,   233,  2704,    -1,    -1,    -1,  2601,  2602,
      -1,    -1,  2605,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   271,    -1,    -1,   274,    -1,    -1,    -1,    -1,  2642,
    2643,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,    -1,
      -1,   291,    -1,  2656,  1922,  1923,  1924,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2674,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    -1,    16,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    -1,    -1,    -1,    -1,
      -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,    42,
     380,    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,  2017,
      -1,    -1,    -1,    -1,    -1,  2023,    -1,    74,    -1,    -1,
      -1,  2764,    -1,    -1,    -1,    -1,    -1,    -1,  2036,  2037,
    2038,    74,  2040,  2041,  2042,  2043,  2044,    -1,  2781,  2047,
    2048,  2049,  2050,  2051,  2052,  2053,  2054,  2055,  2056,  2057,
      -1,    -1,  2795,    -1,    -1,  2798,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2077,
    2813,    -1,  2080,    -1,  2082,    -1,    -1,    -1,  2086,  2087,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2100,  2101,  2102,  2103,    -1,  2105,    -1,    -1,
      -1,   144,   482,    -1,    -1,   485,   486,   487,    -1,   489,
     490,   491,   492,   493,   494,    -1,    -1,    -1,   175,   499,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2977,    -1,    -1,
      -1,    -1,   175,    -1,   191,    -1,    -1,    -1,    -1,   196,
      -1,    -1,    -1,    -1,    -1,    -1,  2889,    -1,   191,    -1,
    2893,    -1,    -1,   196,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   218,   219,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2181,    -1,     8,   233,    -1,    11,    -1,
    2923,    -1,    15,    16,    17,    18,    19,    -1,    -1,    -1,
     233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      -1,    -1,    -1,  2956,   271,    -1,    49,   274,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   288,    -1,    -1,   291,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    -1,    -1,    -1,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3002,
    3003,    -1,    -1,    -1,  2272,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2299,  3035,    -1,    -1,  2303,  2304,    -1,  2306,    -1,
      -1,  2309,  2310,  2311,  2312,  2313,    -1,    -1,    -1,  2317,
    2318,  2319,  2320,  2321,  2322,  2323,  2324,  2325,  2326,  2327,
    2328,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2339,    -1,  3076,    -1,    -1,    -1,   380,  2346,    -1,
      -1,  2349,   175,  2351,    -1,    -1,    -1,  2355,    -1,    -1,
    2358,  2359,    -1,    -1,  2362,  2363,    -1,     8,   191,    -1,
      11,    -1,    -1,   196,    15,    16,    17,    18,    19,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    34,    -1,   218,   219,    -1,    -1,    -1,
      -1,    42,    -1,    -1,  2402,    -1,    -1,    -1,    49,    -1,
     233,    -1,  2410,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    -1,    -1,  2423,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    -1,   482,    -1,    -1,   485,   486,
     487,    56,   489,   490,   491,   492,   493,   494,   271,   482,
      -1,   274,   499,    -1,    -1,  2453,   489,   490,   491,   492,
     493,   494,    -1,    -1,    -1,   288,    -1,    -1,   291,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,    -1,    -1,    34,    -1,    -1,    -1,
      -1,   116,    -1,    -1,    42,     8,    -1,    -1,    11,    -1,
      -1,    49,    15,    16,    17,    18,    19,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    34,    -1,    -1,   175,    -1,    74,    -1,    -1,    42,
      -1,    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,
     191,    -1,    -1,    -1,    -1,   196,    -1,   380,    -1,   174,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,
      -1,    74,    -1,    -1,    -1,    -1,    -1,   218,   219,    -1,
      -1,    -1,    -1,   198,  2582,    -1,    -1,    -1,  2586,    -1,
      -1,    -1,   233,    -1,    -1,    24,    -1,  2595,  2596,  2597,
      -1,    30,  2600,    -1,    -1,  2603,  2604,    -1,    37,    -1,
    2608,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    56,    -1,    -1,
     271,    -1,    -1,   274,   249,    -1,    91,   175,    -1,    -1,
      -1,    -1,   257,    -1,    -1,    -1,    -1,   288,    -1,    -1,
     291,    -1,    -1,   191,   269,    -1,   271,    -1,   196,   482,
      -1,    -1,   485,   486,   487,    -1,   489,   490,   491,   492,
     493,   494,   175,  2671,    -1,    -1,   499,    -1,   107,  2677,
     218,   219,    -1,    -1,    -1,   300,    -1,    -1,   191,    -1,
     145,    -1,  2690,   196,    -1,   233,    -1,    -1,    -1,    -1,
     155,    -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,    -1,
      -1,    -1,   167,    -1,    -1,   218,   219,   172,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     233,    -1,   347,   271,    -1,    -1,   274,    -1,    -1,   380,
      -1,  2739,  2740,    -1,   199,    -1,    -1,  2745,  2746,  2747,
     288,    -1,    -1,   291,   369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   271,   198,
      -1,   274,    -1,    -1,   389,    -1,   391,    -1,    -1,   394,
      -1,    -1,    -1,    -1,    -1,   288,    -1,    -1,   291,   244,
      -1,  2789,  2790,   248,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2804,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2814,    -1,    -1,    -1,
     249,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   257,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     269,   482,   380,    -1,   485,   486,   487,    -1,   489,   490,
     491,   492,   493,   494,    -1,    -1,   311,    -1,   499,    -1,
    2858,   290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     325,   300,    -1,    -1,    -1,    -1,    -1,   380,  2876,    -1,
      -1,    -1,    -1,   498,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2898,    -1,    -1,   358,    -1,    -1,   361,    -1,    -1,    -1,
      -1,    -1,   341,    -1,   369,    -1,   345,   372,   347,  2917,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   391,    -1,    -1,    -1,
     369,    -1,    -1,    -1,   482,    -1,   375,   485,   486,   487,
     405,   489,   490,   491,   492,   493,   494,   412,    -1,    -1,
     389,   499,    -1,  2961,    -1,    -1,   421,    -1,    -1,    -1,
      -1,    -1,   427,    -1,    -1,    -1,    -1,    -1,    -1,   482,
      -1,    -1,   485,   486,   487,    -1,   489,   490,   491,   492,
     493,   494,  2990,    -1,    -1,    -1,   499,   452,    -1,    -1,
      -1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,   443,    -1,    -1,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    -1,    -1,    36,    -1,    -1,    39,    40,
    3038,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    75,    -1,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
     131,    -1,   133,   134,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,    -1,   178,    -1,   180,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,    -1,   215,    -1,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,    -1,    -1,   230,
     231,   232,   233,    -1,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,    -1,    -1,   288,   289,   290,
      -1,    -1,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,    -1,    -1,    -1,    -1,    -1,   489,   490,
     491,    -1,    -1,    -1,    -1,   496,    -1,   498,   499,    -1,
      -1,    -1,   503,    -1,   505,   506,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    39,    40,    -1,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    75,    -1,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
      -1,   178,    -1,   180,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,    -1,   215,    -1,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,    -1,    -1,   230,   231,   232,   233,    -1,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,    -1,
      -1,   288,   289,   290,    -1,    -1,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
      -1,   458,    -1,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,    -1,    -1,
      -1,    -1,   489,   490,    -1,    -1,    -1,    -1,    -1,   496,
      -1,   498,   499,    -1,    -1,    -1,   503,    -1,   505,   506,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    75,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,    -1,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,    -1,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,    -1,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,    -1,    -1,    -1,    -1,   489,   490,    -1,    -1,
      -1,    -1,    -1,   496,    -1,   498,    -1,    -1,    -1,    -1,
     503,    -1,   505,   506,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    -1,
      29,    30,    31,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      39,    40,    -1,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    75,    -1,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
     169,   170,   171,   172,   173,   174,   175,   176,    -1,   178,
      -1,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,    -1,   215,    -1,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,    -1,
     229,   230,   231,   232,   233,    -1,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,    -1,   284,   285,    -1,    -1,   288,
     289,   290,    -1,    -1,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,    -1,    -1,   434,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,    -1,   458,
      -1,    -1,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,    -1,    -1,    -1,    -1,    -1,
     489,   490,    -1,    -1,    -1,    -1,    -1,   496,    -1,   498,
      -1,    -1,    -1,    -1,   503,    -1,   505,   506,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    -1,    -1,
      35,    36,    -1,    -1,    39,    40,    -1,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      75,    -1,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,   162,   163,   164,
      -1,   166,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,    -1,   178,    -1,   180,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
     215,    -1,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,    -1,    -1,   230,   231,   232,   233,    -1,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,    -1,
      -1,    -1,    -1,    -1,   489,   490,    -1,    -1,    -1,    -1,
      -1,   496,    -1,   498,    -1,    -1,    -1,    -1,   503,    -1,
     505,   506,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    -1,    -1,    36,    -1,    -1,    39,    40,
      -1,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    75,    -1,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,    -1,   178,    -1,   180,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,    -1,   215,    -1,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,    -1,    -1,   230,
     231,   232,   233,    -1,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,    -1,    -1,   288,   289,   290,
      -1,    -1,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,    -1,    -1,    -1,    -1,    -1,   489,   490,
     491,    -1,    -1,    -1,    -1,   496,    -1,   498,    -1,    -1,
      -1,    -1,   503,    -1,   505,   506,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    39,    40,    -1,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    75,    -1,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
      -1,   178,    -1,   180,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,    -1,   215,    -1,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,    -1,    -1,   230,   231,   232,   233,    -1,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,    -1,
      -1,   288,   289,   290,    -1,    -1,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
      -1,   458,    -1,    -1,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,    -1,    -1,    -1,
      -1,    -1,   489,   490,   491,    -1,    -1,    -1,    -1,   496,
      -1,   498,    -1,    -1,    -1,    -1,   503,    -1,   505,   506,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    75,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,    -1,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,    -1,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,    -1,    -1,    -1,    -1,    -1,   489,   490,   491,    -1,
      -1,    -1,    -1,   496,    -1,   498,    -1,    -1,    -1,    -1,
     503,    -1,   505,   506,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      39,    40,    -1,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    75,    -1,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,    -1,   178,
      -1,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,    -1,   215,    -1,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,    -1,
      -1,   230,   231,   232,   233,    -1,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,    -1,   284,   285,    -1,    -1,   288,
     289,   290,    -1,    -1,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,    -1,    -1,   434,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,    -1,   458,
      -1,    -1,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,    -1,    -1,    -1,    -1,    -1,
     489,   490,    -1,    -1,    -1,    -1,    -1,   496,    -1,   498,
      -1,    -1,    -1,    -1,   503,    -1,   505,   506,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
      -1,    36,    -1,    -1,    39,    40,    -1,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      75,    -1,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,   162,   163,   164,
      -1,   166,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,    -1,   178,    -1,   180,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
     215,    -1,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,    -1,    -1,   230,   231,   232,   233,    -1,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,    -1,
      -1,    -1,    -1,    -1,   489,   490,    -1,    -1,    -1,    -1,
      -1,   496,    -1,   498,   499,    -1,    -1,    -1,   503,    -1,
     505,   506,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    -1,    29,    30,
      31,    -1,    -1,    -1,    -1,    36,    -1,    -1,    39,    40,
      -1,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    75,    -1,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,    -1,   178,    -1,   180,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,    -1,   215,    -1,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,    -1,    -1,   230,
     231,   232,   233,    -1,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,    -1,    -1,   288,   289,   290,
      -1,    -1,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,    -1,    -1,    -1,    -1,    -1,   489,   490,
      -1,    -1,    -1,    -1,    -1,   496,    -1,   498,    -1,    -1,
      -1,    -1,   503,    -1,   505,   506,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    39,    40,    -1,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    75,    -1,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
      -1,   178,    -1,   180,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,    -1,   215,    -1,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,    -1,    -1,   230,   231,   232,   233,    -1,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,    -1,
      -1,   288,   289,   290,    -1,    -1,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
      -1,   458,    -1,    -1,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,    -1,    -1,    -1,
      -1,    -1,   489,   490,    -1,    -1,    -1,    -1,    -1,   496,
      -1,   498,   499,    -1,    -1,    -1,   503,    -1,   505,   506,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    75,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,   169,   170,   171,   172,
     173,   174,   175,   176,    -1,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,    -1,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,    -1,    -1,    -1,    -1,    -1,   489,   490,    -1,    -1,
      -1,    -1,    -1,   496,    -1,   498,    -1,    -1,    -1,    -1,
     503,    -1,   505,   506,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    -1,
      29,    30,    31,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      39,    40,    -1,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    75,    -1,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,    -1,   178,
      -1,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,    -1,   215,    -1,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,    -1,
      -1,   230,   231,   232,   233,    -1,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,    -1,   284,   285,    -1,    -1,   288,
     289,   290,    -1,    -1,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,    -1,    -1,   434,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,    -1,   458,
      -1,    -1,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,    -1,    -1,    -1,    -1,    -1,
     489,   490,    -1,    -1,    -1,    -1,    -1,   496,    -1,   498,
      -1,    -1,    -1,    -1,   503,    -1,   505,   506,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
      -1,    36,    -1,    -1,    39,    40,    -1,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      75,    -1,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,   162,   163,   164,
      -1,   166,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,    -1,   178,    -1,   180,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
     215,    -1,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,    -1,    -1,   230,   231,   232,   233,    -1,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,    -1,
      -1,    -1,    -1,    -1,   489,   490,    -1,    -1,    -1,    -1,
      -1,   496,    -1,   498,    -1,    -1,    -1,    -1,   503,    -1,
     505,   506,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    -1,    29,    30,
      31,    -1,    -1,    -1,    -1,    36,    -1,    -1,    39,    40,
      -1,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    75,    -1,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,    -1,   178,    -1,   180,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,    -1,   215,    -1,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,    -1,    -1,   230,
     231,   232,   233,    -1,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,    -1,    -1,   288,   289,   290,
      -1,    -1,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,    -1,    -1,    -1,    -1,    -1,   489,   490,
      -1,    -1,    -1,    -1,    -1,   496,    -1,   498,    -1,    -1,
      -1,    -1,   503,    -1,   505,   506,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    39,    40,    -1,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    75,    -1,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
      -1,   178,    -1,   180,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,    -1,   215,    -1,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,    -1,    -1,   230,   231,   232,   233,    -1,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,    -1,
      -1,   288,   289,   290,    -1,    -1,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
      -1,   458,    -1,    -1,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,    -1,    -1,    -1,
      -1,    -1,   489,   490,    -1,    -1,    -1,    -1,    -1,   496,
      -1,   498,    -1,    -1,    -1,    -1,   503,    -1,   505,   506,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    75,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,    -1,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,    -1,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,    -1,    -1,    -1,    -1,    -1,   489,   490,    -1,    -1,
      -1,    -1,    -1,   496,    -1,   498,    -1,    -1,    -1,    -1,
     503,    -1,   505,   506,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    -1,
      29,    30,    31,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      39,    40,    -1,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    75,    -1,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,    -1,   178,
      -1,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,    -1,   215,    -1,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,    -1,
      -1,   230,   231,   232,   233,    -1,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,    -1,   284,   285,    -1,    -1,   288,
     289,   290,    -1,    -1,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,    -1,    -1,   434,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,    -1,   458,
      -1,    -1,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,    -1,    -1,    -1,    -1,    -1,
     489,   490,    -1,    -1,    -1,    -1,    -1,   496,    -1,   498,
      -1,    -1,    -1,    -1,   503,    -1,   505,   506,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
      -1,    36,    -1,    -1,    39,    40,    -1,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      75,    -1,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,   162,   163,   164,
      -1,   166,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,    -1,   178,    -1,   180,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
     215,    -1,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,    -1,    -1,   230,   231,   232,   233,    -1,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,    -1,
      -1,    -1,    -1,    -1,   489,   490,    -1,    -1,    -1,    -1,
      -1,   496,    -1,   498,    -1,    -1,    -1,    -1,   503,    -1,
     505,   506,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    -1,    29,    30,
      31,    -1,    -1,    -1,    -1,    36,    -1,    -1,    39,    40,
      -1,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    75,    -1,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,    -1,   178,    -1,   180,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,    -1,   215,    -1,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,    -1,    -1,   230,
     231,   232,   233,    -1,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,    -1,    -1,   288,   289,   290,
      -1,    -1,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,    -1,    -1,    -1,    -1,    -1,   489,   490,
      -1,    -1,    -1,    -1,    -1,   496,    -1,   498,    -1,    -1,
      -1,    -1,   503,    -1,   505,   506,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    39,    40,    -1,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    -1,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    75,    -1,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
      -1,   178,    -1,   180,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,    -1,   215,    -1,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,    -1,    -1,   230,   231,   232,   233,    -1,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,    -1,
      -1,   288,   289,   290,    -1,    -1,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
      -1,   458,    -1,    -1,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,    -1,    -1,    -1,
      -1,    -1,   489,   490,    -1,    -1,    -1,    -1,    -1,   496,
      -1,   498,    -1,    -1,    -1,    -1,   503,    -1,   505,   506,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    75,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,    -1,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,    -1,    -1,   220,   221,   222,
     223,   224,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,    -1,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,    -1,   272,
     273,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,    -1,    -1,    -1,    -1,    -1,   489,   490,    -1,    -1,
      -1,    -1,    -1,   496,    -1,   498,    -1,    -1,    -1,    -1,
     503,    -1,   505,   506,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    -1,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      39,    40,    -1,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    75,    -1,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,    -1,   178,
      -1,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,    -1,   215,    -1,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,    -1,
      -1,   230,   231,   232,   233,    -1,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,    -1,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,    -1,   284,   285,    -1,    -1,   288,
     289,   290,    -1,    -1,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,    -1,    -1,   434,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,    -1,   458,
      -1,    -1,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     489,   490,    -1,    -1,     3,     4,     5,     6,     7,   498,
       9,    10,    -1,    -1,    -1,    -1,   505,   506,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    -1,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      39,    40,    -1,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    75,    -1,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,    -1,   178,
      -1,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,    -1,   215,    -1,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,    -1,
      -1,   230,   231,   232,   233,    -1,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,    -1,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,    -1,   284,   285,    -1,    -1,   288,
     289,   290,    -1,    -1,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,    -1,    -1,   434,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,    -1,   458,
      -1,    -1,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     489,   490,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   498,
      -1,    -1,    -1,    -1,    -1,    -1,   505,   506,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      75,    -1,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,   162,   163,   164,
      -1,   166,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,    -1,   178,    -1,   180,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
     215,    -1,   217,    -1,   219,   220,   221,   222,   223,   224,
     225,   226,   227,    -1,    -1,   230,   231,   232,   233,    -1,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,    -1,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   489,   490,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   498,    -1,    -1,    -1,    -1,    -1,    -1,
     505,   506,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    -1,    29,    30,
      31,    -1,    -1,    -1,    -1,    36,    -1,    -1,    39,    40,
      -1,    42,    43,    44,    45,    46,    47,    48,    -1,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    75,    -1,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,    -1,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,    -1,   176,    -1,   178,    -1,   180,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,    -1,    -1,   230,
     231,   232,    -1,    -1,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
      -1,   272,   273,    -1,   275,   276,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,    -1,    -1,   288,   289,   290,
      -1,    -1,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   489,   490,
       3,    -1,    -1,    -1,    -1,   496,    -1,   498,    -1,    -1,
      -1,    -1,   503,    -1,   505,   506,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    37,    -1,    39,    40,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    -1,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    -1,    -1,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    -1,    -1,    77,    78,    79,    80,    81,    82,
      -1,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,    -1,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,    -1,    -1,   171,   172,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,    -1,    -1,   220,   221,   222,
     223,   224,   225,   226,   227,    -1,    -1,   230,   231,   232,
      -1,    -1,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,    -1,   272,
     273,    -1,   275,    -1,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,
     293,   294,    -1,   296,    -1,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,    -1,   451,   452,
     453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,    -1,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   499,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    75,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,    -1,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,    -1,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,    -1,   230,   231,   232,
     233,    -1,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,    -1,   272,
     273,   274,   275,    -1,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,   287,   288,   289,   290,    -1,    -1,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,    -1,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,    -1,
      -1,   484,     3,     4,     5,    -1,    -1,    -1,     9,    -1,
      -1,    -1,    -1,    -1,    -1,   498,    -1,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    -1,    29,    30,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,
      -1,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      -1,    -1,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    75,    -1,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
     101,   102,    -1,    -1,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,    -1,   178,    -1,   180,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,    -1,   215,    -1,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,    -1,    -1,   230,
     231,   232,   233,    -1,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
      -1,   272,   273,   274,   275,    -1,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,   286,    -1,   288,   289,   290,
      -1,    -1,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,     3,    -1,     5,    -1,    -1,    -1,    -1,   489,   490,
     491,    -1,    -1,    -1,    -1,    -1,    -1,   498,    20,    21,
      22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    55,    56,    57,    58,    59,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    75,    -1,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    -1,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,    -1,   119,   120,   121,
     122,   123,   124,    -1,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,    -1,   159,    -1,   161,
     162,   163,   164,    -1,   166,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,    -1,   178,    -1,   180,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,    -1,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,    -1,   230,   231,
     232,   233,    -1,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,    -1,
     272,   273,   274,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,   287,   288,   289,   290,    -1,
      -1,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,    -1,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   498,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    -1,    -1,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    75,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,   101,   102,
      -1,    -1,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,    -1,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,    -1,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,    -1,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,    -1,   272,
     273,   274,   275,    -1,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,    -1,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,     3,
      -1,   484,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   498,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      -1,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,    -1,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,    -1,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,    -1,    -1,   230,   231,   232,   233,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,    -1,   272,   273,
     274,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   498,    20,    21,    22,    23,    24,
      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      55,    56,    57,    58,    59,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      75,    -1,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,    -1,   159,    -1,   161,   162,   163,   164,
      -1,   166,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,    -1,   178,    -1,   180,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
     215,    -1,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,    -1,    -1,   230,   231,   232,   233,    -1,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,    -1,   272,   273,   274,
     275,    -1,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   498,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    -1,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    -1,    -1,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    -1,
      -1,    77,    78,    79,    80,    81,    82,    -1,    84,    85,
      86,    -1,    88,    89,    90,    91,    92,    93,    -1,    -1,
      96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,    -1,   119,   120,   121,   122,   123,   124,    -1,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,    -1,   159,    -1,   161,   162,   163,   164,    -1,
     166,    -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,   220,    -1,   222,   223,   224,   225,
     226,   227,    -1,    -1,   230,    -1,   232,    -1,    -1,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,    -1,
     266,   267,   268,   269,   270,    -1,   272,   273,    -1,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,    -1,
     296,    -1,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,    -1,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,   405,
     406,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,    -1,   451,   452,   453,   454,   455,
      -1,    -1,   458,    -1,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,     3,    -1,   484,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   498,    20,    21,    22,    23,    24,    25,    26,
      27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    39,    40,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    -1,    52,    53,    -1,    55,    56,
      57,    58,    59,    60,    -1,    -1,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,
      77,    78,    79,    80,    81,    82,    -1,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,    -1,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,
      -1,   178,    -1,   180,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,   213,    -1,   215,    -1,
     217,    -1,    -1,   220,    -1,   222,   223,   224,   225,   226,
     227,    -1,    -1,   230,    -1,   232,    -1,    -1,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,    -1,   266,
     267,   268,   269,   270,    -1,   272,   273,    -1,   275,    -1,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,    -1,
      -1,   288,   289,   290,    -1,    -1,   293,   294,    -1,   296,
      -1,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,    -1,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,   405,   406,
      -1,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,    -1,   451,   452,   453,   454,   455,    -1,
      -1,   458,    -1,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,    -1,     3,   484,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   498,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    39,    40,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    -1,    52,    53,    -1,    55,    56,
      57,    58,    59,    60,    -1,    -1,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,
      77,    78,    79,    80,    81,    82,    -1,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,    -1,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,
      -1,   178,    -1,   180,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,   213,    -1,   215,    -1,
     217,    -1,    -1,   220,    -1,   222,   223,   224,   225,   226,
     227,    -1,    -1,   230,    -1,   232,    -1,    -1,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,    -1,   266,
     267,   268,   269,   270,    -1,   272,   273,    -1,   275,    -1,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,    -1,
      -1,   288,   289,   290,    -1,    -1,   293,   294,    -1,   296,
      -1,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,   369,   370,   371,   372,   373,    -1,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,
      -1,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,    -1,   451,   452,   453,   454,   455,    -1,
      -1,   458,    -1,    -1,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   498,    20,    21,    22,    23,    24,    25,    26,    27,
      -1,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    39,    40,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    -1,    52,    53,    -1,    55,    56,    57,
      58,    59,    60,    -1,    -1,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,    77,
      78,    79,    80,    81,    82,    -1,    84,    85,    86,    -1,
      88,    89,    90,    91,    92,    93,    -1,    -1,    96,    97,
      98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
      -1,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
      -1,   159,    -1,   161,   162,   163,   164,    -1,   166,    -1,
     168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,    -1,   217,
      -1,    -1,   220,    -1,   222,   223,   224,   225,   226,   227,
      -1,    -1,   230,    -1,   232,    -1,    -1,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,    -1,   266,   267,
     268,   269,   270,    -1,   272,   273,    -1,   275,    -1,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,    -1,
     288,   289,   290,    -1,    -1,   293,   294,    -1,   296,    -1,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,   369,   370,   371,   372,   373,    -1,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,    -1,   406,    -1,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,   437,
     438,    -1,    -1,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,    -1,   451,   452,   453,   454,   455,    -1,    -1,
     458,    -1,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     498,    20,    21,    22,    23,    24,    25,    26,    27,    -1,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      39,    40,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    -1,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    -1,    -1,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
      79,    80,    81,    82,    -1,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    -1,    96,    97,    98,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,    -1,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
      -1,    -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,   213,    -1,   215,    -1,   217,    -1,
      -1,   220,    -1,   222,   223,   224,   225,   226,   227,    -1,
      -1,   230,    -1,   232,    -1,    -1,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,    -1,   266,   267,   268,
     269,   270,    -1,   272,   273,    -1,   275,    -1,   277,   278,
     279,   280,   281,   282,    -1,   284,   285,    -1,    -1,   288,
     289,   290,    -1,    -1,   293,   294,    -1,   296,    -1,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,   372,   373,    -1,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,    -1,   406,    -1,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,    -1,   424,   425,   426,   427,   428,
     429,   430,   431,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,    -1,   451,   452,   453,   454,   455,    -1,    -1,   458,
      -1,    -1,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   498,
      20,    21,    22,    23,    24,    25,    26,    27,    -1,    29,
      30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,
      40,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    -1,    52,    53,    -1,    55,    56,    57,    58,    59,
      60,    -1,    -1,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    -1,    -1,    77,    78,    79,
      80,    81,    82,    -1,    84,    85,    86,    -1,    88,    89,
      90,    91,    92,    93,    -1,    -1,    96,    97,    98,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,    -1,   119,
     120,   121,   122,   123,   124,    -1,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,    -1,   159,
      -1,   161,   162,   163,   164,    -1,   166,    -1,   168,    -1,
      -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,
     220,    -1,   222,   223,   224,   225,   226,   227,    -1,    -1,
     230,    -1,   232,    -1,    -1,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,    -1,   266,   267,   268,   269,
     270,    -1,   272,   273,    -1,   275,    -1,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,    -1,   288,   289,
     290,    -1,    -1,   293,   294,    -1,   296,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,   369,
     370,   371,   372,   373,    -1,   375,   376,   377,   378,   379,
      -1,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,    -1,   406,    -1,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,    -1,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
      -1,   451,   452,   453,   454,   455,    -1,    -1,   458,    -1,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   498,    20,
      21,    22,    23,    24,    25,    26,    27,    -1,    29,    30,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      -1,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      -1,    -1,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    -1,    -1,    77,    78,    79,    80,
      81,    82,    -1,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,    -1,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,
      -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,   180,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,   220,
      -1,   222,   223,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,    -1,    -1,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,    -1,   266,   267,   268,   269,   270,
      -1,   272,   273,    -1,   275,    -1,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,    -1,    -1,   288,   289,   290,
      -1,    -1,   293,   294,    -1,   296,    -1,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,    -1,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,    -1,
     451,   452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,    -1,    -1,    -1,    -1,     3,     4,     5,    -1,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,   498,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,    -1,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,    -1,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,    -1,   295,   296,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,    -1,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,    -1,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,    -1,   421,    -1,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     478,   479,   480,   481,    -1,     3,    -1,   485,   486,   487,
       8,   489,   490,   491,   492,   493,   494,    -1,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      -1,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    39,    40,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    -1,    52,    53,    -1,    55,    56,    57,
      58,    59,    60,    -1,    -1,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,    77,
      78,    79,    80,    81,    82,    -1,    84,    85,    86,    -1,
      88,    89,    90,    91,    92,    93,    -1,    -1,    96,    97,
      98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
      -1,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
      -1,   159,    -1,   161,   162,   163,   164,    -1,   166,    -1,
     168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,    -1,   217,
      -1,    -1,   220,    -1,   222,   223,   224,   225,   226,   227,
      -1,    -1,   230,    -1,   232,    -1,    -1,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,    -1,   266,   267,
     268,   269,   270,    -1,   272,   273,    -1,   275,    -1,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,    -1,
     288,   289,   290,    -1,    -1,   293,   294,    -1,   296,    -1,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,   369,   370,   371,   372,   373,    -1,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,    -1,   406,    -1,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,   437,
     438,    -1,    -1,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,    -1,   451,   452,   453,   454,   455,    -1,    -1,
     458,    -1,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,    -1,    -1,    -1,   485,   486,   487,
      -1,   489,   490,   491,   492,   493,   494,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    34,    -1,    -1,     8,    -1,    -1,    11,
      -1,    42,    -1,    15,    16,    17,    18,    19,    49,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,     8,    -1,    74,    11,    -1,    -1,    49,    15,    16,
      17,    18,    19,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,
       8,    -1,    74,    11,    -1,    42,    -1,    15,    16,    17,
      18,    19,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    -1,    -1,    74,    -1,    -1,
      -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   175,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     191,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   175,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   218,   219,   191,
      -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,   175,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   218,   219,    -1,    -1,
      -1,    -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,   196,
      -1,   233,    -1,    -1,    -1,    -1,    -1,   175,    -1,    -1,
     271,    -1,    -1,   274,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   218,   219,   191,    -1,    -1,    -1,   288,   196,    -1,
     291,    -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,   271,
      -1,    -1,   274,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     218,   219,    -1,    -1,    -1,    -1,   288,    -1,    -1,   291,
      -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   271,    -1,    -1,   274,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   288,    -1,    -1,   291,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   271,    -1,    -1,   274,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
     288,    -1,    -1,   291,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   482,    -1,    -1,   485,   486,   487,    -1,   489,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,   499,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     482,    -1,    -1,   485,   486,   487,    -1,   489,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,   499,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   482,    -1,    -1,   485,   486,
     487,    -1,   489,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,   499,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,   482,    -1,    -1,   485,   486,   487,
      -1,   489,   490,   491,   492,   493,   494,    -1,    -1,   497,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   491,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    -1,    29,    30,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      -1,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      -1,    -1,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    -1,    -1,    77,    78,    79,    80,
      81,    82,    -1,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,    -1,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,
      -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,   180,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,   220,
      -1,   222,   223,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,    -1,    -1,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,    -1,   266,   267,   268,   269,   270,
      -1,   272,   273,    -1,   275,    -1,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,    -1,    -1,   288,   289,   290,
      -1,    -1,   293,   294,    -1,   296,    -1,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,    -1,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,    -1,
     451,   452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,     3,     4,     5,    -1,    -1,    -1,     9,    -1,    -1,
     491,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    55,    56,    57,    58,    59,    60,    -1,
      -1,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    75,    -1,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    -1,    95,    96,    97,    98,    99,   100,   101,
     102,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,   119,   120,   121,
     122,   123,   124,    -1,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
     162,   163,   164,    -1,   166,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,    -1,   178,    -1,   180,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,    -1,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,    -1,    -1,   230,   231,
     232,   233,    -1,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,    -1,
     272,   273,   274,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,   286,    -1,   288,   289,   290,    -1,
      -1,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
       3,     4,     5,    -1,    -1,    -1,     9,   489,   490,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    -1,    -1,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    75,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,   101,   102,
      -1,    -1,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,    -1,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,    -1,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,    -1,   272,
     273,   274,   275,    -1,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,   286,    -1,   288,   289,   290,    -1,    -1,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,     3,
       4,     5,    -1,    -1,    -1,     9,   489,   490,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      -1,    95,    96,    97,    98,    99,   100,   101,   102,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,    -1,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,    -1,    -1,   230,   231,   232,   233,
      -1,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,    -1,   272,   273,
     274,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,   286,    -1,   288,   289,   290,    -1,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,    -1,    -1,
       8,    -1,    -1,    11,    -1,   489,   490,    15,    16,    17,
      18,    19,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    -1,    -1,    34,
      -1,    49,    -1,    -1,    -1,    -1,    -1,    42,     8,    -1,
      -1,    11,    -1,    -1,    49,    15,    16,    17,    18,    19,
      -1,     8,    -1,    -1,    11,    -1,    74,    -1,    15,    16,
      17,    18,    19,    -1,    34,    -1,    -1,    -1,    -1,    74,
      -1,    -1,    42,    -1,    -1,    -1,    -1,    34,    -1,    49,
      37,    -1,    -1,    -1,    -1,    42,    -1,    -1,    -1,    -1,
      -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    -1,    -1,   125,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    -1,    -1,    -1,    -1,   175,    -1,    -1,
     165,    -1,    -1,    -1,    -1,   170,    -1,    34,    -1,    -1,
     175,    -1,    -1,   191,    -1,    42,    -1,    -1,   196,    -1,
      -1,    -1,    49,    -1,    -1,    -1,   191,    -1,    -1,    -1,
      -1,   196,    -1,    -1,   164,    -1,    -1,    -1,    -1,    -1,
     218,   219,    -1,    -1,    -1,   175,    -1,    74,    -1,    -1,
      -1,    -1,    -1,   218,   219,   233,    -1,    -1,   175,    -1,
      -1,   191,    -1,    -1,    -1,    -1,   196,    -1,   233,    -1,
      -1,    -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,   196,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   218,   219,
      -1,    -1,    -1,   271,    -1,    -1,   274,    -1,    -1,    -1,
      -1,   218,   219,   233,    -1,    -1,   271,    -1,    -1,   274,
     288,    -1,    -1,   291,    -1,    -1,   233,    -1,    -1,    -1,
      -1,    -1,    -1,   288,    -1,    -1,   291,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   271,    -1,    -1,   274,    -1,    -1,    -1,   175,    -1,
      -1,    -1,    -1,    -1,   271,    -1,    -1,   274,   288,    -1,
      -1,   291,    -1,    -1,   191,    -1,    -1,    -1,    -1,   196,
      -1,   288,    -1,    -1,   291,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   314,    -1,    -1,    -1,    -1,    -1,
      -1,   218,   219,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,    -1,    -1,    -1,   233,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,   380,    -1,    -1,    15,    16,
      17,    18,    19,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,
      37,    -1,    -1,    -1,   271,    42,    -1,   274,    -1,    -1,
     380,    -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   288,   440,   380,   291,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    74,    -1,    -1,
      -1,    -1,   309,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      -1,    -1,    -1,    -1,   482,    -1,    49,   485,   486,   487,
      -1,   489,   490,   491,   492,   493,   494,   482,    -1,    -1,
     485,   486,   487,    -1,   489,   490,   491,   492,   493,   494,
      -1,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   482,   380,    -1,   485,   486,   487,    -1,   489,
     490,   491,   492,   493,   494,   482,    -1,    -1,   485,   486,
     487,    -1,   489,   490,   491,   492,   493,   494,   175,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,   196,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    -1,    -1,    -1,    -1,
      -1,   218,   219,    -1,    -1,    -1,    -1,   170,    -1,    -1,
      34,    -1,   175,    37,    -1,    -1,   233,    -1,    42,    -1,
      -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,   191,    -1,
      -1,    -1,    -1,   196,    -1,   482,    -1,    -1,   485,   486,
     487,    -1,   489,   490,   491,   492,   493,   494,    -1,    -1,
      74,    -1,    -1,    -1,   271,   218,   219,   274,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
     233,   288,    11,    -1,   291,    -1,    15,    16,    17,    18,
      19,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    -1,    -1,    -1,    -1,   271,    -1,
      49,   274,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,   288,    11,    -1,   291,    -1,
      15,    16,    17,    18,    19,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,
      -1,   175,    37,    -1,    -1,    -1,    -1,    42,    -1,    -1,
      -1,    -1,    -1,   380,    49,    -1,    -1,   191,    -1,    -1,
      -1,    -1,   196,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    74,
      -1,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,   233,
      -1,    42,    -1,    -1,    -1,    -1,    -1,   380,    49,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   175,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    -1,    -1,    -1,   271,    -1,    -1,
     274,    -1,   191,    -1,    -1,    -1,    -1,   196,    -1,    -1,
      -1,    -1,    -1,    -1,   288,   482,    -1,   291,   485,   486,
     487,    -1,   489,   490,   491,   492,   493,   494,    -1,   218,
     219,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     175,    -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,    -1,    -1,
      -1,   196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   482,
      -1,    -1,   485,   486,   487,    -1,   489,   490,   491,   492,
     493,   494,   271,   218,   219,   274,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   175,    -1,    -1,    -1,   233,   288,
      -1,    -1,   291,    -1,    -1,    -1,   380,    -1,    -1,    -1,
     191,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   271,   218,   219,   274,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   233,   288,    -1,     8,   291,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
     271,   380,    -1,   274,    -1,    -1,    49,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,   482,    -1,
     291,   485,   486,   487,    -1,   489,   490,   491,   492,   493,
     494,    74,    -1,    -1,   413,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   482,    -1,    -1,   485,   486,   487,   380,
     489,   490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   175,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,
      -1,    -1,    -1,   196,    -1,    -1,    -1,   482,    -1,    -1,
     485,   486,   487,    -1,   489,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   482,    -1,    -1,   485,   486,   487,    -1,   489,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,   271,    -1,
      -1,   274,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   288,    -1,    -1,   291,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,    -1,     5,    -1,   482,
      -1,    -1,   485,   486,   487,    -1,   489,   490,   491,   492,
     493,   494,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    -1,    29,    30,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,
      -1,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    75,    -1,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,    -1,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,    -1,   178,    -1,   180,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,    -1,   215,    -1,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,    -1,    -1,   230,
     231,   232,   233,    -1,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
      -1,   272,   273,   274,   275,    -1,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,    -1,    -1,   288,   289,   290,
      -1,    -1,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    55,    56,    57,    58,    59,    60,    -1,
      -1,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    75,    -1,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    -1,    95,    96,    97,    98,    99,   100,   101,
     102,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,    -1,   119,   120,   121,
     122,   123,   124,    -1,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
     162,   163,   164,    -1,   166,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,    -1,   178,    -1,   180,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,    -1,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,    -1,    -1,   230,   231,
     232,   233,    -1,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,    -1,
     272,   273,   274,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,   286,    -1,   288,   289,   290,    -1,
      -1,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    -1,    -1,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    75,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,   101,   102,
      -1,    -1,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,    -1,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,    -1,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,    -1,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,    -1,   272,
     273,   274,   275,    -1,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      -1,    95,    96,    97,    98,    99,   100,   101,   102,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,    -1,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,    -1,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,    -1,    -1,   230,   231,   232,   233,
      -1,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,    -1,   272,   273,
     274,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    -1,    52,    53,    -1,
      55,    56,    57,    58,    59,    60,    -1,    -1,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      -1,    76,    77,    78,    79,    80,    81,    82,    -1,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,    -1,   159,    -1,   161,   162,   163,   164,
      -1,   166,   167,   168,    -1,    -1,    -1,   172,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
     215,    -1,   217,    -1,    -1,   220,    -1,   222,   223,   224,
     225,   226,   227,    -1,    -1,   230,    -1,   232,    -1,    -1,
     235,   236,   237,    -1,    -1,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
      -1,   266,   267,   268,   269,   270,    -1,   272,   273,    -1,
     275,    -1,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,
      -1,   296,    -1,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,   369,   370,   371,   372,   373,    -1,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,    -1,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,    -1,   451,   452,   453,   454,
     455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    -1,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    -1,    -1,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    -1,
      -1,    77,    78,    79,    80,    81,    82,    -1,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    -1,    -1,
      96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,    -1,   119,   120,   121,   122,   123,   124,    -1,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,    -1,   159,    -1,   161,   162,   163,   164,    -1,
     166,   167,   168,    -1,    -1,    -1,   172,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,   220,    -1,   222,   223,   224,   225,
     226,   227,    -1,    -1,   230,    -1,   232,   233,    -1,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,    -1,
     266,   267,   268,   269,   270,    -1,   272,   273,    -1,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,    -1,
     296,    -1,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,   369,   370,   371,   372,   373,    -1,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
     406,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,   433,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,    -1,   451,   452,   453,   454,   455,
      -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    -1,    29,    30,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    40,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    -1,    52,    53,    -1,    55,    56,
      57,    58,    59,    60,    -1,    -1,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,
      77,    78,    79,    80,    81,    82,    -1,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,    -1,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,
      -1,   178,    -1,   180,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,   213,    -1,   215,    -1,
     217,    -1,    -1,   220,    -1,   222,   223,   224,   225,   226,
     227,    -1,    -1,   230,    -1,   232,    -1,    -1,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,    -1,   266,
     267,   268,   269,   270,    -1,   272,   273,    -1,   275,    -1,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,    -1,
      -1,   288,   289,   290,    -1,    -1,   293,   294,    -1,   296,
      -1,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,   369,   370,   371,   372,   373,    -1,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,
      -1,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,    -1,   451,   452,   453,   454,   455,    -1,
      -1,   458,    -1,    -1,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      -1,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,    37,
      -1,    39,    40,    -1,    42,    43,    44,    45,    46,    47,
      48,    -1,    50,    51,    52,    53,    -1,    55,    56,    57,
      58,    59,    60,    -1,    -1,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    -1,    -1,    75,    -1,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    91,    92,    93,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,    -1,    -1,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
      -1,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,    -1,   152,   153,   154,   155,   156,    -1,
      -1,   159,    -1,   161,   162,   163,   164,    -1,   166,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,    -1,
     178,    -1,    -1,    -1,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,    -1,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
      -1,    -1,   230,   231,   232,   233,    -1,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,    -1,    -1,   272,   273,   274,   275,    -1,    -1,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,    -1,
     288,   289,   290,    -1,    -1,   293,    -1,   295,   296,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,    -1,   313,   314,    -1,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,    -1,   401,    -1,   403,   404,    -1,   406,   407,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,    -1,   421,    -1,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,   444,   445,    -1,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,    -1,
     458,    -1,    -1,   461,   462,   463,   464,   465,   466,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     478,   479,   480,   481,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    82,    -1,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,    -1,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,    -1,    -1,   220,    -1,   222,   223,
     224,   225,   226,   227,    -1,    -1,   230,    -1,   232,    -1,
      -1,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,    -1,   266,   267,   268,   269,   270,    -1,   272,   273,
      -1,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,   287,   288,   289,   290,    -1,    -1,   293,
     294,    -1,   296,    -1,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
      -1,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,    -1,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,   437,   438,    -1,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,    -1,   451,   452,   453,
     454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    -1,    52,    53,    -1,
      55,    56,    57,    58,    59,    60,    -1,    -1,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      -1,    -1,    77,    78,    79,    80,    81,    82,    -1,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,    -1,   159,    -1,   161,   162,   163,   164,
      -1,   166,    -1,   168,    -1,    -1,    -1,   172,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
     215,    -1,   217,    -1,    -1,   220,    -1,   222,   223,   224,
     225,   226,   227,    -1,    -1,   230,    -1,   232,    -1,    -1,
     235,   236,   237,    -1,    -1,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
      -1,   266,   267,   268,   269,   270,    -1,   272,   273,    -1,
     275,    -1,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,   287,   288,   289,   290,    -1,    -1,   293,   294,
      -1,   296,    -1,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,   369,   370,   371,   372,   373,    -1,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,    -1,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,    -1,   451,   452,   453,   454,
     455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    -1,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    -1,    -1,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    -1,
      -1,    77,    78,    79,    80,    81,    82,    -1,    84,    85,
      86,    -1,    88,    89,    90,    91,    92,    93,    -1,    -1,
      96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,    -1,   119,   120,   121,   122,   123,   124,    -1,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,    -1,   159,    -1,   161,   162,   163,   164,    -1,
     166,    -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,   220,    -1,   222,   223,   224,   225,
     226,   227,    -1,    -1,   230,    -1,   232,    -1,    -1,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,    -1,
     266,   267,   268,   269,   270,    -1,   272,   273,    -1,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,    -1,
     296,    -1,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,   369,   370,   371,   372,   373,    -1,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,   405,
     406,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,    -1,   451,   452,   453,   454,   455,
      -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,     3,     4,    -1,    -1,
      -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    39,    40,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    -1,    52,    53,    -1,    55,    56,
      57,    58,    59,    60,    -1,    -1,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,
      77,    78,    79,    80,    81,    82,    -1,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,    -1,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,
      -1,   178,    -1,   180,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,   213,    -1,   215,    -1,
     217,    -1,    -1,   220,    -1,   222,   223,   224,   225,   226,
     227,    -1,    -1,   230,    -1,   232,    -1,    -1,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,    -1,   266,
     267,   268,   269,   270,    -1,   272,   273,    -1,   275,    -1,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,    -1,
      -1,   288,   289,   290,    -1,    -1,   293,   294,    -1,   296,
      -1,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,   369,   370,   371,   372,   373,    -1,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,
      -1,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,    -1,   451,   452,   453,   454,   455,    -1,
      -1,   458,    -1,    -1,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    39,    40,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    -1,    52,    53,    -1,    55,    56,    57,
      58,    59,    60,    -1,    -1,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,    77,
      78,    79,    80,    81,    82,    -1,    84,    85,    86,    -1,
      88,    89,    90,    91,    92,    93,    -1,    -1,    96,    97,
      98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
      -1,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
      -1,   159,    -1,   161,   162,   163,   164,    -1,   166,    -1,
     168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,    -1,   217,
      -1,    -1,   220,    -1,   222,   223,   224,   225,   226,   227,
      -1,    -1,   230,    -1,   232,    -1,    -1,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,    -1,   266,   267,
     268,   269,   270,    -1,   272,   273,    -1,   275,    -1,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,    -1,
     288,   289,   290,    -1,    -1,   293,   294,    -1,   296,    -1,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,   369,   370,   371,   372,   373,    -1,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,    -1,   406,    -1,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,   437,
     438,    -1,    -1,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,    -1,   451,   452,   453,   454,   455,    -1,    -1,
     458,    -1,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    -1,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      39,    40,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    -1,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    -1,    -1,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
      79,    80,    81,    82,    -1,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    -1,    96,    97,    98,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,    -1,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
      -1,    -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,   213,    -1,   215,    -1,   217,    -1,
      -1,   220,    -1,   222,   223,   224,   225,   226,   227,    -1,
      -1,   230,    -1,   232,    -1,    -1,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,    -1,   266,   267,   268,
     269,   270,    -1,   272,   273,    -1,   275,    -1,   277,   278,
     279,   280,   281,   282,    -1,   284,   285,    -1,    -1,   288,
     289,   290,    -1,    -1,   293,   294,    -1,   296,    -1,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,   372,   373,    -1,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,    -1,   406,    -1,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,    -1,   424,   425,   426,   427,   428,
     429,   430,   431,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,    -1,   451,   452,   453,   454,   455,    -1,    -1,   458,
      -1,    -1,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,
      40,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    -1,    52,    53,    -1,    55,    56,    57,    58,    59,
      60,    -1,    -1,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    -1,    -1,    77,    78,    79,
      80,    81,    82,    -1,    84,    85,    86,    -1,    88,    89,
      90,    91,    92,    93,    -1,    -1,    96,    97,    98,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,    -1,   119,
     120,   121,   122,   123,   124,    -1,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,    -1,   159,
      -1,   161,   162,   163,   164,    -1,   166,    -1,   168,    -1,
      -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,
     220,    -1,   222,   223,   224,   225,   226,   227,    -1,    -1,
     230,    -1,   232,    -1,    -1,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,    -1,   266,   267,   268,   269,
     270,    -1,   272,   273,    -1,   275,    -1,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,    -1,   288,   289,
     290,    -1,    -1,   293,   294,    -1,   296,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,   369,
     370,   371,   372,   373,    -1,   375,   376,   377,   378,   379,
      -1,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,    -1,   406,    -1,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,    -1,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
      -1,   451,   452,   453,   454,   455,    -1,    -1,   458,    -1,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    -1,    29,    30,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      -1,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      -1,    -1,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    -1,    -1,    77,    78,    79,    80,
      81,    82,    -1,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,    -1,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,
      -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,   180,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,   220,
      -1,   222,   223,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,    -1,    -1,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,    -1,   266,   267,   268,   269,   270,
      -1,   272,   273,    -1,   275,    -1,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,    -1,    -1,   288,   289,   290,
      -1,    -1,   293,   294,    -1,   296,    -1,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,    -1,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,    -1,
     451,   452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    -1,
      52,    53,    -1,    55,    56,    57,    58,    59,    60,    -1,
      -1,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    -1,    -1,    77,    78,    79,    80,    81,
      82,    -1,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,    -1,   119,   120,   121,
     122,   123,   124,    -1,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,    -1,   159,    -1,   161,
     162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,    -1,
     172,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,    -1,   217,    -1,    -1,   220,    -1,
     222,   223,   224,   225,   226,   227,    -1,    -1,   230,    -1,
     232,    -1,    -1,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,    -1,   266,   267,   268,   269,   270,    -1,
     272,   273,    -1,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,
      -1,   293,   294,    -1,   296,    -1,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
     372,   373,    -1,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,    -1,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,    -1,   451,
     452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    -1,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    -1,    -1,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    -1,    -1,    77,    78,    79,    80,    81,    82,
      -1,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,    -1,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,    -1,    -1,   220,    -1,   222,
     223,   224,   225,   226,   227,    -1,    -1,   230,    -1,   232,
      -1,    -1,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,   268,   269,   270,    -1,   272,
     273,    -1,   275,    -1,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,
     293,   294,    -1,   296,    -1,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,    -1,   406,    -1,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,    -1,   451,   452,
     453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    82,    -1,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,    -1,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,    -1,    -1,   220,    -1,   222,   223,
     224,   225,   226,   227,    -1,    -1,   230,    -1,   232,    -1,
      -1,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,    -1,   266,   267,   268,   269,   270,    -1,   272,   273,
      -1,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,
     294,    -1,   296,    -1,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
      -1,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,    -1,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,   437,   438,    -1,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,    -1,   451,   452,   453,
     454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    -1,    52,    53,    -1,
      55,    56,    57,    58,    59,    60,    -1,    -1,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      -1,    -1,    77,    78,    79,    80,    81,    82,    -1,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,    -1,   159,    -1,   161,   162,   163,   164,
      -1,   166,    -1,   168,    -1,    -1,    -1,   172,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
     215,    -1,   217,    -1,    -1,   220,    -1,   222,   223,   224,
     225,   226,   227,    -1,    -1,   230,    -1,   232,    -1,    -1,
     235,   236,   237,    -1,    -1,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
      -1,   266,   267,   268,   269,   270,    -1,   272,   273,    -1,
     275,    -1,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,
      -1,   296,    -1,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,   369,   370,   371,   372,   373,    -1,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,    -1,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,    -1,   451,   452,   453,   454,
     455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,    45,
      46,    47,    48,    -1,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    -1,    -1,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    -1,    -1,    75,
      -1,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    91,    92,    93,    -1,    95,
      96,    97,    98,    99,   100,   101,   102,    -1,    -1,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,    -1,   119,   120,   121,   122,   123,   124,    -1,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,    -1,   152,   153,   154,   155,
     156,    -1,    -1,   159,    -1,   161,   162,   163,   164,    -1,
     166,    -1,   168,   169,    -1,   171,   172,   173,    -1,   175,
     176,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
      -1,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,    -1,    -1,   230,   231,   232,   233,    -1,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,    -1,    -1,   272,   273,   274,   275,
      -1,    -1,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,    -1,   288,   289,   290,    -1,    -1,   293,    -1,   295,
     296,   297,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,    -1,   313,   314,    -1,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,    -1,   401,    -1,   403,   404,    -1,
     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,    -1,   421,    -1,    -1,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
      -1,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,   465,
     466,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   478,   479,   480,   481,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    -1,
      52,    53,    -1,    55,    56,    57,    58,    59,    60,    -1,
      -1,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    -1,    -1,    77,    78,    79,    80,    81,
      82,    -1,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,    -1,   119,   120,   121,
     122,   123,   124,    -1,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,    -1,   159,    -1,   161,
     162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,    -1,
     172,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,    -1,   217,    -1,    -1,   220,    -1,
     222,   223,   224,   225,   226,   227,    -1,    -1,   230,    -1,
     232,    -1,    -1,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,    -1,   266,   267,   268,   269,   270,    -1,
     272,   273,    -1,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,
      -1,   293,   294,    -1,   296,    -1,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
     372,   373,    -1,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,    -1,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,    -1,   451,
     452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    -1,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    -1,    -1,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    -1,    -1,    77,    78,    79,    80,    81,    82,
      -1,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,    -1,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,    -1,    -1,   220,    -1,   222,
     223,   224,   225,   226,   227,    -1,    -1,   230,    -1,   232,
      -1,    -1,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,   268,   269,   270,    -1,   272,
     273,    -1,   275,    -1,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,
     293,   294,    -1,   296,    -1,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,    -1,   406,    -1,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,    -1,   451,   452,
     453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    45,    46,    47,    48,    -1,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      -1,    95,    96,    97,    98,    99,   100,   101,   102,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,    -1,   152,   153,
     154,   155,   156,    -1,    -1,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
      -1,   175,   176,    -1,   178,    -1,    -1,    -1,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,    -1,    -1,   230,   231,   232,   233,
      -1,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,    -1,    -1,   272,   273,
     274,   275,    -1,    -1,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,
      -1,   295,   296,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,    -1,   313,
     314,    -1,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,    -1,   403,
     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,    -1,   421,    -1,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,    -1,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,
     464,   465,   466,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   478,   479,   480,   481,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    -1,    29,
      30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,
      40,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    -1,    52,    53,    -1,    55,    56,    57,    58,    59,
      60,    -1,    -1,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    -1,    -1,    77,    78,    79,
      80,    81,    82,    -1,    84,    85,    86,    -1,    88,    89,
      90,    91,    92,    93,    -1,    -1,    96,    97,    98,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,    -1,   119,
     120,   121,   122,   123,   124,    -1,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,    -1,   159,
      -1,   161,   162,   163,   164,    -1,   166,    -1,   168,    -1,
      -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,
     220,    -1,   222,   223,   224,   225,   226,   227,    -1,    -1,
     230,    -1,   232,    -1,    -1,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,    -1,   266,   267,   268,   269,
     270,    -1,   272,   273,    -1,   275,    -1,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,    -1,   288,   289,
     290,    -1,    -1,   293,   294,    -1,   296,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,   369,
     370,   371,   372,   373,    -1,   375,   376,   377,   378,   379,
      -1,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,    -1,   406,    -1,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,    -1,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
      -1,   451,   452,   453,   454,   455,    -1,    -1,   458,    -1,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    -1,    29,    30,
      31,    -1,    -1,    -1,    -1,    -1,    37,    -1,    39,    40,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      -1,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      -1,    -1,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    -1,    -1,    77,    78,    79,    80,
      81,    82,    -1,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,    -1,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,
      -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,   180,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,   220,
      -1,   222,   223,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,    -1,    -1,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,    -1,   266,   267,   268,   269,   270,
      -1,   272,   273,    -1,   275,    -1,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,    -1,    -1,   288,   289,   290,
      -1,    -1,   293,   294,    -1,   296,    -1,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,    -1,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,    -1,
     451,   452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
      -1,    -1,    -1,    -1,    -1,    37,    -1,    39,    40,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    -1,
      52,    53,    -1,    55,    56,    57,    58,    59,    60,    -1,
      -1,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    -1,    -1,    77,    78,    79,    80,    81,
      82,    -1,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,    -1,   119,   120,   121,
     122,   123,   124,    -1,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,    -1,   159,    -1,   161,
     162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,    -1,
     172,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,    -1,   217,    -1,    -1,   220,    -1,
     222,   223,   224,   225,   226,   227,    -1,    -1,   230,    -1,
     232,    -1,    -1,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,    -1,   266,   267,   268,   269,   270,    -1,
     272,   273,    -1,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,
      -1,   293,   294,    -1,   296,    -1,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
     372,   373,    -1,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,    -1,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,    -1,   451,
     452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    -1,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    -1,    -1,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    -1,    -1,    77,    78,    79,    80,    81,    82,
      -1,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,    -1,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,    -1,    -1,   220,    -1,   222,
     223,   224,   225,   226,   227,    -1,    -1,   230,    -1,   232,
      -1,    -1,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,   268,   269,   270,    -1,   272,
     273,    -1,   275,    -1,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,
     293,   294,    -1,   296,    -1,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,    -1,   406,    -1,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,    -1,   451,   452,
     453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    82,    -1,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,    -1,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,    -1,    -1,   220,    -1,   222,   223,
     224,   225,   226,   227,    -1,    -1,   230,    -1,   232,    -1,
      -1,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,    -1,   266,   267,   268,   269,   270,    -1,   272,   273,
      -1,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,
     294,    -1,   296,    -1,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
      -1,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,    -1,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,   437,   438,    -1,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,    -1,   451,   452,   453,
     454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    -1,    52,    53,    -1,
      55,    56,    57,    58,    59,    60,    -1,    -1,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      -1,    -1,    77,    78,    79,    80,    81,    82,    -1,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,    -1,   159,    -1,   161,   162,   163,   164,
      -1,   166,    -1,   168,    -1,    -1,    -1,   172,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
     215,    -1,   217,    -1,    -1,   220,    -1,   222,   223,   224,
     225,   226,   227,    -1,    -1,   230,    -1,   232,    -1,    -1,
     235,   236,   237,    -1,    -1,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
      -1,   266,   267,   268,   269,   270,    -1,   272,   273,    -1,
     275,    -1,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,
      -1,   296,    -1,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,   369,   370,   371,   372,   373,    -1,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,    -1,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,    -1,   451,   452,   453,   454,
     455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    -1,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    -1,    -1,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    -1,
      -1,    77,    78,    79,    80,    81,    82,    -1,    84,    85,
      86,    -1,    88,    89,    90,    91,    92,    93,    -1,    -1,
      96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,    -1,   119,   120,   121,   122,   123,   124,    -1,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,    -1,   159,    -1,   161,   162,   163,   164,    -1,
     166,    -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,   220,    -1,   222,   223,   224,   225,
     226,   227,    -1,    -1,   230,    -1,   232,    -1,    -1,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,    -1,
     266,   267,   268,   269,   270,    -1,   272,   273,    -1,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,    -1,
     296,    -1,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,   369,   370,   371,   372,   373,    -1,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
     406,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,    -1,   451,   452,   453,   454,   455,
      -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    39,    40,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    -1,    52,    53,    -1,    55,    56,
      57,    58,    59,    60,    -1,    -1,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,
      77,    78,    79,    80,    81,    82,    -1,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,    -1,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,
      -1,   178,    -1,   180,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,   213,    -1,   215,    -1,
     217,    -1,    -1,   220,    -1,   222,   223,   224,   225,   226,
     227,    -1,    -1,   230,    -1,   232,    -1,    -1,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,    -1,   266,
     267,   268,   269,   270,    -1,   272,   273,    -1,   275,    -1,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,    -1,
      -1,   288,   289,   290,    -1,    -1,   293,   294,    -1,   296,
      -1,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,   369,   370,   371,   372,   373,    -1,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,
      -1,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,    -1,   451,   452,   453,   454,   455,    -1,
      -1,   458,    -1,    -1,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      -1,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    39,    40,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    -1,    52,    53,    -1,    55,    56,    57,
      58,    59,    60,    -1,    -1,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,    77,
      78,    79,    80,    81,    82,    -1,    84,    85,    86,    -1,
      88,    89,    90,    91,    92,    93,    -1,    -1,    96,    97,
      98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
      -1,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
      -1,   159,    -1,   161,   162,   163,   164,    -1,   166,    -1,
     168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,    -1,   217,
      -1,    -1,   220,    -1,   222,   223,   224,   225,   226,   227,
      -1,    -1,   230,    -1,   232,    -1,    -1,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,    -1,   266,   267,
     268,   269,   270,    -1,   272,   273,    -1,   275,    -1,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,    -1,
     288,   289,   290,    -1,    -1,   293,   294,    -1,   296,    -1,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,   369,   370,   371,   372,   373,    -1,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,    -1,   406,    -1,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,   437,
     438,    -1,    -1,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,    -1,   451,   452,   453,   454,   455,    -1,    -1,
     458,    -1,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    -1,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      39,    40,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    -1,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    -1,    -1,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
      79,    80,    81,    82,    -1,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    -1,    96,    97,    98,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,    -1,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
      -1,    -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,   213,    -1,   215,    -1,   217,    -1,
      -1,   220,    -1,   222,   223,   224,   225,   226,   227,    -1,
      -1,   230,    -1,   232,    -1,    -1,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,    -1,   266,   267,   268,
     269,   270,    -1,   272,   273,    -1,   275,    -1,   277,   278,
     279,   280,   281,   282,    -1,   284,   285,    -1,    -1,   288,
     289,   290,    -1,    -1,   293,   294,    -1,   296,    -1,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,   372,   373,    -1,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,    -1,   406,    -1,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,    -1,   424,   425,   426,   427,   428,
     429,   430,   431,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,    -1,   451,   452,   453,   454,   455,    -1,    -1,   458,
      -1,    -1,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    -1,    29,
      30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,
      40,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    -1,    52,    53,    -1,    55,    56,    57,    58,    59,
      60,    -1,    -1,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    -1,    -1,    77,    78,    79,
      80,    81,    82,    -1,    84,    85,    86,    -1,    88,    89,
      90,    91,    92,    93,    -1,    -1,    96,    97,    98,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,    -1,   119,
     120,   121,   122,   123,   124,    -1,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,    -1,   159,
      -1,   161,   162,   163,   164,    -1,   166,    -1,   168,    -1,
      -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,
     220,    -1,   222,   223,   224,   225,   226,   227,    -1,    -1,
     230,    -1,   232,    -1,    -1,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,    -1,   266,   267,   268,   269,
     270,    -1,   272,   273,    -1,   275,    -1,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,    -1,   288,   289,
     290,    -1,    -1,   293,   294,    -1,   296,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,   369,
     370,   371,   372,   373,    -1,   375,   376,   377,   378,   379,
      -1,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,    -1,   406,    -1,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,    -1,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
      -1,   451,   452,   453,   454,   455,    -1,    -1,   458,    -1,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    -1,    29,    30,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      -1,    52,    53,    -1,    55,    56,    57,    58,    59,    60,
      -1,    -1,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    -1,    -1,    77,    78,    79,    80,
      81,    82,    -1,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,    -1,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,
      -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,   180,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,   220,
      -1,   222,   223,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,    -1,    -1,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,    -1,   266,   267,   268,   269,   270,
      -1,   272,   273,    -1,   275,    -1,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,    -1,    -1,   288,   289,   290,
      -1,    -1,   293,   294,    -1,   296,    -1,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,    -1,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,    -1,
     451,   452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
      -1,    -1,    -1,    -1,    -1,    37,    -1,    39,    40,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    -1,
      52,    53,    -1,    55,    56,    57,    58,    59,    60,    -1,
      -1,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    -1,    -1,    77,    78,    79,    80,    81,
      82,    -1,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,    -1,   119,   120,   121,
     122,   123,   124,    -1,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,    -1,   159,    -1,   161,
     162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,    -1,
     172,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,    -1,   217,    -1,    -1,   220,    -1,
     222,   223,   224,   225,   226,   227,    -1,    -1,   230,    -1,
     232,    -1,    -1,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,    -1,   266,   267,   268,   269,   270,    -1,
     272,   273,    -1,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,
      -1,   293,   294,    -1,   296,    -1,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
     372,   373,    -1,    -1,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,    -1,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,    -1,   451,
     452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    -1,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    -1,    -1,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    -1,    -1,    77,    78,    79,    80,    81,    82,
      -1,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,    -1,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,    -1,    -1,   220,    -1,   222,
     223,   224,   225,   226,   227,    -1,    -1,   230,    -1,   232,
      -1,    -1,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,   268,   269,   270,    -1,   272,
     273,    -1,   275,    -1,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,
     293,   294,    -1,   296,    -1,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,    -1,   406,    -1,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,    -1,   451,   452,
     453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    82,    -1,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,    -1,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,    -1,    -1,   220,    -1,   222,   223,
     224,   225,   226,   227,    -1,    -1,   230,    -1,   232,    -1,
      -1,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,    -1,   266,   267,   268,   269,   270,    -1,   272,   273,
      -1,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,
     294,    -1,   296,    -1,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
      -1,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,    -1,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,   437,   438,    -1,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,    -1,   451,   452,   453,
     454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    -1,    52,    53,    -1,
      55,    56,    57,    58,    59,    60,    -1,    -1,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      -1,    -1,    77,    78,    79,    80,    81,    82,    -1,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,    -1,   159,    -1,   161,   162,   163,   164,
      -1,   166,    -1,   168,    -1,    -1,    -1,   172,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
     215,    -1,   217,    -1,    -1,   220,    -1,   222,   223,   224,
     225,   226,   227,    -1,    -1,   230,    -1,   232,    -1,    -1,
     235,   236,   237,    -1,    -1,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
      -1,   266,   267,   268,   269,   270,    -1,   272,   273,    -1,
     275,    -1,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,
      -1,   296,    -1,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,   369,   370,   371,   372,   373,    -1,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,    -1,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,    -1,   451,   452,   453,   454,
     455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    -1,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    -1,    -1,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    -1,
      -1,    77,    78,    79,    80,    81,    82,    -1,    84,    85,
      86,    -1,    88,    89,    90,    91,    92,    93,    -1,    -1,
      96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,    -1,   119,   120,   121,   122,   123,   124,    -1,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,    -1,   159,    -1,   161,   162,   163,   164,    -1,
     166,    -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,   220,    -1,   222,   223,   224,   225,
     226,   227,    -1,    -1,   230,    -1,   232,    -1,    -1,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,    -1,
     266,   267,   268,   269,   270,    -1,   272,   273,    -1,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,    -1,
     296,    -1,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,   369,   370,   371,   372,   373,    -1,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
     406,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,    -1,   451,   452,   453,   454,   455,
      -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    39,    40,    -1,    42,    43,    44,    45,    46,
      47,    48,    -1,    50,    51,    52,    53,    -1,    55,    56,
      57,    58,    59,    60,    -1,    -1,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    -1,    -1,    75,    -1,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    98,    99,   100,   101,   102,    -1,    -1,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,    -1,   152,   153,   154,   155,   156,
      -1,    -1,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
      -1,   178,    -1,    -1,    -1,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,    -1,   215,    -1,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,    -1,    -1,   230,   231,   232,   233,    -1,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,    -1,    -1,   272,   273,   274,   275,    -1,
      -1,   278,   279,   280,   281,   282,    -1,   284,   285,    -1,
      -1,   288,   289,   290,    -1,    -1,   293,    -1,   295,   296,
     297,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,    -1,   310,   311,    -1,   313,   314,    -1,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,    -1,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,   369,   370,   371,   372,   373,   374,   375,    -1,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,    -1,   401,    -1,   403,   404,    -1,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,    -1,   421,    -1,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,   444,   445,    -1,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
      -1,   458,    -1,    -1,   461,   462,   463,   464,   465,   466,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   478,   479,   480,   481,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    45,    46,    47,    48,    -1,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    -1,    -1,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      -1,    -1,    75,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    99,   100,   101,   102,
      -1,    -1,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,    -1,   152,
     153,   154,   155,   156,    -1,    -1,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,   169,    -1,   171,   172,
     173,    -1,   175,   176,    -1,   178,    -1,    -1,    -1,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,    -1,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,   244,    -1,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,    -1,   272,
     273,   274,   275,    -1,    -1,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,
     293,    -1,   295,   296,   297,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,    -1,
     313,   314,    -1,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,    -1,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,   374,   375,    -1,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,    -1,   399,    -1,   401,    -1,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,    -1,   421,    -1,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,   444,   445,    -1,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,
     463,   464,   465,   466,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   478,   479,   480,   481,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    -1,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      39,    40,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    -1,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    -1,    -1,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
      79,    80,    81,    82,    -1,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    -1,    96,    97,    98,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,    -1,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
      -1,    -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,   213,    -1,   215,    -1,   217,    -1,
      -1,   220,    -1,   222,   223,   224,   225,   226,   227,    -1,
      -1,   230,    -1,   232,    -1,    -1,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,    -1,   266,   267,   268,
     269,   270,    -1,   272,   273,    -1,   275,    -1,   277,   278,
     279,   280,   281,   282,    -1,   284,   285,    -1,    -1,   288,
     289,   290,    -1,    -1,   293,   294,    -1,   296,    -1,   298,
     299,   300,   301,   302,   303,   304,    -1,   306,   307,   308,
      -1,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,    -1,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,    -1,   353,   354,   355,   356,    -1,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,   372,   373,    -1,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,    -1,   406,    -1,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,    -1,   424,   425,   426,   427,   428,
     429,   430,   431,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,    -1,   451,   452,   453,   454,   455,    -1,    -1,   458,
      -1,    -1,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    20,    30,    32,    33,    48,    57,    69,    80,    92,
      94,   112,   126,   136,   142,   150,   152,   153,   166,   195,
     210,   236,   313,   316,   345,   354,   368,   375,   379,   389,
     401,   405,   441,   446,   460,   484,   498,   509,   510,   511,
     512,   523,   524,   526,   530,   545,   546,   547,   549,   551,
     558,   560,   608,   615,   618,   619,   636,   637,   638,   639,
     640,   641,   692,   693,   838,   841,   844,   851,   852,   853,
     854,   855,   862,   866,   872,   874,   879,   883,   884,   887,
     888,   890,   891,   893,   418,   463,   559,   199,   361,   369,
     405,   452,   559,     3,    20,    21,    22,    23,    24,    25,
      26,    27,    29,    30,    31,    39,    40,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    55,
      56,    57,    58,    59,    60,    63,    64,    65,    66,    67,
      69,    70,    71,    72,    73,    75,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    88,    89,    90,    91,
      92,    93,    95,    96,    97,    98,    99,   100,   101,   102,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   117,   119,   120,   121,   122,   123,   124,   126,   127,
     128,   129,   130,   133,   134,   135,   136,   137,   139,   140,
     141,   143,   144,   145,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   159,   161,   162,   163,   164,
     166,   168,   169,   171,   172,   173,   174,   175,   176,   178,
     180,   181,   182,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   197,   198,   199,   200,   201,
     202,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   215,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   230,   231,   232,   233,   235,   236,   237,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   272,   273,   274,   275,   277,   278,   279,   280,   281,
     282,   284,   285,   288,   289,   290,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   320,   321,   322,   323,   324,   325,   327,   328,   329,
     330,   331,   332,   333,   334,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   403,   404,
     406,   407,   408,   409,   410,   411,   412,   414,   415,   418,
     419,   420,   421,   422,   424,   425,   426,   427,   428,   429,
     430,   431,   434,   435,   436,   437,   438,   439,   441,   442,
     443,   444,   445,   446,   447,   449,   450,   451,   452,   453,
     454,   455,   458,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   751,   823,   827,   830,   896,   897,
     898,   559,    51,   498,   631,   176,   237,   291,   361,   409,
     411,   427,   433,   436,   606,   850,     3,    28,   174,   245,
     316,   398,   821,   827,   896,    22,    75,    91,   145,   155,
     167,   172,   199,   244,   248,   311,   325,   358,   361,   369,
     372,   391,   405,   412,   421,   427,   452,   609,   610,   613,
     559,   821,    94,   450,   498,   526,   618,   636,   858,   862,
     879,   893,   109,    69,   210,   109,     5,   826,   827,   873,
     873,   827,   821,    28,   414,   418,   827,   885,   886,   889,
     559,    28,   131,   648,   649,   176,   237,   361,   373,   414,
     867,   868,   889,   559,   446,   636,   641,   889,     5,   287,
     705,   818,   827,   828,   171,   498,   876,   498,   333,   642,
     643,   821,   642,   637,   638,     0,   501,   121,   209,   438,
     146,   214,   292,   432,   651,   652,   637,   639,   640,   502,
     450,   856,    28,   414,   418,   636,   889,   189,   818,   821,
     189,   818,   189,   705,   189,   818,   498,   496,   500,   802,
     804,   526,   618,   636,   840,   879,   818,   409,   411,   409,
     411,   343,   189,   827,   827,   832,   172,   244,   333,   369,
     405,   452,   616,   199,    28,   821,   250,   421,   108,   405,
     405,   452,   364,     3,    45,    50,    51,    52,    53,    65,
      66,    75,    83,    95,    99,   100,   101,   102,   105,   113,
     114,   135,   163,   169,   171,   175,   189,   191,   205,   212,
     213,   215,   218,   219,   221,   231,   233,   245,   264,   265,
     266,   274,   279,   295,   297,   330,   352,   356,   374,   376,
     380,   383,   398,   407,   414,   415,   426,   439,   447,   450,
     614,   716,   718,   720,   722,   724,   726,   728,   729,   730,
     732,   733,   734,   736,   737,   831,   896,   899,   189,   611,
     832,   189,   819,   821,   189,   821,   498,   550,   291,   606,
     858,     3,    45,    49,    50,    51,    52,    53,    65,    66,
      73,    75,    83,    95,    99,   100,   101,   102,   105,   113,
     114,   151,   157,   163,   169,   171,   174,   175,   180,   181,
     191,   205,   206,   212,   213,   215,   218,   219,   221,   231,
     233,   245,   264,   265,   266,   270,   274,   277,   279,   294,
     295,   297,   298,   312,   315,   330,   352,   356,   374,   376,
     380,   383,   398,   400,   407,   414,   415,   420,   422,   426,
     439,   446,   447,   450,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   859,   861,   862,   864,   865,
     896,   900,   856,   826,   873,   826,   487,   498,   498,   839,
     481,   220,   500,   286,     4,     6,     7,     8,     9,    10,
      36,    50,    52,    53,    61,    62,    65,    66,    73,    75,
      99,   100,   101,   102,   103,   104,   105,   113,   114,   116,
     151,   157,   158,   163,   180,   181,   212,   213,   215,   238,
     239,   264,   266,   271,   276,   277,   279,   288,   298,   312,
     330,   356,   374,   383,   400,   414,   415,   420,   422,   423,
     426,   439,   447,   482,   489,   490,   491,   496,   498,   503,
     505,   506,   637,   682,   721,   724,   727,   728,   729,   731,
     732,   733,   736,   737,   748,   750,   751,   752,   754,   768,
     769,   776,   796,   801,   808,   809,   810,   823,   824,   825,
     826,   827,   807,   809,   867,   867,   826,   867,   481,   170,
     416,   487,   498,   818,   491,   804,     3,   169,   171,   450,
     862,   875,   877,   169,   878,   748,   780,   781,   827,   642,
     502,   498,   834,   499,   499,   511,   170,   216,   705,   880,
      28,   131,   647,   647,    55,   647,   160,   165,   234,   283,
     657,   659,   660,   685,   687,   688,   689,   651,   652,   498,
     818,   481,   220,   151,    24,    30,   136,   290,   341,   345,
     375,   443,   517,   520,   521,   341,   151,    37,    56,   107,
     198,   249,   257,   269,   300,   341,   347,   369,   375,   389,
     520,   552,   555,   151,   341,   375,   520,   151,   341,   375,
     520,     3,    28,    45,    51,    75,    83,    95,    99,   100,
     101,   102,   105,   131,   169,   171,   174,   175,   191,   205,
     218,   219,   221,   231,   233,   245,   265,   274,   295,   297,
     352,   374,   380,   398,   407,   426,   439,   448,   450,   491,
     499,   748,   783,   784,   829,   835,   896,   901,   748,   803,
       3,    28,    32,    33,    34,    35,    36,    37,    38,    41,
      54,    61,    62,    68,    74,    76,    87,    94,   103,   104,
     116,   118,   125,   131,   132,   138,   142,   146,   158,   160,
     165,   167,   170,   177,   179,   183,   196,   203,   214,   216,
     228,   229,   234,   238,   239,   271,   276,   283,   286,   287,
     291,   292,   309,   319,   326,   335,   349,   368,   385,   402,
     405,   413,   416,   417,   423,   432,   433,   440,   446,   448,
     456,   457,   459,   460,   822,   836,   896,   900,   902,   802,
     499,   498,   595,   606,   271,   842,   500,   833,    37,   452,
     189,   818,   189,   818,   895,   818,   818,    83,   847,   464,
      84,   128,   303,   410,   449,   735,   735,   735,   498,   723,
     723,   315,   498,   725,   151,   498,    65,    66,   735,   723,
     720,   462,   484,   498,   738,   498,   738,    59,   348,   502,
     612,   498,    36,   719,   498,   110,   111,   186,   187,   251,
     252,   253,   254,   255,   256,   259,   260,   365,   366,   478,
     479,   498,   739,   740,   741,   742,   743,   744,   745,   746,
     747,   723,   151,   502,   612,   151,   502,   612,   151,   286,
     781,   343,   405,   499,   502,     4,   158,   286,   423,   489,
     490,   554,   557,   825,   826,   857,   859,   860,   863,   858,
     498,   626,   630,   554,   863,   869,   871,   783,   718,   785,
      37,   232,   827,   498,   805,   496,   748,   800,   498,   498,
     165,   498,   498,   637,   498,   498,   498,   748,   498,   498,
     498,   498,   498,   498,   498,   498,   498,   748,   748,   748,
     147,   811,   812,   781,   782,   637,   748,   780,   770,   771,
     772,   827,   828,     9,   805,   804,   498,   826,   498,   825,
     826,     3,     8,    11,    15,    16,    17,    18,    19,    34,
      37,    42,    49,    74,   175,   191,   196,   218,   219,   233,
     271,   274,   288,   291,   380,   482,   485,   486,   487,   489,
     490,   491,   492,   493,   494,   774,   775,   776,   778,   461,
     755,   805,   297,   748,   502,   216,   644,   498,   826,   805,
     500,   804,   644,     3,   116,   237,   554,   737,   826,   870,
      98,   116,   871,   116,   871,   818,   499,   502,   856,   502,
     499,   643,   819,    37,   880,   528,   818,    37,   827,   375,
     639,   639,    28,   491,   653,   654,   748,   639,   162,   268,
     673,   223,   269,   329,   378,   438,     4,     9,    28,   668,
     748,   489,   490,   669,   670,   748,   750,   685,   686,   660,
     659,   657,   658,   165,   688,   281,   690,   657,   685,   781,
     834,   232,   818,    68,    76,    87,   167,   189,   319,   433,
     577,   587,   602,   827,    76,    87,   525,    87,   525,   498,
     416,   498,   575,   243,   436,   575,    87,   502,   416,   818,
     720,   554,    55,   556,   554,   554,   107,   249,   257,    55,
     416,   460,   484,   553,   262,   361,   553,   555,   705,    87,
     416,   525,   361,   818,   416,   361,   783,   783,   784,   499,
     502,   651,   652,    13,    14,   497,   507,   416,   594,   599,
     827,   460,   629,   333,   405,   452,   151,    94,   547,   560,
     843,   844,   891,   822,   500,   718,   818,   271,   548,   552,
     271,   498,   595,    37,   595,   498,   617,   189,   589,   827,
     848,   498,   782,   825,   614,   785,   735,   735,    36,   719,
     414,   414,   825,   825,   718,   715,   827,   496,   496,   825,
     825,   416,   416,   416,   416,   611,   832,   819,   821,   821,
     832,   499,   606,   189,   818,   895,   858,   864,     4,   825,
       4,   825,   628,   635,   836,    51,    96,   122,   140,   144,
     166,   169,   184,   276,   284,   327,   632,   502,   499,   502,
     499,   502,   840,   781,   802,   782,   456,   797,   798,   748,
     781,   498,   825,   825,     3,   739,   740,   741,   742,   743,
     744,   745,   746,   786,   787,   826,   825,   825,   748,     8,
      16,    17,    18,    19,   485,   486,   487,   489,   490,   491,
     492,   493,   494,   774,   779,   827,   748,   788,   489,   490,
     498,   749,   750,   776,   790,   499,   781,   748,   780,   791,
     748,    54,   170,   229,   417,   748,   781,   794,   748,   498,
     827,   343,   816,   497,   499,   502,   502,   504,   507,   781,
     748,   747,   747,   718,   748,   748,   748,   748,   748,   748,
       5,   836,   837,   414,    41,   402,   806,   832,   748,   748,
     498,   637,   795,   131,   158,   271,   276,   281,   423,   434,
     748,   276,   498,   748,   416,    49,   175,   191,   196,   233,
     380,   748,   748,   748,   748,   748,   748,   748,   748,   748,
     748,    28,    35,   385,   773,   179,   161,   756,   356,   498,
     769,   810,   176,   237,   405,   409,   411,   436,   645,   818,
     170,   694,   783,   491,   694,   498,   826,   499,   818,   875,
     818,   883,   748,   499,   498,   440,   882,   116,   299,   498,
     527,   636,    37,   827,   498,   532,   541,   542,   544,   827,
      38,   125,   655,   655,   502,   440,   655,   356,   357,   489,
     490,   670,   672,   750,   378,   223,   287,   308,   308,   502,
     493,     4,   671,   825,   671,   356,   357,   672,   817,   818,
     275,   382,   691,   686,   658,   499,   341,   520,   498,   189,
     587,   821,   223,   271,   223,   440,   498,   580,   717,   718,
     821,   827,   189,   821,   189,   827,    24,   136,   375,   516,
     519,   571,   585,   836,   821,   579,   598,   836,   821,   517,
     821,   341,   375,   520,   552,   554,   832,   821,   554,   832,
     821,   554,   341,   375,   520,   821,   821,   821,   821,   341,
     375,   520,   821,   821,   651,   651,   651,   448,   784,   190,
     346,   650,   748,   748,   748,   803,   324,   625,   499,   502,
     284,   170,   416,   620,   452,   818,   895,   818,   827,   291,
     606,   822,   498,   151,   151,   233,   577,   587,   590,   593,
     603,   605,   827,   460,   462,   582,   150,   636,   460,   849,
     499,   783,    37,   271,   286,   781,   499,   499,   612,   499,
     496,   481,   481,   499,   499,   499,   502,   718,   825,   497,
     825,   499,   499,   740,   742,   743,   744,   743,   744,   744,
     612,   612,   286,   612,   405,   271,    37,   499,   502,   491,
     498,   554,   627,   863,    37,   624,   826,   624,   271,   276,
     327,   624,   624,   869,   718,   499,   497,   748,   138,   798,
     799,    37,   499,   748,   499,   499,   499,   170,   499,   499,
     502,   499,   500,   309,   789,   499,   749,   749,   748,    11,
      16,    17,    18,    19,   196,   218,   288,   485,   486,   487,
     489,   490,   491,   492,   493,   494,   776,   749,   499,   499,
     165,   170,   792,   793,   502,   499,    37,   794,   781,   794,
     794,   170,   499,    37,   819,   820,   498,   748,   813,   805,
     748,   770,   748,   499,   499,   481,   749,   749,   144,   781,
     170,   131,   158,   276,   281,   423,   434,   498,   144,   779,
     748,   402,   806,   748,   795,   748,   416,   498,   637,   498,
     498,   154,   757,   409,   411,   409,   411,   818,   405,   646,
     646,   646,   228,   357,   498,   637,   695,   696,   697,   698,
     705,   706,   751,   753,   754,   827,   457,   711,   651,   812,
     711,   825,   747,   834,   840,   696,   457,   881,   446,   404,
     439,   536,   531,   540,   827,   286,   533,   827,   537,   544,
     502,   694,   487,   805,   483,   656,   656,   654,   288,   774,
     777,   656,     4,   825,   672,   287,   438,   669,   502,   242,
     416,   748,   271,   602,   498,   151,   498,   580,   199,   599,
     600,   561,    37,   174,   570,   596,   561,    24,   136,   345,
     347,   375,   513,   514,   515,   521,   522,   151,   612,   151,
     612,   571,   585,   571,   499,   502,   564,   826,   499,   502,
     487,   500,   416,   361,    87,   416,   525,   361,   416,   416,
     416,   361,   650,   650,   650,   784,   278,   278,   499,   497,
     392,   393,   634,   826,   594,   625,   818,   498,    37,   595,
     842,   343,   405,   599,   818,   818,   895,   818,   499,   502,
     284,   575,   284,   286,   574,   821,   460,   894,   575,    37,
     499,   405,   748,   151,   818,   499,   719,   825,   738,   738,
     719,   827,   497,   497,   832,   151,   628,   622,   633,   863,
     826,   826,   276,   599,   491,   599,   826,   826,   413,   748,
     142,   718,   499,   748,   748,   779,   748,   792,   718,   749,
     749,   749,   749,   749,   131,   271,   281,   749,   749,   749,
     749,   749,   749,   749,   749,   749,   749,   748,   748,   793,
     792,   718,   499,   499,   499,   781,   718,   502,   499,   748,
     813,   814,   815,    37,   499,   747,   748,    34,    34,   748,
     499,   748,   170,   498,   785,   748,   499,   144,   749,   749,
     144,   144,   748,   748,   652,   457,   296,   761,   646,   646,
     646,   646,   818,   818,   818,   637,   706,   170,   637,   697,
     698,    37,   699,   700,   827,   502,    95,   171,   205,   221,
     231,   265,   352,   702,   700,    37,   699,   701,   827,   484,
     710,   804,   748,   179,   674,   650,   816,   674,   499,   499,
     748,   349,   535,   445,   499,   502,   805,    85,   535,   499,
     502,   532,   881,   748,   162,   227,   498,   656,   287,   818,
     821,   499,   151,   600,   587,   600,   561,   589,   502,   499,
     118,   203,   269,   271,   586,   498,    31,    55,   607,   596,
      68,    74,    87,   116,   118,   203,   271,   276,   319,   335,
     433,   440,   566,   567,   581,   174,   116,   188,   271,   575,
     553,   108,   116,   174,   271,   391,   394,   555,   575,   375,
     515,   427,   821,   827,   519,   598,     3,    45,    51,    75,
      83,    95,    99,   100,   101,   102,   105,   169,   171,   174,
     175,   191,   205,   218,   219,   221,   231,   233,   245,   265,
     270,   274,   288,   295,   297,   352,   374,   376,   380,   398,
     407,   426,   439,   450,   489,   490,   554,   562,   601,   718,
     777,   826,   829,   896,   902,   836,   821,   821,   821,   821,
     821,   821,   821,   821,   821,   821,   499,   499,   499,   651,
     553,   634,   498,   593,   636,   849,   606,   189,   818,   499,
     548,   498,    37,   584,   582,   590,    80,   550,   108,   269,
     636,   636,   589,   440,   846,   497,   718,   612,   895,   499,
     502,   599,   748,   499,   499,   793,   170,   131,   281,   498,
     499,   499,   502,   499,   827,   748,   748,   748,   785,   499,
     748,    34,    34,   748,   748,   144,   499,   499,   748,   498,
     762,   827,   818,   818,   818,   818,   700,   701,   498,   499,
     827,   828,   407,   665,   666,   498,   697,   221,   295,   703,
     697,   703,   221,   702,   703,   221,   666,   498,   827,   666,
     498,   293,    55,   183,   683,   499,   683,   826,   808,   636,
     299,   636,   531,   286,   498,   529,   487,   544,   535,   779,
     561,   587,   499,   499,   460,   592,   119,   192,   201,   118,
     442,   748,   116,    37,   498,   832,   821,   749,   119,   192,
     118,   276,   223,   818,   592,    82,   607,   189,   276,   554,
     748,   607,   276,   489,   490,   557,   827,   718,   612,   612,
     245,   398,   829,   833,   487,   416,   416,   650,   626,   440,
     621,   623,   599,   499,   894,    37,   405,   271,   498,   849,
     593,   150,   636,   148,   197,   574,   121,   136,   318,   894,
     108,   460,   892,   286,   827,   845,   498,    37,   633,   749,
     170,   498,   785,   813,   499,   748,   748,   748,   499,   763,
     827,   707,   708,   753,   699,   498,     4,     9,   661,   663,
     664,   827,   820,   697,   286,   440,   704,   697,   221,   697,
     712,   713,   827,   498,   712,   827,    28,    97,   180,   355,
     491,   498,   675,   676,   677,   678,   679,   680,   681,   748,
     748,   459,   758,   826,   758,   502,   536,    87,   498,   534,
     543,   753,   827,   132,   748,   499,   335,   592,   498,   583,
     561,   499,   188,   498,   748,   271,   567,   592,   595,   821,
      37,   151,    74,   714,   833,   493,   562,   821,   821,   499,
     553,   123,   499,   582,   636,   818,   151,    37,   499,   821,
     894,    28,    79,    88,   117,   188,   200,   391,   394,   578,
     578,   357,   357,    60,    68,   237,   818,   543,   749,   785,
     499,   305,   764,   499,   502,    37,   709,   820,   308,   493,
     308,   357,   493,   498,   498,   499,   748,   498,   697,   704,
     499,   502,   718,   712,   499,   498,   377,   498,   499,   502,
     759,   760,   827,   326,   684,   684,   445,   821,   748,   499,
     502,    74,   538,   538,   272,   438,   818,   561,   588,   591,
     836,   395,   454,   568,   569,   498,   563,   748,   499,   247,
     604,   188,   832,   440,   518,   493,   427,   626,   826,   849,
     574,   892,   498,   818,   636,   582,   550,    68,   289,    68,
     846,   499,   499,    55,   651,   710,   707,   498,   499,   827,
     661,   820,   713,   714,   499,   781,   498,   781,   677,   502,
      37,   748,   440,   662,   662,   636,   499,   711,   534,   832,
     539,   832,   539,   375,   595,   499,   502,   487,   552,   499,
     269,   576,   171,   304,   381,   286,   572,   573,   597,   563,
     748,   427,    37,   498,   892,   574,   894,   289,   289,   498,
     849,   780,   328,   357,   765,   712,   499,   502,   499,   499,
     499,   676,   499,   760,   762,   359,   538,   655,   655,   542,
     604,   591,   562,   499,   569,   201,   121,   438,   286,   597,
     286,   572,   636,   543,   711,    49,    98,   429,   748,   766,
     767,   766,   499,   499,     9,   342,   667,   499,   664,   539,
     656,   656,   711,   573,    59,   269,   348,   375,   565,   565,
     892,   499,   767,   356,   164,   314,   164,   314,   499,   498,
     655,   561,    23,   116,   276,   849,    34,     9,   656,   711,
     767,   499
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, &yylloc, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, &yylloc, yyscanner)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, yyscanner)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
    core_yyscan_t yyscanner;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
  YYUSE (yyscanner);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp, yyscanner)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
    core_yyscan_t yyscanner;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
#else
static void
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, core_yyscan_t yyscanner)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule, yyscanner)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
    core_yyscan_t yyscanner;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      fprintf (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       , yyscanner);
      fprintf (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule, yyscanner); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp, yyscanner)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
    core_yyscan_t yyscanner;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  YYUSE (yyscanner);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (core_yyscan_t yyscanner);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */






/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (core_yyscan_t yyscanner)
#else
int
yyparse (yyscanner)
    core_yyscan_t yyscanner;
#endif
#endif
{
  /* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;
/* Location data for the look-ahead symbol.  */
YYLTYPE yylloc;

  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;

  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[2];

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
  yylsp = yyls;
#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  /* Initialize the default location before parsing starts.  */
  yylloc.first_line   = yylloc.last_line   = 1;
  yylloc.first_column = yylloc.last_column = 0;
#endif

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
	YYSTACK_RELOCATE (yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     look-ahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to look-ahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 467 "third_party/libpg_query/grammar/grammar.y"
    {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[(1) - (1)].list);
			;}
    break;

  case 3:
#line 483 "third_party/libpg_query/grammar/grammar.y"
    {
					if ((yyvsp[(1) - (3)].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[(1) - (3)].list)), (yylsp[(2) - (3)]));
					}
					if ((yyvsp[(3) - (3)].node) != NULL)
						(yyval.list) = lappend((yyvsp[(1) - (3)].list), makeRawStmt((yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]) + 1));
					else
						(yyval.list) = (yyvsp[(1) - (3)].list);
				;}
    break;

  case 4:
#line 495 "third_party/libpg_query/grammar/grammar.y"
    {
					if ((yyvsp[(1) - (1)].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[(1) - (1)].node), 0));
					else
						(yyval.list) = NIL;
				;}
    break;

  case 39:
#line 538 "third_party/libpg_query/grammar/grammar.y"
    { (yyval.node) = NULL; ;}
    break;

  case 40:
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[(3) - (4)].range);
					n->cmds = (yyvsp[(4) - (4)].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 41:
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[(5) - (6)].range);
					n->cmds = (yyvsp[(6) - (6)].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 42:
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[(3) - (4)].range);
					n->cmds = (yyvsp[(4) - (4)].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 43:
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[(5) - (6)].range);
					n->cmds = (yyvsp[(6) - (6)].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 44:
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[(3) - (4)].range);
					n->cmds = (yyvsp[(4) - (4)].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 45:
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[(5) - (6)].range);
					n->cmds = (yyvsp[(6) - (6)].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 46:
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[(3) - (4)].range);
					n->cmds = (yyvsp[(4) - (4)].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 47:
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[(5) - (6)].range);
					n->cmds = (yyvsp[(6) - (6)].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 48:
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}
    break;

  case 49:
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
    { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].defelt)); ;}
    break;

  case 50:
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
    { (yyval.node) = (yyvsp[(3) - (3)].node); ;}
    break;

  case 51:
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
    { (yyval.node) = NULL; ;}
    break;

  case 52:
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[(1) - (1)]));
				;}
    break;

  case 53:
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));
				;}
    break;

  case 54:
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					if (strcmp((yyvsp[(2) - (2)].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[(2) - (2)].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[(2) - (2)].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[(2) - (2)].defelt)->defname),
								 parser_errposition((yylsp[(2) - (2)]))));
					(yyval.defelt) = (yyvsp[(2) - (2)].defelt);
				;}
    break;

  case 55:
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[(3) - (3)].ival)), (yylsp[(1) - (3)]));
				;}
    break;

  case 56:
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));
				;}
    break;

  case 57:
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));
				;}
    break;

  case 58:
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[(2) - (2)].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 59:
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[(5) - (5)].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 60:
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[(3) - (3)].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 61:
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[(6) - (6)].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 62:
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[(3) - (4)].str);
					n->def = (yyvsp[(4) - (4)].node);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 63:
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[(3) - (6)].str);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 64:
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[(3) - (6)].str);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 65:
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[(3) - (6)].str);
					n->def = (PGNode *) makeInteger((yyvsp[(6) - (6)].ival));
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 66:
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[(3) - (5)].str);
					n->def = (PGNode *) (yyvsp[(5) - (5)].list);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 67:
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[(3) - (5)].str);
					n->def = (PGNode *) (yyvsp[(5) - (5)].list);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 68:
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[(3) - (6)].str);
					n->def = (PGNode *) makeString((yyvsp[(6) - (6)].str));
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 69:
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[(6) - (9)].ival);
					c->options = (yyvsp[(9) - (9)].list);
					c->location = (yylsp[(5) - (9)]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[(3) - (9)].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 70:
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[(3) - (4)].str);
					n->def = (PGNode *) (yyvsp[(4) - (4)].list);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 71:
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[(3) - (5)].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 72:
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[(3) - (7)].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 73:
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[(5) - (6)].str);
					n->behavior = (yyvsp[(6) - (6)].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 74:
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[(3) - (4)].str);
					n->behavior = (yyvsp[(4) - (4)].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 75:
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[(3) - (8)].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[(6) - (8)].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[(7) - (8)].node);
					def->raw_default = (yyvsp[(8) - (8)].node);
					def->location = (yylsp[(3) - (8)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 76:
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[(3) - (4)].str);
					n->def = (PGNode *) (yyvsp[(4) - (4)].list);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 77:
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[(2) - (2)].node);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 78:
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[(3) - (4)].str);
					processCASbits((yyvsp[(4) - (4)].ival), (yylsp[(4) - (4)]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 79:
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[(3) - (3)].str);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 80:
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[(5) - (6)].str);
					n->behavior = (yyvsp[(6) - (6)].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 81:
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[(3) - (4)].str);
					n->behavior = (yyvsp[(4) - (4)].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 82:
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 83:
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 84:
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[(2) - (2)].list);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 85:
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[(2) - (2)].list);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 86:
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[(1) - (1)].list);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 87:
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
    break;

  case 88:
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
    { (yyval.node) = NULL; ;}
    break;

  case 89:
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					(yyval.defelt) = (yyvsp[(1) - (1)].defelt);
				;}
    break;

  case 90:
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					(yyval.defelt) = (yyvsp[(2) - (2)].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				;}
    break;

  case 91:
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					(yyval.defelt) = (yyvsp[(2) - (2)].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				;}
    break;

  case 92:
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[(2) - (2)].str), NULL, DEFELEM_DROP, (yylsp[(2) - (2)]));
				;}
    break;

  case 93:
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
    break;

  case 94:
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
    break;

  case 95:
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
    { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
    break;

  case 96:
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
    { (yyval.ival) = 1; ;}
    break;

  case 97:
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
    { (yyval.ival) = 0; ;}
    break;

  case 98:
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
    { (yyval.ival) = 0; ;}
    break;

  case 99:
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
    {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[(2) - (2)].str);
						(yyval.node) = (PGNode *) n;
					;}
    break;

  case 100:
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
    {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[(3) - (3)].str);
						(yyval.node) = (PGNode *) n;
					;}
    break;

  case 101:
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
    {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					;}
    break;

  case 102:
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
    {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					;}
    break;

  case 103:
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[(3) - (6)].str);
					n->newname = (yyvsp[(6) - (6)].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 104:
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[(3) - (6)].range);
					n->subname = NULL;
					n->newname = (yyvsp[(6) - (6)].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 105:
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[(5) - (8)].range);
					n->subname = NULL;
					n->newname = (yyvsp[(8) - (8)].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 106:
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[(3) - (6)].range);
					n->subname = NULL;
					n->newname = (yyvsp[(6) - (6)].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 107:
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[(5) - (8)].range);
					n->subname = NULL;
					n->newname = (yyvsp[(8) - (8)].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 108:
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[(3) - (6)].range);
					n->subname = NULL;
					n->newname = (yyvsp[(6) - (6)].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 109:
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[(5) - (8)].range);
					n->subname = NULL;
					n->newname = (yyvsp[(8) - (8)].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 110:
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[(3) - (6)].range);
					n->subname = NULL;
					n->newname = (yyvsp[(6) - (6)].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 111:
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[(5) - (8)].range);
					n->subname = NULL;
					n->newname = (yyvsp[(8) - (8)].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 112:
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[(3) - (8)].range);
					n->subname = (yyvsp[(6) - (8)].str);
					n->newname = (yyvsp[(8) - (8)].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 113:
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[(5) - (10)].range);
					n->subname = (yyvsp[(8) - (10)].str);
					n->newname = (yyvsp[(10) - (10)].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 114:
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[(3) - (8)].range);
					n->subname = (yyvsp[(6) - (8)].str);
					n->newname = (yyvsp[(8) - (8)].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 115:
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[(5) - (10)].range);
					n->subname = (yyvsp[(8) - (10)].str);
					n->newname = (yyvsp[(10) - (10)].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 116:
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
    { (yyval.ival) = COLUMN; ;}
    break;

  case 117:
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
    { (yyval.ival) = 0; ;}
    break;

  case 118:
#line 10 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyvsp[(5) - (7)].istmt)->relation = (yyvsp[(4) - (7)].range);
					(yyvsp[(5) - (7)].istmt)->onConflictClause = (yyvsp[(6) - (7)].onconflict);
					(yyvsp[(5) - (7)].istmt)->returningList = (yyvsp[(7) - (7)].list);
					(yyvsp[(5) - (7)].istmt)->withClause = (yyvsp[(1) - (7)].with);
					(yyval.node) = (PGNode *) (yyvsp[(5) - (7)].istmt);
				;}
    break;

  case 119:
#line 22 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[(1) - (1)].node);
				;}
    break;

  case 120:
#line 28 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[(2) - (4)].override);
					(yyval.istmt)->selectStmt = (yyvsp[(4) - (4)].node);
				;}
    break;

  case 121:
#line 35 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[(2) - (4)].list);
					(yyval.istmt)->selectStmt = (yyvsp[(4) - (4)].node);
				;}
    break;

  case 122:
#line 41 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[(2) - (7)].list);
					(yyval.istmt)->override = (yyvsp[(5) - (7)].override);
					(yyval.istmt)->selectStmt = (yyvsp[(7) - (7)].node);
				;}
    break;

  case 123:
#line 48 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				;}
    break;

  case 124:
#line 58 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.range) = (yyvsp[(1) - (1)].range);
				;}
    break;

  case 125:
#line 62 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyvsp[(1) - (3)].range)->alias = makeAlias((yyvsp[(3) - (3)].str), NIL);
					(yyval.range) = (yyvsp[(1) - (3)].range);
				;}
    break;

  case 126:
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[(2) - (4)].list);
					(yyval.infer)->whereClause = (yyvsp[(4) - (4)].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[(1) - (4)]);
				;}
    break;

  case 127:
#line 80 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[(3) - (3)].str);
					(yyval.infer)->location = (yylsp[(1) - (3)]);
				;}
    break;

  case 128:
#line 88 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.infer) = NULL;
				;}
    break;

  case 129:
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.with) = (yyvsp[(1) - (1)].with); ;}
    break;

  case 130:
#line 96 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.with) = NULL; ;}
    break;

  case 131:
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[(1) - (2)].str);
					(yyval.target)->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[(1) - (2)]);
				;}
    break;

  case 132:
#line 114 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyvsp[(1) - (3)].target)->val = (PGNode *) (yyvsp[(3) - (3)].node);
					(yyval.list) = list_make1((yyvsp[(1) - (3)].target));
				;}
    break;

  case 133:
#line 119 "third_party/libpg_query/grammar/statements/insert.y"
    {
					int ncolumns = list_length((yyvsp[(2) - (5)].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[(2) - (5)].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[(5) - (5)].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[(2) - (5)].list);
				;}
    break;

  case 134:
#line 144 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[(3) - (8)].infer);
					(yyval.onconflict)->targetList = (yyvsp[(7) - (8)].list);
					(yyval.onconflict)->whereClause = (yyvsp[(8) - (8)].node);
					(yyval.onconflict)->location = (yylsp[(1) - (8)]);
				;}
    break;

  case 135:
#line 154 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[(3) - (5)].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[(1) - (5)]);
				;}
    break;

  case 136:
#line 163 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.onconflict) = NULL;
				;}
    break;

  case 137:
#line 170 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[(1) - (5)].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[(2) - (5)].list);
					(yyval.ielem)->opclass = (yyvsp[(3) - (5)].list);
					(yyval.ielem)->ordering = (yyvsp[(4) - (5)].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[(5) - (5)].nullorder);
				;}
    break;

  case 138:
#line 181 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[(1) - (5)].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[(2) - (5)].list);
					(yyval.ielem)->opclass = (yyvsp[(3) - (5)].list);
					(yyval.ielem)->ordering = (yyvsp[(4) - (5)].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[(5) - (5)].nullorder);
				;}
    break;

  case 139:
#line 192 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[(2) - (7)].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[(4) - (7)].list);
					(yyval.ielem)->opclass = (yyvsp[(5) - (7)].list);
					(yyval.ielem)->ordering = (yyvsp[(6) - (7)].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[(7) - (7)].nullorder);
				;}
    break;

  case 140:
#line 206 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
    break;

  case 141:
#line 207 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = NIL; ;}
    break;

  case 142:
#line 213 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.override) = PG_OVERRIDING_USER_VALUE; ;}
    break;

  case 143:
#line 214 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.override) = OVERRIDING_SYSTEM_VALUE; ;}
    break;

  case 144:
#line 219 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].target)); ;}
    break;

  case 145:
#line 220 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list),(yyvsp[(3) - (3)].target)); ;}
    break;

  case 146:
#line 226 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
    break;

  case 147:
#line 227 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = NIL; ;}
    break;

  case 148:
#line 231 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 149:
#line 232 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = NIL; ;}
    break;

  case 150:
#line 238 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].target)); ;}
    break;

  case 151:
#line 240 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].target)); ;}
    break;

  case 152:
#line 245 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 153:
#line 246 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = list_concat((yyvsp[(1) - (3)].list),(yyvsp[(3) - (3)].list)); ;}
    break;

  case 154:
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 155:
#line 251 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 156:
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].ielem)); ;}
    break;

  case 157:
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].ielem)); ;}
    break;

  case 158:
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[(1) - (2)].str);
					(yyval.target)->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[(1) - (2)]);
				;}
    break;

  case 159:
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
    {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[(3) - (5)].list);
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[(5) - (5)].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[(5) - (5)].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[(5) - (5)].typnam);
					}
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 160:
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
    {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[(2) - (2)].str);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 161:
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
    {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[(2) - (4)].str);
					n->args = (yyvsp[(4) - (4)].list);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 162:
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
    {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[(2) - (5)].str);
					n->args = (yyvsp[(4) - (5)].list);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 163:
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
    {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[(4) - (5)].range)->relpersistence = (yyvsp[(2) - (5)].ival);
					n->sequence = (yyvsp[(4) - (5)].range);
					n->options = (yyvsp[(5) - (5)].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 164:
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
    {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[(7) - (8)].range)->relpersistence = (yyvsp[(2) - (8)].ival);
					n->sequence = (yyvsp[(7) - (8)].range);
					n->options = (yyvsp[(8) - (8)].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 165:
#line 32 "third_party/libpg_query/grammar/statements/create_sequence.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 166:
#line 33 "third_party/libpg_query/grammar/statements/create_sequence.y"
    { (yyval.list) = NIL; ;}
    break;

  case 167:
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
    {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[(2) - (3)].str);
					n->params = (yyvsp[(3) - (3)].list);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 168:
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
    {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[(7) - (9)].str);
					n->params = (yyvsp[(8) - (9)].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[(4) - (9)].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[(4) - (9)].into)->rel->relpersistence = (yyvsp[(2) - (9)].ival);
					(yyvsp[(4) - (9)].into)->skipData = !((yyvsp[(9) - (9)].boolean));
					(yyval.node) = (PGNode *) ctas;
				;}
    break;

  case 169:
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
    {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[(10) - (12)].str);
					n->params = (yyvsp[(11) - (12)].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[(7) - (12)].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[(7) - (12)].into)->rel->relpersistence = (yyvsp[(2) - (12)].ival);
					(yyvsp[(7) - (12)].into)->skipData = !((yyvsp[(12) - (12)].boolean));
					(yyval.node) = (PGNode *) ctas;
				;}
    break;

  case 170:
#line 51 "third_party/libpg_query/grammar/statements/execute.y"
    { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
    break;

  case 171:
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
    { (yyval.list) = NIL; ;}
    break;

  case 172:
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[(3) - (4)].range);
					n->options = (yyvsp[(4) - (4)].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 173:
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[(5) - (6)].range);
					n->options = (yyvsp[(6) - (6)].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 174:
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}
    break;

  case 175:
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].defelt)); ;}
    break;

  case 176:
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {;}
    break;

  case 177:
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {;}
    break;

  case 178:
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {;}
    break;

  case 179:
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    { (yyval.value) = makeFloat((yyvsp[(1) - (1)].str)); ;}
    break;

  case 180:
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    { (yyval.value) = makeFloat((yyvsp[(2) - (2)].str)); ;}
    break;

  case 181:
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.value) = makeFloat((yyvsp[(2) - (2)].str));
					doNegateFloat((yyval.value));
				;}
    break;

  case 182:
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    { (yyval.value) = makeInteger((yyvsp[(1) - (1)].ival)); ;}
    break;

  case 183:
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[(2) - (2)].typnam), (yylsp[(1) - (2)]));
				;}
    break;

  case 184:
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[(2) - (2)].value), (yylsp[(1) - (2)]));
				;}
    break;

  case 185:
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));
				;}
    break;

  case 186:
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[(1) - (2)]));
				;}
    break;

  case 187:
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));
				;}
    break;

  case 188:
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[(2) - (2)].value), (yylsp[(1) - (2)]));
				;}
    break;

  case 189:
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[(2) - (2)].value), (yylsp[(1) - (2)]));
				;}
    break;

  case 190:
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[(1) - (2)]));
				;}
    break;

  case 191:
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[(1) - (2)]));
				;}
    break;

  case 192:
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));
				;}
    break;

  case 193:
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));
				;}
    break;

  case 194:
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));
				;}
    break;

  case 195:
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[(1) - (1)]));
				;}
    break;

  case 196:
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));
				;}
    break;

  case 197:
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {;}
    break;

  case 198:
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {;}
    break;

  case 199:
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    { (yyval.ival) = (yyvsp[(1) - (1)].ival); ;}
    break;

  case 200:
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    { (yyval.ival) = + (yyvsp[(2) - (2)].ival); ;}
    break;

  case 201:
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    { (yyval.ival) = - (yyvsp[(2) - (2)].ival); ;}
    break;

  case 202:
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 203:
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 204:
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 205:
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 206:
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 207:
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 208:
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
    {;}
    break;

  case 209:
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
    {;}
    break;

  case 210:
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
    {;}
    break;

  case 211:
#line 9 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[(4) - (9)].range)->relpersistence = (yyvsp[(2) - (9)].ival);
					n->relation = (yyvsp[(4) - (9)].range);
					n->tableElts = (yyvsp[(6) - (9)].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[(8) - (9)].list);
					n->oncommit = (yyvsp[(9) - (9)].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 212:
#line 24 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[(7) - (12)].range)->relpersistence = (yyvsp[(2) - (12)].ival);
					n->relation = (yyvsp[(7) - (12)].range);
					n->tableElts = (yyvsp[(9) - (12)].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[(11) - (12)].list);
					n->oncommit = (yyvsp[(12) - (12)].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 213:
#line 39 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[(6) - (11)].range)->relpersistence = (yyvsp[(4) - (11)].ival);
					n->relation = (yyvsp[(6) - (11)].range);
					n->tableElts = (yyvsp[(8) - (11)].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[(10) - (11)].list);
					n->oncommit = (yyvsp[(11) - (11)].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 214:
#line 56 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = 0; ;}
    break;

  case 215:
#line 58 "third_party/libpg_query/grammar/statements/create.y"
    {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[(1) - (2)].ival) | (yyvsp[(2) - (2)].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[(2) - (2)]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[(2) - (2)]))));
					(yyval.ival) = newspec;
				;}
    break;

  case 216:
#line 84 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (PGNode *)(yyvsp[(1) - (1)].typnam); ;}
    break;

  case 217:
#line 85 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[(1) - (1)].keyword))); ;}
    break;

  case 218:
#line 86 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (PGNode *)(yyvsp[(1) - (1)].list); ;}
    break;

  case 219:
#line 87 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (PGNode *)(yyvsp[(1) - (1)].value); ;}
    break;

  case 220:
#line 88 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (PGNode *)makeString((yyvsp[(1) - (1)].str)); ;}
    break;

  case 221:
#line 89 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[(1) - (1)].keyword))); ;}
    break;

  case 222:
#line 93 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
    break;

  case 223:
#line 94 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = NIL; ;}
    break;

  case 224:
#line 99 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}
    break;

  case 225:
#line 104 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; ;}
    break;

  case 226:
#line 105 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; ;}
    break;

  case 227:
#line 106 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; ;}
    break;

  case 228:
#line 107 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; ;}
    break;

  case 229:
#line 108 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; ;}
    break;

  case 230:
#line 114 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[(3) - (3)].node));
					n->conname = (yyvsp[(2) - (3)].str);
					n->location = (yylsp[(1) - (3)]);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 231:
#line 120 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 232:
#line 121 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 233:
#line 123 "third_party/libpg_query/grammar/statements/create.y"
    {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[(2) - (2)].list);
					n->location = (yylsp[(1) - (2)]);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 234:
#line 140 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[(1) - (2)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 235:
#line 147 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[(1) - (1)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 236:
#line 154 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[(1) - (2)]);
					n->keys = NULL;
					n->options = (yyvsp[(2) - (2)].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 237:
#line 164 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[(1) - (3)]);
					n->keys = NULL;
					n->options = (yyvsp[(3) - (3)].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 238:
#line 174 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[(1) - (5)]);
					n->is_no_inherit = (yyvsp[(5) - (5)].boolean);
					n->raw_expr = (yyvsp[(3) - (5)].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 239:
#line 186 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[(1) - (3)]);
					n->compression_name = (yyvsp[(3) - (3)].str);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 240:
#line 194 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[(1) - (2)]);
					n->raw_expr = (yyvsp[(2) - (2)].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 241:
#line 203 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[(1) - (5)]);
					n->pktable			= (yyvsp[(2) - (5)].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[(3) - (5)].list);
					n->fk_matchtype		= (yyvsp[(4) - (5)].ival);
					n->fk_upd_action	= (char) ((yyvsp[(5) - (5)].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[(5) - (5)].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 242:
#line 220 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; ;}
    break;

  case 243:
#line 221 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.constr) = PG_CONSTR_GENERATED_STORED; ;}
    break;

  case 244:
#line 225 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.constr) = (yyvsp[(1) - (1)].constr) ;}
    break;

  case 245:
#line 226 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; ;}
    break;

  case 246:
#line 231 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[(2) - (5)].ival);
					n->options = (yyvsp[(5) - (5)].list);
					n->location = (yylsp[(1) - (5)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 247:
#line 240 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[(7) - (7)].constr);
					n->generated_when = (yyvsp[(2) - (7)].ival);
					n->raw_expr = (yyvsp[(5) - (7)].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[(1) - (7)]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[(2) - (7)].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[(2) - (7)]))));

					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 248:
#line 263 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[(5) - (5)].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[(3) - (5)].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[(1) - (5)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 249:
#line 277 "third_party/libpg_query/grammar/statements/create.y"
    {
					(yyval.defelt) = makeDefElem((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)]));
				;}
    break;

  case 250:
#line 283 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = (yyvsp[(3) - (3)].ival); ;}
    break;

  case 251:
#line 289 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = ((yyvsp[(1) - (1)].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); ;}
    break;

  case 252:
#line 291 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[(1) - (1)].ival) & 0xFF); ;}
    break;

  case 253:
#line 293 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = ((yyvsp[(1) - (2)].ival) << 8) | ((yyvsp[(2) - (2)].ival) & 0xFF); ;}
    break;

  case 254:
#line 295 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = ((yyvsp[(2) - (2)].ival) << 8) | ((yyvsp[(1) - (2)].ival) & 0xFF); ;}
    break;

  case 255:
#line 297 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); ;}
    break;

  case 256:
#line 300 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.oncommit) = ONCOMMIT_DROP; ;}
    break;

  case 257:
#line 301 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; ;}
    break;

  case 258:
#line 302 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; ;}
    break;

  case 259:
#line 303 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.oncommit) = PG_ONCOMMIT_NOOP; ;}
    break;

  case 260:
#line 308 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
    break;

  case 261:
#line 312 "third_party/libpg_query/grammar/statements/create.y"
    {  (yyval.boolean) = true; ;}
    break;

  case 262:
#line 313 "third_party/libpg_query/grammar/statements/create.y"
    {  (yyval.boolean) = false; ;}
    break;

  case 263:
#line 319 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[(3) - (3)].node));
					n->conname = (yyvsp[(2) - (3)].str);
					n->location = (yylsp[(1) - (3)]);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 264:
#line 325 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 265:
#line 330 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; ;}
    break;

  case 266:
#line 331 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; ;}
    break;

  case 267:
#line 332 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; ;}
    break;

  case 268:
#line 333 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; ;}
    break;

  case 269:
#line 334 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; ;}
    break;

  case 270:
#line 335 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; ;}
    break;

  case 271:
#line 336 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; ;}
    break;

  case 272:
#line 337 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; ;}
    break;

  case 273:
#line 343 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}
    break;

  case 274:
#line 344 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt)); ;}
    break;

  case 275:
#line 348 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.str) = (yyvsp[(3) - (3)].str); ;}
    break;

  case 276:
#line 354 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[(1) - (1)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 277:
#line 361 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[(1) - (2)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 278:
#line 368 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[(1) - (2)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 279:
#line 375 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[(1) - (2)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 280:
#line 386 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
    break;

  case 281:
#line 387 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[(1) - (2)]))); ;}
    break;

  case 282:
#line 388 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[(1) - (2)]))); ;}
    break;

  case 283:
#line 389 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = NIL; ;}
    break;

  case 284:
#line 393 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
    break;

  case 285:
#line 398 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = (yyvsp[(1) - (3)].ival) | (yyvsp[(3) - (3)].ival); ;}
    break;

  case 286:
#line 399 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = (yyvsp[(1) - (3)].ival) & ~(yyvsp[(3) - (3)].ival); ;}
    break;

  case 287:
#line 400 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = 0; ;}
    break;

  case 288:
#line 405 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 289:
#line 410 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = CAS_NOT_DEFERRABLE; ;}
    break;

  case 290:
#line 411 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = CAS_DEFERRABLE; ;}
    break;

  case 291:
#line 412 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; ;}
    break;

  case 292:
#line 413 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = CAS_INITIALLY_DEFERRED; ;}
    break;

  case 293:
#line 414 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = CAS_NOT_VALID; ;}
    break;

  case 294:
#line 415 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = CAS_NO_INHERIT; ;}
    break;

  case 295:
#line 421 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[(1) - (3)].str);
					n->typeName = (yyvsp[(2) - (3)].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[(3) - (3)].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[(1) - (3)]);
					(yyval.node) = (PGNode *)n;
			;}
    break;

  case 296:
#line 441 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[(1) - (4)].str);
					n->typeName = (yyvsp[(2) - (4)].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[(4) - (4)].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[(3) - (4)].node));
					} else {
					    constraints = list_make1((yyvsp[(3) - (4)].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[(1) - (4)]);
					(yyval.node) = (PGNode *)n;
			;}
    break;

  case 297:
#line 469 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}
    break;

  case 298:
#line 470 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt)); ;}
    break;

  case 299:
#line 474 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 300:
#line 478 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 301:
#line 479 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 302:
#line 480 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 303:
#line 485 "third_party/libpg_query/grammar/statements/create.y"
    {
					(yyval.defelt) = makeDefElem((yyvsp[(1) - (3)].str), (PGNode *) (yyvsp[(3) - (3)].node), (yylsp[(1) - (3)]));
				;}
    break;

  case 304:
#line 489 "third_party/libpg_query/grammar/statements/create.y"
    {
					(yyval.defelt) = makeDefElem((yyvsp[(1) - (1)].str), NULL, (yylsp[(1) - (1)]));
				;}
    break;

  case 305:
#line 496 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
    break;

  case 306:
#line 497 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = NIL; ;}
    break;

  case 307:
#line 502 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 308:
#line 503 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 309:
#line 504 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = NIL; ;}
    break;

  case 310:
#line 509 "third_party/libpg_query/grammar/statements/create.y"
    {
					(yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str));
				;}
    break;

  case 311:
#line 516 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
    break;

  case 312:
#line 517 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = NIL; ;}
    break;

  case 313:
#line 522 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
    break;

  case 314:
#line 523 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = NIL; ;}
    break;

  case 315:
#line 527 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = (yyvsp[(3) - (3)].ival); ;}
    break;

  case 316:
#line 533 "third_party/libpg_query/grammar/statements/create.y"
    {
					(yyval.defelt) = makeDefElem((yyvsp[(1) - (3)].str), (PGNode *) (yyvsp[(3) - (3)].node), (yylsp[(1) - (3)]));
				;}
    break;

  case 317:
#line 537 "third_party/libpg_query/grammar/statements/create.y"
    {
					(yyval.defelt) = makeDefElem((yyvsp[(1) - (1)].str), NULL, (yylsp[(1) - (1)]));
				;}
    break;

  case 318:
#line 541 "third_party/libpg_query/grammar/statements/create.y"
    {
					(yyval.defelt) = makeDefElemExtended((yyvsp[(1) - (5)].str), (yyvsp[(3) - (5)].str), (PGNode *) (yyvsp[(5) - (5)].node),
											 PG_DEFELEM_UNSPEC, (yylsp[(1) - (5)]));
				;}
    break;

  case 319:
#line 546 "third_party/libpg_query/grammar/statements/create.y"
    {
					(yyval.defelt) = makeDefElemExtended((yyvsp[(1) - (3)].str), (yyvsp[(3) - (3)].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[(1) - (3)]));
				;}
    break;

  case 320:
#line 553 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
    break;

  case 321:
#line 554 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
    break;

  case 322:
#line 558 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 323:
#line 559 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 324:
#line 563 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
    break;

  case 325:
#line 565 "third_party/libpg_query/grammar/statements/create.y"
    {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[(1) - (4)].str)), (yyvsp[(2) - (4)].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[(1) - (4)]);
				;}
    break;

  case 326:
#line 571 "third_party/libpg_query/grammar/statements/create.y"
    {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[(2) - (5)].str)), (yyvsp[(3) - (5)].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[(2) - (5)]);
				;}
    break;

  case 327:
#line 582 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[(1) - (5)]);
					n->raw_expr = (yyvsp[(3) - (5)].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[(5) - (5)].ival), (yylsp[(5) - (5)]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 328:
#line 596 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[(1) - (6)]);
					n->keys = (yyvsp[(3) - (6)].list);
					n->options = (yyvsp[(5) - (6)].list);
					n->indexname = NULL;
					processCASbits((yyvsp[(6) - (6)].ival), (yylsp[(6) - (6)]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 329:
#line 609 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[(1) - (3)]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[(2) - (3)].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[(3) - (3)].ival), (yylsp[(3) - (3)]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 330:
#line 624 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[(1) - (7)]);
					n->keys = (yyvsp[(4) - (7)].list);
					n->options = (yyvsp[(6) - (7)].list);
					n->indexname = NULL;
					processCASbits((yyvsp[(7) - (7)].ival), (yylsp[(7) - (7)]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 331:
#line 637 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[(1) - (4)]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[(3) - (4)].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[(4) - (4)].ival), (yylsp[(4) - (4)]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 332:
#line 652 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[(1) - (11)]);
					n->pktable			= (yyvsp[(7) - (11)].range);
					n->fk_attrs			= (yyvsp[(4) - (11)].list);
					n->pk_attrs			= (yyvsp[(8) - (11)].list);
					n->fk_matchtype		= (yyvsp[(9) - (11)].ival);
					n->fk_upd_action	= (char) ((yyvsp[(10) - (11)].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[(10) - (11)].ival) & 0xFF);
					processCASbits((yyvsp[(11) - (11)].ival), (yylsp[(11) - (11)]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 333:
#line 674 "third_party/libpg_query/grammar/statements/create.y"
    {
					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
				;}
    break;

  case 334:
#line 678 "third_party/libpg_query/grammar/statements/create.y"
    {
					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
				;}
    break;

  case 335:
#line 685 "third_party/libpg_query/grammar/statements/create.y"
    {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			;}
    break;

  case 336:
#line 689 "third_party/libpg_query/grammar/statements/create.y"
    {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[(1) - (2)]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			;}
    break;

  case 337:
#line 697 "third_party/libpg_query/grammar/statements/create.y"
    {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			;}
    break;

  case 338:
#line 701 "third_party/libpg_query/grammar/statements/create.y"
    {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			;}
    break;

  case 339:
#line 709 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[(2) - (3)].range);
					n->options = (yyvsp[(3) - (3)].ival);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 340:
#line 718 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}
    break;

  case 341:
#line 719 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}
    break;

  case 342:
#line 720 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}
    break;

  case 343:
#line 721 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}
    break;

  case 344:
#line 723 "third_party/libpg_query/grammar/statements/create.y"
    {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[(1) - (2)]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				;}
    break;

  case 345:
#line 730 "third_party/libpg_query/grammar/statements/create.y"
    {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[(1) - (2)]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				;}
    break;

  case 346:
#line 736 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; ;}
    break;

  case 347:
#line 737 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = RELPERSISTENCE_PERMANENT; ;}
    break;

  case 348:
#line 742 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; ;}
    break;

  case 349:
#line 743 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; ;}
    break;

  case 350:
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[(2) - (6)].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[(5) - (6)].list);
					n->behavior = (yyvsp[(6) - (6)].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 351:
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[(2) - (4)].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[(3) - (4)].list);
					n->behavior = (yyvsp[(4) - (4)].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 352:
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[(2) - (6)].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[(5) - (6)].list);
					n->behavior = (yyvsp[(6) - (6)].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 353:
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[(2) - (4)].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[(3) - (4)].list);
					n->behavior = (yyvsp[(4) - (4)].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 354:
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[(2) - (6)].objtype);
					n->objects = list_make1(lappend((yyvsp[(5) - (6)].list), makeString((yyvsp[(3) - (6)].str))));
					n->behavior = (yyvsp[(6) - (6)].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 355:
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[(2) - (8)].objtype);
					n->objects = list_make1(lappend((yyvsp[(7) - (8)].list), makeString((yyvsp[(5) - (8)].str))));
					n->behavior = (yyvsp[(8) - (8)].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 356:
#line 70 "third_party/libpg_query/grammar/statements/drop.y"
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = false;
					n->objects = (yyvsp[(3) - (4)].list);
					n->behavior = (yyvsp[(4) - (4)].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 357:
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = true;
					n->objects = (yyvsp[(5) - (6)].list);
					n->behavior = (yyvsp[(6) - (6)].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 358:
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_TABLE; ;}
    break;

  case 359:
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_SEQUENCE; ;}
    break;

  case 360:
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_FUNCTION; ;}
    break;

  case 361:
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_FUNCTION; ;}
    break;

  case 362:
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; ;}
    break;

  case 363:
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_VIEW; ;}
    break;

  case 364:
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_MATVIEW; ;}
    break;

  case 365:
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_INDEX; ;}
    break;

  case 366:
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; ;}
    break;

  case 367:
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_COLLATION; ;}
    break;

  case 368:
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_CONVERSION; ;}
    break;

  case 369:
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; ;}
    break;

  case 370:
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_TSPARSER; ;}
    break;

  case 371:
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; ;}
    break;

  case 372:
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; ;}
    break;

  case 373:
#line 108 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; ;}
    break;

  case 374:
#line 113 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; ;}
    break;

  case 375:
#line 114 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; ;}
    break;

  case 376:
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_EXTENSION; ;}
    break;

  case 377:
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_FDW; ;}
    break;

  case 378:
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_PUBLICATION; ;}
    break;

  case 379:
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_SCHEMA; ;}
    break;

  case 380:
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; ;}
    break;

  case 381:
#line 124 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].list)); ;}
    break;

  case 382:
#line 125 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)); ;}
    break;

  case 383:
#line 130 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.dbehavior) = PG_DROP_CASCADE; ;}
    break;

  case 384:
#line 131 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.dbehavior) = PG_DROP_RESTRICT; ;}
    break;

  case 385:
#line 132 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ ;}
    break;

  case 386:
#line 137 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_POLICY; ;}
    break;

  case 387:
#line 138 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_RULE; ;}
    break;

  case 388:
#line 139 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_TRIGGER; ;}
    break;

  case 389:
#line 142 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].typnam)); ;}
    break;

  case 390:
#line 143 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typnam)); ;}
    break;

  case 391:
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
    {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				n->relpersistence=(yyvsp[(2) - (8)].ival);
				n->name = (yyvsp[(4) - (8)].range);
				n->params = (yyvsp[(5) - (8)].list);
				n->function = NULL;
				n->query = (yyvsp[(8) - (8)].node);
				(yyval.node) = (PGNode *)n;
				
			;}
    break;

  case 392:
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
    {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				n->relpersistence=(yyvsp[(2) - (7)].ival);
				n->name = (yyvsp[(4) - (7)].range);
				n->params = (yyvsp[(5) - (7)].list);
				n->function = (yyvsp[(7) - (7)].node);
				n->query = NULL;
				(yyval.node) = (PGNode *)n;
                         ;}
    break;

  case 395:
#line 42 "third_party/libpg_query/grammar/statements/create_function.y"
    {
				(yyval.list) = NIL;
			;}
    break;

  case 396:
#line 46 "third_party/libpg_query/grammar/statements/create_function.y"
    {
				(yyval.list) = (yyvsp[(2) - (3)].list);
			;}
    break;

  case 397:
#line 12 "third_party/libpg_query/grammar/statements/update.y"
    {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[(3) - (8)].range);
					n->targetList = (yyvsp[(5) - (8)].list);
					n->fromClause = (yyvsp[(6) - (8)].list);
					n->whereClause = (yyvsp[(7) - (8)].node);
					n->returningList = (yyvsp[(8) - (8)].list);
					n->withClause = (yyvsp[(1) - (8)].with);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 398:
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
    {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[(3) - (11)].range);
					n->query = NULL;
					n->attlist = (yyvsp[(4) - (11)].list);
					n->is_from = (yyvsp[(6) - (11)].boolean);
					n->is_program = (yyvsp[(7) - (11)].boolean);
					n->filename = (yyvsp[(8) - (11)].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[(8) - (11)]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[(2) - (11)].defelt))
						n->options = lappend(n->options, (yyvsp[(2) - (11)].defelt));
					if ((yyvsp[(5) - (11)].defelt))
						n->options = lappend(n->options, (yyvsp[(5) - (11)].defelt));
					if ((yyvsp[(9) - (11)].defelt))
						n->options = lappend(n->options, (yyvsp[(9) - (11)].defelt));
					if ((yyvsp[(11) - (11)].list))
						n->options = list_concat(n->options, (yyvsp[(11) - (11)].list));
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 399:
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
    {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[(3) - (9)].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[(6) - (9)].boolean);
					n->filename = (yyvsp[(7) - (9)].str);
					n->options = (yyvsp[(9) - (9)].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[(5) - (9)]))));

					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 400:
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.boolean) = true; ;}
    break;

  case 401:
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.boolean) = false; ;}
    break;

  case 402:
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(2) - (3)]));
				;}
    break;

  case 403:
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.defelt) = NULL; ;}
    break;

  case 404:
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
				;}
    break;

  case 405:
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
				;}
    break;

  case 406:
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
    {;}
    break;

  case 407:
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
    {;}
    break;

  case 408:
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
    {;}
    break;

  case 409:
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
    {;}
    break;

  case 410:
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.boolean) = true; ;}
    break;

  case 411:
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.boolean) = false; ;}
    break;

  case 412:
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 413:
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
    break;

  case 414:
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}
    break;

  case 415:
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.node) = (PGNode *) (yyvsp[(1) - (1)].value); ;}
    break;

  case 416:
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.node) = (PGNode *) makeNode(PGAStar); ;}
    break;

  case 417:
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.node) = (PGNode *) (yyvsp[(2) - (3)].list); ;}
    break;

  case 418:
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.node) = NULL; ;}
    break;

  case 419:
#line 112 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)]));
				;}
    break;

  case 420:
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[(1) - (2)]));
				;}
    break;

  case 421:
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.defelt) = NULL; ;}
    break;

  case 422:
#line 128 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].defelt)); ;}
    break;

  case 423:
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.list) = NIL; ;}
    break;

  case 424:
#line 135 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[(1) - (1)]));
				;}
    break;

  case 425:
#line 138 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.defelt) = NULL; ;}
    break;

  case 426:
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[(1) - (1)]));
				;}
    break;

  case 427:
#line 148 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));
				;}
    break;

  case 428:
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));
				;}
    break;

  case 429:
#line 156 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));
				;}
    break;

  case 430:
#line 160 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));
				;}
    break;

  case 431:
#line 164 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[(1) - (1)]));
				;}
    break;

  case 432:
#line 168 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));
				;}
    break;

  case 433:
#line 172 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));
				;}
    break;

  case 434:
#line 176 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));
				;}
    break;

  case 435:
#line 180 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));
				;}
    break;

  case 436:
#line 184 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[(1) - (3)]));
				;}
    break;

  case 437:
#line 188 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[(4) - (4)].list), (yylsp[(1) - (4)]));
				;}
    break;

  case 438:
#line 192 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));
				;}
    break;

  case 439:
#line 196 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[(2) - (2)].str)), (yylsp[(1) - (2)]));
				;}
    break;

  case 440:
#line 203 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}
    break;

  case 441:
#line 209 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 442:
#line 210 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.str) = NULL; ;}
    break;

  case 443:
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.str) = NULL; ;}
    break;

  case 444:
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));
				;}
    break;

  case 445:
#line 221 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));
				;}
    break;

  case 448:
#line 52 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (3)].node); ;}
    break;

  case 449:
#line 53 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (3)].node); ;}
    break;

  case 450:
#line 68 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 451:
#line 70 "third_party/libpg_query/grammar/statements/select.y"
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[(1) - (2)].node);
				;}
    break;

  case 452:
#line 77 "third_party/libpg_query/grammar/statements/select.y"
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[(1) - (4)].node), (yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].list),
										(PGNode*) list_nth((yyvsp[(4) - (4)].list), 0), (PGNode*) list_nth((yyvsp[(4) - (4)].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[(1) - (4)].node);
				;}
    break;

  case 453:
#line 85 "third_party/libpg_query/grammar/statements/select.y"
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[(1) - (4)].node), (yyvsp[(2) - (4)].list), (yyvsp[(4) - (4)].list),
										(PGNode*) list_nth((yyvsp[(3) - (4)].list), 0), (PGNode*) list_nth((yyvsp[(3) - (4)].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[(1) - (4)].node);
				;}
    break;

  case 454:
#line 93 "third_party/libpg_query/grammar/statements/select.y"
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (2)].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[(1) - (2)].with),
										yyscanner);
					(yyval.node) = (yyvsp[(2) - (2)].node);
				;}
    break;

  case 455:
#line 101 "third_party/libpg_query/grammar/statements/select.y"
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].list), NIL,
										NULL, NULL,
										(yyvsp[(1) - (3)].with),
										yyscanner);
					(yyval.node) = (yyvsp[(2) - (3)].node);
				;}
    break;

  case 456:
#line 109 "third_party/libpg_query/grammar/statements/select.y"
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (5)].node), (yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].list),
										(PGNode*) list_nth((yyvsp[(5) - (5)].list), 0), (PGNode*) list_nth((yyvsp[(5) - (5)].list), 1),
										(yyvsp[(1) - (5)].with),
										yyscanner);
					(yyval.node) = (yyvsp[(2) - (5)].node);
				;}
    break;

  case 457:
#line 117 "third_party/libpg_query/grammar/statements/select.y"
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (5)].node), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].list),
										(PGNode*) list_nth((yyvsp[(4) - (5)].list), 0), (PGNode*) list_nth((yyvsp[(4) - (5)].list), 1),
										(yyvsp[(1) - (5)].with),
										yyscanner);
					(yyval.node) = (yyvsp[(2) - (5)].node);
				;}
    break;

  case 458:
#line 127 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 459:
#line 128 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 460:
#line 158 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[(3) - (11)].list);
					n->intoClause = (yyvsp[(4) - (11)].into);
					n->fromClause = (yyvsp[(5) - (11)].list);
					n->whereClause = (yyvsp[(6) - (11)].node);
					n->groupClause = (yyvsp[(7) - (11)].list);
					n->havingClause = (yyvsp[(8) - (11)].node);
					n->windowClause = (yyvsp[(9) - (11)].list);
					n->qualifyClause = (yyvsp[(10) - (11)].node);
					n->sampleOptions = (yyvsp[(11) - (11)].node);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 461:
#line 174 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[(2) - (11)].list);
					n->targetList = (yyvsp[(3) - (11)].list);
					n->intoClause = (yyvsp[(4) - (11)].into);
					n->fromClause = (yyvsp[(5) - (11)].list);
					n->whereClause = (yyvsp[(6) - (11)].node);
					n->groupClause = (yyvsp[(7) - (11)].list);
					n->havingClause = (yyvsp[(8) - (11)].node);
					n->windowClause = (yyvsp[(9) - (11)].list);
					n->qualifyClause = (yyvsp[(10) - (11)].node);
					n->sampleOptions = (yyvsp[(11) - (11)].node);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 462:
#line 188 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 463:
#line 190 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[(2) - (2)].range));
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 464:
#line 209 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[(3) - (4)].boolean), (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node));
				;}
    break;

  case 465:
#line 213 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[(3) - (4)].boolean), (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node));
				;}
    break;

  case 466:
#line 217 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[(3) - (4)].boolean), (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node));
				;}
    break;

  case 467:
#line 234 "third_party/libpg_query/grammar/statements/select.y"
    {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[(2) - (2)].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[(1) - (2)]);
			;}
    break;

  case 468:
#line 241 "third_party/libpg_query/grammar/statements/select.y"
    {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[(2) - (2)].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[(1) - (2)]);
			;}
    break;

  case 469:
#line 248 "third_party/libpg_query/grammar/statements/select.y"
    {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[(3) - (3)].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[(1) - (3)]);
			;}
    break;

  case 470:
#line 257 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
    break;

  case 471:
#line 258 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
    break;

  case 472:
#line 262 "third_party/libpg_query/grammar/statements/select.y"
    {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[(1) - (6)].str);
				n->aliascolnames = (yyvsp[(2) - (6)].list);
				n->ctequery = (yyvsp[(5) - (6)].node);
				n->location = (yylsp[(1) - (6)]);
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 473:
#line 274 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[(2) - (2)].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				;}
    break;

  case 474:
#line 284 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.into) = NULL; ;}
    break;

  case 475:
#line 293 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.range) = (yyvsp[(3) - (3)].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				;}
    break;

  case 476:
#line 298 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.range) = (yyvsp[(3) - (3)].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				;}
    break;

  case 477:
#line 303 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.range) = (yyvsp[(4) - (4)].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				;}
    break;

  case 478:
#line 308 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.range) = (yyvsp[(4) - (4)].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				;}
    break;

  case 479:
#line 313 "third_party/libpg_query/grammar/statements/select.y"
    {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[(1) - (4)]))));
					(yyval.range) = (yyvsp[(4) - (4)].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				;}
    break;

  case 480:
#line 321 "third_party/libpg_query/grammar/statements/select.y"
    {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[(1) - (4)]))));
					(yyval.range) = (yyvsp[(4) - (4)].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				;}
    break;

  case 481:
#line 329 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.range) = (yyvsp[(3) - (3)].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				;}
    break;

  case 482:
#line 334 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.range) = (yyvsp[(2) - (2)].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				;}
    break;

  case 483:
#line 339 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.range) = (yyvsp[(1) - (1)].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				;}
    break;

  case 484:
#line 345 "third_party/libpg_query/grammar/statements/select.y"
    {;}
    break;

  case 485:
#line 346 "third_party/libpg_query/grammar/statements/select.y"
    {;}
    break;

  case 486:
#line 350 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = true; ;}
    break;

  case 487:
#line 351 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = false; ;}
    break;

  case 488:
#line 352 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = false; ;}
    break;

  case 489:
#line 359 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(NIL); ;}
    break;

  case 490:
#line 360 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(4) - (5)].list); ;}
    break;

  case 491:
#line 364 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL;;}
    break;

  case 492:
#line 365 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 493:
#line 369 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = true;;}
    break;

  case 494:
#line 370 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = false;;}
    break;

  case 495:
#line 371 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = false; ;}
    break;

  case 496:
#line 375 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list);;}
    break;

  case 497:
#line 376 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 498:
#line 380 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(3) - (3)].list); ;}
    break;

  case 499:
#line 382 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSortBy *sort = makeNode(PGSortBy);
					sort->node = (PGNode *) makeNode(PGAStar);
					sort->sortby_dir = (yyvsp[(4) - (5)].sortorder);
					sort->sortby_nulls = (yyvsp[(5) - (5)].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				;}
    break;

  case 500:
#line 392 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSortBy *sort = makeNode(PGSortBy);
					sort->node = (PGNode *) makeNode(PGAStar);
					sort->sortby_dir = (yyvsp[(4) - (5)].sortorder);
					sort->sortby_nulls = (yyvsp[(5) - (5)].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				;}
    break;

  case 501:
#line 404 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].sortby)); ;}
    break;

  case 502:
#line 405 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].sortby)); ;}
    break;

  case 503:
#line 409 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[(1) - (4)].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[(4) - (4)].nullorder);
					(yyval.sortby)->useOp = (yyvsp[(3) - (4)].list);
					(yyval.sortby)->location = (yylsp[(3) - (4)]);
				;}
    break;

  case 504:
#line 418 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[(1) - (3)].node);
					(yyval.sortby)->sortby_dir = (yyvsp[(2) - (3)].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[(3) - (3)].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				;}
    break;

  case 505:
#line 428 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.sortorder) = PG_SORTBY_ASC; ;}
    break;

  case 506:
#line 429 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.sortorder) = PG_SORTBY_DESC; ;}
    break;

  case 507:
#line 430 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.sortorder) = PG_SORTBY_DEFAULT; ;}
    break;

  case 508:
#line 433 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; ;}
    break;

  case 509:
#line 434 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; ;}
    break;

  case 510:
#line 435 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; ;}
    break;

  case 511:
#line 439 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make2((yyvsp[(2) - (2)].node), (yyvsp[(1) - (2)].node)); ;}
    break;

  case 512:
#line 440 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make2((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node)); ;}
    break;

  case 513:
#line 441 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make2(NULL, (yyvsp[(1) - (1)].node)); ;}
    break;

  case 514:
#line 442 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make2((yyvsp[(1) - (1)].node), NULL); ;}
    break;

  case 515:
#line 446 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 516:
#line 447 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make2(NULL,NULL); ;}
    break;

  case 517:
#line 452 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
    break;

  case 518:
#line 454 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[(1) - (4)]))));
				;}
    break;

  case 519:
#line 470 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(3) - (5)].node); ;}
    break;

  case 520:
#line 472 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeIntConst(1, -1); ;}
    break;

  case 521:
#line 477 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
    break;

  case 522:
#line 480 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (3)].node); ;}
    break;

  case 523:
#line 488 "third_party/libpg_query/grammar/statements/select.y"
    {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[(1) - (2)].str)), true);
		;}
    break;

  case 524:
#line 492 "third_party/libpg_query/grammar/statements/select.y"
    {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (2)].ival)), true);
		;}
    break;

  case 525:
#line 496 "third_party/libpg_query/grammar/statements/select.y"
    {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[(1) - (2)].str)), true);
		;}
    break;

  case 526:
#line 500 "third_party/libpg_query/grammar/statements/select.y"
    {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (2)].ival)), true);
		;}
    break;

  case 527:
#line 504 "third_party/libpg_query/grammar/statements/select.y"
    {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (1)].ival)), false);
		;}
    break;

  case 528:
#line 508 "third_party/libpg_query/grammar/statements/select.y"
    {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (2)].ival)), false);
		;}
    break;

  case 529:
#line 515 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (yyvsp[(3) - (3)].node);
				;}
    break;

  case 530:
#line 519 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 531:
#line 526 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 532:
#line 527 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = NULL; ;}
    break;

  case 533:
#line 532 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeSampleOptions((yyvsp[(3) - (5)].node), (yyvsp[(1) - (5)].str), (yyvsp[(5) - (5)].ival), (yylsp[(1) - (5)]));
				;}
    break;

  case 534:
#line 536 "third_party/libpg_query/grammar/statements/select.y"
    {
			(yyval.node) = makeSampleOptions((yyvsp[(1) - (1)].node), NULL, -1, (yylsp[(1) - (1)]));
		;}
    break;

  case 535:
#line 540 "third_party/libpg_query/grammar/statements/select.y"
    {
			(yyval.node) = makeSampleOptions((yyvsp[(1) - (4)].node), (yyvsp[(3) - (4)].str), -1, (yylsp[(1) - (4)]));
		;}
    break;

  case 536:
#line 544 "third_party/libpg_query/grammar/statements/select.y"
    {
			(yyval.node) = makeSampleOptions((yyvsp[(1) - (6)].node), (yyvsp[(3) - (6)].str), (yyvsp[(5) - (6)].ival), (yylsp[(1) - (6)]));
		;}
    break;

  case 537:
#line 551 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (yyvsp[(2) - (2)].node);
				;}
    break;

  case 538:
#line 557 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 539:
#line 558 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 540:
#line 563 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.ival) = (yyvsp[(3) - (4)].ival); ;}
    break;

  case 541:
#line 564 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.ival) = -1; ;}
    break;

  case 542:
#line 568 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 543:
#line 570 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[(1) - (1)]));
				;}
    break;

  case 544:
#line 575 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeLimitPercent((yyvsp[(1) - (2)].node)); ;}
    break;

  case 545:
#line 577 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[(1) - (2)].str),(yylsp[(1) - (2)]))); ;}
    break;

  case 546:
#line 579 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[(1) - (2)].ival),(yylsp[(1) - (2)]))); ;}
    break;

  case 547:
#line 583 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 548:
#line 603 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 549:
#line 605 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
    break;

  case 550:
#line 607 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = doNegate((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
    break;

  case 551:
#line 611 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeIntConst((yyvsp[(1) - (1)].ival),(yylsp[(1) - (1)])); ;}
    break;

  case 552:
#line 612 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeFloatConst((yyvsp[(1) - (1)].str),(yylsp[(1) - (1)])); ;}
    break;

  case 553:
#line 616 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.ival) = 0; ;}
    break;

  case 554:
#line 617 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.ival) = 0; ;}
    break;

  case 555:
#line 620 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.ival) = 0; ;}
    break;

  case 556:
#line 621 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.ival) = 0; ;}
    break;

  case 557:
#line 646 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(3) - (3)].list); ;}
    break;

  case 558:
#line 648 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[(3) - (3)]));
					(yyval.list) = list_make1(node);
				;}
    break;

  case 559:
#line 653 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[(3) - (3)]));
					(yyval.list) = list_make1(node);
				;}
    break;

  case 560:
#line 657 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 561:
#line 661 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
    break;

  case 562:
#line 662 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list),(yyvsp[(3) - (3)].node)); ;}
    break;

  case 563:
#line 666 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 564:
#line 667 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 565:
#line 671 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 566:
#line 672 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 567:
#line 673 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 568:
#line 674 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 569:
#line 675 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 570:
#line 680 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[(1) - (2)]));
				;}
    break;

  case 571:
#line 693 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
				;}
    break;

  case 572:
#line 700 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
				;}
    break;

  case 573:
#line 707 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));
				;}
    break;

  case 574:
#line 713 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 575:
#line 714 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 576:
#line 718 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
    break;

  case 577:
#line 719 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 578:
#line 723 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
    break;

  case 579:
#line 724 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 580:
#line 728 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 581:
#line 729 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 582:
#line 733 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 583:
#line 734 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 584:
#line 738 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
    break;

  case 585:
#line 739 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
    break;

  case 586:
#line 744 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[(2) - (3)].list);
					n->strength = (yyvsp[(1) - (3)].lockstrength);
					n->waitPolicy = (yyvsp[(3) - (3)].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 587:
#line 754 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.lockstrength) = LCS_FORUPDATE; ;}
    break;

  case 588:
#line 755 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; ;}
    break;

  case 589:
#line 756 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.lockstrength) = PG_LCS_FORSHARE; ;}
    break;

  case 590:
#line 757 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; ;}
    break;

  case 591:
#line 761 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
    break;

  case 592:
#line 762 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 593:
#line 767 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.lockwaitpolicy) = LockWaitError; ;}
    break;

  case 594:
#line 768 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.lockwaitpolicy) = PGLockWaitSkip; ;}
    break;

  case 595:
#line 769 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.lockwaitpolicy) = PGLockWaitBlock; ;}
    break;

  case 596:
#line 779 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[(3) - (4)].list));
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 597:
#line 785 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[(1) - (5)].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[(4) - (5)].list));
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 598:
#line 793 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 599:
#line 794 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (2)].node); ;}
    break;

  case 600:
#line 807 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
    break;

  case 601:
#line 808 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 602:
#line 812 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
    break;

  case 603:
#line 813 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
    break;

  case 604:
#line 817 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 605:
#line 818 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 606:
#line 825 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyvsp[(1) - (3)].range)->alias = (yyvsp[(2) - (3)].alias);
					(yyvsp[(1) - (3)].range)->sample = (yyvsp[(3) - (3)].node);
					(yyval.node) = (PGNode *) (yyvsp[(1) - (3)].range);
				;}
    break;

  case 607:
#line 831 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[(1) - (3)].node);
					n->alias = (PGAlias*) linitial((yyvsp[(2) - (3)].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[(2) - (3)].list));
					n->sample = (yyvsp[(3) - (3)].node);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 608:
#line 839 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[(2) - (3)].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[(3) - (3)].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[(3) - (3)].list));
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 609:
#line 847 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[(1) - (3)].node);
					n->alias = (yyvsp[(2) - (3)].alias);
					n->sample = (yyvsp[(3) - (3)].node);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 610:
#line 856 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[(2) - (3)].node);
					n->alias = (yyvsp[(3) - (3)].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 611:
#line 865 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) (yyvsp[(1) - (1)].jexpr);
				;}
    break;

  case 612:
#line 869 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyvsp[(2) - (4)].jexpr)->alias = (yyvsp[(4) - (4)].alias);
					(yyval.node) = (PGNode *) (yyvsp[(2) - (4)].jexpr);
				;}
    break;

  case 613:
#line 895 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.jexpr) = (yyvsp[(2) - (3)].jexpr);
				;}
    break;

  case 614:
#line 899 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[(1) - (4)].node);
					n->rarg = (yyvsp[(4) - (4)].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[(2) - (4)]);
					(yyval.jexpr) = n;
				;}
    break;

  case 615:
#line 912 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[(2) - (5)].jtype);
					n->isNatural = false;
					n->larg = (yyvsp[(1) - (5)].node);
					n->rarg = (yyvsp[(4) - (5)].node);
					if ((yyvsp[(5) - (5)].node) != NULL && IsA((yyvsp[(5) - (5)].node), PGList))
						n->usingClause = (PGList *) (yyvsp[(5) - (5)].node); /* USING clause */
					else
						n->quals = (yyvsp[(5) - (5)].node); /* ON clause */
					n->location = (yylsp[(2) - (5)]);
					(yyval.jexpr) = n;
				;}
    break;

  case 616:
#line 926 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[(1) - (4)].node);
					n->rarg = (yyvsp[(3) - (4)].node);
					if ((yyvsp[(4) - (4)].node) != NULL && IsA((yyvsp[(4) - (4)].node), PGList))
						n->usingClause = (PGList *) (yyvsp[(4) - (4)].node); /* USING clause */
					else
						n->quals = (yyvsp[(4) - (4)].node); /* ON clause */
					n->location = (yylsp[(2) - (4)]);
					(yyval.jexpr) = n;
				;}
    break;

  case 617:
#line 941 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[(3) - (5)].jtype);
					n->isNatural = true;
					n->larg = (yyvsp[(1) - (5)].node);
					n->rarg = (yyvsp[(5) - (5)].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[(2) - (5)]);
					(yyval.jexpr) = n;
				;}
    break;

  case 618:
#line 953 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = true;
					n->larg = (yyvsp[(1) - (4)].node);
					n->rarg = (yyvsp[(4) - (4)].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[(2) - (4)]);
					(yyval.jexpr) = n;
				;}
    break;

  case 619:
#line 969 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[(2) - (5)].str);
					(yyval.alias)->colnames = (yyvsp[(4) - (5)].list);
				;}
    break;

  case 620:
#line 975 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[(2) - (2)].str);
				;}
    break;

  case 621:
#line 980 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[(1) - (4)].str);
					(yyval.alias)->colnames = (yyvsp[(3) - (4)].list);
				;}
    break;

  case 622:
#line 986 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[(1) - (1)].str);
				;}
    break;

  case 623:
#line 992 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.alias) = (yyvsp[(1) - (1)].alias); ;}
    break;

  case 624:
#line 993 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.alias) = NULL; ;}
    break;

  case 625:
#line 1002 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make2((yyvsp[(1) - (1)].alias), NIL);
				;}
    break;

  case 626:
#line 1006 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make2(NULL, (yyvsp[(3) - (4)].list));
				;}
    break;

  case 627:
#line 1010 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[(2) - (5)].str);
					(yyval.list) = list_make2(a, (yyvsp[(4) - (5)].list));
				;}
    break;

  case 628:
#line 1016 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[(1) - (4)].str);
					(yyval.list) = list_make2(a, (yyvsp[(3) - (4)].list));
				;}
    break;

  case 629:
#line 1022 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make2(NULL, NIL);
				;}
    break;

  case 630:
#line 1027 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.jtype) = PG_JOIN_FULL; ;}
    break;

  case 631:
#line 1028 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.jtype) = PG_JOIN_LEFT; ;}
    break;

  case 632:
#line 1029 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.jtype) = PG_JOIN_RIGHT; ;}
    break;

  case 633:
#line 1030 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.jtype) = PG_JOIN_INNER; ;}
    break;

  case 634:
#line 1034 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 635:
#line 1035 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 636:
#line 1047 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) (yyvsp[(3) - (4)].list); ;}
    break;

  case 637:
#line 1048 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
    break;

  case 638:
#line 1054 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[(1) - (1)].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				;}
    break;

  case 639:
#line 1061 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[(1) - (2)].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				;}
    break;

  case 640:
#line 1068 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* no inheritance */
					(yyval.range) = (yyvsp[(2) - (2)].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				;}
    break;

  case 641:
#line 1075 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[(3) - (4)].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				;}
    break;

  case 642:
#line 1107 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[(2) - (2)].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[(1) - (2)].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 643:
#line 1118 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[(6) - (6)].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[(4) - (6)].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 644:
#line 1131 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make2((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 645:
#line 1135 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].list)); ;}
    break;

  case 646:
#line 1136 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)); ;}
    break;

  case 647:
#line 1139 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
    break;

  case 648:
#line 1140 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 649:
#line 1143 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = true; ;}
    break;

  case 650:
#line 1144 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = false; ;}
    break;

  case 651:
#line 1149 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
    break;

  case 652:
#line 1150 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 653:
#line 1156 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
				;}
    break;

  case 654:
#line 1160 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
				;}
    break;

  case 655:
#line 1166 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[(1) - (3)].str);
					n->typeName = (yyvsp[(2) - (3)].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[(3) - (3)].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[(1) - (3)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 656:
#line 1187 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[(2) - (2)].list);
					n->location = (yylsp[(1) - (2)]);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 657:
#line 1194 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 658:
#line 1207 "third_party/libpg_query/grammar/statements/select.y"
    {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].typnam)));
            ;}
    break;

  case 659:
#line 1210 "third_party/libpg_query/grammar/statements/select.y"
    {
             (yyval.list) = lappend((yyvsp[(1) - (4)].list), list_make2(makeString((yyvsp[(3) - (4)].str)), (yyvsp[(4) - (4)].typnam)));
            ;}
    break;

  case 662:
#line 1217 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
    break;

  case 663:
#line 1218 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.typnam) = NULL; ;}
    break;

  case 664:
#line 1221 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(1) - (2)].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[(2) - (2)].list);
				;}
    break;

  case 665:
#line 1226 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(2) - (3)].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[(3) - (3)].list);
					(yyval.typnam)->setof = true;
				;}
    break;

  case 666:
#line 1233 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(1) - (5)].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[(4) - (5)].ival)));
				;}
    break;

  case 667:
#line 1238 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(2) - (6)].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[(5) - (6)].ival)));
					(yyval.typnam)->setof = true;
				;}
    break;

  case 668:
#line 1244 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(1) - (2)].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				;}
    break;

  case 669:
#line 1249 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(2) - (3)].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				;}
    break;

  case 670:
#line 1254 "third_party/libpg_query/grammar/statements/select.y"
    {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[(5) - (5)].list);
               (yyval.typnam)->typmods = (yyvsp[(3) - (5)].list);
               (yyval.typnam)->location = (yylsp[(1) - (5)]);
               ;}
    break;

  case 671:
#line 1260 "third_party/libpg_query/grammar/statements/select.y"
    {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[(5) - (5)].list);
               (yyval.typnam)->typmods = (yyvsp[(3) - (5)].list);
               (yyval.typnam)->location = (yylsp[(1) - (5)]);
			;}
    break;

  case 672:
#line 1270 "third_party/libpg_query/grammar/statements/select.y"
    {  (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeInteger(-1)); ;}
    break;

  case 673:
#line 1272 "third_party/libpg_query/grammar/statements/select.y"
    {  (yyval.list) = lappend((yyvsp[(1) - (4)].list), makeInteger((yyvsp[(3) - (4)].ival))); ;}
    break;

  case 674:
#line 1274 "third_party/libpg_query/grammar/statements/select.y"
    {  (yyval.list) = NIL; ;}
    break;

  case 675:
#line 1278 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
    break;

  case 676:
#line 1279 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
    break;

  case 677:
#line 1280 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
    break;

  case 678:
#line 1281 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
    break;

  case 679:
#line 1282 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
    break;

  case 680:
#line 1284 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(1) - (2)].typnam);
					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
				;}
    break;

  case 681:
#line 1289 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(1) - (4)].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[(3) - (4)].ival), (yylsp[(3) - (4)])));
				;}
    break;

  case 682:
#line 1308 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
    break;

  case 683:
#line 1309 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
    break;

  case 684:
#line 1310 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
    break;

  case 685:
#line 1311 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
    break;

  case 686:
#line 1323 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = makeTypeName((yyvsp[(1) - (2)].str));
					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
					(yyval.typnam)->location = (yylsp[(1) - (2)]);
				;}
    break;

  case 687:
#line 1336 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
    break;

  case 688:
#line 1337 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 689:
#line 1344 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[(1) - (1)]);
				;}
    break;

  case 690:
#line 1349 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[(1) - (1)]);
				;}
    break;

  case 691:
#line 1354 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[(1) - (1)]);
				;}
    break;

  case 692:
#line 1359 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[(1) - (1)]);
				;}
    break;

  case 693:
#line 1364 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[(1) - (1)]);
				;}
    break;

  case 694:
#line 1369 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(2) - (2)].typnam);
					(yyval.typnam)->location = (yylsp[(1) - (2)]);
				;}
    break;

  case 695:
#line 1374 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[(1) - (2)]);
				;}
    break;

  case 696:
#line 1379 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
					(yyval.typnam)->location = (yylsp[(1) - (2)]);
				;}
    break;

  case 697:
#line 1385 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
					(yyval.typnam)->location = (yylsp[(1) - (2)]);
				;}
    break;

  case 698:
#line 1391 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
					(yyval.typnam)->location = (yylsp[(1) - (2)]);
				;}
    break;

  case 699:
#line 1397 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[(1) - (1)]);
				;}
    break;

  case 700:
#line 1404 "third_party/libpg_query/grammar/statements/select.y"
    {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[(2) - (3)].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[(2) - (3)]))));
					else if ((yyvsp[(2) - (3)].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[(2) - (3)].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[(2) - (3)]))));
				;}
    break;

  case 701:
#line 1425 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName("float4");
				;}
    break;

  case 702:
#line 1435 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
				;}
    break;

  case 703:
#line 1439 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
				;}
    break;

  case 704:
#line 1447 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
				;}
    break;

  case 705:
#line 1451 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
					(yyval.typnam)->typmods = NIL;
				;}
    break;

  case 706:
#line 1459 "third_party/libpg_query/grammar/statements/select.y"
    {
					const char *typname;

					typname = (yyvsp[(2) - (5)].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[(4) - (5)].list);
					(yyval.typnam)->location = (yylsp[(1) - (5)]);
				;}
    break;

  case 707:
#line 1471 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[(2) - (2)].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[(1) - (2)]);
				;}
    break;

  case 708:
#line 1492 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
				;}
    break;

  case 709:
#line 1496 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
				;}
    break;

  case 710:
#line 1502 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
				;}
    break;

  case 711:
#line 1506 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
					(yyval.typnam)->typmods = NIL;
				;}
    break;

  case 712:
#line 1519 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName((yyvsp[(1) - (4)].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[(3) - (4)].ival), (yylsp[(3) - (4)])));
					(yyval.typnam)->location = (yylsp[(1) - (4)]);
				;}
    break;

  case 713:
#line 1527 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName((yyvsp[(1) - (1)].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[(1) - (1)].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[(1) - (1)]);
				;}
    break;

  case 714:
#line 1537 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = (yyvsp[(2) - (2)].boolean) ? "varchar": "bpchar"; ;}
    break;

  case 715:
#line 1539 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = (yyvsp[(2) - (2)].boolean) ? "varchar": "bpchar"; ;}
    break;

  case 716:
#line 1541 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = "varchar"; ;}
    break;

  case 717:
#line 1543 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = (yyvsp[(3) - (3)].boolean) ? "varchar": "bpchar"; ;}
    break;

  case 718:
#line 1545 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = (yyvsp[(3) - (3)].boolean) ? "varchar": "bpchar"; ;}
    break;

  case 719:
#line 1547 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = (yyvsp[(2) - (2)].boolean) ? "varchar": "bpchar"; ;}
    break;

  case 720:
#line 1551 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = true; ;}
    break;

  case 721:
#line 1552 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = false; ;}
    break;

  case 722:
#line 1560 "third_party/libpg_query/grammar/statements/select.y"
    {
					if ((yyvsp[(5) - (5)].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[(3) - (5)].ival), (yylsp[(3) - (5)])));
					(yyval.typnam)->location = (yylsp[(1) - (5)]);
				;}
    break;

  case 723:
#line 1569 "third_party/libpg_query/grammar/statements/select.y"
    {
					if ((yyvsp[(2) - (2)].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[(1) - (2)]);
				;}
    break;

  case 724:
#line 1577 "third_party/libpg_query/grammar/statements/select.y"
    {
					if ((yyvsp[(5) - (5)].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[(3) - (5)].ival), (yylsp[(3) - (5)])));
					(yyval.typnam)->location = (yylsp[(1) - (5)]);
				;}
    break;

  case 725:
#line 1586 "third_party/libpg_query/grammar/statements/select.y"
    {
					if ((yyvsp[(2) - (2)].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[(1) - (2)]);
				;}
    break;

  case 726:
#line 1597 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[(1) - (1)]);
				;}
    break;

  case 727:
#line 1604 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = true; ;}
    break;

  case 728:
#line 1605 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = false; ;}
    break;

  case 729:
#line 1606 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = false; ;}
    break;

  case 746:
#line 1635 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[(1) - (1)]))); ;}
    break;

  case 747:
#line 1637 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[(1) - (1)]))); ;}
    break;

  case 748:
#line 1639 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[(1) - (1)]))); ;}
    break;

  case 749:
#line 1641 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[(1) - (1)]))); ;}
    break;

  case 750:
#line 1643 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[(1) - (1)]))); ;}
    break;

  case 751:
#line 1645 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[(1) - (1)]))); ;}
    break;

  case 752:
#line 1647 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[(1) - (1)]))); ;}
    break;

  case 753:
#line 1649 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[(1) - (1)]))); ;}
    break;

  case 754:
#line 1651 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[(1) - (3)])));
				;}
    break;

  case 755:
#line 1656 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[(1) - (3)])));
				;}
    break;

  case 756:
#line 1661 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[(1) - (3)])));
				;}
    break;

  case 757:
#line 1667 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[(1) - (3)])));
				;}
    break;

  case 758:
#line 1674 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[(1) - (3)])));
				;}
    break;

  case 759:
#line 1679 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[(1) - (3)])));
				;}
    break;

  case 760:
#line 1685 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[(1) - (3)])));
				;}
    break;

  case 761:
#line 1690 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 762:
#line 1721 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 763:
#line 1724 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeTypeCast((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].typnam), 0, (yylsp[(2) - (3)])); ;}
    break;

  case 764:
#line 1726 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[(1) - (3)].node);
					n->collname = (yyvsp[(3) - (3)].list);
					n->location = (yylsp[(2) - (3)]);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 765:
#line 1734 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[(5) - (5)].node), (yyvsp[(1) - (5)].node)),
											   (yylsp[(2) - (5)]));
				;}
    break;

  case 766:
#line 1749 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
    break;

  case 767:
#line 1751 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = doNegate((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
    break;

  case 768:
#line 1753 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 769:
#line 1755 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 770:
#line 1757 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 771:
#line 1759 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 772:
#line 1761 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 773:
#line 1763 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 774:
#line 1765 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 775:
#line 1767 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 776:
#line 1769 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 777:
#line 1771 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 778:
#line 1773 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 779:
#line 1775 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 780:
#line 1777 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 781:
#line 1780 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (3)].list), (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 782:
#line 1782 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(1) - (2)].list), NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
    break;

  case 783:
#line 1784 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (2)].list), (yyvsp[(1) - (2)].node), NULL, (yylsp[(2) - (2)])); ;}
    break;

  case 784:
#line 1787 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeAndExpr((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 785:
#line 1789 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeOrExpr((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 786:
#line 1791 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeNotExpr((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
    break;

  case 787:
#line 1793 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeNotExpr((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
    break;

  case 788:
#line 1796 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));
				;}
    break;

  case 789:
#line 1801 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));
				;}
    break;

  case 790:
#line 1806 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[(1) - (5)].node), (yyvsp[(3) - (5)].node), (yyvsp[(5) - (5)].node)),
											   (yylsp[(2) - (5)]));
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 791:
#line 1813 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node), (yylsp[(2) - (4)]));
				;}
    break;

  case 792:
#line 1818 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[(1) - (6)].node), (yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
											   (yylsp[(2) - (6)]));
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 793:
#line 1825 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));
				;}
    break;

  case 794:
#line 1830 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[(1) - (5)].node), (yyvsp[(3) - (5)].node), (yyvsp[(5) - (5)].node)),
											   (yylsp[(2) - (5)]));
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 795:
#line 1837 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node), (yylsp[(2) - (4)]));
				;}
    break;

  case 796:
#line 1842 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[(1) - (6)].node), (yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
											   (yylsp[(2) - (6)]));
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 797:
#line 1850 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[(4) - (4)].node), makeNullAConst(-1)),
											   (yylsp[(2) - (4)]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[(1) - (4)].node), (PGNode *) n, (yylsp[(2) - (4)]));
				;}
    break;

  case 798:
#line 1858 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
											   (yylsp[(2) - (6)]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[(1) - (6)].node), (PGNode *) n, (yylsp[(2) - (6)]));
				;}
    break;

  case 799:
#line 1866 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[(5) - (5)].node), makeNullAConst(-1)),
											   (yylsp[(2) - (5)]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[(1) - (5)].node), (PGNode *) n, (yylsp[(2) - (5)]));
				;}
    break;

  case 800:
#line 1874 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[(5) - (7)].node), (yyvsp[(7) - (7)].node)),
											   (yylsp[(2) - (7)]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[(1) - (7)].node), (PGNode *) n, (yylsp[(2) - (7)]));
				;}
    break;

  case 801:
#line 1892 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[(2) - (3)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 802:
#line 1900 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[(1) - (2)].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[(2) - (2)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 803:
#line 1908 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[(1) - (4)].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[(2) - (4)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 804:
#line 1916 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[(2) - (3)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 805:
#line 1924 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[(1) - (2)].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[(2) - (2)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 806:
#line 1931 "third_party/libpg_query/grammar/statements/select.y"
    {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[(1) - (1)].list), (yylsp[(1) - (1)]));
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 807:
#line 1935 "third_party/libpg_query/grammar/statements/select.y"
    {
				PGFuncCall *n = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[(2) - (3)].list), (yylsp[(2) - (3)]));
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 808:
#line 1939 "third_party/libpg_query/grammar/statements/select.y"
    {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[(2) - (3)].list), (yylsp[(2) - (3)]));
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 809:
#line 1944 "third_party/libpg_query/grammar/statements/select.y"
    {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[(1) - (3)].node);
				n->rhs = (yyvsp[(3) - (3)].node);
				n->location = (yylsp[(2) - (3)]);
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 810:
#line 1952 "third_party/libpg_query/grammar/statements/select.y"
    {
					if (list_length((yyvsp[(1) - (3)].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[(1) - (3)]))));
					if (list_length((yyvsp[(3) - (3)].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[(3) - (3)]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)),
											   (yylsp[(2) - (3)]));
				;}
    break;

  case 811:
#line 1968 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[(2) - (3)]);
					(yyval.node) = (PGNode *)b;
				;}
    break;

  case 812:
#line 1976 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[(1) - (4)].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[(2) - (4)]);
					(yyval.node) = (PGNode *)b;
				;}
    break;

  case 813:
#line 1984 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[(2) - (3)]);
					(yyval.node) = (PGNode *)b;
				;}
    break;

  case 814:
#line 1992 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[(1) - (4)].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[(2) - (4)]);
					(yyval.node) = (PGNode *)b;
				;}
    break;

  case 815:
#line 2000 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[(2) - (3)]);
					(yyval.node) = (PGNode *)b;
				;}
    break;

  case 816:
#line 2008 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[(1) - (4)].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[(2) - (4)]);
					(yyval.node) = (PGNode *)b;
				;}
    break;

  case 817:
#line 2016 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[(1) - (5)].node), (yyvsp[(5) - (5)].node), (yylsp[(2) - (5)]));
				;}
    break;

  case 818:
#line 2020 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[(1) - (6)].node), (yyvsp[(6) - (6)].node), (yylsp[(2) - (6)]));
				;}
    break;

  case 819:
#line 2024 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[(1) - (6)].node), (PGNode *) (yyvsp[(5) - (6)].list), (yylsp[(2) - (6)]));
				;}
    break;

  case 820:
#line 2028 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[(1) - (7)].node), (PGNode *) (yyvsp[(6) - (7)].list), (yylsp[(2) - (7)]));
				;}
    break;

  case 821:
#line 2032 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[(1) - (6)].node),
												   (PGNode *) list_make2((yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
												   (yylsp[(2) - (6)]));
				;}
    break;

  case 822:
#line 2040 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[(1) - (7)].node),
												   (PGNode *) list_make2((yyvsp[(5) - (7)].node), (yyvsp[(7) - (7)].node)),
												   (yylsp[(2) - (7)]));
				;}
    break;

  case 823:
#line 2048 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[(1) - (6)].node),
												   (PGNode *) list_make2((yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
												   (yylsp[(2) - (6)]));
				;}
    break;

  case 824:
#line 2056 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[(1) - (7)].node),
												   (PGNode *) list_make2((yyvsp[(5) - (7)].node), (yyvsp[(7) - (7)].node)),
												   (yylsp[(2) - (7)]));
				;}
    break;

  case 825:
#line 2064 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[(3) - (3)].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[(3) - (3)].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[(1) - (3)].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[(2) - (3)]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));
					}
				;}
    break;

  case 826:
#line 2084 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[(4) - (4)].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[(4) - (4)].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[(1) - (4)].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[(2) - (4)]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[(2) - (4)]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node), (yylsp[(2) - (4)]));
					}
				;}
    break;

  case 827:
#line 2106 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[(3) - (4)].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[(1) - (4)].node);
					n->operName = (yyvsp[(2) - (4)].list);
					n->subselect = (yyvsp[(4) - (4)].node);
					n->location = (yylsp[(2) - (4)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 828:
#line 2117 "third_party/libpg_query/grammar/statements/select.y"
    {
					if ((yyvsp[(3) - (6)].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[(2) - (6)].list), (yyvsp[(1) - (6)].node), (yyvsp[(5) - (6)].node), (yylsp[(2) - (6)]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[(2) - (6)].list), (yyvsp[(1) - (6)].node), (yyvsp[(5) - (6)].node), (yylsp[(2) - (6)]));
				;}
    break;

  case 829:
#line 2124 "third_party/libpg_query/grammar/statements/select.y"
    {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[(1) - (1)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 830:
#line 2137 "third_party/libpg_query/grammar/statements/select.y"
    {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 831:
#line 2154 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 832:
#line 2156 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeTypeCast((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].typnam), 0, (yylsp[(2) - (3)])); ;}
    break;

  case 833:
#line 2158 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
    break;

  case 834:
#line 2160 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = doNegate((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
    break;

  case 835:
#line 2162 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 836:
#line 2164 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 837:
#line 2166 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 838:
#line 2168 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 839:
#line 2170 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 840:
#line 2172 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 841:
#line 2174 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 842:
#line 2176 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 843:
#line 2178 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 844:
#line 2180 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 845:
#line 2182 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 846:
#line 2184 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 847:
#line 2186 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 848:
#line 2188 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (3)].list), (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 849:
#line 2190 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(1) - (2)].list), NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
    break;

  case 850:
#line 2192 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (2)].list), (yyvsp[(1) - (2)].node), NULL, (yylsp[(2) - (2)])); ;}
    break;

  case 851:
#line 2194 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[(1) - (5)].node), (yyvsp[(5) - (5)].node), (yylsp[(2) - (5)]));
				;}
    break;

  case 852:
#line 2198 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[(1) - (6)].node), (yyvsp[(6) - (6)].node), (yylsp[(2) - (6)]));
				;}
    break;

  case 853:
#line 2202 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[(1) - (6)].node), (PGNode *) (yyvsp[(5) - (6)].list), (yylsp[(2) - (6)]));
				;}
    break;

  case 854:
#line 2206 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[(1) - (7)].node), (PGNode *) (yyvsp[(6) - (7)].list), (yylsp[(2) - (7)]));
				;}
    break;

  case 855:
#line 2219 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 856:
#line 2220 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 857:
#line 2222 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[(2) - (2)].ival);
					n->location = (yylsp[(1) - (2)]);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 858:
#line 2229 "third_party/libpg_query/grammar/statements/select.y"
    {
					if ((yyvsp[(2) - (2)].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeParamRef(0, (yylsp[(1) - (2)]));
						n->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeParamRef(0, (yylsp[(1) - (2)]));
				;}
    break;

  case 859:
#line 2241 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[(1) - (2)].ival);
					p->location = (yylsp[(1) - (2)]);
					if ((yyvsp[(2) - (2)].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) p;
						n->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) p;
				;}
    break;

  case 860:
#line 2256 "third_party/libpg_query/grammar/statements/select.y"
    {
					if ((yyvsp[(4) - (4)].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (yyvsp[(2) - (4)].node);
						n->indirection = check_indirection((yyvsp[(4) - (4)].list), yyscanner);
						(yyval.node) = (PGNode *)n;
					}
					else
						(yyval.node) = (yyvsp[(2) - (4)].node);
				;}
    break;

  case 861:
#line 2268 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 862:
#line 2270 "third_party/libpg_query/grammar/statements/select.y"
    {
					if ((yyvsp[(2) - (2)].list)) {
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (yyvsp[(1) - (2)].node);
						n->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
						(yyval.node) = (PGNode *)n;
					}
					else {
						(yyval.node) = (yyvsp[(1) - (2)].node);
					}
				;}
    break;

  case 863:
#line 2282 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[(1) - (1)].node);
					n->location = (yylsp[(1) - (1)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 864:
#line 2293 "third_party/libpg_query/grammar/statements/select.y"
    {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[(1) - (2)].node);
					n->location = (yylsp[(1) - (2)]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				;}
    break;

  case 865:
#line 2317 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[(2) - (2)].node);
					n->location = (yylsp[(1) - (2)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 866:
#line 2328 "third_party/libpg_query/grammar/statements/select.y"
    {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[(3) - (4)].list);
				  g->location = (yylsp[(1) - (4)]);
				  (yyval.node) = (PGNode *)g;
			  ;}
    break;

  case 867:
#line 2337 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[(1) - (3)].list), NIL, (yylsp[(1) - (3)]));
				;}
    break;

  case 868:
#line 2341 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (6)].list), (yyvsp[(3) - (6)].list), (yylsp[(1) - (6)]));
					n->agg_order = (yyvsp[(4) - (6)].list);
					n->agg_ignore_nulls = (yyvsp[(5) - (6)].boolean);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 869:
#line 2348 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (7)].list), list_make1((yyvsp[(4) - (7)].node)), (yylsp[(1) - (7)]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[(5) - (7)].list);
					n->agg_ignore_nulls = (yyvsp[(6) - (7)].boolean);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 870:
#line 2356 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (9)].list), lappend((yyvsp[(3) - (9)].list), (yyvsp[(6) - (9)].node)), (yylsp[(1) - (9)]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[(7) - (9)].list);
					n->agg_ignore_nulls = (yyvsp[(8) - (9)].boolean);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 871:
#line 2364 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (7)].list), (yyvsp[(4) - (7)].list), (yylsp[(1) - (7)]));
					n->agg_order = (yyvsp[(5) - (7)].list);
					n->agg_ignore_nulls = (yyvsp[(6) - (7)].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 872:
#line 2375 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (7)].list), (yyvsp[(4) - (7)].list), (yylsp[(1) - (7)]));
					n->agg_order = (yyvsp[(5) - (7)].list);
					n->agg_ignore_nulls = (yyvsp[(6) - (7)].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 873:
#line 2383 "third_party/libpg_query/grammar/statements/select.y"
    {
					/*
					 * We consider AGGREGATE(*) to invoke a parameterless
					 * aggregate.  This does the right thing for COUNT(*),
					 * and there are no other aggregates in SQL that accept
					 * '*' as parameter.
					 *
					 * The PGFuncCall node is also marked agg_star = true,
					 * so that later processing can detect what the argument
					 * really was.
					 */
					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (4)].list), NIL, (yylsp[(1) - (4)]));
					n->agg_star = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 874:
#line 2411 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[(1) - (5)].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[(2) - (5)].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[(2) - (5)]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[(2) - (5)]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[(2) - (5)]))));
						n->agg_order = (yyvsp[(2) - (5)].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[(3) - (5)].node);
					n->export_state = (yyvsp[(4) - (5)].boolean);
					n->over = (yyvsp[(5) - (5)].windef);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 875:
#line 2447 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 876:
#line 2457 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 877:
#line 2458 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 878:
#line 2466 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[(4) - (5)].node)),
											   (yylsp[(1) - (5)]));
				;}
    break;

  case 879:
#line 2472 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, (yylsp[(1) - (1)]));
				;}
    break;

  case 880:
#line 2476 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, (yylsp[(1) - (1)]));
				;}
    break;

  case 881:
#line 2480 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, (yyvsp[(3) - (4)].ival), (yylsp[(1) - (4)]));
				;}
    break;

  case 882:
#line 2484 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, (yylsp[(1) - (1)]));
				;}
    break;

  case 883:
#line 2488 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, (yyvsp[(3) - (4)].ival), (yylsp[(1) - (4)]));
				;}
    break;

  case 884:
#line 2492 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, (yylsp[(1) - (1)]));
				;}
    break;

  case 885:
#line 2496 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, (yyvsp[(3) - (4)].ival), (yylsp[(1) - (4)]));
				;}
    break;

  case 886:
#line 2500 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, (yylsp[(1) - (1)]));
				;}
    break;

  case 887:
#line 2504 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, (yyvsp[(3) - (4)].ival), (yylsp[(1) - (4)]));
				;}
    break;

  case 888:
#line 2508 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, (yylsp[(1) - (1)]));
				;}
    break;

  case 889:
#line 2512 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, (yylsp[(1) - (1)]));
				;}
    break;

  case 890:
#line 2516 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, (yylsp[(1) - (1)]));
				;}
    break;

  case 891:
#line 2520 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_USER, -1, (yylsp[(1) - (1)]));
				;}
    break;

  case 892:
#line 2524 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, (yylsp[(1) - (1)]));
				;}
    break;

  case 893:
#line 2528 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, (yylsp[(1) - (1)]));
				;}
    break;

  case 894:
#line 2532 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeTypeCast((yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].typnam), 0, (yylsp[(1) - (6)])); ;}
    break;

  case 895:
#line 2534 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeTypeCast((yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].typnam), 1, (yylsp[(1) - (6)])); ;}
    break;

  case 896:
#line 2536 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
				;}
    break;

  case 897:
#line 2540 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
				;}
    break;

  case 898:
#line 2549 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
				;}
    break;

  case 899:
#line 2554 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
				;}
    break;

  case 900:
#line 2561 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[(5) - (6)].typnam)->names))->val.str),
												list_make1((yyvsp[(3) - (6)].node)),
												(yylsp[(1) - (6)]));
				;}
    break;

  case 901:
#line 2576 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));
				;}
    break;

  case 902:
#line 2583 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));
				;}
    break;

  case 903:
#line 2587 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));
				;}
    break;

  case 904:
#line 2591 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
				;}
    break;

  case 905:
#line 2595 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].node), (yylsp[(1) - (6)]));
				;}
    break;

  case 906:
#line 2599 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[(3) - (4)].list);
					c->location = (yylsp[(1) - (4)]);
					(yyval.node) = (PGNode *)c;
				;}
    break;

  case 907:
#line 2612 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(4) - (5)].list); ;}
    break;

  case 908:
#line 2613 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 909:
#line 2617 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(4) - (5)].node); ;}
    break;

  case 910:
#line 2618 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 911:
#line 2622 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = true; ;}
    break;

  case 912:
#line 2623 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = false; ;}
    break;

  case 913:
#line 2630 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
    break;

  case 914:
#line 2631 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 915:
#line 2635 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].windef)); ;}
    break;

  case 916:
#line 2637 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].windef)); ;}
    break;

  case 917:
#line 2642 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n = (yyvsp[(3) - (3)].windef);
					n->name = (yyvsp[(1) - (3)].str);
					(yyval.windef) = n;
				;}
    break;

  case 918:
#line 2650 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.windef) = (yyvsp[(2) - (2)].windef); ;}
    break;

  case 919:
#line 2652 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[(2) - (2)].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[(2) - (2)]);
					(yyval.windef) = n;
				;}
    break;

  case 920:
#line 2665 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.windef) = NULL; ;}
    break;

  case 921:
#line 2670 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[(2) - (6)].str);
					n->partitionClause = (yyvsp[(3) - (6)].list);
					n->orderClause = (yyvsp[(4) - (6)].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[(5) - (6)].windef)->frameOptions;
					n->startOffset = (yyvsp[(5) - (6)].windef)->startOffset;
					n->endOffset = (yyvsp[(5) - (6)].windef)->endOffset;
					n->location = (yylsp[(1) - (6)]);
					(yyval.windef) = n;
				;}
    break;

  case 922:
#line 2695 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 923:
#line 2696 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = NULL; ;}
    break;

  case 924:
#line 2699 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(3) - (3)].list); ;}
    break;

  case 925:
#line 2700 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 926:
#line 2712 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n = (yyvsp[(2) - (2)].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					(yyval.windef) = n;
				;}
    break;

  case 927:
#line 2718 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n = (yyvsp[(2) - (2)].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				;}
    break;

  case 928:
#line 2724 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				;}
    break;

  case 929:
#line 2734 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n = (yyvsp[(1) - (1)].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[(1) - (1)]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[(1) - (1)]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				;}
    break;

  case 930:
#line 2751 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n1 = (yyvsp[(2) - (4)].windef);
					PGWindowDef *n2 = (yyvsp[(4) - (4)].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[(2) - (4)]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[(4) - (4)]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[(4) - (4)]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[(4) - (4)]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				;}
    break;

  case 931:
#line 2796 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				;}
    break;

  case 932:
#line 2804 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				;}
    break;

  case 933:
#line 2812 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				;}
    break;

  case 934:
#line 2820 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[(1) - (2)].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				;}
    break;

  case 935:
#line 2828 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[(1) - (2)].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				;}
    break;

  case 936:
#line 2848 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
    break;

  case 937:
#line 2849 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 938:
#line 2852 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list);;}
    break;

  case 939:
#line 2853 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(2) - (5)].list), (yyvsp[(4) - (5)].node)); ;}
    break;

  case 940:
#line 2857 "third_party/libpg_query/grammar/statements/select.y"
    {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[(1) - (3)].str);
		na->arg = (PGExpr *) (yyvsp[(3) - (3)].node);
		na->argnumber = -1;
		na->location = (yylsp[(1) - (3)]);
		(yyval.node) = (PGNode *) na;
	;}
    break;

  case 941:
#line 2867 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
    break;

  case 942:
#line 2868 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
    break;

  case 943:
#line 2872 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 944:
#line 2873 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 945:
#line 2877 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.subquerytype) = PG_ANY_SUBLINK; ;}
    break;

  case 946:
#line 2878 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.subquerytype) = PG_ANY_SUBLINK; ;}
    break;

  case 947:
#line 2879 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.subquerytype) = PG_ALL_SUBLINK; ;}
    break;

  case 948:
#line 2882 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 949:
#line 2883 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (char*) (yyvsp[(1) - (1)].conststr); ;}
    break;

  case 950:
#line 2886 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = "+"; ;}
    break;

  case 951:
#line 2887 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = "-"; ;}
    break;

  case 952:
#line 2888 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = "*"; ;}
    break;

  case 953:
#line 2889 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = "/"; ;}
    break;

  case 954:
#line 2890 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = "%"; ;}
    break;

  case 955:
#line 2891 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = "^"; ;}
    break;

  case 956:
#line 2892 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = "**"; ;}
    break;

  case 957:
#line 2893 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = "<"; ;}
    break;

  case 958:
#line 2894 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = ">"; ;}
    break;

  case 959:
#line 2895 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = "="; ;}
    break;

  case 960:
#line 2896 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = "<="; ;}
    break;

  case 961:
#line 2897 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = ">="; ;}
    break;

  case 962:
#line 2898 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = "<>"; ;}
    break;

  case 963:
#line 2902 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
    break;

  case 964:
#line 2904 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
    break;

  case 965:
#line 2909 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
    break;

  case 966:
#line 2911 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
    break;

  case 967:
#line 2916 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
    break;

  case 968:
#line 2918 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
    break;

  case 969:
#line 2920 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString("~~")); ;}
    break;

  case 970:
#line 2922 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString("!~~")); ;}
    break;

  case 971:
#line 2924 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString("~~~")); ;}
    break;

  case 972:
#line 2926 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString("!~~~")); ;}
    break;

  case 973:
#line 2928 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString("~~*")); ;}
    break;

  case 974:
#line 2930 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString("!~~*")); ;}
    break;

  case 975:
#line 2944 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
    break;

  case 976:
#line 2946 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lcons(makeString((yyvsp[(1) - (3)].str)), (yyvsp[(3) - (3)].list)); ;}
    break;

  case 977:
#line 2950 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
				;}
    break;

  case 978:
#line 2954 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
				;}
    break;

  case 979:
#line 2961 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = (yyvsp[(1) - (1)].list);
				;}
    break;

  case 980:
#line 2966 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = (yyvsp[(1) - (2)].list);
				;}
    break;

  case 981:
#line 2973 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = (yyvsp[(1) - (1)].list);
				;}
    break;

  case 982:
#line 2977 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = NULL;
				;}
    break;

  case 983:
#line 2986 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
				;}
    break;

  case 984:
#line 2990 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
				;}
    break;

  case 985:
#line 2996 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (yyvsp[(1) - (1)].node);
				;}
    break;

  case 986:
#line 3000 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[(1) - (3)].str);
					na->arg = (PGExpr *) (yyvsp[(3) - (3)].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[(1) - (3)]);
					(yyval.node) = (PGNode *) na;
				;}
    break;

  case 987:
#line 3009 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[(1) - (3)].str);
					na->arg = (PGExpr *) (yyvsp[(3) - (3)].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[(1) - (3)]);
					(yyval.node) = (PGNode *) na;
				;}
    break;

  case 988:
#line 3019 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].typnam)); ;}
    break;

  case 989:
#line 3020 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typnam)); ;}
    break;

  case 990:
#line 3025 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make2(makeStringConst((yyvsp[(1) - (3)].str), (yylsp[(1) - (3)])), (yyvsp[(3) - (3)].node));
				;}
    break;

  case 991:
#line 3028 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 992:
#line 3035 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 993:
#line 3036 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (char*) "year"; ;}
    break;

  case 994:
#line 3037 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (char*) "month"; ;}
    break;

  case 995:
#line 3038 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (char*) "day"; ;}
    break;

  case 996:
#line 3039 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (char*) "hour"; ;}
    break;

  case 997:
#line 3040 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (char*) "minute"; ;}
    break;

  case 998:
#line 3041 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (char*) "second"; ;}
    break;

  case 999:
#line 3042 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (char*) "millisecond"; ;}
    break;

  case 1000:
#line 3043 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (char*) "microsecond"; ;}
    break;

  case 1001:
#line 3044 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1002:
#line 3055 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make4((yyvsp[(1) - (4)].node), (yyvsp[(2) - (4)].node), (yyvsp[(3) - (4)].node), (yyvsp[(4) - (4)].node));
				;}
    break;

  case 1003:
#line 3059 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make3((yyvsp[(1) - (3)].node), (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].node));
				;}
    break;

  case 1004:
#line 3066 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
    break;

  case 1005:
#line 3072 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make2((yyvsp[(3) - (3)].node), (yyvsp[(1) - (3)].node)); ;}
    break;

  case 1006:
#line 3073 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 1007:
#line 3090 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make3((yyvsp[(1) - (3)].node), (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].node));
				;}
    break;

  case 1008:
#line 3094 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyvsp[(2) - (3)].node));
				;}
    break;

  case 1009:
#line 3099 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make2((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node));
				;}
    break;

  case 1010:
#line 3103 "third_party/libpg_query/grammar/statements/select.y"
    {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[(1) - (2)].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[(2) - (2)].node),
												 SystemTypeName("int4"), 0, -1));
				;}
    break;

  case 1011:
#line 3118 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = (yyvsp[(1) - (1)].list);
				;}
    break;

  case 1012:
#line 3122 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 1013:
#line 3126 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
    break;

  case 1014:
#line 3129 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
    break;

  case 1015:
#line 3132 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(3) - (3)].list), (yyvsp[(1) - (3)].node)); ;}
    break;

  case 1016:
#line 3133 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
    break;

  case 1017:
#line 3134 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 1018:
#line 3138 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[(1) - (1)].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1019:
#line 3144 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *)(yyvsp[(2) - (3)].list); ;}
    break;

  case 1020:
#line 3155 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[(2) - (5)].node);
					c->args = (yyvsp[(3) - (5)].list);
					c->defresult = (PGExpr *) (yyvsp[(4) - (5)].node);
					c->location = (yylsp[(1) - (5)]);
					(yyval.node) = (PGNode *)c;
				;}
    break;

  case 1021:
#line 3168 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
    break;

  case 1022:
#line 3169 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
    break;

  case 1023:
#line 3174 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[(2) - (4)].node);
					w->result = (PGExpr *) (yyvsp[(4) - (4)].node);
					w->location = (yylsp[(1) - (4)]);
					(yyval.node) = (PGNode *)w;
				;}
    break;

  case 1024:
#line 3184 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
    break;

  case 1025:
#line 3185 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 1026:
#line 3188 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 1027:
#line 3189 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 1028:
#line 3193 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeColumnRef((yyvsp[(1) - (1)].str), NIL, (yylsp[(1) - (1)]), yyscanner);
				;}
    break;

  case 1029:
#line 3197 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeColumnRef((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].list), (yylsp[(1) - (2)]), yyscanner);
				;}
    break;

  case 1030:
#line 3204 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeString((yyvsp[(2) - (2)].str));
				;}
    break;

  case 1031:
#line 3208 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[(2) - (3)].node);
					(yyval.node) = (PGNode *) ai;
				;}
    break;

  case 1032:
#line 3216 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[(2) - (5)].node);
					ai->uidx = (yyvsp[(4) - (5)].node);
					(yyval.node) = (PGNode *) ai;
				;}
    break;

  case 1033:
#line 3226 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 1034:
#line 3227 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 1035:
#line 3231 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
    break;

  case 1036:
#line 3232 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
    break;

  case 1037:
#line 3236 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 1038:
#line 3237 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
    break;

  case 1041:
#line 3251 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 1042:
#line 3252 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 1043:
#line 3256 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].target)); ;}
    break;

  case 1044:
#line 3257 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].target)); ;}
    break;

  case 1045:
#line 3261 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 1046:
#line 3262 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 1047:
#line 3266 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[(3) - (3)].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[(1) - (3)].node);
					(yyval.target)->location = (yylsp[(1) - (3)]);
				;}
    break;

  case 1048:
#line 3282 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[(2) - (2)].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[(1) - (2)].node);
					(yyval.target)->location = (yylsp[(1) - (2)]);
				;}
    break;

  case 1049:
#line 3290 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[(1) - (1)].node);
					(yyval.target)->location = (yylsp[(1) - (1)]);
				;}
    break;

  case 1050:
#line 3298 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGColumnRef *n = makeNode(PGColumnRef);
					PGAStar *star = makeNode(PGAStar);
					n->fields = list_make1(star);
					n->location = (yylsp[(1) - (3)]);
					star->except_list = (yyvsp[(2) - (3)].list);
					star->replace_list = (yyvsp[(3) - (3)].list);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[(1) - (3)]);
				;}
    break;

  case 1051:
#line 3313 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGColumnRef *n = makeNode(PGColumnRef);
					PGAStar *star = makeNode(PGAStar);
					n->fields = list_make1(star);
					n->location = (yylsp[(1) - (5)]);
					star->relation = (yyvsp[(1) - (5)].str);
					star->except_list = (yyvsp[(4) - (5)].list);
					star->replace_list = (yyvsp[(5) - (5)].list);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[(1) - (5)]);
				;}
    break;

  case 1052:
#line 3330 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
    break;

  case 1053:
#line 3331 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString((yyvsp[(2) - (2)].str))); ;}
    break;

  case 1054:
#line 3334 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 1055:
#line 3335 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NULL; ;}
    break;

  case 1056:
#line 3338 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make2((yyvsp[(1) - (3)].node), makeString((yyvsp[(3) - (3)].str))); ;}
    break;

  case 1057:
#line 3342 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].list)); ;}
    break;

  case 1058:
#line 3343 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)); ;}
    break;

  case 1059:
#line 3347 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 1060:
#line 3348 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 1061:
#line 3351 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
    break;

  case 1062:
#line 3352 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(2) - (2)].list)); ;}
    break;

  case 1063:
#line 3353 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NULL; ;}
    break;

  case 1064:
#line 3363 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].range)); ;}
    break;

  case 1065:
#line 3364 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].range)); ;}
    break;

  case 1066:
#line 3376 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
				;}
    break;

  case 1067:
#line 3380 "third_party/libpg_query/grammar/statements/select.y"
    {
					check_qualified_name((yyvsp[(2) - (2)].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[(1) - (2)]));
					switch (list_length((yyvsp[(2) - (2)].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[(1) - (2)].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[(2) - (2)].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[(1) - (2)].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[(2) - (2)].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[(2) - (2)].list)));
							break;
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].list)))),
									 parser_errposition((yylsp[(1) - (2)]))));
							break;
					}
				;}
    break;

  case 1068:
#line 3407 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
    break;

  case 1069:
#line 3409 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeString((yyvsp[(3) - (3)].str))); ;}
    break;

  case 1070:
#line 3414 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 1071:
#line 3415 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 1072:
#line 3418 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1073:
#line 3420 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1074:
#line 3431 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
    break;

  case 1075:
#line 3434 "third_party/libpg_query/grammar/statements/select.y"
    {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].list)),
											 yyscanner);
					;}
    break;

  case 1076:
#line 3445 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeIntConst((yyvsp[(1) - (1)].ival), (yylsp[(1) - (1)]));
				;}
    break;

  case 1077:
#line 3449 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeFloatConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
				;}
    break;

  case 1078:
#line 3453 "third_party/libpg_query/grammar/statements/select.y"
    {
					if ((yyvsp[(2) - (2)].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[(1) - (2)].str), (yylsp[(1) - (2)]));
						n->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[(1) - (2)].str), (yylsp[(1) - (2)]));
				;}
    break;

  case 1079:
#line 3465 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeBitStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
				;}
    break;

  case 1080:
#line 3469 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
				;}
    break;

  case 1081:
#line 3478 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[(1) - (2)].list));
					t->location = (yylsp[(1) - (2)]);
					(yyval.node) = makeStringConstCast((yyvsp[(2) - (2)].str), (yylsp[(2) - (2)]), t);
				;}
    break;

  case 1082:
#line 3485 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[(1) - (7)].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[(3) - (7)].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[(4) - (7)].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[(4) - (7)]))));
					if ((yyvsp[(5) - (7)].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[(5) - (7)]))));


					t->typmods = (yyvsp[(3) - (7)].list);
					t->location = (yylsp[(1) - (7)]);
					(yyval.node) = makeStringConstCast((yyvsp[(7) - (7)].str), (yylsp[(7) - (7)]), t);
				;}
    break;

  case 1083:
#line 3523 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeStringConstCast((yyvsp[(2) - (2)].str), (yylsp[(2) - (2)]), (yyvsp[(1) - (2)].typnam));
				;}
    break;

  case 1084:
#line 3527 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeIntervalNode((yyvsp[(3) - (5)].node), (yylsp[(3) - (5)]), (yyvsp[(5) - (5)].list));
				;}
    break;

  case 1085:
#line 3531 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeIntervalNode((yyvsp[(2) - (3)].ival), (yylsp[(2) - (3)]), (yyvsp[(3) - (3)].list));
				;}
    break;

  case 1086:
#line 3535 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeIntervalNode((yyvsp[(2) - (3)].str), (yylsp[(2) - (3)]), (yyvsp[(3) - (3)].list));
				;}
    break;

  case 1087:
#line 3539 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeBoolAConst(true, (yylsp[(1) - (1)]));
				;}
    break;

  case 1088:
#line 3543 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeBoolAConst(false, (yylsp[(1) - (1)]));
				;}
    break;

  case 1089:
#line 3547 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeNullAConst((yylsp[(1) - (1)]));
				;}
    break;

  case 1090:
#line 3552 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.ival) = (yyvsp[(1) - (1)].ival); ;}
    break;

  case 1091:
#line 3553 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1092:
#line 3569 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1093:
#line 3570 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1094:
#line 3571 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1095:
#line 3574 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1096:
#line 3575 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1097:
#line 3581 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1098:
#line 3582 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1099:
#line 3583 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1100:
#line 3586 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1101:
#line 3587 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1102:
#line 3588 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1103:
#line 3591 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1104:
#line 3592 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1105:
#line 3593 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1106:
#line 3596 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
    break;

  case 1107:
#line 3597 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lcons(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1108:
#line 3601 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString((yyvsp[(2) - (2)].str))); ;}
    break;

  case 1109:
#line 3603 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeString((yyvsp[(3) - (3)].str))); ;}
    break;

  case 1110:
#line 3607 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
    break;

  case 1111:
#line 3608 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 1113:
#line 3619 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1114:
#line 3620 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1115:
#line 3621 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1116:
#line 3622 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1117:
#line 3625 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1118:
#line 3626 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1119:
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
    {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[(2) - (5)].str);
					n->argtypes = (yyvsp[(3) - (5)].list);
					n->query = (yyvsp[(5) - (5)].node);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1120:
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
    { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
    break;

  case 1121:
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
    { (yyval.list) = NIL; ;}
    break;

  case 1126:
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
    {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not both */
					n->schemaname = (yyvsp[(3) - (4)].str);
					n->schemaElts = (yyvsp[(4) - (4)].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1127:
#line 17 "third_party/libpg_query/grammar/statements/create_schema.y"
    {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not here */
					n->schemaname = (yyvsp[(6) - (7)].str);
					if ((yyvsp[(7) - (7)].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[(7) - (7)]))));
					n->schemaElts = (yyvsp[(7) - (7)].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1128:
#line 35 "third_party/libpg_query/grammar/statements/create_schema.y"
    {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[(2) - (2)]);
					(yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node));
				;}
    break;

  case 1129:
#line 41 "third_party/libpg_query/grammar/statements/create_schema.y"
    { (yyval.list) = NIL; ;}
    break;

  case 1134:
#line 11 "third_party/libpg_query/grammar/statements/index.y"
    {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[(2) - (13)].boolean);
					n->concurrent = (yyvsp[(4) - (13)].boolean);
					n->idxname = (yyvsp[(5) - (13)].str);
					n->relation = (yyvsp[(7) - (13)].range);
					n->accessMethod = (yyvsp[(8) - (13)].str);
					n->indexParams = (yyvsp[(10) - (13)].list);
					n->options = (yyvsp[(12) - (13)].list);
					n->whereClause = (yyvsp[(13) - (13)].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1135:
#line 36 "third_party/libpg_query/grammar/statements/index.y"
    {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[(2) - (16)].boolean);
					n->concurrent = (yyvsp[(4) - (16)].boolean);
					n->idxname = (yyvsp[(8) - (16)].str);
					n->relation = (yyvsp[(10) - (16)].range);
					n->accessMethod = (yyvsp[(11) - (16)].str);
					n->indexParams = (yyvsp[(13) - (16)].list);
					n->options = (yyvsp[(15) - (16)].list);
					n->whereClause = (yyvsp[(16) - (16)].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1136:
#line 62 "third_party/libpg_query/grammar/statements/index.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1137:
#line 66 "third_party/libpg_query/grammar/statements/index.y"
    { (yyval.str) = (yyvsp[(2) - (2)].str); ;}
    break;

  case 1138:
#line 67 "third_party/libpg_query/grammar/statements/index.y"
    { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; ;}
    break;

  case 1139:
#line 72 "third_party/libpg_query/grammar/statements/index.y"
    { (yyval.boolean) = true; ;}
    break;

  case 1140:
#line 73 "third_party/libpg_query/grammar/statements/index.y"
    { (yyval.boolean) = false; ;}
    break;

  case 1141:
#line 78 "third_party/libpg_query/grammar/statements/index.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1142:
#line 79 "third_party/libpg_query/grammar/statements/index.y"
    { (yyval.str) = NULL; ;}
    break;

  case 1143:
#line 83 "third_party/libpg_query/grammar/statements/index.y"
    { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
    break;

  case 1144:
#line 84 "third_party/libpg_query/grammar/statements/index.y"
    { (yyval.list) = NIL; ;}
    break;

  case 1145:
#line 89 "third_party/libpg_query/grammar/statements/index.y"
    { (yyval.boolean) = true; ;}
    break;

  case 1146:
#line 90 "third_party/libpg_query/grammar/statements/index.y"
    { (yyval.boolean) = false; ;}
    break;

  case 1147:
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[(3) - (6)].range);
					n->newschema = (yyvsp[(6) - (6)].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1148:
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[(5) - (8)].range);
					n->newschema = (yyvsp[(8) - (8)].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1149:
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[(3) - (6)].range);
					n->newschema = (yyvsp[(6) - (6)].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1150:
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[(5) - (8)].range);
					n->newschema = (yyvsp[(8) - (8)].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1151:
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[(3) - (6)].range);
					n->newschema = (yyvsp[(6) - (6)].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1152:
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[(5) - (8)].range);
					n->newschema = (yyvsp[(8) - (8)].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1153:
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
    {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1154:
#line 12 "third_party/libpg_query/grammar/statements/checkpoint.y"
    {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1155:
#line 8 "third_party/libpg_query/grammar/statements/export.y"
    {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->filename = (yyvsp[(3) - (4)].str);
					n->options = NIL;
					if ((yyvsp[(4) - (4)].list)) {
						n->options = list_concat(n->options, (yyvsp[(4) - (4)].list));
					}
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1156:
#line 21 "third_party/libpg_query/grammar/statements/export.y"
    {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[(3) - (3)].str);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1157:
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
    {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[(2) - (2)].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1158:
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
    {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[(4) - (4)].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[(2) - (4)])));
					if ((yyvsp[(3) - (4)].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[(3) - (4)])));
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1159:
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
    {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[(3) - (3)].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[(2) - (3)])));
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1160:
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
    {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[(5) - (5)].node);
					n->options = (yyvsp[(3) - (5)].list);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1161:
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.boolean) = true; ;}
    break;

  case 1162:
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.boolean) = false; ;}
    break;

  case 1163:
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}
    break;

  case 1164:
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.node) = (PGNode *) (yyvsp[(1) - (1)].value); ;}
    break;

  case 1165:
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.node) = NULL; ;}
    break;

  case 1171:
#line 65 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1172:
#line 66 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1173:
#line 67 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1174:
#line 72 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1175:
#line 73 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1176:
#line 79 "third_party/libpg_query/grammar/statements/explain.y"
    {
					(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));
				;}
    break;

  case 1177:
#line 83 "third_party/libpg_query/grammar/statements/explain.y"
    {
					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));
				;}
    break;

  case 1178:
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
    {;}
    break;

  case 1179:
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
    {;}
    break;

  case 1180:
#line 96 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.str) = (char*) "true"; ;}
    break;

  case 1181:
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.str) = (char*) "false"; ;}
    break;

  case 1182:
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.str) = (char*) "on"; ;}
    break;

  case 1183:
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1184:
#line 110 "third_party/libpg_query/grammar/statements/explain.y"
    {
					(yyval.defelt) = makeDefElem((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)]));
				;}
    break;

  case 1185:
#line 117 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1186:
#line 118 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.str) = (char*) "analyze"; ;}
    break;

  case 1187:
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGVariableSetStmt *n = (yyvsp[(2) - (2)].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1188:
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGVariableSetStmt *n = (yyvsp[(3) - (3)].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1189:
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGVariableSetStmt *n = (yyvsp[(3) - (3)].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1190:
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGVariableSetStmt *n = (yyvsp[(3) - (3)].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1191:
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
    {(yyval.vsetstmt) = (yyvsp[(1) - (1)].vsetstmt);;}
    break;

  case 1192:
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[(1) - (3)].str);
					(yyval.vsetstmt) = n;
				;}
    break;

  case 1193:
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[(3) - (3)].node) != NULL)
						n->args = list_make1((yyvsp[(3) - (3)].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				;}
    break;

  case 1194:
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[(2) - (2)].str), (yylsp[(2) - (2)])));
					(yyval.vsetstmt) = n;
				;}
    break;

  case 1195:
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[(1) - (3)].str);
					n->args = (yyvsp[(3) - (3)].list);
					(yyval.vsetstmt) = n;
				;}
    break;

  case 1196:
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[(1) - (3)].str);
					n->args = (yyvsp[(3) - (3)].list);
					(yyval.vsetstmt) = n;
				;}
    break;

  case 1197:
#line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[(1) - (3)].str);
					(yyval.vsetstmt) = n;
				;}
    break;

  case 1198:
#line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[(1) - (3)].str);
					(yyval.vsetstmt) = n;
				;}
    break;

  case 1199:
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
    { (yyval.node) = makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)])); ;}
    break;

  case 1200:
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
    { (yyval.node) = makeAConst((yyvsp[(1) - (1)].value), (yylsp[(1) - (1)])); ;}
    break;

  case 1201:
#line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					(yyval.node) = makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
				;}
    break;

  case 1202:
#line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					(yyval.node) = makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
				;}
    break;

  case 1203:
#line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGTypeName *t = (yyvsp[(1) - (3)].typnam);
					if ((yyvsp[(3) - (3)].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[(3) - (3)].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[(3) - (3)]))));
					}
					t->typmods = (yyvsp[(3) - (3)].list);
					(yyval.node) = makeStringConstCast((yyvsp[(2) - (3)].str), (yylsp[(2) - (3)]), t);
				;}
    break;

  case 1204:
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGTypeName *t = (yyvsp[(1) - (5)].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[(3) - (5)].ival), (yylsp[(3) - (5)])));
					(yyval.node) = makeStringConstCast((yyvsp[(5) - (5)].str), (yylsp[(5) - (5)]), t);
				;}
    break;

  case 1205:
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
    { (yyval.node) = makeAConst((yyvsp[(1) - (1)].value), (yylsp[(1) - (1)])); ;}
    break;

  case 1206:
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
    { (yyval.node) = NULL; ;}
    break;

  case 1207:
#line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
    { (yyval.node) = NULL; ;}
    break;

  case 1208:
#line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
    break;

  case 1209:
#line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
    break;

  case 1210:
#line 8 "third_party/libpg_query/grammar/statements/load.y"
    {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[(2) - (2)].str);
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1211:
#line 14 "third_party/libpg_query/grammar/statements/load.y"
    {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[(2) - (2)].str);
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				;}
    break;

  case 1212:
#line 20 "third_party/libpg_query/grammar/statements/load.y"
    {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[(3) - (3)].str);
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                ;}
    break;

  case 1213:
#line 28 "third_party/libpg_query/grammar/statements/load.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1214:
#line 29 "third_party/libpg_query/grammar/statements/load.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1215:
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[(2) - (4)].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[(3) - (4)].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[(4) - (4)].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1216:
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[(2) - (5)].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[(3) - (5)].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[(4) - (5)].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[(5) - (5)].range);
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1217:
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
    {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[(5) - (5)].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[(2) - (5)].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[(3) - (5)].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[(4) - (5)].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1218:
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[(3) - (4)].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1219:
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[(3) - (6)].ival);
					n->relation = (yyvsp[(5) - (6)].range);
					n->va_cols = (yyvsp[(6) - (6)].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1220:
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
    { (yyval.ival) = PG_VACOPT_ANALYZE; ;}
    break;

  case 1221:
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
    { (yyval.ival) = PG_VACOPT_VERBOSE; ;}
    break;

  case 1222:
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
    { (yyval.ival) = PG_VACOPT_FREEZE; ;}
    break;

  case 1223:
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
    { (yyval.ival) = PG_VACOPT_FULL; ;}
    break;

  case 1224:
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
    {
					if (strcmp((yyvsp[(1) - (1)].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[(1) - (1)].str)),
									 parser_errposition((yylsp[(1) - (1)]))));
				;}
    break;

  case 1225:
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
    { (yyval.boolean) = true; ;}
    break;

  case 1226:
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
    { (yyval.boolean) = false; ;}
    break;

  case 1227:
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
    { (yyval.ival) = (yyvsp[(1) - (1)].ival); ;}
    break;

  case 1228:
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
    { (yyval.ival) = (yyvsp[(1) - (3)].ival) | (yyvsp[(3) - (3)].ival); ;}
    break;

  case 1229:
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
    { (yyval.boolean) = true; ;}
    break;

  case 1230:
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
    { (yyval.boolean) = false; ;}
    break;

  case 1231:
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
    {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[(4) - (7)].range);
					n->usingClause = (yyvsp[(5) - (7)].list);
					n->whereClause = (yyvsp[(6) - (7)].node);
					n->returningList = (yyvsp[(7) - (7)].list);
					n->withClause = (yyvsp[(1) - (7)].with);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1232:
#line 22 "third_party/libpg_query/grammar/statements/delete.y"
    {
					(yyval.range) = (yyvsp[(1) - (1)].range);
				;}
    break;

  case 1233:
#line 26 "third_party/libpg_query/grammar/statements/delete.y"
    {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[(2) - (2)].str);
					(yyvsp[(1) - (2)].range)->alias = alias;
					(yyval.range) = (yyvsp[(1) - (2)].range);
				;}
    break;

  case 1234:
#line 33 "third_party/libpg_query/grammar/statements/delete.y"
    {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[(3) - (3)].str);
					(yyvsp[(1) - (3)].range)->alias = alias;
					(yyval.range) = (yyvsp[(1) - (3)].range);
				;}
    break;

  case 1235:
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
    break;

  case 1236:
#line 44 "third_party/libpg_query/grammar/statements/delete.y"
    { (yyval.node) = NULL; ;}
    break;

  case 1237:
#line 50 "third_party/libpg_query/grammar/statements/delete.y"
    { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
    break;

  case 1238:
#line 51 "third_party/libpg_query/grammar/statements/delete.y"
    { (yyval.list) = NIL; ;}
    break;

  case 1239:
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[(2) - (2)].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1240:
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[(2) - (4)].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[(3) - (4)].range);
					n->va_cols = (yyvsp[(4) - (4)].list);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1241:
#line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
    { (yyval.node) = (PGNode *) (yyvsp[(2) - (2)].vsetstmt); ;}
    break;

  case 1242:
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[(1) - (1)].str);
					(yyval.vsetstmt) = n;
				;}
    break;

  case 1243:
#line 15 "third_party/libpg_query/grammar/statements/variable_reset.y"
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				;}
    break;

  case 1244:
#line 24 "third_party/libpg_query/grammar/statements/variable_reset.y"
    { (yyval.vsetstmt) = (yyvsp[(1) - (1)].vsetstmt); ;}
    break;

  case 1245:
#line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				;}
    break;

  case 1246:
#line 33 "third_party/libpg_query/grammar/statements/variable_reset.y"
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				;}
    break;

  case 1247:
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[(2) - (2)].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 1248:
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[(2) - (2)].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 1249:
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
    {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[(2) - (2)].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 1250:
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
    {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[(2) - (2)].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 1251:
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
    {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 1252:
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
    {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 1253:
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
    {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 1254:
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
    {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 1257:
#line 63 "third_party/libpg_query/grammar/statements/variable_show.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1258:
#line 65 "third_party/libpg_query/grammar/statements/variable_show.y"
    { (yyval.str) = psprintf("%s.%s", (yyvsp[(1) - (3)].str), (yyvsp[(3) - (3)].str)); ;}
    break;

  case 1259:
#line 7 "third_party/libpg_query/grammar/statements/call.y"
    {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[(2) - (2)].node);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1260:
#line 10 "third_party/libpg_query/grammar/statements/view.y"
    {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[(4) - (9)].range);
					n->view->relpersistence = (yyvsp[(2) - (9)].ival);
					n->aliases = (yyvsp[(5) - (9)].list);
					n->query = (yyvsp[(8) - (9)].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[(6) - (9)].list);
					n->withCheckOption = (yyvsp[(9) - (9)].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1261:
#line 23 "third_party/libpg_query/grammar/statements/view.y"
    {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[(6) - (11)].range);
					n->view->relpersistence = (yyvsp[(4) - (11)].ival);
					n->aliases = (yyvsp[(7) - (11)].list);
					n->query = (yyvsp[(10) - (11)].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[(8) - (11)].list);
					n->withCheckOption = (yyvsp[(11) - (11)].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1262:
#line 36 "third_party/libpg_query/grammar/statements/view.y"
    {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[(5) - (12)].range);
					n->view->relpersistence = (yyvsp[(2) - (12)].ival);
					n->aliases = (yyvsp[(7) - (12)].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[(11) - (12)].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[(9) - (12)].list);
					n->withCheckOption = (yyvsp[(12) - (12)].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[(12) - (12)]))));
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1263:
#line 54 "third_party/libpg_query/grammar/statements/view.y"
    {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[(7) - (14)].range);
					n->view->relpersistence = (yyvsp[(4) - (14)].ival);
					n->aliases = (yyvsp[(9) - (14)].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[(13) - (14)].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[(11) - (14)].list);
					n->withCheckOption = (yyvsp[(14) - (14)].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[(14) - (14)]))));
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1264:
#line 74 "third_party/libpg_query/grammar/statements/view.y"
    { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; ;}
    break;

  case 1265:
#line 75 "third_party/libpg_query/grammar/statements/view.y"
    { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; ;}
    break;

  case 1266:
#line 76 "third_party/libpg_query/grammar/statements/view.y"
    { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; ;}
    break;

  case 1267:
#line 77 "third_party/libpg_query/grammar/statements/view.y"
    { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; ;}
    break;

  case 1268:
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
    {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[(6) - (7)].node);
					ctas->into = (yyvsp[(4) - (7)].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[(4) - (7)].into)->rel->relpersistence = (yyvsp[(2) - (7)].ival);
					(yyvsp[(4) - (7)].into)->skipData = !((yyvsp[(7) - (7)].boolean));
					(yyval.node) = (PGNode *) ctas;
				;}
    break;

  case 1269:
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
    {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[(9) - (10)].node);
					ctas->into = (yyvsp[(7) - (10)].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[(7) - (10)].into)->rel->relpersistence = (yyvsp[(2) - (10)].ival);
					(yyvsp[(7) - (10)].into)->skipData = !((yyvsp[(10) - (10)].boolean));
					(yyval.node) = (PGNode *) ctas;
				;}
    break;

  case 1270:
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
    {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[(8) - (9)].node);
					ctas->into = (yyvsp[(6) - (9)].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[(6) - (9)].into)->rel->relpersistence = (yyvsp[(4) - (9)].ival);
					(yyvsp[(6) - (9)].into)->skipData = !((yyvsp[(9) - (9)].boolean));
					(yyval.node) = (PGNode *) ctas;
				;}
    break;

  case 1271:
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
    { (yyval.boolean) = true; ;}
    break;

  case 1272:
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
    { (yyval.boolean) = false; ;}
    break;

  case 1273:
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
    { (yyval.boolean) = true; ;}
    break;

  case 1274:
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
    {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[(1) - (4)].range);
					(yyval.into)->colNames = (yyvsp[(2) - (4)].list);
					(yyval.into)->options = (yyvsp[(3) - (4)].list);
					(yyval.into)->onCommit = (yyvsp[(4) - (4)].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				;}
    break;


/* Line 1267 of yacc.c.  */
#line 25472 "third_party/libpg_query/grammar/grammar_out.cpp"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (&yylloc, yyscanner, yymsg);
	  }
	else
	  {
	    yyerror (&yylloc, yyscanner, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }

  yyerror_range[0] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc, yyscanner);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[0] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[0] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;

  yyerror_range[1] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the look-ahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, (yyerror_range - 1), 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, &yylloc, yyscanner);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


#line 83 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	n->seed = seed;
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

static PGNode *
makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod, int location)
{
	PGSQLValueFunction *svf = makeNode(PGSQLValueFunction);

	svf->op = op;
	/* svf->type will be filled during parse analysis */
	svf->typmod = typmod;
	svf->location = location;
	return (PGNode *) svf;
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery



// LICENSE_CHANGE_END


// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #11
// See the end of this file for a list

/*--------------------------------------------------------------------
 * Symbols referenced in this file:
 * - raw_parser
 * - base_yylex
 * - raw_parser
 *--------------------------------------------------------------------
 */

/*-------------------------------------------------------------------------
 *
 * parser.c
 *		Main entry point/driver for PostgreSQL grammar
 *
 * Note that the grammar is not allowed to perform any table access
 * (since we need to be able to do basic parsing even while inside an
 * aborted transaction).  Therefore, the data structures returned by
 * the grammar are "raw" parsetrees that still need to be analyzed by
 * analyze.c and related files.
 *
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/parser/parser.c
 *
 *-------------------------------------------------------------------------
 */







// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #11
// See the end of this file for a list


namespace duckdb_libpgquery {
#define PG_KEYWORD(a,b,c) {a,b,c},

const PGScanKeyword ScanKeywords[] = {
PG_KEYWORD("abort", ABORT_P, UNRESERVED_KEYWORD)
PG_KEYWORD("absolute", ABSOLUTE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("access", ACCESS, UNRESERVED_KEYWORD)
PG_KEYWORD("action", ACTION, UNRESERVED_KEYWORD)
PG_KEYWORD("add", ADD_P, UNRESERVED_KEYWORD)
PG_KEYWORD("admin", ADMIN, UNRESERVED_KEYWORD)
PG_KEYWORD("after", AFTER, UNRESERVED_KEYWORD)
PG_KEYWORD("aggregate", AGGREGATE, UNRESERVED_KEYWORD)
PG_KEYWORD("all", ALL, RESERVED_KEYWORD)
PG_KEYWORD("also", ALSO, UNRESERVED_KEYWORD)
PG_KEYWORD("alter", ALTER, UNRESERVED_KEYWORD)
PG_KEYWORD("always", ALWAYS, UNRESERVED_KEYWORD)
PG_KEYWORD("analyse", ANALYSE, RESERVED_KEYWORD)
PG_KEYWORD("analyze", ANALYZE, RESERVED_KEYWORD)
PG_KEYWORD("and", AND, RESERVED_KEYWORD)
PG_KEYWORD("any", ANY, RESERVED_KEYWORD)
PG_KEYWORD("array", ARRAY, RESERVED_KEYWORD)
PG_KEYWORD("as", AS, RESERVED_KEYWORD)
PG_KEYWORD("asc", ASC_P, RESERVED_KEYWORD)
PG_KEYWORD("assertion", ASSERTION, UNRESERVED_KEYWORD)
PG_KEYWORD("assignment", ASSIGNMENT, UNRESERVED_KEYWORD)
PG_KEYWORD("asymmetric", ASYMMETRIC, RESERVED_KEYWORD)
PG_KEYWORD("at", AT, UNRESERVED_KEYWORD)
PG_KEYWORD("attach", ATTACH, UNRESERVED_KEYWORD)
PG_KEYWORD("attribute", ATTRIBUTE, UNRESERVED_KEYWORD)
PG_KEYWORD("authorization", AUTHORIZATION, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("backward", BACKWARD, UNRESERVED_KEYWORD)
PG_KEYWORD("before", BEFORE, UNRESERVED_KEYWORD)
PG_KEYWORD("begin", BEGIN_P, UNRESERVED_KEYWORD)
PG_KEYWORD("between", BETWEEN, COL_NAME_KEYWORD)
PG_KEYWORD("bigint", BIGINT, COL_NAME_KEYWORD)
PG_KEYWORD("binary", BINARY, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("bit", BIT, COL_NAME_KEYWORD)
PG_KEYWORD("boolean", BOOLEAN_P, COL_NAME_KEYWORD)
PG_KEYWORD("both", BOTH, RESERVED_KEYWORD)
PG_KEYWORD("by", BY, UNRESERVED_KEYWORD)
PG_KEYWORD("cache", CACHE, UNRESERVED_KEYWORD)
PG_KEYWORD("call", CALL_P, UNRESERVED_KEYWORD)
PG_KEYWORD("called", CALLED, UNRESERVED_KEYWORD)
PG_KEYWORD("cascade", CASCADE, UNRESERVED_KEYWORD)
PG_KEYWORD("cascaded", CASCADED, UNRESERVED_KEYWORD)
PG_KEYWORD("case", CASE, RESERVED_KEYWORD)
PG_KEYWORD("cast", CAST, RESERVED_KEYWORD)
PG_KEYWORD("catalog", CATALOG_P, UNRESERVED_KEYWORD)
PG_KEYWORD("chain", CHAIN, UNRESERVED_KEYWORD)
PG_KEYWORD("char", CHAR_P, COL_NAME_KEYWORD)
PG_KEYWORD("character", CHARACTER, COL_NAME_KEYWORD)
PG_KEYWORD("characteristics", CHARACTERISTICS, UNRESERVED_KEYWORD)
PG_KEYWORD("check", CHECK_P, RESERVED_KEYWORD)
PG_KEYWORD("checkpoint", CHECKPOINT, UNRESERVED_KEYWORD)
PG_KEYWORD("class", CLASS, UNRESERVED_KEYWORD)
PG_KEYWORD("close", CLOSE, UNRESERVED_KEYWORD)
PG_KEYWORD("cluster", CLUSTER, UNRESERVED_KEYWORD)
PG_KEYWORD("coalesce", COALESCE, COL_NAME_KEYWORD)
PG_KEYWORD("collate", COLLATE, RESERVED_KEYWORD)
PG_KEYWORD("collation", COLLATION, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("column", COLUMN, RESERVED_KEYWORD)
PG_KEYWORD("columns", COLUMNS, UNRESERVED_KEYWORD)
PG_KEYWORD("comment", COMMENT, UNRESERVED_KEYWORD)
PG_KEYWORD("comments", COMMENTS, UNRESERVED_KEYWORD)
PG_KEYWORD("commit", COMMIT, UNRESERVED_KEYWORD)
PG_KEYWORD("committed", COMMITTED, UNRESERVED_KEYWORD)
PG_KEYWORD("compression", COMPRESSION, UNRESERVED_KEYWORD)
PG_KEYWORD("concurrently", CONCURRENTLY, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("configuration", CONFIGURATION, UNRESERVED_KEYWORD)
PG_KEYWORD("conflict", CONFLICT, UNRESERVED_KEYWORD)
PG_KEYWORD("connection", CONNECTION, UNRESERVED_KEYWORD)
PG_KEYWORD("constraint", CONSTRAINT, RESERVED_KEYWORD)
PG_KEYWORD("constraints", CONSTRAINTS, UNRESERVED_KEYWORD)
PG_KEYWORD("content", CONTENT_P, UNRESERVED_KEYWORD)
PG_KEYWORD("continue", CONTINUE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("conversion", CONVERSION_P, UNRESERVED_KEYWORD)
PG_KEYWORD("copy", COPY, UNRESERVED_KEYWORD)
PG_KEYWORD("cost", COST, UNRESERVED_KEYWORD)
PG_KEYWORD("create", CREATE_P, RESERVED_KEYWORD)
PG_KEYWORD("cross", CROSS, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("csv", CSV, UNRESERVED_KEYWORD)
PG_KEYWORD("cube", CUBE, UNRESERVED_KEYWORD)
PG_KEYWORD("current", CURRENT_P, UNRESERVED_KEYWORD)
PG_KEYWORD("current_catalog", CURRENT_CATALOG, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("current_date", CURRENT_DATE, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("current_role", CURRENT_ROLE, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("current_schema", CURRENT_SCHEMA, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("current_time", CURRENT_TIME, RESERVED_KEYWORD)
PG_KEYWORD("current_timestamp", CURRENT_TIMESTAMP, RESERVED_KEYWORD)
PG_KEYWORD("current_user", CURRENT_USER, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("cursor", CURSOR, UNRESERVED_KEYWORD)
PG_KEYWORD("cycle", CYCLE, UNRESERVED_KEYWORD)
PG_KEYWORD("data", DATA_P, UNRESERVED_KEYWORD)
PG_KEYWORD("database", DATABASE, UNRESERVED_KEYWORD)
PG_KEYWORD("day", DAY_P, UNRESERVED_KEYWORD)
PG_KEYWORD("days", DAYS_P, UNRESERVED_KEYWORD)
PG_KEYWORD("deallocate", DEALLOCATE, UNRESERVED_KEYWORD)
PG_KEYWORD("dec", DEC, COL_NAME_KEYWORD)
PG_KEYWORD("decimal", DECIMAL_P, COL_NAME_KEYWORD)
PG_KEYWORD("declare", DECLARE, UNRESERVED_KEYWORD)
PG_KEYWORD("default", DEFAULT, RESERVED_KEYWORD)
PG_KEYWORD("defaults", DEFAULTS, UNRESERVED_KEYWORD)
PG_KEYWORD("deferrable", DEFERRABLE, RESERVED_KEYWORD)
PG_KEYWORD("deferred", DEFERRED, UNRESERVED_KEYWORD)
PG_KEYWORD("definer", DEFINER, UNRESERVED_KEYWORD)
PG_KEYWORD("delete", DELETE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("delimiter", DELIMITER, UNRESERVED_KEYWORD)
PG_KEYWORD("delimiters", DELIMITERS, UNRESERVED_KEYWORD)
PG_KEYWORD("depends", DEPENDS, UNRESERVED_KEYWORD)
PG_KEYWORD("desc", DESC_P, RESERVED_KEYWORD)
PG_KEYWORD("describe", DESCRIBE, UNRESERVED_KEYWORD)
PG_KEYWORD("detach", DETACH, UNRESERVED_KEYWORD)
PG_KEYWORD("dictionary", DICTIONARY, UNRESERVED_KEYWORD)
PG_KEYWORD("disable", DISABLE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("discard", DISCARD, UNRESERVED_KEYWORD)
PG_KEYWORD("distinct", DISTINCT, RESERVED_KEYWORD)
PG_KEYWORD("do", DO, RESERVED_KEYWORD)
PG_KEYWORD("document", DOCUMENT_P, UNRESERVED_KEYWORD)
PG_KEYWORD("domain", DOMAIN_P, UNRESERVED_KEYWORD)
PG_KEYWORD("double", DOUBLE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("drop", DROP, UNRESERVED_KEYWORD)
PG_KEYWORD("each", EACH, UNRESERVED_KEYWORD)
PG_KEYWORD("else", ELSE, RESERVED_KEYWORD)
PG_KEYWORD("enable", ENABLE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("encoding", ENCODING, UNRESERVED_KEYWORD)
PG_KEYWORD("encrypted", ENCRYPTED, UNRESERVED_KEYWORD)
PG_KEYWORD("end", END_P, RESERVED_KEYWORD)
PG_KEYWORD("enum", ENUM_P, UNRESERVED_KEYWORD)
PG_KEYWORD("escape", ESCAPE, UNRESERVED_KEYWORD)
PG_KEYWORD("event", EVENT, UNRESERVED_KEYWORD)
PG_KEYWORD("except", EXCEPT, RESERVED_KEYWORD)
PG_KEYWORD("exclude", EXCLUDE, UNRESERVED_KEYWORD)
PG_KEYWORD("excluding", EXCLUDING, UNRESERVED_KEYWORD)
PG_KEYWORD("exclusive", EXCLUSIVE, UNRESERVED_KEYWORD)
PG_KEYWORD("execute", EXECUTE, UNRESERVED_KEYWORD)
PG_KEYWORD("exists", EXISTS, COL_NAME_KEYWORD)
PG_KEYWORD("explain", EXPLAIN, UNRESERVED_KEYWORD)
PG_KEYWORD("export", EXPORT_P, UNRESERVED_KEYWORD)
PG_KEYWORD("export_state", EXPORT_STATE, UNRESERVED_KEYWORD)
PG_KEYWORD("extension", EXTENSION, UNRESERVED_KEYWORD)
PG_KEYWORD("external", EXTERNAL, UNRESERVED_KEYWORD)
PG_KEYWORD("extract", EXTRACT, COL_NAME_KEYWORD)
PG_KEYWORD("false", FALSE_P, RESERVED_KEYWORD)
PG_KEYWORD("family", FAMILY, UNRESERVED_KEYWORD)
PG_KEYWORD("fetch", FETCH, RESERVED_KEYWORD)
PG_KEYWORD("filter", FILTER, UNRESERVED_KEYWORD)
PG_KEYWORD("first", FIRST_P, UNRESERVED_KEYWORD)
PG_KEYWORD("float", FLOAT_P, COL_NAME_KEYWORD)
PG_KEYWORD("following", FOLLOWING, UNRESERVED_KEYWORD)
PG_KEYWORD("for", FOR, RESERVED_KEYWORD)
PG_KEYWORD("force", FORCE, UNRESERVED_KEYWORD)
PG_KEYWORD("foreign", FOREIGN, RESERVED_KEYWORD)
PG_KEYWORD("forward", FORWARD, UNRESERVED_KEYWORD)
PG_KEYWORD("freeze", FREEZE, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("from", FROM, RESERVED_KEYWORD)
PG_KEYWORD("full", FULL, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("function", FUNCTION, UNRESERVED_KEYWORD)
PG_KEYWORD("functions", FUNCTIONS, UNRESERVED_KEYWORD)
PG_KEYWORD("generated", GENERATED, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("glob", GLOB, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("global", GLOBAL, UNRESERVED_KEYWORD)
PG_KEYWORD("grant", GRANT, RESERVED_KEYWORD)
PG_KEYWORD("granted", GRANTED, UNRESERVED_KEYWORD)
PG_KEYWORD("group", GROUP_P, RESERVED_KEYWORD)
PG_KEYWORD("grouping", GROUPING, COL_NAME_KEYWORD)
PG_KEYWORD("grouping_id", GROUPING_ID, COL_NAME_KEYWORD)
PG_KEYWORD("handler", HANDLER, UNRESERVED_KEYWORD)
PG_KEYWORD("having", HAVING, RESERVED_KEYWORD)
PG_KEYWORD("header", HEADER_P, UNRESERVED_KEYWORD)
PG_KEYWORD("hold", HOLD, UNRESERVED_KEYWORD)
PG_KEYWORD("hour", HOUR_P, UNRESERVED_KEYWORD)
PG_KEYWORD("hours", HOURS_P, UNRESERVED_KEYWORD)
PG_KEYWORD("identity", IDENTITY_P, UNRESERVED_KEYWORD)
PG_KEYWORD("if", IF_P, UNRESERVED_KEYWORD)
PG_KEYWORD("ignore", IGNORE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("ilike", ILIKE, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("immediate", IMMEDIATE, UNRESERVED_KEYWORD)
PG_KEYWORD("immutable", IMMUTABLE, UNRESERVED_KEYWORD)
PG_KEYWORD("implicit", IMPLICIT_P, UNRESERVED_KEYWORD)
PG_KEYWORD("import", IMPORT_P, UNRESERVED_KEYWORD)
PG_KEYWORD("in", IN_P, RESERVED_KEYWORD)
PG_KEYWORD("including", INCLUDING, UNRESERVED_KEYWORD)
PG_KEYWORD("increment", INCREMENT, UNRESERVED_KEYWORD)
PG_KEYWORD("index", INDEX, UNRESERVED_KEYWORD)
PG_KEYWORD("indexes", INDEXES, UNRESERVED_KEYWORD)
PG_KEYWORD("inherit", INHERIT, UNRESERVED_KEYWORD)
PG_KEYWORD("inherits", INHERITS, UNRESERVED_KEYWORD)
PG_KEYWORD("initially", INITIALLY, RESERVED_KEYWORD)
PG_KEYWORD("inline", INLINE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("inner", INNER_P, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("inout", INOUT, COL_NAME_KEYWORD)
PG_KEYWORD("input", INPUT_P, UNRESERVED_KEYWORD)
PG_KEYWORD("insensitive", INSENSITIVE, UNRESERVED_KEYWORD)
PG_KEYWORD("insert", INSERT, UNRESERVED_KEYWORD)
PG_KEYWORD("install", INSTALL, UNRESERVED_KEYWORD)
PG_KEYWORD("instead", INSTEAD, UNRESERVED_KEYWORD)
PG_KEYWORD("int", INT_P, COL_NAME_KEYWORD)
PG_KEYWORD("integer", INTEGER, COL_NAME_KEYWORD)
PG_KEYWORD("intersect", INTERSECT, RESERVED_KEYWORD)
PG_KEYWORD("interval", INTERVAL, COL_NAME_KEYWORD)
PG_KEYWORD("into", INTO, RESERVED_KEYWORD)
PG_KEYWORD("invoker", INVOKER, UNRESERVED_KEYWORD)
PG_KEYWORD("is", IS, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("isnull", ISNULL, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("isolation", ISOLATION, UNRESERVED_KEYWORD)
PG_KEYWORD("join", JOIN, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("json", JSON, UNRESERVED_KEYWORD)
PG_KEYWORD("key", KEY, UNRESERVED_KEYWORD)
PG_KEYWORD("label", LABEL, UNRESERVED_KEYWORD)
PG_KEYWORD("language", LANGUAGE, UNRESERVED_KEYWORD)
PG_KEYWORD("large", LARGE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("last", LAST_P, UNRESERVED_KEYWORD)
PG_KEYWORD("lateral", LATERAL_P, RESERVED_KEYWORD)
PG_KEYWORD("leading", LEADING, RESERVED_KEYWORD)
PG_KEYWORD("leakproof", LEAKPROOF, UNRESERVED_KEYWORD)
PG_KEYWORD("left", LEFT, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("level", LEVEL, UNRESERVED_KEYWORD)
PG_KEYWORD("like", LIKE, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("limit", LIMIT, RESERVED_KEYWORD)
PG_KEYWORD("listen", LISTEN, UNRESERVED_KEYWORD)
PG_KEYWORD("load", LOAD, UNRESERVED_KEYWORD)
PG_KEYWORD("local", LOCAL, UNRESERVED_KEYWORD)
PG_KEYWORD("localtime", LOCALTIME, RESERVED_KEYWORD)
PG_KEYWORD("localtimestamp", LOCALTIMESTAMP, RESERVED_KEYWORD)
PG_KEYWORD("location", LOCATION, UNRESERVED_KEYWORD)
PG_KEYWORD("lock", LOCK_P, UNRESERVED_KEYWORD)
PG_KEYWORD("locked", LOCKED, UNRESERVED_KEYWORD)
PG_KEYWORD("logged", LOGGED, UNRESERVED_KEYWORD)
PG_KEYWORD("macro", MACRO, UNRESERVED_KEYWORD)
PG_KEYWORD("map", MAP, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("mapping", MAPPING, UNRESERVED_KEYWORD)
PG_KEYWORD("match", MATCH, UNRESERVED_KEYWORD)
PG_KEYWORD("materialized", MATERIALIZED, UNRESERVED_KEYWORD)
PG_KEYWORD("maxvalue", MAXVALUE, UNRESERVED_KEYWORD)
PG_KEYWORD("method", METHOD, UNRESERVED_KEYWORD)
PG_KEYWORD("microsecond", MICROSECOND_P, UNRESERVED_KEYWORD)
PG_KEYWORD("microseconds", MICROSECONDS_P, UNRESERVED_KEYWORD)
PG_KEYWORD("millisecond", MILLISECOND_P, UNRESERVED_KEYWORD)
PG_KEYWORD("milliseconds", MILLISECONDS_P, UNRESERVED_KEYWORD)
PG_KEYWORD("minute", MINUTE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("minutes", MINUTES_P, UNRESERVED_KEYWORD)
PG_KEYWORD("minvalue", MINVALUE, UNRESERVED_KEYWORD)
PG_KEYWORD("mode", MODE, UNRESERVED_KEYWORD)
PG_KEYWORD("month", MONTH_P, UNRESERVED_KEYWORD)
PG_KEYWORD("months", MONTHS_P, UNRESERVED_KEYWORD)
PG_KEYWORD("move", MOVE, UNRESERVED_KEYWORD)
PG_KEYWORD("name", NAME_P, UNRESERVED_KEYWORD)
PG_KEYWORD("names", NAMES, UNRESERVED_KEYWORD)
PG_KEYWORD("national", NATIONAL, COL_NAME_KEYWORD)
PG_KEYWORD("natural", NATURAL, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("nchar", NCHAR, COL_NAME_KEYWORD)
PG_KEYWORD("new", NEW, UNRESERVED_KEYWORD)
PG_KEYWORD("next", NEXT, UNRESERVED_KEYWORD)
PG_KEYWORD("no", NO, UNRESERVED_KEYWORD)
PG_KEYWORD("none", NONE, COL_NAME_KEYWORD)
PG_KEYWORD("not", NOT, RESERVED_KEYWORD)
PG_KEYWORD("nothing", NOTHING, UNRESERVED_KEYWORD)
PG_KEYWORD("notify", NOTIFY, UNRESERVED_KEYWORD)
PG_KEYWORD("notnull", NOTNULL, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("nowait", NOWAIT, UNRESERVED_KEYWORD)
PG_KEYWORD("null", NULL_P, RESERVED_KEYWORD)
PG_KEYWORD("nullif", NULLIF, COL_NAME_KEYWORD)
PG_KEYWORD("nulls", NULLS_P, UNRESERVED_KEYWORD)
PG_KEYWORD("numeric", NUMERIC, COL_NAME_KEYWORD)
PG_KEYWORD("object", OBJECT_P, UNRESERVED_KEYWORD)
PG_KEYWORD("of", OF, UNRESERVED_KEYWORD)
PG_KEYWORD("off", OFF, UNRESERVED_KEYWORD)
PG_KEYWORD("offset", OFFSET, RESERVED_KEYWORD)
PG_KEYWORD("oids", OIDS, UNRESERVED_KEYWORD)
PG_KEYWORD("old", OLD, UNRESERVED_KEYWORD)
PG_KEYWORD("on", ON, RESERVED_KEYWORD)
PG_KEYWORD("only", ONLY, RESERVED_KEYWORD)
PG_KEYWORD("operator", OPERATOR, UNRESERVED_KEYWORD)
PG_KEYWORD("option", OPTION, UNRESERVED_KEYWORD)
PG_KEYWORD("options", OPTIONS, UNRESERVED_KEYWORD)
PG_KEYWORD("or", OR, RESERVED_KEYWORD)
PG_KEYWORD("order", ORDER, RESERVED_KEYWORD)
PG_KEYWORD("ordinality", ORDINALITY, UNRESERVED_KEYWORD)
PG_KEYWORD("out", OUT_P, COL_NAME_KEYWORD)
PG_KEYWORD("outer", OUTER_P, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("over", OVER, UNRESERVED_KEYWORD)
PG_KEYWORD("overlaps", OVERLAPS, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("overlay", OVERLAY, COL_NAME_KEYWORD)
PG_KEYWORD("overriding", OVERRIDING, UNRESERVED_KEYWORD)
PG_KEYWORD("owned", OWNED, UNRESERVED_KEYWORD)
PG_KEYWORD("owner", OWNER, UNRESERVED_KEYWORD)
PG_KEYWORD("parallel", PARALLEL, UNRESERVED_KEYWORD)
PG_KEYWORD("parser", PARSER, UNRESERVED_KEYWORD)
PG_KEYWORD("partial", PARTIAL, UNRESERVED_KEYWORD)
PG_KEYWORD("partition", PARTITION, UNRESERVED_KEYWORD)
PG_KEYWORD("passing", PASSING, UNRESERVED_KEYWORD)
PG_KEYWORD("password", PASSWORD, UNRESERVED_KEYWORD)
PG_KEYWORD("percent", PERCENT, UNRESERVED_KEYWORD)
PG_KEYWORD("placing", PLACING, RESERVED_KEYWORD)
PG_KEYWORD("plans", PLANS, UNRESERVED_KEYWORD)
PG_KEYWORD("policy", POLICY, UNRESERVED_KEYWORD)
PG_KEYWORD("position", POSITION, COL_NAME_KEYWORD)
PG_KEYWORD("pragma", PRAGMA_P, UNRESERVED_KEYWORD)
PG_KEYWORD("preceding", PRECEDING, UNRESERVED_KEYWORD)
PG_KEYWORD("precision", PRECISION, COL_NAME_KEYWORD)
PG_KEYWORD("prepare", PREPARE, UNRESERVED_KEYWORD)
PG_KEYWORD("prepared", PREPARED, UNRESERVED_KEYWORD)
PG_KEYWORD("preserve", PRESERVE, UNRESERVED_KEYWORD)
PG_KEYWORD("primary", PRIMARY, RESERVED_KEYWORD)
PG_KEYWORD("prior", PRIOR, UNRESERVED_KEYWORD)
PG_KEYWORD("privileges", PRIVILEGES, UNRESERVED_KEYWORD)
PG_KEYWORD("procedural", PROCEDURAL, UNRESERVED_KEYWORD)
PG_KEYWORD("procedure", PROCEDURE, UNRESERVED_KEYWORD)
PG_KEYWORD("program", PROGRAM, UNRESERVED_KEYWORD)
PG_KEYWORD("publication", PUBLICATION, UNRESERVED_KEYWORD)
PG_KEYWORD("qualify", QUALIFY, RESERVED_KEYWORD)
PG_KEYWORD("quote", QUOTE, UNRESERVED_KEYWORD)
PG_KEYWORD("range", RANGE, UNRESERVED_KEYWORD)
PG_KEYWORD("read", READ_P, UNRESERVED_KEYWORD)
PG_KEYWORD("real", REAL, COL_NAME_KEYWORD)
PG_KEYWORD("reassign", REASSIGN, UNRESERVED_KEYWORD)
PG_KEYWORD("recheck", RECHECK, UNRESERVED_KEYWORD)
PG_KEYWORD("recursive", RECURSIVE, UNRESERVED_KEYWORD)
PG_KEYWORD("ref", REF, UNRESERVED_KEYWORD)
PG_KEYWORD("references", REFERENCES, RESERVED_KEYWORD)
PG_KEYWORD("referencing", REFERENCING, UNRESERVED_KEYWORD)
PG_KEYWORD("refresh", REFRESH, UNRESERVED_KEYWORD)
PG_KEYWORD("reindex", REINDEX, UNRESERVED_KEYWORD)
PG_KEYWORD("relative", RELATIVE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("release", RELEASE, UNRESERVED_KEYWORD)
PG_KEYWORD("rename", RENAME, UNRESERVED_KEYWORD)
PG_KEYWORD("repeatable", REPEATABLE, UNRESERVED_KEYWORD)
PG_KEYWORD("replace", REPLACE, UNRESERVED_KEYWORD)
PG_KEYWORD("replica", REPLICA, UNRESERVED_KEYWORD)
PG_KEYWORD("reset", RESET, UNRESERVED_KEYWORD)
PG_KEYWORD("respect", RESPECT_P, UNRESERVED_KEYWORD)
PG_KEYWORD("restart", RESTART, UNRESERVED_KEYWORD)
PG_KEYWORD("restrict", RESTRICT, UNRESERVED_KEYWORD)
PG_KEYWORD("returning", RETURNING, RESERVED_KEYWORD)
PG_KEYWORD("returns", RETURNS, UNRESERVED_KEYWORD)
PG_KEYWORD("revoke", REVOKE, UNRESERVED_KEYWORD)
PG_KEYWORD("right", RIGHT, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("role", ROLE, UNRESERVED_KEYWORD)
PG_KEYWORD("rollback", ROLLBACK, UNRESERVED_KEYWORD)
PG_KEYWORD("rollup", ROLLUP, UNRESERVED_KEYWORD)
PG_KEYWORD("row", ROW, COL_NAME_KEYWORD)
PG_KEYWORD("rows", ROWS, UNRESERVED_KEYWORD)
PG_KEYWORD("rule", RULE, UNRESERVED_KEYWORD)
PG_KEYWORD("sample", SAMPLE, UNRESERVED_KEYWORD)
PG_KEYWORD("savepoint", SAVEPOINT, UNRESERVED_KEYWORD)
PG_KEYWORD("schema", SCHEMA, UNRESERVED_KEYWORD)
PG_KEYWORD("schemas", SCHEMAS, UNRESERVED_KEYWORD)
PG_KEYWORD("scroll", SCROLL, UNRESERVED_KEYWORD)
PG_KEYWORD("search", SEARCH, UNRESERVED_KEYWORD)
PG_KEYWORD("second", SECOND_P, UNRESERVED_KEYWORD)
PG_KEYWORD("seconds", SECONDS_P, UNRESERVED_KEYWORD)
PG_KEYWORD("security", SECURITY, UNRESERVED_KEYWORD)
PG_KEYWORD("select", SELECT, RESERVED_KEYWORD)
PG_KEYWORD("sequence", SEQUENCE, UNRESERVED_KEYWORD)
PG_KEYWORD("sequences", SEQUENCES, UNRESERVED_KEYWORD)
PG_KEYWORD("serializable", SERIALIZABLE, UNRESERVED_KEYWORD)
PG_KEYWORD("server", SERVER, UNRESERVED_KEYWORD)
PG_KEYWORD("session", SESSION, UNRESERVED_KEYWORD)
PG_KEYWORD("session_user", SESSION_USER, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("set", SET, UNRESERVED_KEYWORD)
PG_KEYWORD("setof", SETOF, COL_NAME_KEYWORD)
PG_KEYWORD("sets", SETS, UNRESERVED_KEYWORD)
PG_KEYWORD("share", SHARE, UNRESERVED_KEYWORD)
PG_KEYWORD("show", SHOW, UNRESERVED_KEYWORD)
PG_KEYWORD("similar", SIMILAR, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("simple", SIMPLE, UNRESERVED_KEYWORD)
PG_KEYWORD("skip", SKIP, UNRESERVED_KEYWORD)
PG_KEYWORD("smallint", SMALLINT, COL_NAME_KEYWORD)
PG_KEYWORD("snapshot", SNAPSHOT, UNRESERVED_KEYWORD)
PG_KEYWORD("some", SOME, RESERVED_KEYWORD)
PG_KEYWORD("sql", SQL_P, UNRESERVED_KEYWORD)
PG_KEYWORD("stable", STABLE, UNRESERVED_KEYWORD)
PG_KEYWORD("standalone", STANDALONE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("start", START, UNRESERVED_KEYWORD)
PG_KEYWORD("statement", STATEMENT, UNRESERVED_KEYWORD)
PG_KEYWORD("statistics", STATISTICS, UNRESERVED_KEYWORD)
PG_KEYWORD("stdin", STDIN, UNRESERVED_KEYWORD)
PG_KEYWORD("stdout", STDOUT, UNRESERVED_KEYWORD)
PG_KEYWORD("storage", STORAGE, UNRESERVED_KEYWORD)
PG_KEYWORD("stored", STORED, UNRESERVED_KEYWORD)
PG_KEYWORD("strict", STRICT_P, UNRESERVED_KEYWORD)
PG_KEYWORD("strip", STRIP_P, UNRESERVED_KEYWORD)
PG_KEYWORD("struct", STRUCT, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("subscription", SUBSCRIPTION, UNRESERVED_KEYWORD)
PG_KEYWORD("substring", SUBSTRING, COL_NAME_KEYWORD)
PG_KEYWORD("summarize", SUMMARIZE, UNRESERVED_KEYWORD)
PG_KEYWORD("symmetric", SYMMETRIC, RESERVED_KEYWORD)
PG_KEYWORD("sysid", SYSID, UNRESERVED_KEYWORD)
PG_KEYWORD("system", SYSTEM_P, UNRESERVED_KEYWORD)
PG_KEYWORD("table", TABLE, RESERVED_KEYWORD)
PG_KEYWORD("tables", TABLES, UNRESERVED_KEYWORD)
PG_KEYWORD("tablesample", TABLESAMPLE, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("tablespace", TABLESPACE, UNRESERVED_KEYWORD)
PG_KEYWORD("temp", TEMP, UNRESERVED_KEYWORD)
PG_KEYWORD("template", TEMPLATE, UNRESERVED_KEYWORD)
PG_KEYWORD("temporary", TEMPORARY, UNRESERVED_KEYWORD)
PG_KEYWORD("text", TEXT_P, UNRESERVED_KEYWORD)
PG_KEYWORD("then", THEN, RESERVED_KEYWORD)
PG_KEYWORD("time", TIME, COL_NAME_KEYWORD)
PG_KEYWORD("timestamp", TIMESTAMP, COL_NAME_KEYWORD)
PG_KEYWORD("to", TO, RESERVED_KEYWORD)
PG_KEYWORD("trailing", TRAILING, RESERVED_KEYWORD)
PG_KEYWORD("transaction", TRANSACTION, UNRESERVED_KEYWORD)
PG_KEYWORD("transform", TRANSFORM, UNRESERVED_KEYWORD)
PG_KEYWORD("treat", TREAT, COL_NAME_KEYWORD)
PG_KEYWORD("trigger", TRIGGER, UNRESERVED_KEYWORD)
PG_KEYWORD("trim", TRIM, COL_NAME_KEYWORD)
PG_KEYWORD("true", TRUE_P, RESERVED_KEYWORD)
PG_KEYWORD("truncate", TRUNCATE, UNRESERVED_KEYWORD)
PG_KEYWORD("trusted", TRUSTED, UNRESERVED_KEYWORD)
PG_KEYWORD("try_cast", TRY_CAST, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("type", TYPE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("types", TYPES_P, UNRESERVED_KEYWORD)
PG_KEYWORD("unbounded", UNBOUNDED, UNRESERVED_KEYWORD)
PG_KEYWORD("uncommitted", UNCOMMITTED, UNRESERVED_KEYWORD)
PG_KEYWORD("unencrypted", UNENCRYPTED, UNRESERVED_KEYWORD)
PG_KEYWORD("union", UNION, RESERVED_KEYWORD)
PG_KEYWORD("unique", UNIQUE, RESERVED_KEYWORD)
PG_KEYWORD("unknown", UNKNOWN, UNRESERVED_KEYWORD)
PG_KEYWORD("unlisten", UNLISTEN, UNRESERVED_KEYWORD)
PG_KEYWORD("unlogged", UNLOGGED, UNRESERVED_KEYWORD)
PG_KEYWORD("until", UNTIL, UNRESERVED_KEYWORD)
PG_KEYWORD("update", UPDATE, UNRESERVED_KEYWORD)
PG_KEYWORD("user", USER, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("using", USING, RESERVED_KEYWORD)
PG_KEYWORD("vacuum", VACUUM, UNRESERVED_KEYWORD)
PG_KEYWORD("valid", VALID, UNRESERVED_KEYWORD)
PG_KEYWORD("validate", VALIDATE, UNRESERVED_KEYWORD)
PG_KEYWORD("validator", VALIDATOR, UNRESERVED_KEYWORD)
PG_KEYWORD("value", VALUE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("values", VALUES, COL_NAME_KEYWORD)
PG_KEYWORD("varchar", VARCHAR, COL_NAME_KEYWORD)
PG_KEYWORD("variadic", VARIADIC, RESERVED_KEYWORD)
PG_KEYWORD("varying", VARYING, UNRESERVED_KEYWORD)
PG_KEYWORD("verbose", VERBOSE, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("version", VERSION_P, UNRESERVED_KEYWORD)
PG_KEYWORD("view", VIEW, UNRESERVED_KEYWORD)
PG_KEYWORD("views", VIEWS, UNRESERVED_KEYWORD)
PG_KEYWORD("virtual", VIRTUAL, UNRESERVED_KEYWORD)
PG_KEYWORD("volatile", VOLATILE, UNRESERVED_KEYWORD)
PG_KEYWORD("when", WHEN, RESERVED_KEYWORD)
PG_KEYWORD("where", WHERE, RESERVED_KEYWORD)
PG_KEYWORD("whitespace", WHITESPACE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("window", WINDOW, RESERVED_KEYWORD)
PG_KEYWORD("with", WITH, RESERVED_KEYWORD)
PG_KEYWORD("within", WITHIN, UNRESERVED_KEYWORD)
PG_KEYWORD("without", WITHOUT, UNRESERVED_KEYWORD)
PG_KEYWORD("work", WORK, UNRESERVED_KEYWORD)
PG_KEYWORD("wrapper", WRAPPER, UNRESERVED_KEYWORD)
PG_KEYWORD("write", WRITE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("xml", XML_P, UNRESERVED_KEYWORD)
PG_KEYWORD("xmlattributes", XMLATTRIBUTES, COL_NAME_KEYWORD)
PG_KEYWORD("xmlconcat", XMLCONCAT, COL_NAME_KEYWORD)
PG_KEYWORD("xmlelement", XMLELEMENT, COL_NAME_KEYWORD)
PG_KEYWORD("xmlexists", XMLEXISTS, COL_NAME_KEYWORD)
PG_KEYWORD("xmlforest", XMLFOREST, COL_NAME_KEYWORD)
PG_KEYWORD("xmlnamespaces", XMLNAMESPACES, COL_NAME_KEYWORD)
PG_KEYWORD("xmlparse", XMLPARSE, COL_NAME_KEYWORD)
PG_KEYWORD("xmlpi", XMLPI, COL_NAME_KEYWORD)
PG_KEYWORD("xmlroot", XMLROOT, COL_NAME_KEYWORD)
PG_KEYWORD("xmlserialize", XMLSERIALIZE, COL_NAME_KEYWORD)
PG_KEYWORD("xmltable", XMLTABLE, COL_NAME_KEYWORD)
PG_KEYWORD("year", YEAR_P, UNRESERVED_KEYWORD)
PG_KEYWORD("years", YEARS_P, UNRESERVED_KEYWORD)
PG_KEYWORD("yes", YES_P, UNRESERVED_KEYWORD)
PG_KEYWORD("zone", ZONE, UNRESERVED_KEYWORD)

};

const int NumScanKeywords = lengthof(ScanKeywords);
} // namespace duckdb_libpgquery


// LICENSE_CHANGE_END


namespace duckdb_libpgquery {

/*
 * raw_parser
 *		Given a query in string form, do lexical and grammatical analysis.
 *
 * Returns a list of raw (un-analyzed) parse trees.  The immediate elements
 * of the list are always PGRawStmt nodes.
 */
PGList *raw_parser(const char *str) {
	core_yyscan_t yyscanner;
	base_yy_extra_type yyextra;
	int yyresult;

	/* initialize the flex scanner */
	yyscanner = scanner_init(str, &yyextra.core_yy_extra, ScanKeywords, NumScanKeywords);

	/* base_yylex() only needs this much initialization */
	yyextra.have_lookahead = false;

	/* initialize the bison parser */
	parser_init(&yyextra);

	/* Parse! */
	yyresult = base_yyparse(yyscanner);

	/* Clean up (release memory) */
	scanner_finish(yyscanner);

	if (yyresult) /* error */
		return NIL;

	return yyextra.parsetree;
}

bool is_keyword(const char *text) {
	return ScanKeywordLookup(text, ScanKeywords, NumScanKeywords) != NULL;
}

std::vector<PGKeyword> keyword_list() {
    std::vector<PGKeyword> result;
	for(size_t i = 0; i < NumScanKeywords; i++) {
		PGKeyword keyword;
		keyword.text = ScanKeywords[i].name;
		switch(ScanKeywords[i].category) {
		case UNRESERVED_KEYWORD:
			keyword.category = PGKeywordCategory::PG_KEYWORD_UNRESERVED;
			break;
		case RESERVED_KEYWORD:
			keyword.category = PGKeywordCategory::PG_KEYWORD_RESERVED;
			break;
		case TYPE_FUNC_NAME_KEYWORD:
			keyword.category = PGKeywordCategory::PG_KEYWORD_TYPE_FUNC;
			break;
		case COL_NAME_KEYWORD:
			keyword.category = PGKeywordCategory::PG_KEYWORD_COL_NAME;
			break;
		}
		result.push_back(keyword);
	}
	return result;
}

std::vector<PGSimplifiedToken> tokenize(const char *str) {
	core_yyscan_t yyscanner;
	base_yy_extra_type yyextra;

	std::vector<PGSimplifiedToken> result;
	yyscanner = scanner_init(str, &yyextra.core_yy_extra, ScanKeywords, NumScanKeywords);
	yyextra.have_lookahead = false;

	while(true) {
		YYSTYPE type;
		YYLTYPE loc;
		int token;
		try {
			token = base_yylex(&type, &loc, yyscanner);
		} catch(...) {
			token = 0;
		}
		if (token == 0) {
			break;
		}
		PGSimplifiedToken current_token;
		switch(token) {
		case IDENT:
			current_token.type = PGSimplifiedTokenType::PG_SIMPLIFIED_TOKEN_IDENTIFIER;
			break;
		case ICONST:
		case FCONST:
			current_token.type = PGSimplifiedTokenType::PG_SIMPLIFIED_TOKEN_NUMERIC_CONSTANT;
			break;
		case SCONST:
		case BCONST:
		case XCONST:
			current_token.type = PGSimplifiedTokenType::PG_SIMPLIFIED_TOKEN_STRING_CONSTANT;
			break;
		case Op:
		case PARAM:
		case COLON_EQUALS:
		case EQUALS_GREATER:
		case LESS_EQUALS:
		case GREATER_EQUALS:
		case NOT_EQUALS:
			current_token.type = PGSimplifiedTokenType::PG_SIMPLIFIED_TOKEN_OPERATOR;
			break;
		default:
			if (token >= 255) {
				// non-ascii value, probably a keyword
				current_token.type = PGSimplifiedTokenType::PG_SIMPLIFIED_TOKEN_KEYWORD;
			} else {
				// ascii value, probably an operator
				current_token.type = PGSimplifiedTokenType::PG_SIMPLIFIED_TOKEN_OPERATOR;
			}
			break;
		}
		current_token.start = loc;
		result.push_back(current_token);
	}

	scanner_finish(yyscanner);
	return result;
}



/*
 * Intermediate filter between parser and core lexer (core_yylex in scan.l).
 *
 * This filter is needed because in some cases the standard SQL grammar
 * requires more than one token lookahead.  We reduce these cases to one-token
 * lookahead by replacing tokens here, in order to keep the grammar LALR(1).
 *
 * Using a filter is simpler than trying to recognize multiword tokens
 * directly in scan.l, because we'd have to allow for comments between the
 * words.  Furthermore it's not clear how to do that without re-introducing
 * scanner backtrack, which would cost more performance than this filter
 * layer does.
 *
 * The filter also provides a convenient place to translate between
 * the core_YYSTYPE and YYSTYPE representations (which are really the
 * same thing anyway, but notationally they're different).
 */
int base_yylex(YYSTYPE *lvalp, YYLTYPE *llocp, core_yyscan_t yyscanner) {
	base_yy_extra_type *yyextra = pg_yyget_extra(yyscanner);
	int cur_token;
	int next_token;
	int cur_token_length;
	YYLTYPE cur_yylloc;

	/* Get next token --- we might already have it */
	if (yyextra->have_lookahead) {
		cur_token = yyextra->lookahead_token;
		lvalp->core_yystype = yyextra->lookahead_yylval;
		*llocp = yyextra->lookahead_yylloc;
		*(yyextra->lookahead_end) = yyextra->lookahead_hold_char;
		yyextra->have_lookahead = false;
	} else
		cur_token = core_yylex(&(lvalp->core_yystype), llocp, yyscanner);

	/*
	 * If this token isn't one that requires lookahead, just return it.  If it
	 * does, determine the token length.  (We could get that via strlen(), but
	 * since we have such a small set of possibilities, hardwiring seems
	 * feasible and more efficient.)
	 */
	switch (cur_token) {
	case NOT:
		cur_token_length = 3;
		break;
	case NULLS_P:
		cur_token_length = 5;
		break;
	case WITH:
		cur_token_length = 4;
		break;
	default:
		return cur_token;
	}

	/*
	 * Identify end+1 of current token.  core_yylex() has temporarily stored a
	 * '\0' here, and will undo that when we call it again.  We need to redo
	 * it to fully revert the lookahead call for error reporting purposes.
	 */
	yyextra->lookahead_end = yyextra->core_yy_extra.scanbuf + *llocp + cur_token_length;
	Assert(*(yyextra->lookahead_end) == '\0');

	/*
	 * Save and restore *llocp around the call.  It might look like we could
	 * avoid this by just passing &lookahead_yylloc to core_yylex(), but that
	 * does not work because flex actually holds onto the last-passed pointer
	 * internally, and will use that for error reporting.  We need any error
	 * reports to point to the current token, not the next one.
	 */
	cur_yylloc = *llocp;

	/* Get next token, saving outputs into lookahead variables */
	next_token = core_yylex(&(yyextra->lookahead_yylval), llocp, yyscanner);
	yyextra->lookahead_token = next_token;
	yyextra->lookahead_yylloc = *llocp;

	*llocp = cur_yylloc;

	/* Now revert the un-truncation of the current token */
	yyextra->lookahead_hold_char = *(yyextra->lookahead_end);
	*(yyextra->lookahead_end) = '\0';

	yyextra->have_lookahead = true;

	/* Replace cur_token if needed, based on lookahead */
	switch (cur_token) {
	case NOT:
		/* Replace NOT by NOT_LA if it's followed by BETWEEN, IN, etc */
		switch (next_token) {
		case BETWEEN:
		case IN_P:
		case LIKE:
		case ILIKE:
		case SIMILAR:
			cur_token = NOT_LA;
			break;
		}
		break;

	case NULLS_P:
		/* Replace NULLS_P by NULLS_LA if it's followed by FIRST or LAST */
		switch (next_token) {
		case FIRST_P:
		case LAST_P:
			cur_token = NULLS_LA;
			break;
		}
		break;

	case WITH:
		/* Replace WITH by WITH_LA if it's followed by TIME or ORDINALITY */
		switch (next_token) {
		case TIME:
		case ORDINALITY:
			cur_token = WITH_LA;
			break;
		}
		break;
	}

	return cur_token;
}

}

// LICENSE_CHANGE_END


// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #11
// See the end of this file for a list

#line 1 "third_party/libpg_query/src_backend_parser_scan.cpp"
/*-------------------------------------------------------------------------
 *
 * scan.l
 *	  lexical scanner for PostgreSQL
 *
 * NOTE NOTE NOTE:
 *
 * The rules in this file must be kept in sync with src/fe_utils/psqlscan.l!
 *
 * The rules are designed so that the scanner never has to backtrack,
 * in the sense that there is always a rule that can match the input
 * consumed so far (the rule action may internally throw back some input
 * with yyless(), however).  As explained in the flex manual, this makes
 * for a useful speed increase --- about a third faster than a plain -CF
 * lexer, in simple testing.  The extra complexity is mostly in the rules
 * for handling float numbers and continued string literals.  If you change
 * the lexical rules, verify that you haven't broken the no-backtrack '
 * property by running flex with the "-b" option and checking that the
 * resulting "lex.backup" file says that no backing up is needed.  (As of
 * Postgres 9.2, this check is made automatically by the Makefile.)
 *
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/parser/scan.l
 *
 *-------------------------------------------------------------------------
 */
#include <ctype.h>
//#include <unistd.h>



		/* only needed for GUC variables */



// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #11
// See the end of this file for a list

/*-------------------------------------------------------------------------
 *
 * pg_wchar.h
 *	  multibyte-character support
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/include/mb/pg_wchar.h
 *
 *	NOTES
 *		This is used both by the backend and by libpq, but should not be
 *		included by libpq client programs.  In particular, a libpq client
 *		should not assume that the encoding IDs used by the version of libpq
 *		it's linked to match up with the IDs declared here.
 *
 *-------------------------------------------------------------------------
 */


#include <cstdint>

/*
 * The pg_wchar type
 */
namespace duckdb_libpgquery {
typedef unsigned int pg_wchar;
}

// LICENSE_CHANGE_END


#include <stdexcept>

#line 43 "third_party/libpg_query/src_backend_parser_scan.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define core_yy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer core_yy_create_buffer
#endif

#ifdef yy_delete_buffer
#define core_yy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer core_yy_delete_buffer
#endif

#ifdef yy_scan_buffer
#define core_yy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer core_yy_scan_buffer
#endif

#ifdef yy_scan_string
#define core_yy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string core_yy_scan_string
#endif

#ifdef yy_scan_bytes
#define core_yy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes core_yy_scan_bytes
#endif

#ifdef yy_init_buffer
#define core_yy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer core_yy_init_buffer
#endif

#ifdef yy_flush_buffer
#define core_yy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer core_yy_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define core_yy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state core_yy_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define core_yy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer core_yy_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define core_yypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state core_yypush_buffer_state
#endif

#ifdef yypop_buffer_state
#define core_yypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state core_yypop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define core_yyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack core_yyensure_buffer_stack
#endif

#ifdef yylex
#define core_yylex_ALREADY_DEFINED
#else
#define yylex core_yylex
#endif

#ifdef yyrestart
#define core_yyrestart_ALREADY_DEFINED
#else
#define yyrestart core_yyrestart
#endif

#ifdef yylex_init
#define core_yylex_init_ALREADY_DEFINED
#else
#define yylex_init core_yylex_init
#endif

#ifdef yylex_init_extra
#define core_yylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra core_yylex_init_extra
#endif

#ifdef yylex_destroy
#define core_yylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy core_yylex_destroy
#endif

#ifdef yyget_debug
#define core_yyget_debug_ALREADY_DEFINED
#else
#define yyget_debug core_yyget_debug
#endif

#ifdef yyset_debug
#define core_yyset_debug_ALREADY_DEFINED
#else
#define yyset_debug core_yyset_debug
#endif

#ifdef yyget_extra
#define core_yyget_extra_ALREADY_DEFINED
#else
#define yyget_extra core_yyget_extra
#endif

#ifdef yyset_extra
#define core_yyset_extra_ALREADY_DEFINED
#else
#define yyset_extra core_yyset_extra
#endif

#ifdef yyget_in
#define core_yyget_in_ALREADY_DEFINED
#else
#define yyget_in core_yyget_in
#endif

#ifdef yyset_in
#define core_yyset_in_ALREADY_DEFINED
#else
#define yyset_in core_yyset_in
#endif

#ifdef yyget_out
#define core_yyget_out_ALREADY_DEFINED
#else
#define yyget_out core_yyget_out
#endif

#ifdef yyset_out
#define core_yyset_out_ALREADY_DEFINED
#else
#define yyset_out core_yyset_out
#endif

#ifdef yyget_leng
#define core_yyget_leng_ALREADY_DEFINED
#else
#define yyget_leng core_yyget_leng
#endif

#ifdef yyget_text
#define core_yyget_text_ALREADY_DEFINED
#else
#define yyget_text core_yyget_text
#endif

#ifdef yyget_lineno
#define core_yyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno core_yyget_lineno
#endif

#ifdef yyset_lineno
#define core_yyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno core_yyset_lineno
#endif

#ifdef yyget_column
#define core_yyget_column_ALREADY_DEFINED
#else
#define yyget_column core_yyget_column
#endif

#ifdef yyset_column
#define core_yyset_column_ALREADY_DEFINED
#else
#define yyset_column core_yyset_column
#endif

#ifdef yywrap
#define core_yywrap_ALREADY_DEFINED
#else
#define yywrap core_yywrap
#endif

#ifdef yyget_lval
#define core_yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval core_yyget_lval
#endif

#ifdef yyset_lval
#define core_yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval core_yyset_lval
#endif

#ifdef yyget_lloc
#define core_yyget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc core_yyget_lloc
#endif

#ifdef yyset_lloc
#define core_yyset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc core_yyset_lloc
#endif

#ifdef yyalloc
#define core_yyalloc_ALREADY_DEFINED
#else
#define yyalloc core_yyalloc
#endif

#ifdef yyrealloc
#define core_yyrealloc_ALREADY_DEFINED
#else
#define yyrealloc core_yyrealloc
#endif

#ifdef yyfree
#define core_yyfree_ALREADY_DEFINED
#else
#define yyfree core_yyfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H
namespace duckdb_libpgquery {

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, yy_size_t len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define core_yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 82
#define YY_END_OF_BUFFER 83
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[295] =
    {   0,
        0,    0,   12,   12,    0,    0,    0,    0,   11,   11,
        0,    0,    0,    0,    0,    0,    0,    0,   55,   55,
        0,    0,   28,   28,    0,    0,   83,   81,    1,    1,
       71,   49,   81,   70,   71,   19,   70,   70,   70,   70,
       70,   74,   70,   70,   70,   70,   81,   80,   80,   80,
       80,   80,   80,   12,    9,    5,    5,    6,    6,   58,
       51,   11,   16,   32,   32,   22,   42,   31,   22,   46,
       46,   48,   52,   54,   53,   53,   54,   54,   24,   27,
       26,   26,   27,   27,   35,   36,   35,    1,   71,   69,
       43,   72,   44,   64,    1,   63,   61,   75,    2,   75,

       74,   78,   60,   62,   66,   68,   65,   67,   73,   80,
        8,   20,   18,   59,   15,   12,    9,    9,   10,    5,
        7,    4,    3,   58,   57,   11,   16,   16,   17,   32,
       22,   22,   30,   23,   38,   39,   37,   37,   38,   31,
       46,   45,   47,   53,   53,   55,   24,   24,   25,   26,
       26,   28,   37,   37,   44,    1,    1,    2,   76,   75,
       79,   77,   50,   21,    9,   14,   10,    9,    3,   16,
       13,   17,   16,   22,   41,   23,   22,   39,   37,   37,
       40,   47,   53,   55,   24,   25,   24,   26,   28,   37,
       37,    9,    9,    9,    9,   16,   16,   16,   16,   22,

       22,   22,   22,   39,   37,   37,   40,   55,   24,   24,
       24,   24,   28,   37,   37,    9,    9,    9,    9,    9,
       16,   16,   16,   16,   16,   22,   22,   22,   22,   22,
       37,   37,   55,   24,   24,   24,   24,   24,   28,   37,
       37,    9,   16,   22,   37,   33,   55,   24,   28,   37,
       34,   37,   55,   28,   37,   37,   55,   55,   55,   28,
       28,   28,   37,   37,   55,   55,   28,   28,   37,   56,
       55,   55,   55,   55,   29,   28,   28,   28,   28,   55,
       55,   55,   55,   55,   28,   28,   28,   28,   28,   55,
       55,   28,   28,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    7,    8,    9,   10,   11,
       11,   12,   13,   11,   14,   15,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   18,   18,   19,   11,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   28,
       30,   30,   30,   30,   30,   30,   30,   31,   30,   32,
       30,   30,   33,   30,   34,   30,   30,   35,   30,   30,
       11,   36,   11,    8,   30,   24,   25,   26,   27,   28,

       29,   28,   30,   30,   30,   30,   30,   30,   30,   31,
       30,   32,   30,   30,   33,   30,   37,   30,   30,   38,
       30,   30,    1,   24,    1,   24,    1,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30
    } ;

static const YY_CHAR yy_meta[39] =
    {   0,
        1,    1,    2,    2,    3,    4,    5,    3,    3,    6,
        1,    7,    3,    3,    1,    7,    8,    8,    1,    3,
        3,    3,    1,    3,    9,    9,    9,    9,    9,   10,
       10,   10,   10,   10,   10,   11,   10,   10
    } ;

static const flex_int16_t yy_base[362] =
    {   0,
        0,    0,  430,  424,   34,   54,  419,  418,  409,  408,
       41,   50,  402,  401,   38,   54,  393,  392,   85,  121,
      386,  385,  157,  193,   37,   46,  383, 1208,   77,   81,
      361, 1208,   83,    0,    0, 1208, 1208,  365,   50,   76,
      364,   80,   50,   81,  348,  348,   87,    0,  347,  346,
      344,  344,  331,    0,  104,    0,    0,   80,  328,    0,
      329,    0,  112,    0,    0,  126,  100,    0,  129,    0,
        0,  327,  321, 1208,  108,  142,  306,  285,  160, 1208,
      145,  148,  298,  282, 1208, 1208,  119,  163,    0,    0,
     1208,  103,  297,    0,  226,    0, 1208,  151,    0,  158,

      164,  171, 1208, 1208,    0,    0,    0,    0,  124,    0,
     1208, 1208, 1208,  180, 1208,    0,  196,  199,  283,    0,
      192, 1208,    0,    0, 1208,    0,  212,  215,  276,    0,
      218,  241, 1208,  268, 1208,  261,    0,    0,    0,    0,
        0, 1208,  270,  250,    0,  241,  254,  257,  259,  260,
        0,  237,    0,    0,  262,    0,  267,    0, 1208,  194,
      160,  188, 1208, 1208,  282, 1208,  252,  291,    0,  296,
     1208,  251,  299,  305, 1208,  235,  314,  224,    0,    0,
        0,  230,    0,  209,  319,  219,  322,    0,  201,    0,
        0,  328,  335,  341,  344,  348,  357,  361,  364,  370,

      377,  383,  386, 1208,    0,    0, 1208,  199,  390,  399,
      403,  406,  167,    0,    0,  412,  419,  425,  428,  434,
      441,  447,  450,  454,  463,  467,  470,  476,  485,  489,
        0,    0,  151,  492,  498,  505,  514,  518,  140,    0,
        0,  521,  527,  534,    0, 1208,  128,  540,  125,    0,
     1208,    0,  543,  548,    0,    0,  557,    0,  113,  562,
        0,   99,    0,    0,   55,  571,   42,  576,    0, 1208,
      585,  590,  599,  604, 1208,  613,  618,  627,  632,  641,
      646,  655,  660,  669,  674,  683,  688,  697,  702,  711,
        0,  716,    0, 1208,  730,  741,  752,  763,  774,  785,

      796,  807,  818,  829,  838,  841,  847,  857,  868,  879,
      890,  901,  911,  922,  933,  940,  946,  956,  965,  970,
      970,  972,  974,  979,  989, 1000, 1004, 1006, 1015, 1026,
     1037, 1041, 1043, 1045, 1054, 1058, 1060, 1069, 1080, 1091,
     1095, 1097, 1106, 1110, 1112, 1114, 1116, 1118, 1120, 1122,
     1124, 1126, 1128, 1130, 1139, 1150, 1154, 1163, 1174, 1185,
     1196
    } ;

static const flex_int16_t yy_def[362] =
    {   0,
      294,    1,  295,  295,  296,  296,  297,  297,  298,  298,
      299,  299,  300,  300,  301,  301,  297,  297,  302,  302,
      300,  300,  303,  303,  304,  304,  294,  294,  294,  294,
      305,  294,  306,  305,  305,  294,  294,  305,  305,  294,
      305,  294,  294,  305,  305,  305,  294,  307,  307,  307,
      307,  307,  307,  308,  294,  309,  309,  294,  294,  310,
      294,  311,  294,  312,  312,  294,  313,  314,  294,  315,
      315,  316,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  305,  305,
      294,  294,  317,  305,  318,  305,  294,  294,  319,  294,

      294,  294,  294,  294,  305,  305,  305,  305,  294,  307,
      294,  294,  294,  294,  294,  308,  294,  294,  294,  309,
      294,  294,  320,  310,  294,  311,  294,  294,  294,  312,
      294,  294,  294,  294,  294,  294,  321,  322,  323,  314,
      315,  294,  324,  294,  325,  294,  294,  294,  294,  294,
      326,  294,  327,  328,  317,  318,  318,  319,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  329,  320,  294,
      294,  294,  330,  294,  294,  294,  331,  294,  332,  333,
      334,  324,  325,  294,  294,  294,  335,  326,  294,  336,
      337,  338,  329,  329,  329,  339,  330,  330,  330,  340,

      331,  331,  331,  294,  341,  342,  294,  294,  343,  335,
      335,  335,  294,  344,  345,  338,  338,  294,  338,  329,
      339,  339,  294,  339,  330,  340,  340,  294,  340,  331,
      346,  347,  294,  343,  343,  294,  343,  335,  294,  348,
      349,  338,  339,  340,  350,  294,  294,  343,  294,  351,
      294,  352,  294,  294,  353,  354,  294,  355,  294,  294,
      356,  294,  357,  347,  294,  358,  294,  359,  349,  294,
      358,  358,  360,  358,  294,  359,  359,  361,  359,  358,
      358,  294,  358,  358,  359,  359,  294,  359,  359,  360,
      355,  361,  356,    0,  294,  294,  294,  294,  294,  294,

      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294
    } ;

static const flex_int16_t yy_nxt[1247] =
    {   0,
       28,   29,   30,   29,   31,   32,   33,   34,   35,   36,
       37,   38,   34,   39,   40,   41,   42,   42,   43,   44,
       45,   46,   47,   35,   48,   49,   48,   48,   50,   48,
       51,   48,   48,   52,   53,   28,   52,   53,   57,   86,
       71,   57,   57,   65,   72,   58,   57,   57,   86,   59,
       66,  275,   65,   57,   57,   57,   71,   57,   57,   66,
       72,   57,   57,   95,  270,   58,   57,   57,  103,   59,
      104,   96,   87,   57,   57,   57,   67,   57,   88,   88,
       88,   87,   88,   88,   88,   67,   75,   76,   75,   91,
       97,  121,   98,   98,  100,  122,  101,  101,   77,   92,

       92,  105,  106,  109,  109,  117,  118,  118,  102,  144,
      144,  144,  268,  127,  128,  128,  136,  119,   78,   92,
       92,   78,   75,   76,   75,  129,  266,  131,  132,  132,
      131,  132,  132,  137,   77,  133,  138,  139,  133,  134,
      109,  109,  134,  144,  144,  144,  150,  150,  150,  150,
      150,  150,  153,  254,   78,  154,  253,   78,   81,   82,
       81,  147,  148,  148,   88,   88,   88,   98,   98,  133,
       83,  249,  159,  149,  160,  160,  162,  162,  100,  102,
      101,  101,  247,  161,  161,  163,  102,  162,  162,  164,
       84,  239,  102,   84,   81,   82,   81,  117,  118,  118,

      165,  165,  165,  121,  162,  162,   83,  122,  166,  119,
      160,  160,  167,  127,  128,  128,  170,  170,  170,  131,
      132,  132,  102,  233,  171,  129,   84,  213,  172,   84,
      157,  134,  209,  157,  157,  208,  142,  157,  157,  157,
      204,  157,  174,  174,  174,  157,  157,  157,  200,  157,
      175,  144,  144,  144,  176,  147,  148,  148,  185,  185,
      185,  150,  150,  150,  196,  192,  175,  149,   91,  189,
      186,  157,  187,  184,  157,  157,  142,  178,  157,  157,
      157,  177,  157,  165,  165,  165,  157,  157,  157,  173,
      157,  166,  194,  118,  118,  167,  168,  170,  170,  170,

      198,  128,  128,   91,  195,  171,  174,  174,  174,  172,
      152,  151,  199,  146,  175,  202,  132,  132,  176,  145,
      185,  185,  185,  211,  148,  148,  125,  203,  175,  217,
      218,  218,  186,  142,  125,  212,  194,  118,  118,  123,
      115,  219,  194,  118,  118,  194,  118,  118,  195,  222,
      223,  223,  114,  113,  195,  112,  111,  220,  198,  128,
      128,  224,  198,  128,  128,  198,  128,  128,  108,  107,
      199,  227,  228,  228,  199,   99,   94,  225,  202,  132,
      132,   90,  294,  229,  202,  132,  132,  202,  132,  132,
      203,  235,  236,  236,   79,   79,  203,   73,   73,  230,

      211,  148,  148,  237,  211,  148,  148,  211,  148,  148,
       69,   69,  212,  217,  218,  218,  212,   63,   63,  238,
      217,  218,  218,   61,   61,  219,  165,  165,  165,  217,
      218,  218,  219,   55,  166,  194,  118,  118,  167,   55,
      294,  242,  222,  223,  223,  294,  294,  220,  222,  223,
      223,  170,  170,  170,  224,  222,  223,  223,  294,  171,
      224,  294,  294,  172,  198,  128,  128,  243,  227,  228,
      228,  227,  228,  228,  294,  294,  225,  174,  174,  174,
      229,  294,  294,  229,  294,  175,  227,  228,  228,  176,
      202,  132,  132,  235,  236,  236,  294,  294,  244,  235,

      236,  236,  230,  294,  294,  237,  185,  185,  185,  294,
      294,  237,  294,  294,  175,  235,  236,  236,  186,  211,
      148,  148,  217,  218,  218,  294,  294,  248,  222,  223,
      223,  238,  294,  294,  242,  227,  228,  228,  294,  294,
      243,  235,  236,  236,  257,  257,  257,  244,  294,  260,
      260,  260,  258,  248,  294,  294,  259,  261,  257,  257,
      257,  262,  294,  260,  260,  260,  258,  294,  294,  294,
      259,  261,  272,  257,  257,  262,  294,  277,  260,  260,
      273,  294,  294,  294,  274,  278,  272,  257,  257,  279,
      294,  272,  257,  257,  273,  294,  294,  294,  274,  273,

      281,  282,  282,  274,  294,  272,  257,  257,  273,  294,
      294,  294,  283,  273,  277,  260,  260,  284,  294,  277,
      260,  260,  278,  294,  294,  294,  279,  278,  286,  287,
      287,  279,  294,  277,  260,  260,  278,  294,  294,  294,
      288,  278,  272,  257,  257,  289,  294,  272,  257,  257,
      290,  294,  294,  294,  274,  290,  257,  257,  257,  274,
      294,  272,  257,  257,  291,  294,  294,  294,  259,  290,
      272,  257,  257,  284,  294,  277,  260,  260,  273,  294,
      294,  294,  284,  292,  277,  260,  260,  279,  294,  260,
      260,  260,  292,  294,  294,  294,  279,  293,  277,  260,

      260,  262,  294,  277,  260,  260,  292,  294,  294,  294,
      289,  278,  281,  282,  282,  289,  294,  286,  287,  287,
      273,  294,  294,  294,  283,  278,  294,  294,  294,  288,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   70,   70,   70,   70,

       70,   70,   70,   70,   70,   70,   70,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       89,  294,  294,  294,   89,   93,  294,  294,   93,   93,
       93,  110,  294,  294,  110,  110,  110,  116,  116,  116,
      116,  116,  294,  116,  116,  116,  116,  116,  120,  120,
      120,  120,  120,  120,  294,  120,  120,  120,  120,  124,
      124,  124,  294,  124,  124,  124,  124,  124,  124,  124,
      126,  126,  126,  126,  126,  294,  126,  126,  126,  126,

      126,  130,  130,  130,  130,  130,  294,  130,  130,  130,
      130,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  140,  140,  140,  140,  140,  294,  140,  140,
      140,  140,  140,  141,  141,  141,  141,  294,  141,  141,
      141,  141,  141,  141,  143,  294,  294,  294,  143,  143,
      155,  294,  294,  155,  155,  155,  156,  294,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  158,  294,  294,
      294,  158,  169,  294,  294,  294,  169,  179,  179,  180,
      180,  181,  181,  182,  294,  294,  182,  182,  182,  183,
      294,  183,  183,  183,  183,  183,  183,  183,  183,  183,

      188,  294,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  190,  190,  191,  191,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  205,  205,
      206,  206,  207,  207,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  214,  214,  215,  215,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  226,  226,  226,  226,  226,  226,  226,  226,  226,

      226,  226,  231,  231,  232,  232,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  240,  240,  241,
      241,  245,  245,  246,  246,  250,  250,  251,  251,  252,
      252,  255,  255,  256,  256,  263,  263,  264,  264,  265,
      265,  265,  265,  265,  294,  265,  265,  265,  265,  265,
      267,  267,  267,  267,  267,  294,  267,  267,  267,  267,
      267,  269,  269,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  285,  285,  285,  285,

      285,  285,  285,  285,  285,  285,  285,   27,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294
    } ;

static const flex_int16_t yy_chk[1247] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,   25,
       15,    5,    5,   11,   15,    5,    5,    5,   26,    5,
       11,  267,   12,    5,    5,    5,   16,    5,    6,   12,
       16,    6,    6,   39,  265,    6,    6,    6,   43,    6,
       43,   39,   25,    6,    6,    6,   11,    6,   29,   29,
       29,   26,   30,   30,   30,   12,   19,   19,   19,   33,
       40,   58,   40,   40,   42,   58,   42,   42,   19,   33,

       33,   44,   44,   47,   47,   55,   55,   55,   42,   75,
       75,   75,  262,   63,   63,   63,   67,   55,   19,   92,
       92,   19,   20,   20,   20,   63,  259,   66,   66,   66,
       69,   69,   69,   67,   20,   66,   67,   67,   69,   66,
      109,  109,   69,   76,   76,   76,   81,   81,   81,   82,
       82,   82,   87,  249,   20,   87,  247,   20,   23,   23,
       23,   79,   79,   79,   88,   88,   88,   98,   98,   79,
       23,  239,  100,   79,  100,  100,  161,  161,  101,   98,
      101,  101,  233,  102,  102,  114,  100,  102,  102,  114,
       23,  213,  101,   23,   24,   24,   24,  117,  117,  117,

      118,  118,  118,  121,  162,  162,   24,  121,  118,  117,
      160,  160,  118,  127,  127,  127,  128,  128,  128,  131,
      131,  131,  160,  208,  128,  127,   24,  189,  128,   24,
       95,  131,  186,   95,   95,  184,  182,   95,   95,   95,
      178,   95,  132,  132,  132,   95,   95,   95,  176,   95,
      132,  144,  144,  144,  132,  147,  147,  147,  148,  148,
      148,  150,  150,  150,  172,  167,  148,  147,  155,  152,
      148,  157,  149,  146,  157,  157,  143,  136,  157,  157,
      157,  134,  157,  165,  165,  165,  157,  157,  157,  129,
      157,  165,  168,  168,  168,  165,  119,  170,  170,  170,

      173,  173,  173,   93,  168,  170,  174,  174,  174,  170,
       84,   83,  173,   78,  174,  177,  177,  177,  174,   77,
      185,  185,  185,  187,  187,  187,   73,  177,  185,  192,
      192,  192,  185,   72,   61,  187,  193,  193,  193,   59,
       53,  192,  194,  194,  194,  195,  195,  195,  193,  196,
      196,  196,   52,   51,  194,   50,   49,  195,  197,  197,
      197,  196,  198,  198,  198,  199,  199,  199,   46,   45,
      197,  200,  200,  200,  198,   41,   38,  199,  201,  201,
      201,   31,   27,  200,  202,  202,  202,  203,  203,  203,
      201,  209,  209,  209,   22,   21,  202,   18,   17,  203,

      210,  210,  210,  209,  211,  211,  211,  212,  212,  212,
       14,   13,  210,  216,  216,  216,  211,   10,    9,  212,
      217,  217,  217,    8,    7,  216,  218,  218,  218,  219,
      219,  219,  217,    4,  218,  220,  220,  220,  218,    3,
        0,  219,  221,  221,  221,    0,    0,  220,  222,  222,
      222,  223,  223,  223,  221,  224,  224,  224,    0,  223,
      222,    0,    0,  223,  225,  225,  225,  224,  226,  226,
      226,  227,  227,  227,    0,    0,  225,  228,  228,  228,
      226,    0,    0,  227,    0,  228,  229,  229,  229,  228,
      230,  230,  230,  234,  234,  234,    0,    0,  229,  235,

      235,  235,  230,    0,    0,  234,  236,  236,  236,    0,
        0,  235,    0,    0,  236,  237,  237,  237,  236,  238,
      238,  238,  242,  242,  242,    0,    0,  237,  243,  243,
      243,  238,    0,    0,  242,  244,  244,  244,    0,    0,
      243,  248,  248,  248,  253,  253,  253,  244,    0,  254,
      254,  254,  253,  248,    0,    0,  253,  254,  257,  257,
      257,  254,    0,  260,  260,  260,  257,    0,    0,    0,
      257,  260,  266,  266,  266,  260,    0,  268,  268,  268,
      266,    0,    0,    0,  266,  268,  271,  271,  271,  268,
        0,  272,  272,  272,  271,    0,    0,    0,  271,  272,

      273,  273,  273,  272,    0,  274,  274,  274,  273,    0,
        0,    0,  273,  274,  276,  276,  276,  274,    0,  277,
      277,  277,  276,    0,    0,    0,  276,  277,  278,  278,
      278,  277,    0,  279,  279,  279,  278,    0,    0,    0,
      278,  279,  280,  280,  280,  279,    0,  281,  281,  281,
      280,    0,    0,    0,  280,  281,  282,  282,  282,  281,
        0,  283,  283,  283,  282,    0,    0,    0,  282,  283,
      284,  284,  284,  283,    0,  285,  285,  285,  284,    0,
        0,    0,  284,  285,  286,  286,  286,  285,    0,  287,
      287,  287,  286,    0,    0,    0,  286,  287,  288,  288,

      288,  287,    0,  289,  289,  289,  288,    0,    0,    0,
      288,  289,  290,  290,  290,  289,    0,  292,  292,  292,
      290,    0,    0,    0,  290,  292,    0,    0,    0,  292,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  301,  301,  301,  301,

      301,  301,  301,  301,  301,  301,  301,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      305,    0,    0,    0,  305,  306,    0,    0,  306,  306,
      306,  307,    0,    0,  307,  307,  307,  308,  308,  308,
      308,  308,    0,  308,  308,  308,  308,  308,  309,  309,
      309,  309,  309,  309,    0,  309,  309,  309,  309,  310,
      310,  310,    0,  310,  310,  310,  310,  310,  310,  310,
      311,  311,  311,  311,  311,    0,  311,  311,  311,  311,

      311,  312,  312,  312,  312,  312,    0,  312,  312,  312,
      312,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  314,  314,  314,  314,  314,    0,  314,  314,
      314,  314,  314,  315,  315,  315,  315,    0,  315,  315,
      315,  315,  315,  315,  316,    0,    0,    0,  316,  316,
      317,    0,    0,  317,  317,  317,  318,    0,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  319,    0,    0,
        0,  319,  320,    0,    0,    0,  320,  321,  321,  322,
      322,  323,  323,  324,    0,    0,  324,  324,  324,  325,
        0,  325,  325,  325,  325,  325,  325,  325,  325,  325,

      326,    0,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  327,  327,  328,  328,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  332,  332,
      333,  333,  334,  334,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  336,  336,  337,  337,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  340,  340,  340,  340,  340,  340,  340,  340,  340,

      340,  340,  341,  341,  342,  342,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  344,  344,  345,
      345,  346,  346,  347,  347,  348,  348,  349,  349,  350,
      350,  351,  351,  352,  352,  353,  353,  354,  354,  355,
      355,  355,  355,  355,    0,  355,  355,  355,  355,  355,
      356,  356,  356,  356,  356,    0,  356,  356,  356,  356,
      356,  357,  357,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  361,  361,  361,  361,

      361,  361,  361,  361,  361,  361,  361,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "third_party/libpg_query/scan.l"

#line 46 "third_party/libpg_query/scan.l"

/* LCOV_EXCL_START */

/*
 * GUC variables.  This is a DIRECT violation of the warning given at the
 * head of gram.y, ie flex/bison code must not depend on any GUC variables;
 * as such, changing their values can induce very unintuitive behavior.
 * But we shall have to live with it until we can remove these variables.
 */

int			backslash_quote = PG_BACKSLASH_QUOTE_SAFE_ENCODING;
bool		escape_string_warning = true;
bool		standard_conforming_strings = true;

/*
 * Set the type of YYSTYPE.
 */
#define YYSTYPE core_YYSTYPE

/*
 * Set the type of yyextra.  All state variables used by the scanner should
 * be in yyextra, *not* statically allocated.
 */
#define YY_EXTRA_TYPE core_yy_extra_type *

/*
 * Each call to yylex must set yylloc to the location of the found token
 * (expressed as a byte offset from the start of the input text).
 * When we parse a token that requires multiple lexer rules to process,
 * this should be done in the first such rule, else yylloc will point
 * into the middle of the token.
 */
#define SET_YYLLOC()  (*(yylloc) = yytext - yyextra->scanbuf)

/*
 * Advance yylloc by the given number of bytes.
 */
#define ADVANCE_YYLLOC(delta)  ( *(yylloc) += (delta) )

#define startlit()	( yyextra->literallen = 0 )
static void addlit(char *ytext, int yleng, core_yyscan_t yyscanner);
static void addlitchar(unsigned char ychar, core_yyscan_t yyscanner);
static char *litbufdup(core_yyscan_t yyscanner);
static char *litbuf_udeescape(unsigned char escape, core_yyscan_t yyscanner);
static unsigned char unescape_single_char(unsigned char c, core_yyscan_t yyscanner);
static int	process_integer_literal(const char *token, YYSTYPE *lval);
static bool is_utf16_surrogate_first(pg_wchar c);
static bool is_utf16_surrogate_second(pg_wchar c);
static pg_wchar surrogate_pair_to_codepoint(pg_wchar first, pg_wchar second);
static void addunicode(pg_wchar c, yyscan_t yyscanner);
static bool check_uescapechar(unsigned char escape);

#define yyerror(msg)  scanner_yyerror(msg, yyscanner)

#define lexer_errposition()  scanner_errposition(*(yylloc), yyscanner)

static void check_string_escape_warning(unsigned char ychar, core_yyscan_t yyscanner);
static void check_escape_warning(core_yyscan_t yyscanner);

/*
 * Work around a bug in flex 2.5.35: it emits a couple of functions that
 * it forgets to emit declarations for.  Since we use -Wmissing-prototypes,
 * this would cause warnings.  Providing our own declarations should be
 * harmless even when the bug gets fixed.
 */
extern int	core_yyget_column(yyscan_t yyscanner);
extern void core_yyset_column(int column_no, yyscan_t yyscanner);

#line 1151 "third_party/libpg_query/src_backend_parser_scan.cpp"
#define YY_NO_INPUT 1
/*
 * OK, here is a short description of lex/flex rules behavior.
 * The longest pattern which matches an input string is always chosen.
 * For equal-length patterns, the first occurring in the rules list is chosen.
 * INITIAL is the starting state, to which all non-conditional rules apply.
 * Exclusive states change parsing rules while the state is active.  When in
 * an exclusive state, only those rules defined for that state apply.
 *
 * We use exclusive states for quoted strings, extended comments,
 * and to eliminate parsing troubles for numeric strings.
 * Exclusive states:
 *  <xb> bit string literal
 *  <xc> extended C-style comments
 *  <xd> delimited identifiers (double-quoted identifiers)
 *  <xh> hexadecimal numeric string
 *  <xq> standard quoted strings
 *  <xe> extended quoted strings (support backslash escape sequences)
 *  <xdolq> $foo$ quoted strings
 *  <xui> quoted identifier with Unicode escapes
 *  <xuiend> end of a quoted identifier with Unicode escapes, UESCAPE can follow
 *  <xus> quoted string with Unicode escapes
 *  <xusend> end of a quoted string with Unicode escapes, UESCAPE can follow
 *  <xeu> Unicode surrogate pair in extended quoted string
 *
 * Remember to add an <<EOF>> case whenever you add a new exclusive state!
 * The default one is probably not the right thing.
 */

/*
 * In order to make the world safe for Windows and Mac clients as well as
 * Unix ones, we accept either \n or \r as a newline.  A DOS-style \r\n
 * sequence will be seen as two successive newlines, but that doesn't cause '
 * any problems.  Comments that start with -- and extend to the next
 * newline are treated as equivalent to a single whitespace character.
 *
 * NOTE a fine point: if there is no newline following --, we will absorb
 * everything to the end of the input as a comment.  This is correct.  Older
 * versions of Postgres failed to recognize -- as a comment if the input
 * did not end with a newline.
 *
 * XXX perhaps \f (formfeed) should be treated as a newline as well?
 *
 * XXX if you change the set of whitespace characters, fix scanner_isspace()
 * to agree, and see also the plpgsql lexer.
 */
/*
 * SQL requires at least one newline in the whitespace separating
 * string literals that are to be concatenated.  Silly, but who are we
 * to argue?  Note that {whitespace_with_newline} should not have * after
 * it, whereas {whitespace} should generally have a * after it...
 */
/*
 * To ensure that {quotecontinue} can be scanned without having to back up
 * if the full pattern isn't matched, we include trailing whitespace in
 * {quotestop}.  This matches all cases where {quotecontinue} fails to match,
 * except for {quote} followed by whitespace and just one "-" (not two,
 * which would start a {comment}).  To cover that we have {quotefail}.
 * The actions for {quotestop} and {quotefail} must throw back characters
 * beyond the quote proper.
 */
/* Bit string
 * It is tempting to scan the string for only those characters
 * which are allowed. However, this leads to silently swallowed
 * characters if illegal characters are included in the string.
 * For example, if xbinside is [01] then B'ABCD' is interpreted
 * as a zero-length string, and the ABCD' is lost!
 * Better to pass the string forward and let the input routines
 * validate the contents.
 */
/* Hexadecimal number */
/* National character */
/* Quoted string that allows backslash escapes */
/* Extended quote
 * xqdouble implements embedded quote, ''''
 */
/* $foo$ style quotes ("dollar quoting")
 * The quoted string starts with $foo$ where "foo" is an optional string
 * in the form of an identifier, except that it may not contain "$",
 * and extends to the first occurrence of an identical string.
 * There is *no* processing of the quoted text.
 *
 * {dolqfailed} is an error rule to avoid scanner backup when {dolqdelim}
 * fails to match its trailing "$".
 */
/* Double quote
 * Allows embedded spaces and other special characters into identifiers.
 */
/* Unicode escapes */
/* error rule to avoid backup */
/* Quoted identifier with Unicode escapes */
/* Quoted string with Unicode escapes */
/* Optional UESCAPE after a quoted string or identifier with Unicode escapes. */
/* error rule to avoid backup */
/* C-style comments
 *
 * The "extended comment" syntax closely resembles allowable operator syntax.
 * The tricky part here is to get lex to recognize a string starting with
 * slash-star as a comment, when interpreting it as an operator would produce
 * a longer match --- remember lex will prefer a longer match!  Also, if we
 * have something like plus-slash-star, lex will think this is a 3-character
 * operator whereas we want to see it as a + operator and a comment start.
 * The solution is two-fold:
 * 1. append {op_chars}* to xcstart so that it matches as much text as
 *    {operator} would. Then the tie-breaker (first matching rule of same
 *    length) ensures xcstart wins.  We put back the extra stuff with yyless()
 *    in case it contains a star-slash that should terminate the comment.
 * 2. In the operator rule, check for slash-star within the operator, and
 *    if found throw it back with yyless().  This handles the plus-slash-star
 *    problem.
 * Dash-dash comments have similar interactions with the operator rule.
 */
/* Assorted special-case operators and operator-like tokens */
/* " */
/*
 * These operator-like tokens (unlike the above ones) also match the {operator}
 * rule, which means that they might be overridden by a longer match if they
 * are followed by a comment start or a + or - character. Accordingly, if you
 * add to this list, you must also add corresponding code to the {operator}
 * block to return the correct token in such cases. (This is not needed in
 * psqlscan.l since the token value is ignored there.)
 */
/*
 * "self" is the set of chars that should be returned as single-character
 * tokens.  "op_chars" is the set of chars that can make up "Op" tokens,
 * which can be one or more characters long (but if a single-char token
 * appears in the "self" set, it is not to be returned as an Op).  Note
 * that the sets overlap, but each has some chars that are not in the other.
 *
 * If you change either set, adjust the character lists appearing in the
 * rule for "operator"!
 */
/* we no longer allow unary minus in numbers.
 * instead we pass it separately to parser. there it gets
 * coerced via doNegate() -- Leon aug 20 1999
 *
 * {decimalfail} is used because we would like "1..10" to lex as 1, dot_dot, 10.
 *
 * {realfail1} and {realfail2} are added to prevent the need for scanner
 * backup when the {real} rule fails to match completely.
 */
/*
 * Dollar quoted strings are totally opaque, and no escaping is done on them.
 * Other quoted strings must allow some special characters such as single-quote
 *  and newline.
 * Embedded single-quotes are implemented both in the SQL standard
 *  style of two adjacent single quotes "''" and in the Postgres/Java style
 *  of escaped-quote "\'".
 * Other embedded escaped characters are matched explicitly and the leading
 *  backslash is dropped from the string.
 * Note that xcstart must appear before operator, as explained above!
 *  Also whitespace (comment) must appear before operator.
 */
#line 1305 "third_party/libpg_query/src_backend_parser_scan.cpp"

#define INITIAL 0
#define xb 1
#define xc 2
#define xd 3
#define xh 4
#define xe 5
#define xq 6
#define xdolq 7
#define xui 8
#define xuiend 9
#define xus 10
#define xusend 11
#define xeu 12

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			yy_size_t yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */
		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 402 "third_party/libpg_query/scan.l"


#line 1594 "third_party/libpg_query/src_backend_parser_scan.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 295 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 294 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 404 "third_party/libpg_query/scan.l"
{
					/* ignore */
				}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 408 "third_party/libpg_query/scan.l"
{
					/* Set location in case of syntax error in comment */
					SET_YYLLOC();
					yyextra->xcdepth = 0;
					BEGIN(xc);
					/* Put back any characters past slash-star; see above */
					yyless(2);
				}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 417 "third_party/libpg_query/scan.l"
{
					(yyextra->xcdepth)++;
					/* Put back any characters past slash-star; see above */
					yyless(2);
				}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 423 "third_party/libpg_query/scan.l"
{
					if (yyextra->xcdepth <= 0)
						BEGIN(INITIAL);
					else
						(yyextra->xcdepth)--;
				}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 430 "third_party/libpg_query/scan.l"
{
					/* ignore */
				}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 434 "third_party/libpg_query/scan.l"
{
					/* ignore */
				}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 438 "third_party/libpg_query/scan.l"
{
					/* ignore */
				}
	YY_BREAK
case YY_STATE_EOF(xc):
#line 442 "third_party/libpg_query/scan.l"
{ yyerror("unterminated /* comment"); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 444 "third_party/libpg_query/scan.l"
{
					/* Binary bit type.
					 * At some point we should simply pass the string
					 * forward to the parser and label it there.
					 * In the meantime, place a leading "b" on the string
					 * to mark it for the input routine as a binary string.
					 */
					SET_YYLLOC();
					BEGIN(xb);
					startlit();
					addlitchar('b', yyscanner);
				}
	YY_BREAK
case 9:
/* rule 9 can match eol */
#line 457 "third_party/libpg_query/scan.l"
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 457 "third_party/libpg_query/scan.l"
{
					yyless(1);
					BEGIN(INITIAL);
					yylval->str = litbufdup(yyscanner);
					return BCONST;
				}
	YY_BREAK
case 11:
/* rule 11 can match eol */
#line 464 "third_party/libpg_query/scan.l"
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 464 "third_party/libpg_query/scan.l"
{
					addlit(yytext, yyleng, yyscanner);
				}
	YY_BREAK
case 13:
/* rule 13 can match eol */
#line 468 "third_party/libpg_query/scan.l"
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 468 "third_party/libpg_query/scan.l"
{
					/* ignore */
				}
	YY_BREAK
case YY_STATE_EOF(xb):
#line 471 "third_party/libpg_query/scan.l"
{ yyerror("unterminated bit string literal"); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 473 "third_party/libpg_query/scan.l"
{
					/* Hexadecimal bit type.
					 * At some point we should simply pass the string
					 * forward to the parser and label it there.
					 * In the meantime, place a leading "x" on the string
					 * to mark it for the input routine as a hex string.
					 */
					SET_YYLLOC();
					BEGIN(xh);
					startlit();
					addlitchar('x', yyscanner);
				}
	YY_BREAK
case 16:
/* rule 16 can match eol */
#line 486 "third_party/libpg_query/scan.l"
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 486 "third_party/libpg_query/scan.l"
{
					yyless(1);
					BEGIN(INITIAL);
					yylval->str = litbufdup(yyscanner);
					return XCONST;
				}
	YY_BREAK
case YY_STATE_EOF(xh):
#line 492 "third_party/libpg_query/scan.l"
{ yyerror("unterminated hexadecimal string literal"); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 494 "third_party/libpg_query/scan.l"
{
					/* National character.
					 * We will pass this along as a normal character string,
					 * but preceded with an internally-generated "NCHAR".
					 */
					const PGScanKeyword *keyword;

					SET_YYLLOC();
					yyless(1);	/* eat only 'n' this time */

					keyword = ScanKeywordLookup("nchar",
												yyextra->keywords,
												yyextra->num_keywords);
					if (keyword != NULL)
					{
						yylval->keyword = keyword->name;
						return keyword->value;
					}
					else
					{
						/* If NCHAR isn't a keyword, just return "n" */
						yylval->str = pstrdup("n");
						return IDENT;
					}
				}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 520 "third_party/libpg_query/scan.l"
{
					yyextra->warn_on_first_escape = true;
					yyextra->saw_non_ascii = false;
					SET_YYLLOC();
					if (yyextra->standard_conforming_strings)
						BEGIN(xq);
					else
						BEGIN(xe);
					startlit();
				}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 530 "third_party/libpg_query/scan.l"
{
					yyextra->warn_on_first_escape = false;
					yyextra->saw_non_ascii = false;
					SET_YYLLOC();
					BEGIN(xe);
					startlit();
				}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 537 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					if (!yyextra->standard_conforming_strings)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("unsafe use of string constant with Unicode escapes"),
								 errdetail("String constants with Unicode escapes cannot be used when standard_conforming_strings is off."),
								 lexer_errposition()));
					BEGIN(xus);
					startlit();
				}
	YY_BREAK
case 22:
/* rule 22 can match eol */
#line 549 "third_party/libpg_query/scan.l"
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 549 "third_party/libpg_query/scan.l"
{
					yyless(1);
					BEGIN(INITIAL);
					/*
					 * check that the data remains valid if it might have been
					 * made invalid by unescaping any chars.
					 */
					if (yyextra->saw_non_ascii)
						pg_verifymbstr(yyextra->literalbuf,
									   yyextra->literallen,
									   false);
					yylval->str = litbufdup(yyscanner);
					return SCONST;
				}
	YY_BREAK
case 24:
/* rule 24 can match eol */
#line 564 "third_party/libpg_query/scan.l"
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 564 "third_party/libpg_query/scan.l"
{
					/* throw back all but the quote */
					yyless(1);
					/* xusend state looks for possible UESCAPE */
					BEGIN(xusend);
				}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 570 "third_party/libpg_query/scan.l"
{
					/* stay in xusend state over whitespace */
				}
	YY_BREAK
case YY_STATE_EOF(xusend):
#line 573 "third_party/libpg_query/scan.l"
case 27:
/* rule 27 can match eol */
#line 575 "third_party/libpg_query/scan.l"
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 575 "third_party/libpg_query/scan.l"
{
					/* no UESCAPE after the quote, throw back everything */
					yyless(0);
					BEGIN(INITIAL);
					yylval->str = litbuf_udeescape('\\', yyscanner);
					return SCONST;
				}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 582 "third_party/libpg_query/scan.l"
{
					/* found UESCAPE after the end quote */
					BEGIN(INITIAL);
					if (!check_uescapechar(yytext[yyleng - 2]))
					{
						SET_YYLLOC();
						ADVANCE_YYLLOC(yyleng - 2);
						yyerror("invalid Unicode escape character");
					}
					yylval->str = litbuf_udeescape(yytext[yyleng - 2],
												   yyscanner);
					return SCONST;
				}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 595 "third_party/libpg_query/scan.l"
{
					addlitchar('\'', yyscanner);
				}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 598 "third_party/libpg_query/scan.l"
{
					addlit(yytext, yyleng, yyscanner);
				}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 601 "third_party/libpg_query/scan.l"
{
					addlit(yytext, yyleng, yyscanner);
				}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 604 "third_party/libpg_query/scan.l"
{
					pg_wchar	c = strtoul(yytext + 2, NULL, 16);

					check_escape_warning(yyscanner);

					if (is_utf16_surrogate_first(c))
					{
						yyextra->utf16_first_part = c;
						BEGIN(xeu);
					}
					else if (is_utf16_surrogate_second(c))
						yyerror("invalid Unicode surrogate pair");
					else
						addunicode(c, yyscanner);
				}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 619 "third_party/libpg_query/scan.l"
{
					pg_wchar	c = strtoul(yytext + 2, NULL, 16);

					if (!is_utf16_surrogate_second(c))
						yyerror("invalid Unicode surrogate pair");

					c = surrogate_pair_to_codepoint(yyextra->utf16_first_part, c);

					addunicode(c, yyscanner);

					BEGIN(xe);
				}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 631 "third_party/libpg_query/scan.l"
{ yyerror("invalid Unicode surrogate pair"); }
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 632 "third_party/libpg_query/scan.l"
{ yyerror("invalid Unicode surrogate pair"); }
	YY_BREAK
case YY_STATE_EOF(xeu):
#line 633 "third_party/libpg_query/scan.l"
{ yyerror("invalid Unicode surrogate pair"); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 634 "third_party/libpg_query/scan.l"
{
					ereport(ERROR,
							(errcode(PG_ERRCODE_INVALID_ESCAPE_SEQUENCE),
							 errmsg("invalid Unicode escape"),
							 errhint("Unicode escapes must be \\uXXXX or \\UXXXXXXXX."),
							 lexer_errposition()));
				}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 641 "third_party/libpg_query/scan.l"
{
					// if (yytext[1] == '\'')
					// {
					// 	if (yyextra->backslash_quote == PG_BACKSLASH_QUOTE_OFF ||
					// 		(yyextra->backslash_quote == PG_BACKSLASH_QUOTE_SAFE_ENCODING &&
					// 		 PG_ENCODING_IS_CLIENT_ONLY(pg_get_client_encoding())))
					// 		ereport(ERROR,
					// 				(errcode(PG_ERRCODE_NONSTANDARD_USE_OF_ESCAPE_CHARACTER),
					// 				 errmsg("unsafe use of \\' in a string literal"),
					// 				 errhint("Use '' to write quotes in strings. \\' is insecure in client-only encodings."),
					// 				 lexer_errposition()));
					// }
					check_string_escape_warning(yytext[1], yyscanner);
					addlitchar(unescape_single_char(yytext[1], yyscanner),
							   yyscanner);
				}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 657 "third_party/libpg_query/scan.l"
{
					unsigned char c = strtoul(yytext + 1, NULL, 8);

					check_escape_warning(yyscanner);
					addlitchar(c, yyscanner);
					if (c == '\0' || IS_HIGHBIT_SET(c))
						yyextra->saw_non_ascii = true;
				}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 665 "third_party/libpg_query/scan.l"
{
					unsigned char c = strtoul(yytext + 2, NULL, 16);

					check_escape_warning(yyscanner);
					addlitchar(c, yyscanner);
					if (c == '\0' || IS_HIGHBIT_SET(c))
						yyextra->saw_non_ascii = true;
				}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 673 "third_party/libpg_query/scan.l"
{
					/* ignore */
				}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 676 "third_party/libpg_query/scan.l"
{
					/* This is only needed for \ just before EOF */
					addlitchar(yytext[0], yyscanner);
				}
	YY_BREAK
case YY_STATE_EOF(xq):
case YY_STATE_EOF(xe):
case YY_STATE_EOF(xus):
#line 680 "third_party/libpg_query/scan.l"
{ yyerror("unterminated quoted string"); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 682 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					yyextra->dolqstart = pstrdup(yytext);
					BEGIN(xdolq);
					startlit();
				}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 688 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					/* throw back all but the initial "$" */
					yyless(1);
					/* and treat it as {other} */
					return yytext[0];
				}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 695 "third_party/libpg_query/scan.l"
{
					if (strcmp(yytext, yyextra->dolqstart) == 0)
					{
						pfree(yyextra->dolqstart);
						yyextra->dolqstart = NULL;
						BEGIN(INITIAL);
						yylval->str = litbufdup(yyscanner);
						return SCONST;
					}
					else
					{
						/*
						 * When we fail to match $...$ to dolqstart, transfer
						 * the $... part to the output, but put back the final
						 * $ for rescanning.  Consider $delim$...$junk$delim$
						 */
						addlit(yytext, yyleng - 1, yyscanner);
						yyless(yyleng - 1);
					}
				}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 715 "third_party/libpg_query/scan.l"
{
					addlit(yytext, yyleng, yyscanner);
				}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 718 "third_party/libpg_query/scan.l"
{
					addlit(yytext, yyleng, yyscanner);
				}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 721 "third_party/libpg_query/scan.l"
{
					/* This is only needed for $ inside the quoted text */
					addlitchar(yytext[0], yyscanner);
				}
	YY_BREAK
case YY_STATE_EOF(xdolq):
#line 725 "third_party/libpg_query/scan.l"
{ yyerror("unterminated dollar-quoted string"); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 727 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					BEGIN(xd);
					startlit();
				}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 732 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					BEGIN(xui);
					startlit();
				}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 737 "third_party/libpg_query/scan.l"
{
					char	   *ident;

					BEGIN(INITIAL);
					if (yyextra->literallen == 0)
						yyerror("zero-length delimited identifier");
					ident = litbufdup(yyscanner);
					yylval->str = ident;
					return IDENT;
				}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 747 "third_party/libpg_query/scan.l"
{
					yyless(1);
					/* xuiend state looks for possible UESCAPE */
					BEGIN(xuiend);
				}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 752 "third_party/libpg_query/scan.l"
{
					/* stay in xuiend state over whitespace */
				}
	YY_BREAK
case YY_STATE_EOF(xuiend):
#line 755 "third_party/libpg_query/scan.l"
case 54:
/* rule 54 can match eol */
#line 757 "third_party/libpg_query/scan.l"
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 757 "third_party/libpg_query/scan.l"
{
					/* no UESCAPE after the quote, throw back everything */
					char	   *ident;
					int			identlen;

					yyless(0);

					BEGIN(INITIAL);
					if (yyextra->literallen == 0)
						yyerror("zero-length delimited identifier");
					ident = litbuf_udeescape('\\', yyscanner);
					identlen = strlen(ident);
					yylval->str = ident;
					return IDENT;
				}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 772 "third_party/libpg_query/scan.l"
{
					/* found UESCAPE after the end quote */
					char	   *ident;
					int			identlen;

					BEGIN(INITIAL);
					if (yyextra->literallen == 0)
						yyerror("zero-length delimited identifier");
					if (!check_uescapechar(yytext[yyleng - 2]))
					{
						SET_YYLLOC();
						ADVANCE_YYLLOC(yyleng - 2);
						yyerror("invalid Unicode escape character");
					}
					ident = litbuf_udeescape(yytext[yyleng - 2], yyscanner);
					identlen = strlen(ident);
					yylval->str = ident;
					return IDENT;
				}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 791 "third_party/libpg_query/scan.l"
{
					addlitchar('"', yyscanner);
				}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 794 "third_party/libpg_query/scan.l"
{
					addlit(yytext, yyleng, yyscanner);
				}
	YY_BREAK
case YY_STATE_EOF(xd):
case YY_STATE_EOF(xui):
#line 797 "third_party/libpg_query/scan.l"
{ yyerror("unterminated quoted identifier"); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 799 "third_party/libpg_query/scan.l"
{
					char	   *ident;

					SET_YYLLOC();
					/* throw back all but the initial u/U */
					yyless(1);
					/* and treat it as {identifier} */
					ident = downcase_truncate_identifier(yytext, yyleng, true);
					yylval->str = ident;
					return IDENT;
				}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 811 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					return TYPECAST;
				}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 816 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					return DOT_DOT;
				}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 821 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					return COLON_EQUALS;
				}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 826 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					return LAMBDA_ARROW;
				}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 831 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					return POWER_OF;
				}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 836 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					return EQUALS_GREATER;
				}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 841 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					return LESS_EQUALS;
				}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 846 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					return GREATER_EQUALS;
				}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 851 "third_party/libpg_query/scan.l"
{
					/* We accept both "<>" and "!=" as meaning NOT_EQUALS */
					SET_YYLLOC();
					return NOT_EQUALS;
				}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 857 "third_party/libpg_query/scan.l"
{
					/* We accept both "<>" and "!=" as meaning NOT_EQUALS */
					SET_YYLLOC();
					return NOT_EQUALS;
				}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 863 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					return yytext[0];
				}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 868 "third_party/libpg_query/scan.l"
{
					/*
					 * Check for embedded slash-star or dash-dash; those
					 * are comment starts, so operator must stop there.
					 * Note that slash-star or dash-dash at the first
					 * character will match a prior rule, not this one.
					 */
					int			nchars = yyleng;
					char	   *slashstar = strstr(yytext, "/*"); /* slash star */
					char	   *dashdash = strstr(yytext, "--");

					if (slashstar && dashdash) {
						/* if both appear, take the first one */
						if (slashstar > dashdash)
							slashstar = dashdash;
					} else if (!slashstar) {
						slashstar = dashdash;
					}
					if (slashstar) {
						nchars = slashstar - yytext;
					}

					/*
					 * For SQL compatibility, '+' and '-' cannot be the
					 * last char of a multi-char operator unless the operator
					 * contains chars that are not in SQL operators.
					 * The idea is to lex '=-' as two operators, but not
					 * to forbid operator names like '?-' that could not be
					 * sequences of SQL operators.
					 */
					while (nchars > 1 &&
						(yytext[nchars - 1] == '+' ||
						 yytext[nchars - 1] == '-'))
					{
						int			ic;

						for (ic = nchars - 2; ic >= 0; ic--)
						{
							if (strchr("~!@^&|`?%", yytext[ic]))
								break;
						}
						if (ic >= 0)
							break; /* found a char that makes it OK */
						nchars--; /* else remove the +/-, and check again */
					}

					/* We don't accept leading ? in any multi-character operators
					* except for those in use by hstore, JSON and geometric operators.
					*
					* We don't accept contained or trailing ? in any
					* multi-character operators.
					*
					* This is necessary in order to support normalized queries without
					* spacing between ? as a substition character and a simple operator (e.g. "?=?")
					*/
					if (yytext[0] == '?' &&
						strcmp(yytext, "?|") != 0 && strcmp(yytext, "?&") != 0 &&
						strcmp(yytext, "?-") != 0 &&
						strcmp(yytext, "?-|") != 0 && strcmp(yytext, "?||") != 0) {
						nchars = 1;
					}

					if (yytext[0] != '?' && strchr(yytext, '?')) {
						/* Lex up to just before the ? character */
						nchars = strchr(yytext, '?') - yytext;
					}

					SET_YYLLOC();

					if ((yy_size_t) nchars < yyleng)
					{
						/* Strip the unwanted chars from the token */
						yyless(nchars);
						/*
						 * If what we have left is only one char, and it's
						 * one of the characters matching "self", then
						 * return it as a character token the same way
						 * that the "self" rule would have.
						 */
						if (nchars == 1 &&
							strchr(",()[].;:+-*/%^<>=?", yytext[0])) {
							return yytext[0];
						}
						/*
						 * Likewise, if what we have left is two chars, and
						 * those match the tokens ">=", "<=", "=>", "<>" or
						 * "!=", then we must return the appropriate token
						 * rather than the generic Op.
						 */
						if (nchars == 2)
						{
							if (yytext[0] == '=' && yytext[1] == '>')
								return EQUALS_GREATER;
							if (yytext[0] == '>' && yytext[1] == '=')
								return GREATER_EQUALS;
							if (yytext[0] == '<' && yytext[1] == '=')
								return LESS_EQUALS;
							if (yytext[0] == '<' && yytext[1] == '>')
								return NOT_EQUALS;
							if (yytext[0] == '!' && yytext[1] == '=')
								return NOT_EQUALS;
						}
					}

					/*
					 * Complain if operator is too long.  Unlike the case
					 * for identifiers, we make this an error not a notice-
					 * and-truncate, because the odds are we are looking at
					 * a syntactic mistake anyway. NAMEDDATALEN
					 */
					if (nchars >= 64)
						yyerror("operator too long: operators longer than 64 bytes are not supported");

					yylval->str = pstrdup(yytext);
					return Op;
				}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 985 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					yylval->ival = atol(yytext + 1);
					return PARAM;
				}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 991 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					yylval->ival = atol(yytext + 1);
					return PARAM;
				}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 997 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					return process_integer_literal(yytext, yylval);
				}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1001 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					yylval->str = pstrdup(yytext);
					return FCONST;
				}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 1006 "third_party/libpg_query/scan.l"
{
					/* throw back the .., and treat as integer */
					yyless(yyleng - 2);
					SET_YYLLOC();
					return process_integer_literal(yytext, yylval);
				}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 1012 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					yylval->str = pstrdup(yytext);
					return FCONST;
				}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 1017 "third_party/libpg_query/scan.l"
{
					/*
					 * throw back the [Ee], and treat as {decimal}.  Note
					 * that it is possible the input is actually {integer},
					 * but since this case will almost certainly lead to a
					 * syntax error anyway, we don't bother to distinguish.
					 */
					yyless(yyleng - 1);
					SET_YYLLOC();
					yylval->str = pstrdup(yytext);
					return FCONST;
				}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 1029 "third_party/libpg_query/scan.l"
{
					/* throw back the [Ee][+-], and proceed as above */
					yyless(yyleng - 2);
					SET_YYLLOC();
					yylval->str = pstrdup(yytext);
					return FCONST;
				}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 1038 "third_party/libpg_query/scan.l"
{
					const PGScanKeyword *keyword;
					char	   *ident;
					char       *keyword_text = pstrdup(yytext);

					SET_YYLLOC();

					if (yytext[yyleng - 1] == '?') {
						keyword_text[yyleng - 1] = '\0';
					}

					/* Is it a keyword? */
					keyword = ScanKeywordLookup(keyword_text,
												yyextra->keywords,
												yyextra->num_keywords);
					if (keyword != NULL)
					{
						if (keyword_text[yyleng - 1] == '\0') {
							yyless(yyleng - 1);
						}
						yylval->keyword = keyword->name;
						return keyword->value;
					}

					/*
					 * No.  Convert the identifier to lower case, and truncate
					 * if necessary.
					 */
					ident = downcase_truncate_identifier(yytext, yyleng, true);
					yylval->str = ident;
					return IDENT;
				}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 1071 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					return yytext[0];
				}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 1076 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					yyterminate();
				}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 1081 "third_party/libpg_query/scan.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2653 "third_party/libpg_query/src_backend_parser_scan.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 295 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 295 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 294);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	//( stderr, "%s\n", msg );
	throw std::runtime_error(msg); // YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

#define YYTABLES_NAME "yytables"

#line 1081 "third_party/libpg_query/scan.l"


/* LCOV_EXCL_STOP */

/*
 * Arrange access to yyextra for subroutines of the main yylex() function.
 * We expect each subroutine to have a yyscanner parameter.  Rather than
 * use the yyget_xxx functions, which might or might not get inlined by the
 * compiler, we cheat just a bit and cast yyscanner to the right type.
 */
#undef yyextra
#define yyextra  (((struct yyguts_t *) yyscanner)->yyextra_r)

/* Likewise for a couple of other things we need. */
#undef yylloc
#define yylloc	(((struct yyguts_t *) yyscanner)->yylloc_r)
#undef yyleng
#define yyleng	(((struct yyguts_t *) yyscanner)->yyleng_r)


/*
 * scanner_errposition
 *		Report a lexer or grammar error cursor position, if possible.
 *
 * This is expected to be used within an ereport() call.  The return value
 * is a dummy (always 0, in fact).
 *
 * Note that this can only be used for messages emitted during raw parsing
 * (essentially, scan.l and gram.y), since it requires the yyscanner struct
 * to still be available.
 */
int
scanner_errposition(int location, core_yyscan_t yyscanner)
{
	int			pos;

	if (location < 0)
		return 0;				/* no-op if location is unknown */

	/* Convert byte offset to character number */
	pos = pg_mbstrlen_with_len(yyextra->scanbuf, location) + 1;
	/* And pass it to the ereport mechanism */
	return errposition(pos);
}

/*
 * scanner_yyerror
 *		Report a lexer or grammar error.
 *
 * The message's cursor position is whatever YYLLOC was last set to,
 * ie, the start of the current token if called within yylex(), or the
 * most recently lexed token if called from the grammar.
 * This is OK for syntax error messages from the Bison parser, because Bison
 * parsers report error as soon as the first unparsable token is reached.
 * Beware of using yyerror for other purposes, as the cursor position might
 * be misleading!
 */
void
scanner_yyerror(const char *message, core_yyscan_t yyscanner)
{
	const char *loc = yyextra->scanbuf + *yylloc;

	if (*loc == YY_END_OF_BUFFER_CHAR)
	{
		ereport(ERROR,
				(errcode(PG_ERRCODE_SYNTAX_ERROR),
		/* translator: %s is typically the translation of "syntax error" */
				 errmsg("%s at end of input", _(message)),
				 lexer_errposition()));
	}
	else
	{
		ereport(ERROR,
				(errcode(PG_ERRCODE_SYNTAX_ERROR),
		/* translator: first %s is typically the translation of "syntax error" */
				 errmsg("%s at or near \"%s\"", _(message), loc),
				 lexer_errposition()));
	}
}


/*
 * Called before any actual parsing is done
 */
core_yyscan_t
scanner_init(const char *str,
			 core_yy_extra_type *yyext,
			 const PGScanKeyword *keywords,
			 int num_keywords)
{
	PGSize		slen = strlen(str);
	yyscan_t	scanner;

	if (yylex_init(&scanner) != 0)
		elog(ERROR, "yylex_init() failed: %m");

	core_yyset_extra(yyext, scanner);

	yyext->keywords = keywords;
	yyext->num_keywords = num_keywords;

	yyext->backslash_quote = backslash_quote;
	yyext->escape_string_warning = escape_string_warning;
	yyext->standard_conforming_strings = standard_conforming_strings;

	/*
	 * Make a scan buffer with special termination needed by flex.
	 */
	yyext->scanbuf = (char *) palloc(slen + 2);
	yyext->scanbuflen = slen;
	memcpy(yyext->scanbuf, str, slen);
	yyext->scanbuf[slen] = yyext->scanbuf[slen + 1] = YY_END_OF_BUFFER_CHAR;
	yy_scan_buffer(yyext->scanbuf, slen + 2, scanner);

	/* initialize literal buffer to a reasonable but expansible size */
	yyext->literalalloc = 1024;
	yyext->literalbuf = (char *) palloc(yyext->literalalloc);
	yyext->literallen = 0;

	return scanner;
}


/*
 * Called after parsing is done to clean up after scanner_init()
 */
void
scanner_finish(core_yyscan_t yyscanner)
{
	/*
	 * We don't bother to call yylex_destroy(), because all it would do is
	 * pfree a small amount of control storage.  It's cheaper to leak the
	 * storage until the parsing context is destroyed.  The amount of space
	 * involved is usually negligible compared to the output parse tree
	 * anyway.
	 *
	 * We do bother to pfree the scanbuf and literal buffer, but only if they
	 * represent a nontrivial amount of space.  The 8K cutoff is arbitrary.
	 */
	if (yyextra->scanbuflen >= 8192)
		pfree(yyextra->scanbuf);
	if (yyextra->literalalloc >= 8192)
		pfree(yyextra->literalbuf);
}


static void
addlit(char *ytext, int yleng, core_yyscan_t yyscanner)
{
	/* enlarge buffer if needed */
	if ((yyextra->literallen + yleng) >= yyextra->literalalloc)
	{
		do
		{
			yyextra->literalalloc *= 2;
		} while ((yyextra->literallen + yleng) >= yyextra->literalalloc);
		yyextra->literalbuf = (char *) repalloc(yyextra->literalbuf,
												yyextra->literalalloc);
	}
	/* append new data */
	memcpy(yyextra->literalbuf + yyextra->literallen, ytext, yleng);
	yyextra->literallen += yleng;
}


static void
addlitchar(unsigned char ychar, core_yyscan_t yyscanner)
{
	/* enlarge buffer if needed */
	if ((yyextra->literallen + 1) >= yyextra->literalalloc)
	{
		yyextra->literalalloc *= 2;
		yyextra->literalbuf = (char *) repalloc(yyextra->literalbuf,
												yyextra->literalalloc);
	}
	/* append new data */
	yyextra->literalbuf[yyextra->literallen] = ychar;
	yyextra->literallen += 1;
}


/*
 * Create a palloc'd copy of literalbuf, adding a trailing null.
 */
static char *
litbufdup(core_yyscan_t yyscanner)
{
	int			llen = yyextra->literallen;
	char	   *newbuf;

	newbuf = (char*) palloc(llen + 1);
	memcpy(newbuf, yyextra->literalbuf, llen);
	newbuf[llen] = '\0';
	return newbuf;
}

static int
process_integer_literal(const char *token, YYSTYPE *lval)
{
	long		val;
	char	   *endptr;

	errno = 0;
	val = strtol(token, &endptr, 10);
	if (*endptr != '\0' || errno == ERANGE
	/* if long > 32 bits, check for overflow of int4_t */
		|| val != (long) ((int32_t) val) )
	{
		/* integer too large, treat it as a float */
		lval->str = pstrdup(token);
		return FCONST;
	}
	lval->ival = val;
	return ICONST;
}

static unsigned int
hexval(unsigned char c)
{
	if (c >= '0' && c <= '9')
		return c - '0';
	if (c >= 'a' && c <= 'f')
		return c - 'a' + 0xA;
	if (c >= 'A' && c <= 'F')
		return c - 'A' + 0xA;
	elog(ERROR, "invalid hexadecimal digit");
	return 0;					/* not reached */
}

static void
check_unicode_value(pg_wchar c, char *loc, core_yyscan_t yyscanner)
{
	// database encoding is always UTF8
	// if (GetDatabaseEncoding() == PG_UTF8)
	// 	return;

	// if (c > 0x7F)
	// {
	// 	ADVANCE_YYLLOC(loc - yyextra->literalbuf + 3);	/* 3 for U&" */
	// 	yyerror("Unicode escape values cannot be used for code point values above 007F when the server encoding is not UTF8");
	// }
}

static bool
is_utf16_surrogate_first(pg_wchar c)
{
	return (c >= 0xD800 && c <= 0xDBFF);
}

static bool
is_utf16_surrogate_second(pg_wchar c)
{
	return (c >= 0xDC00 && c <= 0xDFFF);
}

static pg_wchar
surrogate_pair_to_codepoint(pg_wchar first, pg_wchar second)
{
	return ((first & 0x3FF) << 10) + 0x10000 + (second & 0x3FF);
}

static void
addunicode(pg_wchar c, core_yyscan_t yyscanner)
{
	char		buf[8];

	if (c == 0 || c > 0x10FFFF)
		yyerror("invalid Unicode escape value");
	if (c > 0x7F)
	{
		// if (GetDatabaseEncoding() != PG_UTF8)
		// 	yyerror("Unicode escape values cannot be used for code point values above 007F when the server encoding is not UTF8");
		yyextra->saw_non_ascii = true;
	}
	unicode_to_utf8(c, (unsigned char *) buf);
	addlit(buf, pg_mblen(buf), yyscanner);
}

/* is 'escape' acceptable as Unicode escape character (UESCAPE syntax) ? */
static bool
check_uescapechar(unsigned char escape)
{
	if (isxdigit(escape)
		|| escape == '+'
		|| escape == '\''
		|| escape == '"'
		|| scanner_isspace(escape))
	{
		return false;
	}
	else
		return true;
}

/* like litbufdup, but handle unicode escapes */
static char *
litbuf_udeescape(unsigned char escape, core_yyscan_t yyscanner)
{
	char	   *newbuf;
	char	   *litbuf,
			   *in,
			   *out;
	pg_wchar	pair_first = 0;

	/* Make literalbuf null-terminated to simplify the scanning loop */
	litbuf = yyextra->literalbuf;
	litbuf[yyextra->literallen] = '\0';

	/*
	 * This relies on the subtle assumption that a UTF-8 expansion cannot be
	 * longer than its escaped representation.
	 */
	newbuf = (char*) palloc(yyextra->literallen + 1);

	in = litbuf;
	out = newbuf;
	while (*in)
	{
		if (in[0] == escape)
		{
			if (in[1] == escape)
			{
				if (pair_first)
				{
					ADVANCE_YYLLOC(in - litbuf + 3);	/* 3 for U&" */
					yyerror("invalid Unicode surrogate pair");
				}
				*out++ = escape;
				in += 2;
			}
			else if (isxdigit((unsigned char) in[1]) &&
					 isxdigit((unsigned char) in[2]) &&
					 isxdigit((unsigned char) in[3]) &&
					 isxdigit((unsigned char) in[4]))
			{
				pg_wchar	unicode;

				unicode = (hexval(in[1]) << 12) +
					(hexval(in[2]) << 8) +
					(hexval(in[3]) << 4) +
					hexval(in[4]);
				check_unicode_value(unicode, in, yyscanner);
				if (pair_first)
				{
					if (is_utf16_surrogate_second(unicode))
					{
						unicode = surrogate_pair_to_codepoint(pair_first, unicode);
						pair_first = 0;
					}
					else
					{
						ADVANCE_YYLLOC(in - litbuf + 3);		/* 3 for U&" */
						yyerror("invalid Unicode surrogate pair");
					}
				}
				else if (is_utf16_surrogate_second(unicode))
					yyerror("invalid Unicode surrogate pair");

				if (is_utf16_surrogate_first(unicode))
					pair_first = unicode;
				else
				{
					unicode_to_utf8(unicode, (unsigned char *) out);
					out += pg_mblen(out);
				}
				in += 5;
			}
			else if (in[1] == '+' &&
					 isxdigit((unsigned char) in[2]) &&
					 isxdigit((unsigned char) in[3]) &&
					 isxdigit((unsigned char) in[4]) &&
					 isxdigit((unsigned char) in[5]) &&
					 isxdigit((unsigned char) in[6]) &&
					 isxdigit((unsigned char) in[7]))
			{
				pg_wchar	unicode;

				unicode = (hexval(in[2]) << 20) +
					(hexval(in[3]) << 16) +
					(hexval(in[4]) << 12) +
					(hexval(in[5]) << 8) +
					(hexval(in[6]) << 4) +
					hexval(in[7]);
				check_unicode_value(unicode, in, yyscanner);
				if (pair_first)
				{
					if (is_utf16_surrogate_second(unicode))
					{
						unicode = surrogate_pair_to_codepoint(pair_first, unicode);
						pair_first = 0;
					}
					else
					{
						ADVANCE_YYLLOC(in - litbuf + 3);		/* 3 for U&" */
						yyerror("invalid Unicode surrogate pair");
					}
				}
				else if (is_utf16_surrogate_second(unicode))
					yyerror("invalid Unicode surrogate pair");

				if (is_utf16_surrogate_first(unicode))
					pair_first = unicode;
				else
				{
					unicode_to_utf8(unicode, (unsigned char *) out);
					out += pg_mblen(out);
				}
				in += 8;
			}
			else
			{
				ADVANCE_YYLLOC(in - litbuf + 3);		/* 3 for U&" */
				yyerror("invalid Unicode escape value");
			}
		}
		else
		{
			if (pair_first)
			{
				ADVANCE_YYLLOC(in - litbuf + 3);		/* 3 for U&" */
				yyerror("invalid Unicode surrogate pair");
			}
			*out++ = *in++;
		}
	}

	/* unfinished surrogate pair? */
	if (pair_first)
	{
		ADVANCE_YYLLOC(in - litbuf + 3);				/* 3 for U&" */
		yyerror("invalid Unicode surrogate pair");
	}

	*out = '\0';

	/*
	 * We could skip pg_verifymbstr if we didn't process any non-7-bit-ASCII
	 * codes; but it's probably not worth the trouble, since this isn't likely
	 * to be a performance-critical path.
	 */
	pg_verifymbstr(newbuf, out - newbuf, false);
	return newbuf;
}

static unsigned char
unescape_single_char(unsigned char c, core_yyscan_t yyscanner)
{
	switch (c)
	{
		case 'b':
			return '\b';
		case 'f':
			return '\f';
		case 'n':
			return '\n';
		case 'r':
			return '\r';
		case 't':
			return '\t';
		default:
			/* check for backslash followed by non-7-bit-ASCII */
			if (c == '\0' || IS_HIGHBIT_SET(c))
				yyextra->saw_non_ascii = true;

			return c;
	}
}

static void
check_string_escape_warning(unsigned char ychar, core_yyscan_t yyscanner)
{
	if (ychar == '\'')
	{
		if (yyextra->warn_on_first_escape && yyextra->escape_string_warning)
			ereport(PGWARNING,
					(errcode(PG_ERRCODE_NONSTANDARD_USE_OF_ESCAPE_CHARACTER),
					 errmsg("nonstandard use of \\' in a string literal"),
					 errhint("Use '' to write quotes in strings, or use the escape string syntax (E'...')."),
					 lexer_errposition()));
		yyextra->warn_on_first_escape = false;	/* warn only once per string */
	}
	else if (ychar == '\\')
	{
		if (yyextra->warn_on_first_escape && yyextra->escape_string_warning)
			ereport(PGWARNING,
					(errcode(PG_ERRCODE_NONSTANDARD_USE_OF_ESCAPE_CHARACTER),
					 errmsg("nonstandard use of \\\\ in a string literal"),
					 errhint("Use the escape string syntax for backslashes, e.g., E'\\\\'."),
					 lexer_errposition()));
		yyextra->warn_on_first_escape = false;	/* warn only once per string */
	}
	else
		check_escape_warning(yyscanner);
}

static void
check_escape_warning(core_yyscan_t yyscanner)
{
	if (yyextra->warn_on_first_escape && yyextra->escape_string_warning)
		ereport(PGWARNING,
				(errcode(PG_ERRCODE_NONSTANDARD_USE_OF_ESCAPE_CHARACTER),
				 errmsg("nonstandard use of escape in a string literal"),
		errhint("Use the escape string syntax for escapes, e.g., E'\\r\\n'."),
				 lexer_errposition()));
	yyextra->warn_on_first_escape = false;		/* warn only once per string */
}

/*
 * Interface functions to make flex use palloc() instead of malloc().
 * It'd be better to make these static, but flex insists otherwise.
 */

void *
core_yyalloc(yy_size_t bytes, core_yyscan_t yyscanner)
{
	return palloc(bytes);
}

void *
core_yyrealloc(void *ptr, yy_size_t bytes, core_yyscan_t yyscanner)
{
	if (ptr)
		return repalloc(ptr, bytes);
	else
		return palloc(bytes);
}

void
core_yyfree(void *ptr, core_yyscan_t yyscanner)
{
	if (ptr)
		pfree(ptr);
}

#undef yyerror
#undef yylloc
#undef yylval
#undef yyin
#undef yyout
#undef yyextra
#undef yyleng
#undef yytext
#undef yylineno
#undef yycolumn
#undef yy_flex_debug
#undef yyless
#undef YYSTYPE
#undef YY_EXTRA_TYPE
#undef SET_YYLLOC
#undef ADVANCE_YYLLOC
#undef BEGIN
#undef REJECT
#undef INITIAL
#undef xb
#undef xc
#undef xd
#undef xh
#undef xe
#undef xq
#undef xdolq
#undef xui
#undef xuiend
#undef xus
#undef xusend
#undef xeu
#undef ECHO


} /* duckdb_libpgquery */


// LICENSE_CHANGE_END


// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #11
// See the end of this file for a list

/*--------------------------------------------------------------------
 * Symbols referenced in this file:
 * - truncate_identifier
 * - downcase_truncate_identifier
 * - downcase_identifier
 * - scanner_isspace
 *--------------------------------------------------------------------
 */

/*-------------------------------------------------------------------------
 *
 * scansup.c
 *	  support routines for the lex/flex scanner, used by both the normal
 * backend as well as the bootstrap backend
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/scansup.c
 *
 *-------------------------------------------------------------------------
 */

#include <string.h>

#include <ctype.h>




namespace duckdb_libpgquery {

/* ----------------
 *		scanstr
 *
 * if the string passed in has escaped codes, map the escape codes to actual
 * chars
 *
 * the string returned is palloc'd and should eventually be pfree'd by the
 * caller!
 * ----------------
 */

/*
 * downcase_truncate_identifier() --- do appropriate downcasing and
 * truncation of an unquoted identifier.  Optionally warn of truncation.
 *
 * Returns a palloc'd string containing the adjusted identifier.
 *
 * Note: in some usages the passed string is not null-terminated.
 *
 * Note: the API of this function is designed to allow for downcasing
 * transformations that increase the string length, but we don't yet
 * support that.  If you want to implement it, you'll need to fix
 * SplitIdentifierString() in utils/adt/varlena.c.
 */
char *downcase_truncate_identifier(const char *ident, int len, bool warn) {
	return downcase_identifier(ident, len, warn, true);
}

static __thread bool pg_preserve_identifier_case = false;

void set_preserve_identifier_case(bool preserve) {
	pg_preserve_identifier_case = preserve;
}

bool get_preserve_identifier_case() {
	return pg_preserve_identifier_case;
}

/*
 * a workhorse for downcase_truncate_identifier
 */
char *downcase_identifier(const char *ident, int len, bool warn, bool truncate) {
	char *result;
	int i;
	bool enc_is_single_byte;

	result = (char *)palloc(len + 1);
	enc_is_single_byte = pg_database_encoding_max_length() == 1;

	/*
	 * SQL99 specifies Unicode-aware case normalization, which we don't yet
	 * have the infrastructure for.  Instead we use tolower() to provide a
	 * locale-aware translation.  However, there are some locales where this
	 * is not right either (eg, Turkish may do strange things with 'i' and
	 * 'I').  Our current compromise is to use tolower() for characters with
	 * the high bit set, as long as they aren't part of a multi-byte
	 * character, and use an ASCII-only downcasing for 7-bit characters.
	 */
	for (i = 0; i < len; i++) {
		unsigned char ch = (unsigned char)ident[i];

		if (!get_preserve_identifier_case()) {
			if (ch >= 'A' && ch <= 'Z')
				ch += 'a' - 'A';
			else if (enc_is_single_byte && IS_HIGHBIT_SET(ch) && isupper(ch))
				ch = tolower(ch);
		}
		result[i] = (char)ch;
	}
	result[i] = '\0';

	return result;
}

/*
 * scanner_isspace() --- return true if flex scanner considers char whitespace
 *
 * This should be used instead of the potentially locale-dependent isspace()
 * function when it's important to match the lexer's behavior.
 *
 * In principle we might need similar functions for isalnum etc, but for the
 * moment only isspace seems needed.
 */
bool scanner_isspace(char ch) {
	/* This must match scan.l's list of {space} characters */
	if (ch == ' ' || ch == '\t' || ch == '\n' || ch == '\r' || ch == '\f')
		return true;
	return false;
}
}

// LICENSE_CHANGE_END


// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #11
// See the end of this file for a list

/*--------------------------------------------------------------------
 * Symbols referenced in this file:
 * - ScanKeywords
 * - NumScanKeywords
 * - ScanKeywordLookup
 *--------------------------------------------------------------------
 */

/*-------------------------------------------------------------------------
 *
 * keywords.c
 *	  lexical token lookup for key words in PostgreSQL
 *
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/common/keywords.c
 *
 *-------------------------------------------------------------------------
 */

#include <string.h>
#include <string>
#include <memory>





namespace duckdb_libpgquery {

/*
 * ScanKeywordLookup - see if a given word is a keyword
 *
 * The table to be searched is passed explicitly, so that this can be used
 * to search keyword lists other than the standard list appearing above.
 *
 * Returns a pointer to the PGScanKeyword table entry, or NULL if no match.
 *
 * The match is done case-insensitively.  Note that we deliberately use a
 * dumbed-down case conversion that will only translate 'A'-'Z' into 'a'-'z',
 * even if we are in a locale where tolower() would produce more or different
 * translations.  This is to conform to the SQL99 spec, which says that
 * keywords are to be matched in this way even though non-keyword identifiers
 * receive a different case-normalization mapping.
 */
const PGScanKeyword *ScanKeywordLookup(const char *text, const PGScanKeyword *keywords, int num_keywords) {
	int len, i;
	const PGScanKeyword *low;
	const PGScanKeyword *high;

	len = strlen(text);
	auto data = std::unique_ptr<char[]>(new char[len + 1]);
	auto word = data.get();
	/* We assume all keywords are shorter than NAMEDATALEN. */

	/*
	 * Apply an ASCII-only downcasing.  We must not use tolower() since it may
	 * produce the wrong translation in some locales (eg, Turkish).
	 */
	for (i = 0; i < len; i++) {
		char ch = text[i];

		if (ch >= 'A' && ch <= 'Z')
			ch += 'a' - 'A';
		word[i] = ch;
	}
	word[len] = '\0';

	/*
	 * Now do a binary search using plain strcmp() comparison.
	 */
	low = keywords;
	high = keywords + (num_keywords - 1);
	while (low <= high) {
		const PGScanKeyword *middle;
		int difference;

		middle = low + (high - low) / 2;
		difference = strcmp(middle->name, word);
		if (difference == 0)
			return middle;
		else if (difference < 0)
			low = middle + 1;
		else
			high = middle - 1;
	}

	return NULL;
}
}

// LICENSE_CHANGE_END
