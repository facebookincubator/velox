// See https://raw.githubusercontent.com/duckdb/duckdb/master/LICENSE for licensing information

#include "duckdb.hpp"
#include "duckdb-internal.hpp"
#ifndef DUCKDB_AMALGAMATION
#error header mismatch
#endif


// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #14
// See the end of this file for a list

#include <stdexcept>
#include <string>
#include <thread>
#include <mutex>


// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #14
// See the end of this file for a list



#include <stdlib.h>
#include <string>

#define fprintf(...)






namespace duckdb_libpgquery {

typedef struct parse_result_str parse_result;
struct parse_result_str {
	bool success;
	PGList *parse_tree;
	std::string error_message;
	int error_location;
};

void pg_parser_init();
void pg_parser_parse(const char *query, parse_result *res);
void pg_parser_cleanup();

// error handling
int ereport(int code, ...);

void elog(int code, const char *fmt, ...);
int errcode(int sqlerrcode);
int errmsg(const char *fmt, ...);
int errhint(const char *msg);
int errmsg_internal(const char *fmt, ...);
int errdetail(const char *fmt, ...);
int errposition(int cursorpos);
char *psprintf(const char *fmt, ...);

// memory mgmt
char *pstrdup(const char *in);
void *palloc(size_t n);
void pfree(void *ptr);
void *palloc0fast(size_t n);
void *repalloc(void *ptr, size_t n);

char *NameListToString(PGList *names);
void *copyObject(const void *from);
bool equal(const void *a, const void *b);
int exprLocation(const PGNode *expr);

// string gunk
int pg_database_encoding_max_length(void);
bool pg_verifymbstr(const char *mbstr, int len, bool noError);
int pg_mbstrlen_with_len(const char *mbstr, int len);
int pg_mbcliplen(const char *mbstr, int len, int limit);
int pg_mblen(const char *mbstr);

PGDefElem *defWithOids(bool value);

typedef unsigned int pg_wchar;
unsigned char *unicode_to_utf8(pg_wchar c, unsigned char *utf8string);

}

// LICENSE_CHANGE_END


#include <stdarg.h>
#include <mutex>
#include <cstring>


// max parse tree size approx 100 MB, should be enough
#define PG_MALLOC_SIZE 10240

namespace duckdb_libpgquery {

typedef struct pg_parser_state_str parser_state;
struct pg_parser_state_str {
	int pg_err_code;
	int pg_err_pos;
	char pg_err_msg[BUFSIZ];

	size_t malloc_pos;
	size_t malloc_ptr_idx;
	char **malloc_ptrs;
	size_t malloc_ptr_size;
};

static __thread parser_state pg_parser_state;

#ifndef __GNUC__
__thread PGNode *duckdb_newNodeMacroHolder;
#endif

static void allocate_new(parser_state *state, size_t n) {
	if (state->malloc_ptr_idx >= state->malloc_ptr_size) {
		size_t new_size = state->malloc_ptr_size * 2;
		auto new_malloc_ptrs = (char **) malloc(sizeof(char *) * new_size);
		memset(new_malloc_ptrs, 0, sizeof(char*) * new_size);
		memcpy(new_malloc_ptrs, state->malloc_ptrs, state->malloc_ptr_size * sizeof(char*));
		free(state->malloc_ptrs);
		state->malloc_ptr_size = new_size;
		state->malloc_ptrs = new_malloc_ptrs;
	}
	if (n < PG_MALLOC_SIZE) {
		n = PG_MALLOC_SIZE;
	}
	char *base_ptr = (char *)malloc(n);
	if (!base_ptr) {
		throw std::runtime_error("Memory allocation failure");
	}
	state->malloc_ptrs[state->malloc_ptr_idx] = base_ptr;
	state->malloc_ptr_idx++;
	state->malloc_pos = 0;
}

void *palloc(size_t n) {
	// we need to align our pointers for the sanitizer
	auto allocate_n = n + sizeof(size_t);
	auto aligned_n = ((allocate_n + 7) / 8) * 8;
	if (pg_parser_state.malloc_pos + aligned_n > PG_MALLOC_SIZE) {
		allocate_new(&pg_parser_state, aligned_n);
	}

	// store the length of the allocation
	char *base_ptr = pg_parser_state.malloc_ptrs[pg_parser_state.malloc_ptr_idx - 1] + pg_parser_state.malloc_pos;
	memcpy(base_ptr, &n, sizeof(size_t));
	// store the actual pointer
	char *ptr = (char*) base_ptr + sizeof(size_t);
	memset(ptr, 0, n);
	pg_parser_state.malloc_pos += aligned_n;
	return ptr;
}

void pg_parser_init() {
	pg_parser_state.pg_err_code = PGUNDEFINED;
	pg_parser_state.pg_err_msg[0] = '\0';

	pg_parser_state.malloc_ptr_size = 4;
	pg_parser_state.malloc_ptrs = (char **) malloc(sizeof(char *) * pg_parser_state.malloc_ptr_size);
	memset(pg_parser_state.malloc_ptrs, 0, sizeof(char*) * pg_parser_state.malloc_ptr_size);
	pg_parser_state.malloc_ptr_idx = 0;
	allocate_new(&pg_parser_state, 1);
}

void pg_parser_parse(const char *query, parse_result *res) {
	res->parse_tree = nullptr;
	try {
		res->parse_tree = duckdb_libpgquery::raw_parser(query);
		res->success = pg_parser_state.pg_err_code == PGUNDEFINED;
	} catch (std::exception &ex) {
		res->success = false;
		res->error_message = ex.what();
	}
	res->error_message = pg_parser_state.pg_err_msg;
	res->error_location = pg_parser_state.pg_err_pos;
}

void pg_parser_cleanup() {
	for (size_t ptr_idx = 0; ptr_idx < pg_parser_state.malloc_ptr_idx; ptr_idx++) {
		char *ptr = pg_parser_state.malloc_ptrs[ptr_idx];
		if (ptr) {
			free(ptr);
			pg_parser_state.malloc_ptrs[ptr_idx] = nullptr;
		}
	}
	free(pg_parser_state.malloc_ptrs);
}

int ereport(int code, ...) {
	std::string err = "parser error : " + std::string(pg_parser_state.pg_err_msg);
	throw std::runtime_error(err);
}
void elog(int code, const char *fmt, ...) {
	throw std::runtime_error("elog NOT IMPLEMENTED");
}
int errcode(int sqlerrcode) {
	pg_parser_state.pg_err_code = sqlerrcode;
	return 1;
}
int errmsg(const char *fmt, ...) {
	va_list argptr;
	va_start(argptr, fmt);
	vsnprintf(pg_parser_state.pg_err_msg, BUFSIZ, fmt, argptr);
	va_end(argptr);
	return 1;
}
int errhint(const char *msg) {
	throw std::runtime_error("errhint NOT IMPLEMENTED");
}
int errmsg_internal(const char *fmt, ...) {
	throw std::runtime_error("errmsg_internal NOT IMPLEMENTED");
}
int errdetail(const char *fmt, ...) {
	throw std::runtime_error("errdetail NOT IMPLEMENTED");
}
int errposition(int cursorpos) {
	pg_parser_state.pg_err_pos = cursorpos;
	return 1;
}

char *psprintf(const char *fmt, ...) {
	char buf[BUFSIZ];
	va_list args;
	size_t newlen;

	// attempt one: use stack buffer and determine length
	va_start(args, fmt);
	newlen = vsnprintf(buf, BUFSIZ, fmt, args);
	va_end(args);
	if (newlen < BUFSIZ) {
		return pstrdup(buf);
	}

	// attempt two, malloc
	char *mbuf = (char *)palloc(newlen);
	va_start(args, fmt);
	vsnprintf(mbuf, newlen, fmt, args);
	va_end(args);
	return mbuf;
}

char *pstrdup(const char *in) {
	char *new_str = (char *)palloc(strlen(in) + 1);
	memcpy(new_str, in, strlen(in));
	return new_str;
}

void pfree(void *ptr) {
	// nop, we free up entire context on parser cleanup
}
void *palloc0fast(size_t n) { // very fast
	return palloc(n);
}
void *repalloc(void *ptr, size_t n) {
	// get the length of the allocation
	size_t old_len;
	char *old_len_ptr = (char *) ptr - sizeof(size_t);
	memcpy((void *) &old_len, old_len_ptr, sizeof(size_t));
	// re-allocate and copy the data
	void *new_buf = palloc(n);
	memcpy(new_buf, ptr, old_len);
	return new_buf;
}
char *NameListToString(PGList *names) {
	throw std::runtime_error("NameListToString NOT IMPLEMENTED");
}
void *copyObject(const void *from) {
	throw std::runtime_error("copyObject NOT IMPLEMENTED");
}
bool equal(const void *a, const void *b) {
	throw std::runtime_error("equal NOT IMPLEMENTED");
}
int exprLocation(const PGNode *expr) {
	throw std::runtime_error("exprLocation NOT IMPLEMENTED");
}
bool pg_verifymbstr(const char *mbstr, int len, bool noError) {
	throw std::runtime_error("pg_verifymbstr NOT IMPLEMENTED");
}

int pg_database_encoding_max_length(void) {
	return 4; // UTF8
}

static int pg_utf_mblen(const unsigned char *s) {
	int len;

	if ((*s & 0x80) == 0)
		len = 1;
	else if ((*s & 0xe0) == 0xc0)
		len = 2;
	else if ((*s & 0xf0) == 0xe0)
		len = 3;
	else if ((*s & 0xf8) == 0xf0)
		len = 4;
#ifdef NOT_USED
	else if ((*s & 0xfc) == 0xf8)
		len = 5;
	else if ((*s & 0xfe) == 0xfc)
		len = 6;
#endif
	else
		len = 1;
	return len;
}

int pg_mbstrlen_with_len(const char *mbstr, int limit) {
	int len = 0;
	while (limit > 0 && *mbstr) {
		int l = pg_utf_mblen((const unsigned char *)mbstr);
		limit -= l;
		mbstr += l;
		len++;
	}
	return len;
}

int pg_mbcliplen(const char *mbstr, int len, int limit) {
	throw std::runtime_error("pg_mbcliplen NOT IMPLEMENTED");
}
int pg_mblen(const char *mbstr) {
	throw std::runtime_error("pg_mblen NOT IMPLEMENTED");
}
PGDefElem *defWithOids(bool value) {
	throw std::runtime_error("defWithOids NOT IMPLEMENTED");
}
unsigned char *unicode_to_utf8(pg_wchar c, unsigned char *utf8string) {
	throw std::runtime_error("unicode_to_utf8 NOT IMPLEMENTED");
}

// this replaces a brain damaged macro in nodes.hpp
PGNode *newNode(size_t size, PGNodeTag type) {
	auto result = (PGNode *)palloc0fast(size);
	result->type = type;
	return result;
}
}

// LICENSE_CHANGE_END


// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #14
// See the end of this file for a list







// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #14
// See the end of this file for a list

/*-------------------------------------------------------------------------
 *
 * scansup.h
 *	  scanner support routines.  used by both the bootstrap lexer
 * as well as the normal lexer
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/include/parser/scansup.h
 *
 *-------------------------------------------------------------------------
 */



namespace duckdb_libpgquery {

char *scanstr(const char *s);

char *downcase_truncate_identifier(const char *ident, int len, bool warn);

char *downcase_identifier(const char *ident, int len, bool warn, bool truncate);

bool scanner_isspace(char ch);

void set_preserve_identifier_case(bool downcase);
bool get_preserve_identifier_case();

}

// LICENSE_CHANGE_END



// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #14
// See the end of this file for a list

/*-------------------------------------------------------------------------
 *
 * keywords.h
 *	  lexical token lookup for key words in PostgreSQL
 *
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/include/common/keywords.h
 *
 *-------------------------------------------------------------------------
 */


#include <cstdint>

/* Keyword categories --- should match lists in gram.y */
#define UNRESERVED_KEYWORD		0
#define COL_NAME_KEYWORD		1
#define TYPE_FUNC_NAME_KEYWORD	2
#define RESERVED_KEYWORD		3

namespace duckdb_libpgquery {

typedef struct PGScanKeyword {
	const char *name; /* in lower case */
	int16_t value;    /* grammar's token code */
	int16_t category; /* see codes above */
} PGScanKeyword;

const PGScanKeyword *ScanKeywordLookup(const char *text, const PGScanKeyword *keywords, int num_keywords);
}

// LICENSE_CHANGE_END


namespace duckdb {

PostgresParser::PostgresParser() : success(false), parse_tree(nullptr), error_message(""), error_location(0) {}

void PostgresParser::Parse(const std::string &query) {
	duckdb_libpgquery::pg_parser_init();
	duckdb_libpgquery::parse_result res;
	pg_parser_parse(query.c_str(), &res);
	success = res.success;

	if (success) {
		parse_tree = res.parse_tree;
	} else {
		error_message = std::string(res.error_message);
		error_location = res.error_location;
	}
}

vector<duckdb_libpgquery::PGSimplifiedToken> PostgresParser::Tokenize(const std::string &query) {
	duckdb_libpgquery::pg_parser_init();
	auto tokens = duckdb_libpgquery::tokenize(query.c_str());
	duckdb_libpgquery::pg_parser_cleanup();
	return std::move(tokens);
}

PostgresParser::~PostgresParser()  {
    duckdb_libpgquery::pg_parser_cleanup();
}

bool PostgresParser::IsKeyword(const std::string &text) {
	return duckdb_libpgquery::is_keyword(text.c_str());
}

vector<duckdb_libpgquery::PGKeyword> PostgresParser::KeywordList() {
	// FIXME: because of this, we might need to change the libpg_query library to use duckdb::vector
	return std::forward<vector<duckdb_libpgquery::PGKeyword> >(duckdb_libpgquery::keyword_list());
}

void PostgresParser::SetPreserveIdentifierCase(bool preserve) {
	duckdb_libpgquery::set_preserve_identifier_case(preserve);
}

}


// LICENSE_CHANGE_END


// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #14
// See the end of this file for a list

/*--------------------------------------------------------------------
 * Symbols referenced in this file:
 * - lappend
 * - new_list
 * - new_tail_cell
 * - lcons
 * - new_head_cell
 * - list_concat
 * - list_nth
 * - list_nth_cell
 * - list_delete_cell
 * - list_free
 * - list_free_private
 * - list_copy
 * - list_copy_tail
 * - list_truncate
 *--------------------------------------------------------------------
 */

/*-------------------------------------------------------------------------
 *
 * list.c
 *	  implementation for PostgreSQL generic linked list package
 *
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/nodes/list.c
 *
 *-------------------------------------------------------------------------
 */




namespace duckdb_libpgquery {

/*
 * Routines to simplify writing assertions about the type of a list; a
 * NIL list is considered to be an empty list of any type.
 */
#define IsPointerList(l)		((l) == NIL || IsA((l), PGList))
#define IsIntegerList(l)		((l) == NIL || IsA((l), IntList))
#define IsOidList(l)			((l) == NIL || IsA((l), OidList))

#ifdef USE_ASSERT_CHECKING
/*
 * Check that the specified PGList is valid (so far as we can tell).
 */
static void
check_list_invariants(const PGList *list)
{
	if (list == NIL)
		return;

	Assert(list->length > 0);
	Assert(list->head != NULL);
	Assert(list->tail != NULL);

	Assert(list->type == T_PGList ||
		   list->type == T_PGIntList ||
		   list->type == T_PGOidList);

	if (list->length == 1)
		Assert(list->head == list->tail);
	if (list->length == 2)
		Assert(list->head->next == list->tail);
	Assert(list->tail->next == NULL);
}
#else
#define check_list_invariants(l)
#endif							/* USE_ASSERT_CHECKING */

/*
 * Return a freshly allocated List. Since empty non-NIL lists are
 * invalid, new_list() also allocates the head cell of the new list:
 * the caller should be sure to fill in that cell's data.
 */
static PGList *
new_list(PGNodeTag type)
{
	PGList	   *new_list;
	PGListCell   *new_head;

	new_head = (PGListCell *) palloc(sizeof(*new_head));
	new_head->next = NULL;
	/* new_head->data is left undefined! */

	new_list = (PGList *) palloc(sizeof(*new_list));
	new_list->type = type;
	new_list->length = 1;
	new_list->head = new_head;
	new_list->tail = new_head;

	return new_list;
}

/*
 * Allocate a new cell and make it the head of the specified
 * list. Assumes the list it is passed is non-NIL.
 *
 * The data in the new head cell is undefined; the caller should be
 * sure to fill it in
 */
static void
new_head_cell(PGList *list)
{
	PGListCell   *new_head;

	new_head = (PGListCell *) palloc(sizeof(*new_head));
	new_head->next = list->head;

	list->head = new_head;
	list->length++;
}

/*
 * Allocate a new cell and make it the tail of the specified
 * list. Assumes the list it is passed is non-NIL.
 *
 * The data in the new tail cell is undefined; the caller should be
 * sure to fill it in
 */
static void
new_tail_cell(PGList *list)
{
	PGListCell   *new_tail;

	new_tail = (PGListCell *) palloc(sizeof(*new_tail));
	new_tail->next = NULL;

	list->tail->next = new_tail;
	list->tail = new_tail;
	list->length++;
}

/*
 * PGAppend a pointer to the list. A pointer to the modified list is
 * returned. Note that this function may or may not destructively
 * modify the list; callers should always use this function's return
 * value, rather than continuing to use the pointer passed as the
 * first argument.
 */
PGList *
lappend(PGList *list, void *datum)
{
	Assert(IsPointerList(list));

	if (list == NIL)
		list = new_list(T_PGList);
	else
		new_tail_cell(list);

	lfirst(list->tail) = datum;
	check_list_invariants(list);
	return list;
}

/*
 * PGAppend an integer to the specified list. See lappend()
 */


/*
 * PGAppend an OID to the specified list. See lappend()
 */


/*
 * Add a new cell to the list, in the position after 'prev_cell'. The
 * data in the cell is left undefined, and must be filled in by the
 * caller. 'list' is assumed to be non-NIL, and 'prev_cell' is assumed
 * to be non-NULL and a member of 'list'.
 */


/*
 * Add a new cell to the specified list (which must be non-NIL);
 * it will be placed after the list cell 'prev' (which must be
 * non-NULL and a member of 'list'). The data placed in the new cell
 * is 'datum'. The newly-constructed cell is returned.
 */






/*
 * Prepend a new element to the list. A pointer to the modified list
 * is returned. Note that this function may or may not destructively
 * modify the list; callers should always use this function's return
 * value, rather than continuing to use the pointer passed as the
 * second argument.
 *
 * Caution: before Postgres 8.0, the original PGList was unmodified and
 * could be considered to retain its separate identity.  This is no longer
 * the case.
 */
PGList *
lcons(void *datum, PGList *list)
{
	Assert(IsPointerList(list));

	if (list == NIL)
		list = new_list(T_PGList);
	else
		new_head_cell(list);

	lfirst(list->head) = datum;
	check_list_invariants(list);
	return list;
}

/*
 * Prepend an integer to the list. See lcons()
 */


/*
 * Prepend an OID to the list. See lcons()
 */


/*
 * Concatenate list2 to the end of list1, and return list1. list1 is
 * destructively changed. Callers should be sure to use the return
 * value as the new pointer to the concatenated list: the 'list1'
 * input pointer may or may not be the same as the returned pointer.
 *
 * The nodes in list2 are merely appended to the end of list1 in-place
 * (i.e. they aren't copied; the two lists will share some of the same
 * storage). Therefore, invoking list_free() on list2 will also
 * invalidate a portion of list1.
 */
PGList *
list_concat(PGList *list1, PGList *list2)
{
	if (list1 == NIL)
		return list2;
	if (list2 == NIL)
		return list1;
	if (list1 == list2)
		elog(ERROR, "cannot list_concat() a list to itself");

	Assert(list1->type == list2->type);

	list1->length += list2->length;
	list1->tail->next = list2->head;
	list1->tail = list2->tail;

	check_list_invariants(list1);
	return list1;
}

/*
 * Truncate 'list' to contain no more than 'new_size' elements. This
 * modifies the list in-place! Despite this, callers should use the
 * pointer returned by this function to refer to the newly truncated
 * list -- it may or may not be the same as the pointer that was
 * passed.
 *
 * Note that any cells removed by list_truncate() are NOT pfree'd.
 */
PGList *
list_truncate(PGList *list, int new_size)
{
	PGListCell   *cell;
	int			n;

	if (new_size <= 0)
		return NIL;				/* truncate to zero length */

	/* If asked to effectively extend the list, do nothing */
	if (new_size >= list_length(list))
		return list;

	n = 1;
	foreach(cell, list)
	{
		if (n == new_size)
		{
			cell->next = NULL;
			list->tail = cell;
			list->length = new_size;
			check_list_invariants(list);
			return list;
		}
		n++;
	}

	/* keep the compiler quiet; never reached */
	Assert(false);
	return list;
}

/*
 * Locate the n'th cell (counting from 0) of the list.  It is an assertion
 * failure if there is no such cell.
 */
PGListCell *
list_nth_cell(const PGList *list, int n)
{
	PGListCell   *match;

	Assert(list != NIL);
	Assert(n >= 0);
	Assert(n < list->length);
	check_list_invariants(list);

	/* Does the caller actually mean to fetch the tail? */
	if (n == list->length - 1)
		return list->tail;

	for (match = list->head; n-- > 0; match = match->next)
		;

	return match;
}

/*
 * Return the data value contained in the n'th element of the
 * specified list. (PGList elements begin at 0.)
 */
void *
list_nth(const PGList *list, int n)
{
	Assert(IsPointerList(list));
	return lfirst(list_nth_cell(list, n));
}

/*
 * Delete 'cell' from 'list'; 'prev' is the previous element to 'cell'
 * in 'list', if any (i.e. prev == NULL iff list->head == cell)
 *
 * The cell is pfree'd, as is the PGList header if this was the last member.
 */
PGList *
list_delete_cell(PGList *list, PGListCell *cell, PGListCell *prev)
{
	check_list_invariants(list);
	Assert(prev != NULL ? lnext(prev) == cell : list_head(list) == cell);

	/*
	 * If we're about to delete the last node from the list, free the whole
	 * list instead and return NIL, which is the only valid representation of
	 * a zero-length list.
	 */
	if (list->length == 1)
	{
		list_free(list);
		return NIL;
	}

	/*
	 * Otherwise, adjust the necessary list links, deallocate the particular
	 * node we have just removed, and return the list we were given.
	 */
	list->length--;

	if (prev)
		prev->next = cell->next;
	else
		list->head = cell->next;

	if (list->tail == cell)
		list->tail = prev;

	pfree(cell);
	return list;
}

/*
 * Free all storage in a list, and optionally the pointed-to elements
 */
static void
list_free_private(PGList *list, bool deep)
{
	PGListCell   *cell;

	check_list_invariants(list);

	cell = list_head(list);
	while (cell != NULL)
	{
		PGListCell   *tmp = cell;

		cell = lnext(cell);
		if (deep)
			pfree(lfirst(tmp));
		pfree(tmp);
	}

	if (list)
		pfree(list);
}

/*
 * Free all the cells of the list, as well as the list itself. Any
 * objects that are pointed-to by the cells of the list are NOT
 * free'd.
 *
 * On return, the argument to this function has been freed, so the
 * caller would be wise to set it to NIL for safety's sake.
 */
void
list_free(PGList *list)
{
	list_free_private(list, false);
}

/*
 * Free all the cells of the list, the list itself, and all the
 * objects pointed-to by the cells of the list (each element in the
 * list must contain a pointer to a palloc()'d region of memory!)
 *
 * On return, the argument to this function has been freed, so the
 * caller would be wise to set it to NIL for safety's sake.
 */


/*
 * Return a shallow copy of the specified list.
 */
PGList *
list_copy(const PGList *oldlist)
{
	PGList	   *newlist;
	PGListCell   *newlist_prev;
	PGListCell   *oldlist_cur;

	if (oldlist == NIL)
		return NIL;

	newlist = new_list(oldlist->type);
	newlist->length = oldlist->length;

	/*
	 * Copy over the data in the first cell; new_list() has already allocated
	 * the head cell itself
	 */
	newlist->head->data = oldlist->head->data;

	newlist_prev = newlist->head;
	oldlist_cur = oldlist->head->next;
	while (oldlist_cur)
	{
		PGListCell   *newlist_cur;

		newlist_cur = (PGListCell *) palloc(sizeof(*newlist_cur));
		newlist_cur->data = oldlist_cur->data;
		newlist_prev->next = newlist_cur;

		newlist_prev = newlist_cur;
		oldlist_cur = oldlist_cur->next;
	}

	newlist_prev->next = NULL;
	newlist->tail = newlist_prev;

	check_list_invariants(newlist);
	return newlist;
}

/*
 * Return a shallow copy of the specified list, without the first N elements.
 */
PGList *
list_copy_tail(const PGList *oldlist, int nskip)
{
	PGList	   *newlist;
	PGListCell   *newlist_prev;
	PGListCell   *oldlist_cur;

	if (nskip < 0)
		nskip = 0;				/* would it be better to elog? */

	if (oldlist == NIL || nskip >= oldlist->length)
		return NIL;

	newlist = new_list(oldlist->type);
	newlist->length = oldlist->length - nskip;

	/*
	 * Skip over the unwanted elements.
	 */
	oldlist_cur = oldlist->head;
	while (nskip-- > 0)
		oldlist_cur = oldlist_cur->next;

	/*
	 * Copy over the data in the first remaining cell; new_list() has already
	 * allocated the head cell itself
	 */
	newlist->head->data = oldlist_cur->data;

	newlist_prev = newlist->head;
	oldlist_cur = oldlist_cur->next;
	while (oldlist_cur)
	{
		PGListCell   *newlist_cur;

		newlist_cur = (PGListCell *) palloc(sizeof(*newlist_cur));
		newlist_cur->data = oldlist_cur->data;
		newlist_prev->next = newlist_cur;

		newlist_prev = newlist_cur;
		oldlist_cur = oldlist_cur->next;
	}

	newlist_prev->next = NULL;
	newlist->tail = newlist_prev;

	check_list_invariants(newlist);
	return newlist;
}

/*
 * Temporary compatibility functions
 *
 * In order to avoid warnings for these function definitions, we need
 * to include a prototype here as well as in pg_list.h. That's because
 * we don't enable list API compatibility in list.c, so we
 * don't see the prototypes for these functions.
 */

/*
 * Given a list, return its length. This is merely defined for the
 * sake of backward compatibility: we can't afford to define a macro
 * called "length", so it must be a function. New code should use the
 * list_length() macro in order to avoid the overhead of a function
 * call.
 */
int			length(const PGList *list);


}

// LICENSE_CHANGE_END


// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #14
// See the end of this file for a list

/*--------------------------------------------------------------------
 * Symbols referenced in this file:
 * - makeDefElem
 * - makeTypeNameFromNameList
 * - makeDefElemExtended
 * - makeAlias
 * - makeSimpleAExpr
 * - makeGroupingSet
 * - makeTypeName
 * - makeFuncCall
 * - makeAExpr
 * - makeRangeVar
 * - makeBoolExpr
 *--------------------------------------------------------------------
 */

/*-------------------------------------------------------------------------
 *
 * makefuncs.c
 *	  creator functions for primitive nodes. The functions here are for
 *	  the most frequently created nodes.
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/nodes/makefuncs.c
 *
 *-------------------------------------------------------------------------
 */






// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #14
// See the end of this file for a list

/*-------------------------------------------------------------------------
 *
 * fmgr.h
 *	  Definitions for the Postgres function manager and function-call
 *	  interface.
 *
 * This file must be included by all Postgres modules that either define
 * or call fmgr-callable functions.
 *
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/include/fmgr.h
 *
 *-------------------------------------------------------------------------
 */




typedef struct PGFunctionCallInfoData *PGFunctionCallInfo;

/* Standard parameter list for fmgr-compatible functions */
#define PG_FUNCTION_ARGS	PGFunctionCallInfo fcinfo


// LICENSE_CHANGE_END



// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #14
// See the end of this file for a list

/*-------------------------------------------------------------------------
 *
 * makefuncs.h
 *	  prototypes for the creator functions (for primitive nodes)
 *
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/include/nodes/makefuncs.h
 *
 *-------------------------------------------------------------------------
 */




namespace duckdb_libpgquery {

PGAExpr *makeAExpr(PGAExpr_Kind kind, PGList *name, PGNode *lexpr, PGNode *rexpr, int location);

PGAExpr *makeSimpleAExpr(PGAExpr_Kind kind, const char *name, PGNode *lexpr, PGNode *rexpr, int location);

PGVar *makeVar(PGIndex varno, PGAttrNumber varattno, PGOid vartype, int32_t vartypmod, PGOid varcollid,
               PGIndex varlevelsup);

PGVar *makeVarFromTargetEntry(PGIndex varno, PGTargetEntry *tle);

PGVar *makeWholeRowVar(PGRangeTblEntry *rte, PGIndex varno, PGIndex varlevelsup, bool allowScalar);

PGTargetEntry *makeTargetEntry(PGExpr *expr, PGAttrNumber resno, char *resname, bool resjunk);

PGTargetEntry *flatCopyTargetEntry(PGTargetEntry *src_tle);

PGFromExpr *makeFromExpr(PGList *fromlist, PGNode *quals);

PGConst *makeConst(PGOid consttype, int32_t consttypmod, PGOid constcollid, int constlen, PGDatum constvalue,
                   bool constisnull, bool constbyval);

PGConst *makeNullConst(PGOid consttype, int32_t consttypmod, PGOid constcollid);

PGNode *makeBoolConst(bool value, bool isnull);

PGExpr *makeBoolExpr(PGBoolExprType boolop, PGList *args, int location);

PGAlias *makeAlias(const char *aliasname, PGList *colnames);

PGRelabelType *makeRelabelType(PGExpr *arg, PGOid rtype, int32_t rtypmod, PGOid rcollid, PGCoercionForm rformat);

PGRangeVar *makeRangeVar(char *schemaname, char *relname, int location);

PGTypeName *makeTypeName(char *typnam);
PGTypeName *makeTypeNameFromNameList(PGList *names);
PGTypeName *makeTypeNameFromOid(PGOid typeOid, int32_t typmod);

PGColumnDef *makeColumnDef(const char *colname, PGOid typeOid, int32_t typmod, PGOid collOid);

PGFuncExpr *makeFuncExpr(PGOid funcid, PGOid rettype, PGList *args, PGOid funccollid, PGOid inputcollid,
                         PGCoercionForm fformat);

PGFuncCall *makeFuncCall(PGList *name, PGList *args, int location);

PGDefElem *makeDefElem(const char *name, PGNode *arg, int location);
PGDefElem *makeDefElemExtended(const char *nameSpace, const char *name, PGNode *arg, PGDefElemAction defaction,
                               int location);

PGGroupingSet *makeGroupingSet(GroupingSetKind kind, PGList *content, int location);

}

// LICENSE_CHANGE_END



// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #14
// See the end of this file for a list

/*-------------------------------------------------------------------------
 *
 * nodeFuncs.h
 *		Various general-purpose manipulations of PGNode trees
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/include/nodes/nodeFuncs.h
 *
 *-------------------------------------------------------------------------
 */




namespace duckdb_libpgquery {

/* flags bits for query_tree_walker and query_tree_mutator */
#define QTW_IGNORE_RT_SUBQUERIES 0x01 /* subqueries in rtable */
#define QTW_IGNORE_CTE_SUBQUERIES 0x02 /* subqueries in cteList */
#define QTW_IGNORE_RC_SUBQUERIES 0x03 /* both of above */
#define QTW_IGNORE_JOINALIASES 0x04 /* JOIN alias var lists */
#define QTW_IGNORE_RANGE_TABLE 0x08 /* skip rangetable entirely */
#define QTW_EXAMINE_RTES 0x10 /* examine RTEs */
#define QTW_DONT_COPY_QUERY 0x20 /* do not copy top PGQuery */

/* callback function for check_functions_in_node */
typedef bool (*check_function_callback)(PGOid func_id, void *context);

PGOid exprType(const PGNode *expr);
int32_t exprTypmod(const PGNode *expr);
bool exprIsLengthCoercion(const PGNode *expr, int32_t *coercedTypmod);
PGNode *relabel_to_typmod(PGNode *expr, int32_t typmod);
PGNode *strip_implicit_coercions(PGNode *node);
bool expression_returns_set(PGNode *clause);

PGOid exprCollation(const PGNode *expr);
PGOid exprInputCollation(const PGNode *expr);
void exprSetCollation(PGNode *expr, PGOid collation);
void exprSetInputCollation(PGNode *expr, PGOid inputcollation);

int exprLocation(const PGNode *expr);

void fix_opfuncids(PGNode *node);
void set_opfuncid(PGOpExpr *opexpr);
void set_sa_opfuncid(PGScalarArrayOpExpr *opexpr);

bool check_functions_in_node(PGNode *node, check_function_callback checker, void *context);

bool expression_tree_walker(PGNode *node, bool (*walker)(), void *context);
PGNode *expression_tree_mutator(PGNode *node, PGNode *(*mutator)(), void *context);

bool query_tree_walker(PGQuery *query, bool (*walker)(), void *context, int flags);
PGQuery *query_tree_mutator(PGQuery *query, PGNode *(*mutator)(), void *context, int flags);

bool range_table_walker(PGList *rtable, bool (*walker)(), void *context, int flags);
PGList *range_table_mutator(PGList *rtable, PGNode *(*mutator)(), void *context, int flags);

bool query_or_expression_tree_walker(PGNode *node, bool (*walker)(), void *context, int flags);
PGNode *query_or_expression_tree_mutator(PGNode *node, PGNode *(*mutator)(), void *context, int flags);

bool raw_expression_tree_walker(PGNode *node, bool (*walker)(), void *context);

struct PlanState;
bool planstate_tree_walker(struct PlanState *planstate, bool (*walker)(), void *context);

}


// LICENSE_CHANGE_END


namespace duckdb_libpgquery {

/*
 * makeAExpr -
 *		makes an PGAExpr node
 */
PGAExpr *makeAExpr(PGAExpr_Kind kind, PGList *name, PGNode *lexpr, PGNode *rexpr, int location) {
	PGAExpr *a = makeNode(PGAExpr);

	a->kind = kind;
	a->name = name;
	a->lexpr = lexpr;
	a->rexpr = rexpr;
	a->location = location;
	return a;
}

/*
 * makeSimpleAExpr -
 *		As above, given a simple (unqualified) operator name
 */
PGAExpr *makeSimpleAExpr(PGAExpr_Kind kind, const char *name, PGNode *lexpr, PGNode *rexpr, int location) {
	PGAExpr *a = makeNode(PGAExpr);

	a->kind = kind;
	a->name = list_make1(makeString((char *)name));
	a->lexpr = lexpr;
	a->rexpr = rexpr;
	a->location = location;
	return a;
}

/*
 * makeVar -
 *	  creates a PGVar node
 */

/*
 * makeVarFromTargetEntry -
 *		convenience function to create a same-level PGVar node from a
 *		PGTargetEntry
 */

/*
 * makeWholeRowVar -
 *	  creates a PGVar node representing a whole row of the specified RTE
 *
 * A whole-row reference is a PGVar with varno set to the correct range
 * table entry, and varattno == 0 to signal that it references the whole
 * tuple.  (Use of zero here is unclean, since it could easily be confused
 * with error cases, but it's not worth changing now.)  The vartype indicates
 * a rowtype; either a named composite type, or RECORD.  This function
 * encapsulates the logic for determining the correct rowtype OID to use.
 *
 * If allowScalar is true, then for the case where the RTE is a single function
 * returning a non-composite result type, we produce a normal PGVar referencing
 * the function's result directly, instead of the single-column composite
 * value that the whole-row notation might otherwise suggest.
 */

/*
 * makeTargetEntry -
 *	  creates a PGTargetEntry node
 */

/*
 * flatCopyTargetEntry -
 *	  duplicate a PGTargetEntry, but don't copy substructure
 *
 * This is commonly used when we just want to modify the resno or substitute
 * a new expression.
 */

/*
 * makeFromExpr -
 *	  creates a PGFromExpr node
 */

/*
 * makeConst -
 *	  creates a PGConst node
 */

/*
 * makeNullConst -
 *	  creates a PGConst node representing a NULL of the specified type/typmod
 *
 * This is a convenience routine that just saves a lookup of the type's
 * storage properties.
 */

/*
 * makeBoolConst -
 *	  creates a PGConst node representing a boolean value (can be NULL too)
 */

/*
 * makeBoolExpr -
 *	  creates a PGBoolExpr node
 */
PGExpr *makeBoolExpr(PGBoolExprType boolop, PGList *args, int location) {
	PGBoolExpr *b = makeNode(PGBoolExpr);

	b->boolop = boolop;
	b->args = args;
	b->location = location;

	return (PGExpr *)b;
}

/*
 * makeAlias -
 *	  creates an PGAlias node
 *
 * NOTE: the given name is copied, but the colnames list (if any) isn't.
 */
PGAlias *makeAlias(const char *aliasname, PGList *colnames) {
	PGAlias *a = makeNode(PGAlias);

	a->aliasname = pstrdup(aliasname);
	a->colnames = colnames;

	return a;
}

/*
 * makeRelabelType -
 *	  creates a PGRelabelType node
 */

/*
 * makeRangeVar -
 *	  creates a PGRangeVar node (rather oversimplified case)
 */
PGRangeVar *makeRangeVar(char *schemaname, char *relname, int location) {
	PGRangeVar *r = makeNode(PGRangeVar);

	r->catalogname = NULL;
	r->schemaname = schemaname;
	r->relname = relname;
	r->inh = true;
	r->relpersistence = RELPERSISTENCE_PERMANENT;
	r->alias = NULL;
	r->location = location;
	r->sample = NULL;

	return r;
}

/*
 * makeTypeName -
 *	build a PGTypeName node for an unqualified name.
 *
 * typmod is defaulted, but can be changed later by caller.
 */
PGTypeName *makeTypeName(char *typnam) {
	return makeTypeNameFromNameList(list_make1(makeString(typnam)));
}

/*
 * makeTypeNameFromNameList -
 *	build a PGTypeName node for a String list representing a qualified name.
 *
 * typmod is defaulted, but can be changed later by caller.
 */
PGTypeName *makeTypeNameFromNameList(PGList *names) {
	PGTypeName *n = makeNode(PGTypeName);

	n->names = names;
	n->typmods = NIL;
	n->typemod = -1;
	n->location = -1;
	return n;
}

/*
 * makeTypeNameFromOid -
 *	build a PGTypeName node to represent a type already known by OID/typmod.
 */

/*
 * makeColumnDef -
 *	build a PGColumnDef node to represent a simple column definition.
 *
 * Type and collation are specified by OID.
 * Other properties are all basic to start with.
 */

/*
 * makeFuncExpr -
 *	build an expression tree representing a function call.
 *
 * The argument expressions must have been transformed already.
 */

/*
 * makeDefElem -
 *	build a PGDefElem node
 *
 * This is sufficient for the "typical" case with an unqualified option name
 * and no special action.
 */
PGDefElem *makeDefElem(const char *name, PGNode *arg, int location) {
	PGDefElem *res = makeNode(PGDefElem);

	res->defnamespace = NULL;
	res->defname = (char *)name;
	res->arg = arg;
	res->defaction = PG_DEFELEM_UNSPEC;
	res->location = location;

	return res;
}

/*
 * makeDefElemExtended -
 *	build a PGDefElem node with all fields available to be specified
 */
PGDefElem *makeDefElemExtended(const char *nameSpace, const char *name, PGNode *arg, PGDefElemAction defaction,
                               int location) {
	PGDefElem *res = makeNode(PGDefElem);

	res->defnamespace = (char *)nameSpace;
	res->defname = (char *)name;
	res->arg = arg;
	res->defaction = defaction;
	res->location = location;

	return res;
}

/*
 * makeFuncCall -
 *
 * Initialize a PGFuncCall struct with the information every caller must
 * supply.  Any non-default parameters have to be inserted by the caller.
 */
PGFuncCall *makeFuncCall(PGList *name, PGList *args, int location) {
	PGFuncCall *n = makeNode(PGFuncCall);

	n->funcname = name;
	n->args = args;
	n->agg_order = NIL;
	n->agg_filter = NULL;
	n->agg_within_group = false;
	n->agg_star = false;
	n->agg_distinct = false;
	n->func_variadic = false;
	n->over = NULL;
	n->location = location;
	return n;
}

/*
 * makeGroupingSet
 *
 */
PGGroupingSet *makeGroupingSet(GroupingSetKind kind, PGList *content, int location) {
	PGGroupingSet *n = makeNode(PGGroupingSet);

	n->kind = kind;
	n->content = content;
	n->location = location;
	return n;
}
}

// LICENSE_CHANGE_END


// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #14
// See the end of this file for a list

/*--------------------------------------------------------------------
 * Symbols referenced in this file:
 * - makeInteger
 * - makeString
 * - makeFloat
 *--------------------------------------------------------------------
 */

/*-------------------------------------------------------------------------
 *
 * value.c
 *	  implementation of PGValue nodes
 *
 *
 * Copyright (c) 2003-2017, PostgreSQL Global Development PGGroup
 *
 *
 * IDENTIFICATION
 *	  src/backend/nodes/value.c
 *
 *-------------------------------------------------------------------------
 */



#include <string>
#include <cstring>

namespace duckdb_libpgquery {

/*
 *	makeInteger
 */
PGValue *makeInteger(long i) {
	PGValue *v = makeNode(PGValue);

	v->type = T_PGInteger;
	v->val.ival = i;
	return v;
}

/*
 *	makeFloat
 *
 * Caller is responsible for passing a palloc'd string.
 */
PGValue *makeFloat(char *numericStr) {
	PGValue *v = makeNode(PGValue);

	v->type = T_PGFloat;
	v->val.str = numericStr;
	return v;
}

/*
 *	makeString
 *
 * Caller is responsible for passing a palloc'd string.
 */
PGValue *makeString(const char *str) {
	PGValue *v = makeNode(PGValue);

	v->type = T_PGString;
	v->val.str = (char *)str;
	return v;
}

/*
 *	makeBitString
 *
 * Caller is responsible for passing a palloc'd string.
 */

}

// LICENSE_CHANGE_END


// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #14
// See the end of this file for a list

/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Using locations.  */
#define YYLSP_NEEDED 1

/* Substitute the variable and function names.  */
#define yyparse base_yyparse
#define yylex   base_yylex
#define yyerror base_yyerror
#define yylval  base_yylval
#define yychar  base_yychar
#define yydebug base_yydebug
#define yynerrs base_yynerrs
#define yylloc base_yylloc

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     IDENT = 258,
     FCONST = 259,
     SCONST = 260,
     BCONST = 261,
     XCONST = 262,
     Op = 263,
     ICONST = 264,
     PARAM = 265,
     TYPECAST = 266,
     DOT_DOT = 267,
     COLON_EQUALS = 268,
     EQUALS_GREATER = 269,
     INTEGER_DIVISION = 270,
     POWER_OF = 271,
     LAMBDA_ARROW = 272,
     DOUBLE_ARROW = 273,
     LESS_EQUALS = 274,
     GREATER_EQUALS = 275,
     NOT_EQUALS = 276,
     ABORT_P = 277,
     ABSOLUTE_P = 278,
     ACCESS = 279,
     ACTION = 280,
     ADD_P = 281,
     ADMIN = 282,
     AFTER = 283,
     AGGREGATE = 284,
     ALL = 285,
     ALSO = 286,
     ALTER = 287,
     ALWAYS = 288,
     ANALYSE = 289,
     ANALYZE = 290,
     AND = 291,
     ANTI = 292,
     ANY = 293,
     ARRAY = 294,
     AS = 295,
     ASC_P = 296,
     ASOF = 297,
     ASSERTION = 298,
     ASSIGNMENT = 299,
     ASYMMETRIC = 300,
     AT = 301,
     ATTACH = 302,
     ATTRIBUTE = 303,
     AUTHORIZATION = 304,
     BACKWARD = 305,
     BEFORE = 306,
     BEGIN_P = 307,
     BETWEEN = 308,
     BIGINT = 309,
     BINARY = 310,
     BIT = 311,
     BOOLEAN_P = 312,
     BOTH = 313,
     BY = 314,
     CACHE = 315,
     CALL_P = 316,
     CALLED = 317,
     CASCADE = 318,
     CASCADED = 319,
     CASE = 320,
     CAST = 321,
     CATALOG_P = 322,
     CHAIN = 323,
     CHAR_P = 324,
     CHARACTER = 325,
     CHARACTERISTICS = 326,
     CHECK_P = 327,
     CHECKPOINT = 328,
     CLASS = 329,
     CLOSE = 330,
     CLUSTER = 331,
     COALESCE = 332,
     COLLATE = 333,
     COLLATION = 334,
     COLUMN = 335,
     COLUMNS = 336,
     COMMENT = 337,
     COMMENTS = 338,
     COMMIT = 339,
     COMMITTED = 340,
     COMPRESSION = 341,
     CONCURRENTLY = 342,
     CONFIGURATION = 343,
     CONFLICT = 344,
     CONNECTION = 345,
     CONSTRAINT = 346,
     CONSTRAINTS = 347,
     CONTENT_P = 348,
     CONTINUE_P = 349,
     CONVERSION_P = 350,
     COPY = 351,
     COST = 352,
     CREATE_P = 353,
     CROSS = 354,
     CSV = 355,
     CUBE = 356,
     CURRENT_P = 357,
     CURSOR = 358,
     CYCLE = 359,
     DATA_P = 360,
     DATABASE = 361,
     DAY_P = 362,
     DAYS_P = 363,
     DEALLOCATE = 364,
     DEC = 365,
     DECIMAL_P = 366,
     DECLARE = 367,
     DEFAULT = 368,
     DEFAULTS = 369,
     DEFERRABLE = 370,
     DEFERRED = 371,
     DEFINER = 372,
     DELETE_P = 373,
     DELIMITER = 374,
     DELIMITERS = 375,
     DEPENDS = 376,
     DESC_P = 377,
     DESCRIBE = 378,
     DETACH = 379,
     DICTIONARY = 380,
     DISABLE_P = 381,
     DISCARD = 382,
     DISTINCT = 383,
     DO = 384,
     DOCUMENT_P = 385,
     DOMAIN_P = 386,
     DOUBLE_P = 387,
     DROP = 388,
     EACH = 389,
     ELSE = 390,
     ENABLE_P = 391,
     ENCODING = 392,
     ENCRYPTED = 393,
     END_P = 394,
     ENUM_P = 395,
     ESCAPE = 396,
     EVENT = 397,
     EXCEPT = 398,
     EXCLUDE = 399,
     EXCLUDING = 400,
     EXCLUSIVE = 401,
     EXECUTE = 402,
     EXISTS = 403,
     EXPLAIN = 404,
     EXPORT_P = 405,
     EXPORT_STATE = 406,
     EXTENSION = 407,
     EXTERNAL = 408,
     EXTRACT = 409,
     FALSE_P = 410,
     FAMILY = 411,
     FETCH = 412,
     FILTER = 413,
     FIRST_P = 414,
     FLOAT_P = 415,
     FOLLOWING = 416,
     FOR = 417,
     FORCE = 418,
     FOREIGN = 419,
     FORWARD = 420,
     FREEZE = 421,
     FROM = 422,
     FULL = 423,
     FUNCTION = 424,
     FUNCTIONS = 425,
     GENERATED = 426,
     GLOB = 427,
     GLOBAL = 428,
     GRANT = 429,
     GRANTED = 430,
     GROUP_P = 431,
     GROUPING = 432,
     GROUPING_ID = 433,
     HANDLER = 434,
     HAVING = 435,
     HEADER_P = 436,
     HOLD = 437,
     HOUR_P = 438,
     HOURS_P = 439,
     IDENTITY_P = 440,
     IF_P = 441,
     IGNORE_P = 442,
     ILIKE = 443,
     IMMEDIATE = 444,
     IMMUTABLE = 445,
     IMPLICIT_P = 446,
     IMPORT_P = 447,
     IN_P = 448,
     INCLUDE_P = 449,
     INCLUDING = 450,
     INCREMENT = 451,
     INDEX = 452,
     INDEXES = 453,
     INHERIT = 454,
     INHERITS = 455,
     INITIALLY = 456,
     INLINE_P = 457,
     INNER_P = 458,
     INOUT = 459,
     INPUT_P = 460,
     INSENSITIVE = 461,
     INSERT = 462,
     INSTALL = 463,
     INSTEAD = 464,
     INT_P = 465,
     INTEGER = 466,
     INTERSECT = 467,
     INTERVAL = 468,
     INTO = 469,
     INVOKER = 470,
     IS = 471,
     ISNULL = 472,
     ISOLATION = 473,
     JOIN = 474,
     JSON = 475,
     KEY = 476,
     LABEL = 477,
     LANGUAGE = 478,
     LARGE_P = 479,
     LAST_P = 480,
     LATERAL_P = 481,
     LEADING = 482,
     LEAKPROOF = 483,
     LEFT = 484,
     LEVEL = 485,
     LIKE = 486,
     LIMIT = 487,
     LISTEN = 488,
     LOAD = 489,
     LOCAL = 490,
     LOCATION = 491,
     LOCK_P = 492,
     LOCKED = 493,
     LOGGED = 494,
     MACRO = 495,
     MAP = 496,
     MAPPING = 497,
     MATCH = 498,
     MATERIALIZED = 499,
     MAXVALUE = 500,
     METHOD = 501,
     MICROSECOND_P = 502,
     MICROSECONDS_P = 503,
     MILLISECOND_P = 504,
     MILLISECONDS_P = 505,
     MINUTE_P = 506,
     MINUTES_P = 507,
     MINVALUE = 508,
     MODE = 509,
     MONTH_P = 510,
     MONTHS_P = 511,
     MOVE = 512,
     NAME_P = 513,
     NAMES = 514,
     NATIONAL = 515,
     NATURAL = 516,
     NCHAR = 517,
     NEW = 518,
     NEXT = 519,
     NO = 520,
     NONE = 521,
     NOT = 522,
     NOTHING = 523,
     NOTIFY = 524,
     NOTNULL = 525,
     NOWAIT = 526,
     NULL_P = 527,
     NULLIF = 528,
     NULLS_P = 529,
     NUMERIC = 530,
     OBJECT_P = 531,
     OF = 532,
     OFF = 533,
     OFFSET = 534,
     OIDS = 535,
     OLD = 536,
     ON = 537,
     ONLY = 538,
     OPERATOR = 539,
     OPTION = 540,
     OPTIONS = 541,
     OR = 542,
     ORDER = 543,
     ORDINALITY = 544,
     OUT_P = 545,
     OUTER_P = 546,
     OVER = 547,
     OVERLAPS = 548,
     OVERLAY = 549,
     OVERRIDING = 550,
     OWNED = 551,
     OWNER = 552,
     PARALLEL = 553,
     PARSER = 554,
     PARTIAL = 555,
     PARTITION = 556,
     PASSING = 557,
     PASSWORD = 558,
     PERCENT = 559,
     PIVOT = 560,
     PIVOT_LONGER = 561,
     PIVOT_WIDER = 562,
     PLACING = 563,
     PLANS = 564,
     POLICY = 565,
     POSITION = 566,
     POSITIONAL = 567,
     PRAGMA_P = 568,
     PRECEDING = 569,
     PRECISION = 570,
     PREPARE = 571,
     PREPARED = 572,
     PRESERVE = 573,
     PRIMARY = 574,
     PRIOR = 575,
     PRIVILEGES = 576,
     PROCEDURAL = 577,
     PROCEDURE = 578,
     PROGRAM = 579,
     PUBLICATION = 580,
     QUALIFY = 581,
     QUOTE = 582,
     RANGE = 583,
     READ_P = 584,
     REAL = 585,
     REASSIGN = 586,
     RECHECK = 587,
     RECURSIVE = 588,
     REF = 589,
     REFERENCES = 590,
     REFERENCING = 591,
     REFRESH = 592,
     REINDEX = 593,
     RELATIVE_P = 594,
     RELEASE = 595,
     RENAME = 596,
     REPEATABLE = 597,
     REPLACE = 598,
     REPLICA = 599,
     RESET = 600,
     RESPECT_P = 601,
     RESTART = 602,
     RESTRICT = 603,
     RETURNING = 604,
     RETURNS = 605,
     REVOKE = 606,
     RIGHT = 607,
     ROLE = 608,
     ROLLBACK = 609,
     ROLLUP = 610,
     ROW = 611,
     ROWS = 612,
     RULE = 613,
     SAMPLE = 614,
     SAVEPOINT = 615,
     SCHEMA = 616,
     SCHEMAS = 617,
     SCROLL = 618,
     SEARCH = 619,
     SECOND_P = 620,
     SECONDS_P = 621,
     SECURITY = 622,
     SELECT = 623,
     SEMI = 624,
     SEQUENCE = 625,
     SEQUENCES = 626,
     SERIALIZABLE = 627,
     SERVER = 628,
     SESSION = 629,
     SET = 630,
     SETOF = 631,
     SETS = 632,
     SHARE = 633,
     SHOW = 634,
     SIMILAR = 635,
     SIMPLE = 636,
     SKIP = 637,
     SMALLINT = 638,
     SNAPSHOT = 639,
     SOME = 640,
     SQL_P = 641,
     STABLE = 642,
     STANDALONE_P = 643,
     START = 644,
     STATEMENT = 645,
     STATISTICS = 646,
     STDIN = 647,
     STDOUT = 648,
     STORAGE = 649,
     STORED = 650,
     STRICT_P = 651,
     STRIP_P = 652,
     STRUCT = 653,
     SUBSCRIPTION = 654,
     SUBSTRING = 655,
     SUMMARIZE = 656,
     SYMMETRIC = 657,
     SYSID = 658,
     SYSTEM_P = 659,
     TABLE = 660,
     TABLES = 661,
     TABLESAMPLE = 662,
     TABLESPACE = 663,
     TEMP = 664,
     TEMPLATE = 665,
     TEMPORARY = 666,
     TEXT_P = 667,
     THEN = 668,
     TIME = 669,
     TIMESTAMP = 670,
     TO = 671,
     TRAILING = 672,
     TRANSACTION = 673,
     TRANSFORM = 674,
     TREAT = 675,
     TRIGGER = 676,
     TRIM = 677,
     TRUE_P = 678,
     TRUNCATE = 679,
     TRUSTED = 680,
     TRY_CAST = 681,
     TYPE_P = 682,
     TYPES_P = 683,
     UNBOUNDED = 684,
     UNCOMMITTED = 685,
     UNENCRYPTED = 686,
     UNION = 687,
     UNIQUE = 688,
     UNKNOWN = 689,
     UNLISTEN = 690,
     UNLOGGED = 691,
     UNPIVOT = 692,
     UNTIL = 693,
     UPDATE = 694,
     USE_P = 695,
     USER = 696,
     USING = 697,
     VACUUM = 698,
     VALID = 699,
     VALIDATE = 700,
     VALIDATOR = 701,
     VALUE_P = 702,
     VALUES = 703,
     VARCHAR = 704,
     VARIADIC = 705,
     VARYING = 706,
     VERBOSE = 707,
     VERSION_P = 708,
     VIEW = 709,
     VIEWS = 710,
     VIRTUAL = 711,
     VOLATILE = 712,
     WHEN = 713,
     WHERE = 714,
     WHITESPACE_P = 715,
     WINDOW = 716,
     WITH = 717,
     WITHIN = 718,
     WITHOUT = 719,
     WORK = 720,
     WRAPPER = 721,
     WRITE_P = 722,
     XML_P = 723,
     XMLATTRIBUTES = 724,
     XMLCONCAT = 725,
     XMLELEMENT = 726,
     XMLEXISTS = 727,
     XMLFOREST = 728,
     XMLNAMESPACES = 729,
     XMLPARSE = 730,
     XMLPI = 731,
     XMLROOT = 732,
     XMLSERIALIZE = 733,
     XMLTABLE = 734,
     YEAR_P = 735,
     YEARS_P = 736,
     YES_P = 737,
     ZONE = 738,
     NOT_LA = 739,
     NULLS_LA = 740,
     WITH_LA = 741,
     POSTFIXOP = 742,
     UMINUS = 743
   };
#endif
/* Tokens.  */
#define IDENT 258
#define FCONST 259
#define SCONST 260
#define BCONST 261
#define XCONST 262
#define Op 263
#define ICONST 264
#define PARAM 265
#define TYPECAST 266
#define DOT_DOT 267
#define COLON_EQUALS 268
#define EQUALS_GREATER 269
#define INTEGER_DIVISION 270
#define POWER_OF 271
#define LAMBDA_ARROW 272
#define DOUBLE_ARROW 273
#define LESS_EQUALS 274
#define GREATER_EQUALS 275
#define NOT_EQUALS 276
#define ABORT_P 277
#define ABSOLUTE_P 278
#define ACCESS 279
#define ACTION 280
#define ADD_P 281
#define ADMIN 282
#define AFTER 283
#define AGGREGATE 284
#define ALL 285
#define ALSO 286
#define ALTER 287
#define ALWAYS 288
#define ANALYSE 289
#define ANALYZE 290
#define AND 291
#define ANTI 292
#define ANY 293
#define ARRAY 294
#define AS 295
#define ASC_P 296
#define ASOF 297
#define ASSERTION 298
#define ASSIGNMENT 299
#define ASYMMETRIC 300
#define AT 301
#define ATTACH 302
#define ATTRIBUTE 303
#define AUTHORIZATION 304
#define BACKWARD 305
#define BEFORE 306
#define BEGIN_P 307
#define BETWEEN 308
#define BIGINT 309
#define BINARY 310
#define BIT 311
#define BOOLEAN_P 312
#define BOTH 313
#define BY 314
#define CACHE 315
#define CALL_P 316
#define CALLED 317
#define CASCADE 318
#define CASCADED 319
#define CASE 320
#define CAST 321
#define CATALOG_P 322
#define CHAIN 323
#define CHAR_P 324
#define CHARACTER 325
#define CHARACTERISTICS 326
#define CHECK_P 327
#define CHECKPOINT 328
#define CLASS 329
#define CLOSE 330
#define CLUSTER 331
#define COALESCE 332
#define COLLATE 333
#define COLLATION 334
#define COLUMN 335
#define COLUMNS 336
#define COMMENT 337
#define COMMENTS 338
#define COMMIT 339
#define COMMITTED 340
#define COMPRESSION 341
#define CONCURRENTLY 342
#define CONFIGURATION 343
#define CONFLICT 344
#define CONNECTION 345
#define CONSTRAINT 346
#define CONSTRAINTS 347
#define CONTENT_P 348
#define CONTINUE_P 349
#define CONVERSION_P 350
#define COPY 351
#define COST 352
#define CREATE_P 353
#define CROSS 354
#define CSV 355
#define CUBE 356
#define CURRENT_P 357
#define CURSOR 358
#define CYCLE 359
#define DATA_P 360
#define DATABASE 361
#define DAY_P 362
#define DAYS_P 363
#define DEALLOCATE 364
#define DEC 365
#define DECIMAL_P 366
#define DECLARE 367
#define DEFAULT 368
#define DEFAULTS 369
#define DEFERRABLE 370
#define DEFERRED 371
#define DEFINER 372
#define DELETE_P 373
#define DELIMITER 374
#define DELIMITERS 375
#define DEPENDS 376
#define DESC_P 377
#define DESCRIBE 378
#define DETACH 379
#define DICTIONARY 380
#define DISABLE_P 381
#define DISCARD 382
#define DISTINCT 383
#define DO 384
#define DOCUMENT_P 385
#define DOMAIN_P 386
#define DOUBLE_P 387
#define DROP 388
#define EACH 389
#define ELSE 390
#define ENABLE_P 391
#define ENCODING 392
#define ENCRYPTED 393
#define END_P 394
#define ENUM_P 395
#define ESCAPE 396
#define EVENT 397
#define EXCEPT 398
#define EXCLUDE 399
#define EXCLUDING 400
#define EXCLUSIVE 401
#define EXECUTE 402
#define EXISTS 403
#define EXPLAIN 404
#define EXPORT_P 405
#define EXPORT_STATE 406
#define EXTENSION 407
#define EXTERNAL 408
#define EXTRACT 409
#define FALSE_P 410
#define FAMILY 411
#define FETCH 412
#define FILTER 413
#define FIRST_P 414
#define FLOAT_P 415
#define FOLLOWING 416
#define FOR 417
#define FORCE 418
#define FOREIGN 419
#define FORWARD 420
#define FREEZE 421
#define FROM 422
#define FULL 423
#define FUNCTION 424
#define FUNCTIONS 425
#define GENERATED 426
#define GLOB 427
#define GLOBAL 428
#define GRANT 429
#define GRANTED 430
#define GROUP_P 431
#define GROUPING 432
#define GROUPING_ID 433
#define HANDLER 434
#define HAVING 435
#define HEADER_P 436
#define HOLD 437
#define HOUR_P 438
#define HOURS_P 439
#define IDENTITY_P 440
#define IF_P 441
#define IGNORE_P 442
#define ILIKE 443
#define IMMEDIATE 444
#define IMMUTABLE 445
#define IMPLICIT_P 446
#define IMPORT_P 447
#define IN_P 448
#define INCLUDE_P 449
#define INCLUDING 450
#define INCREMENT 451
#define INDEX 452
#define INDEXES 453
#define INHERIT 454
#define INHERITS 455
#define INITIALLY 456
#define INLINE_P 457
#define INNER_P 458
#define INOUT 459
#define INPUT_P 460
#define INSENSITIVE 461
#define INSERT 462
#define INSTALL 463
#define INSTEAD 464
#define INT_P 465
#define INTEGER 466
#define INTERSECT 467
#define INTERVAL 468
#define INTO 469
#define INVOKER 470
#define IS 471
#define ISNULL 472
#define ISOLATION 473
#define JOIN 474
#define JSON 475
#define KEY 476
#define LABEL 477
#define LANGUAGE 478
#define LARGE_P 479
#define LAST_P 480
#define LATERAL_P 481
#define LEADING 482
#define LEAKPROOF 483
#define LEFT 484
#define LEVEL 485
#define LIKE 486
#define LIMIT 487
#define LISTEN 488
#define LOAD 489
#define LOCAL 490
#define LOCATION 491
#define LOCK_P 492
#define LOCKED 493
#define LOGGED 494
#define MACRO 495
#define MAP 496
#define MAPPING 497
#define MATCH 498
#define MATERIALIZED 499
#define MAXVALUE 500
#define METHOD 501
#define MICROSECOND_P 502
#define MICROSECONDS_P 503
#define MILLISECOND_P 504
#define MILLISECONDS_P 505
#define MINUTE_P 506
#define MINUTES_P 507
#define MINVALUE 508
#define MODE 509
#define MONTH_P 510
#define MONTHS_P 511
#define MOVE 512
#define NAME_P 513
#define NAMES 514
#define NATIONAL 515
#define NATURAL 516
#define NCHAR 517
#define NEW 518
#define NEXT 519
#define NO 520
#define NONE 521
#define NOT 522
#define NOTHING 523
#define NOTIFY 524
#define NOTNULL 525
#define NOWAIT 526
#define NULL_P 527
#define NULLIF 528
#define NULLS_P 529
#define NUMERIC 530
#define OBJECT_P 531
#define OF 532
#define OFF 533
#define OFFSET 534
#define OIDS 535
#define OLD 536
#define ON 537
#define ONLY 538
#define OPERATOR 539
#define OPTION 540
#define OPTIONS 541
#define OR 542
#define ORDER 543
#define ORDINALITY 544
#define OUT_P 545
#define OUTER_P 546
#define OVER 547
#define OVERLAPS 548
#define OVERLAY 549
#define OVERRIDING 550
#define OWNED 551
#define OWNER 552
#define PARALLEL 553
#define PARSER 554
#define PARTIAL 555
#define PARTITION 556
#define PASSING 557
#define PASSWORD 558
#define PERCENT 559
#define PIVOT 560
#define PIVOT_LONGER 561
#define PIVOT_WIDER 562
#define PLACING 563
#define PLANS 564
#define POLICY 565
#define POSITION 566
#define POSITIONAL 567
#define PRAGMA_P 568
#define PRECEDING 569
#define PRECISION 570
#define PREPARE 571
#define PREPARED 572
#define PRESERVE 573
#define PRIMARY 574
#define PRIOR 575
#define PRIVILEGES 576
#define PROCEDURAL 577
#define PROCEDURE 578
#define PROGRAM 579
#define PUBLICATION 580
#define QUALIFY 581
#define QUOTE 582
#define RANGE 583
#define READ_P 584
#define REAL 585
#define REASSIGN 586
#define RECHECK 587
#define RECURSIVE 588
#define REF 589
#define REFERENCES 590
#define REFERENCING 591
#define REFRESH 592
#define REINDEX 593
#define RELATIVE_P 594
#define RELEASE 595
#define RENAME 596
#define REPEATABLE 597
#define REPLACE 598
#define REPLICA 599
#define RESET 600
#define RESPECT_P 601
#define RESTART 602
#define RESTRICT 603
#define RETURNING 604
#define RETURNS 605
#define REVOKE 606
#define RIGHT 607
#define ROLE 608
#define ROLLBACK 609
#define ROLLUP 610
#define ROW 611
#define ROWS 612
#define RULE 613
#define SAMPLE 614
#define SAVEPOINT 615
#define SCHEMA 616
#define SCHEMAS 617
#define SCROLL 618
#define SEARCH 619
#define SECOND_P 620
#define SECONDS_P 621
#define SECURITY 622
#define SELECT 623
#define SEMI 624
#define SEQUENCE 625
#define SEQUENCES 626
#define SERIALIZABLE 627
#define SERVER 628
#define SESSION 629
#define SET 630
#define SETOF 631
#define SETS 632
#define SHARE 633
#define SHOW 634
#define SIMILAR 635
#define SIMPLE 636
#define SKIP 637
#define SMALLINT 638
#define SNAPSHOT 639
#define SOME 640
#define SQL_P 641
#define STABLE 642
#define STANDALONE_P 643
#define START 644
#define STATEMENT 645
#define STATISTICS 646
#define STDIN 647
#define STDOUT 648
#define STORAGE 649
#define STORED 650
#define STRICT_P 651
#define STRIP_P 652
#define STRUCT 653
#define SUBSCRIPTION 654
#define SUBSTRING 655
#define SUMMARIZE 656
#define SYMMETRIC 657
#define SYSID 658
#define SYSTEM_P 659
#define TABLE 660
#define TABLES 661
#define TABLESAMPLE 662
#define TABLESPACE 663
#define TEMP 664
#define TEMPLATE 665
#define TEMPORARY 666
#define TEXT_P 667
#define THEN 668
#define TIME 669
#define TIMESTAMP 670
#define TO 671
#define TRAILING 672
#define TRANSACTION 673
#define TRANSFORM 674
#define TREAT 675
#define TRIGGER 676
#define TRIM 677
#define TRUE_P 678
#define TRUNCATE 679
#define TRUSTED 680
#define TRY_CAST 681
#define TYPE_P 682
#define TYPES_P 683
#define UNBOUNDED 684
#define UNCOMMITTED 685
#define UNENCRYPTED 686
#define UNION 687
#define UNIQUE 688
#define UNKNOWN 689
#define UNLISTEN 690
#define UNLOGGED 691
#define UNPIVOT 692
#define UNTIL 693
#define UPDATE 694
#define USE_P 695
#define USER 696
#define USING 697
#define VACUUM 698
#define VALID 699
#define VALIDATE 700
#define VALIDATOR 701
#define VALUE_P 702
#define VALUES 703
#define VARCHAR 704
#define VARIADIC 705
#define VARYING 706
#define VERBOSE 707
#define VERSION_P 708
#define VIEW 709
#define VIEWS 710
#define VIRTUAL 711
#define VOLATILE 712
#define WHEN 713
#define WHERE 714
#define WHITESPACE_P 715
#define WINDOW 716
#define WITH 717
#define WITHIN 718
#define WITHOUT 719
#define WORK 720
#define WRAPPER 721
#define WRITE_P 722
#define XML_P 723
#define XMLATTRIBUTES 724
#define XMLCONCAT 725
#define XMLELEMENT 726
#define XMLEXISTS 727
#define XMLFOREST 728
#define XMLNAMESPACES 729
#define XMLPARSE 730
#define XMLPI 731
#define XMLROOT 732
#define XMLSERIALIZE 733
#define XMLTABLE 734
#define YEAR_P 735
#define YEARS_P 736
#define YES_P 737
#define ZONE 738
#define NOT_LA 739
#define NULLS_LA 740
#define WITH_LA 741
#define POSTFIXOP 742
#define UMINUS 743




/* Copy the first part of user declarations.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */

#include <string.h>

#include <ctype.h>
#include <limits.h>





// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #14
// See the end of this file for a list

/*-------------------------------------------------------------------------
 *
 * gramparse.h
 *		Shared definitions for the "raw" parser (flex and bison phases only)
 *
 * NOTE: this file is only meant to be included in the core parsing files,
 * ie, parser.c, gram.y, scan.l, and src/common/keywords.c.
 * Definitions that are needed outside the core parser should be in parser.h.
 *
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/include/parser/gramparse.h
 *
 *-------------------------------------------------------------------------
 */






// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #14
// See the end of this file for a list

/*-------------------------------------------------------------------------
 *
 * scanner.h
 *		API for the core scanner (flex machine)
 *
 * The core scanner is also used by PL/pgSQL, so we provide a public API
 * for it.  However, the rest of the backend is only expected to use the
 * higher-level API provided by parser.h.
 *
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/include/parser/scanner.h
 *
 *-------------------------------------------------------------------------
 */



#include <cstdint>




namespace duckdb_libpgquery {

/*
 * The scanner returns extra data about scanned tokens in this union type.
 * Note that this is a subset of the fields used in YYSTYPE of the bison
 * parsers built atop the scanner.
 */
typedef union core_YYSTYPE {
	int ival;            /* for integer literals */
	char *str;           /* for identifiers and non-integer literals */
	const char *keyword; /* canonical spelling of keywords */
} core_YYSTYPE;

/*
 * We track token locations in terms of byte offsets from the start of the
 * source string, not the column number/line number representation that
 * bison uses by default.  Also, to minimize overhead we track only one
 * location (usually the first token location) for each construct, not
 * the beginning and ending locations as bison does by default.  It's
 * therefore sufficient to make YYLTYPE an int.
 */
#define YYLTYPE int

/*
 * Another important component of the scanner's API is the token code numbers.
 * However, those are not defined in this file, because bison insists on
 * defining them for itself.  The token codes used by the core scanner are
 * the ASCII characters plus these:
 *	%token <str>	IDENT FCONST SCONST BCONST XCONST Op
 *	%token <ival>	ICONST PARAM
 *	%token			TYPECAST DOT_DOT COLON_EQUALS EQUALS_GREATER LAMBDA_ARROW
 *	%token			LESS_EQUALS GREATER_EQUALS NOT_EQUALS
 * The above token definitions *must* be the first ones declared in any
 * bison parser built atop this scanner, so that they will have consistent
 * numbers assigned to them (specifically, IDENT = 258 and so on).
 */

/*
 * The YY_EXTRA data that a flex scanner allows us to pass around.
 * Private state needed by the core scanner goes here.  Note that the actual
 * yy_extra struct may be larger and have this as its first component, thus
 * allowing the calling parser to keep some fields of its own in YY_EXTRA.
 */
typedef struct core_yy_extra_type {
	/*
	 * The string the scanner is physically scanning.  We keep this mainly so
	 * that we can cheaply compute the offset of the current token (yytext).
	 */
	char *scanbuf;
	PGSize scanbuflen;

	/*
	 * The keyword list to use.
	 */
	const PGScanKeyword *keywords;
	int num_keywords;

	/*
	 * Scanner settings to use.  These are initialized from the corresponding
	 * GUC variables by scanner_init().  Callers can modify them after
	 * scanner_init() if they don't want the scanner's behavior to follow the
	 * prevailing GUC settings.
	 */
	int backslash_quote;
	bool escape_string_warning;
	bool standard_conforming_strings;

	/*
	 * literalbuf is used to accumulate literal values when multiple rules are
	 * needed to parse a single literal.  Call startlit() to reset buffer to
	 * empty, addlit() to add text.  NOTE: the string in literalbuf is NOT
	 * necessarily null-terminated, but there always IS room to add a trailing
	 * null at offset literallen.  We store a null only when we need it.
	 */
	char *literalbuf; /* palloc'd expandable buffer */
	int literallen;   /* actual current string length */
	int literalalloc; /* current allocated buffer size */

	int xcdepth;     /* depth of nesting in slash-star comments */
	char *dolqstart; /* current $foo$ quote start string */

	/* first part of UTF16 surrogate pair for Unicode escapes */
	int32_t utf16_first_part;

	/* state variables for literal-lexing warnings */
	bool warn_on_first_escape;
	bool saw_non_ascii;
} core_yy_extra_type;

/*
 * The type of yyscanner is opaque outside scan.l.
 */
typedef void *core_yyscan_t;

/* Entry points in parser/scan.l */
core_yyscan_t scanner_init(const char *str, core_yy_extra_type *yyext, const PGScanKeyword *keywords, int num_keywords);
void scanner_finish(core_yyscan_t yyscanner);
int core_yylex(core_YYSTYPE *lvalp, YYLTYPE *llocp, core_yyscan_t yyscanner);
int scanner_errposition(int location, core_yyscan_t yyscanner);
void scanner_yyerror(const char *message, core_yyscan_t yyscanner);

}

// LICENSE_CHANGE_END


namespace duckdb_libpgquery {


// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #14
// See the end of this file for a list

/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton interface for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     IDENT = 258,
     FCONST = 259,
     SCONST = 260,
     BCONST = 261,
     XCONST = 262,
     Op = 263,
     ICONST = 264,
     PARAM = 265,
     TYPECAST = 266,
     DOT_DOT = 267,
     COLON_EQUALS = 268,
     EQUALS_GREATER = 269,
     INTEGER_DIVISION = 270,
     POWER_OF = 271,
     LAMBDA_ARROW = 272,
     DOUBLE_ARROW = 273,
     LESS_EQUALS = 274,
     GREATER_EQUALS = 275,
     NOT_EQUALS = 276,
     ABORT_P = 277,
     ABSOLUTE_P = 278,
     ACCESS = 279,
     ACTION = 280,
     ADD_P = 281,
     ADMIN = 282,
     AFTER = 283,
     AGGREGATE = 284,
     ALL = 285,
     ALSO = 286,
     ALTER = 287,
     ALWAYS = 288,
     ANALYSE = 289,
     ANALYZE = 290,
     AND = 291,
     ANTI = 292,
     ANY = 293,
     ARRAY = 294,
     AS = 295,
     ASC_P = 296,
     ASOF = 297,
     ASSERTION = 298,
     ASSIGNMENT = 299,
     ASYMMETRIC = 300,
     AT = 301,
     ATTACH = 302,
     ATTRIBUTE = 303,
     AUTHORIZATION = 304,
     BACKWARD = 305,
     BEFORE = 306,
     BEGIN_P = 307,
     BETWEEN = 308,
     BIGINT = 309,
     BINARY = 310,
     BIT = 311,
     BOOLEAN_P = 312,
     BOTH = 313,
     BY = 314,
     CACHE = 315,
     CALL_P = 316,
     CALLED = 317,
     CASCADE = 318,
     CASCADED = 319,
     CASE = 320,
     CAST = 321,
     CATALOG_P = 322,
     CHAIN = 323,
     CHAR_P = 324,
     CHARACTER = 325,
     CHARACTERISTICS = 326,
     CHECK_P = 327,
     CHECKPOINT = 328,
     CLASS = 329,
     CLOSE = 330,
     CLUSTER = 331,
     COALESCE = 332,
     COLLATE = 333,
     COLLATION = 334,
     COLUMN = 335,
     COLUMNS = 336,
     COMMENT = 337,
     COMMENTS = 338,
     COMMIT = 339,
     COMMITTED = 340,
     COMPRESSION = 341,
     CONCURRENTLY = 342,
     CONFIGURATION = 343,
     CONFLICT = 344,
     CONNECTION = 345,
     CONSTRAINT = 346,
     CONSTRAINTS = 347,
     CONTENT_P = 348,
     CONTINUE_P = 349,
     CONVERSION_P = 350,
     COPY = 351,
     COST = 352,
     CREATE_P = 353,
     CROSS = 354,
     CSV = 355,
     CUBE = 356,
     CURRENT_P = 357,
     CURSOR = 358,
     CYCLE = 359,
     DATA_P = 360,
     DATABASE = 361,
     DAY_P = 362,
     DAYS_P = 363,
     DEALLOCATE = 364,
     DEC = 365,
     DECIMAL_P = 366,
     DECLARE = 367,
     DEFAULT = 368,
     DEFAULTS = 369,
     DEFERRABLE = 370,
     DEFERRED = 371,
     DEFINER = 372,
     DELETE_P = 373,
     DELIMITER = 374,
     DELIMITERS = 375,
     DEPENDS = 376,
     DESC_P = 377,
     DESCRIBE = 378,
     DETACH = 379,
     DICTIONARY = 380,
     DISABLE_P = 381,
     DISCARD = 382,
     DISTINCT = 383,
     DO = 384,
     DOCUMENT_P = 385,
     DOMAIN_P = 386,
     DOUBLE_P = 387,
     DROP = 388,
     EACH = 389,
     ELSE = 390,
     ENABLE_P = 391,
     ENCODING = 392,
     ENCRYPTED = 393,
     END_P = 394,
     ENUM_P = 395,
     ESCAPE = 396,
     EVENT = 397,
     EXCEPT = 398,
     EXCLUDE = 399,
     EXCLUDING = 400,
     EXCLUSIVE = 401,
     EXECUTE = 402,
     EXISTS = 403,
     EXPLAIN = 404,
     EXPORT_P = 405,
     EXPORT_STATE = 406,
     EXTENSION = 407,
     EXTERNAL = 408,
     EXTRACT = 409,
     FALSE_P = 410,
     FAMILY = 411,
     FETCH = 412,
     FILTER = 413,
     FIRST_P = 414,
     FLOAT_P = 415,
     FOLLOWING = 416,
     FOR = 417,
     FORCE = 418,
     FOREIGN = 419,
     FORWARD = 420,
     FREEZE = 421,
     FROM = 422,
     FULL = 423,
     FUNCTION = 424,
     FUNCTIONS = 425,
     GENERATED = 426,
     GLOB = 427,
     GLOBAL = 428,
     GRANT = 429,
     GRANTED = 430,
     GROUP_P = 431,
     GROUPING = 432,
     GROUPING_ID = 433,
     HANDLER = 434,
     HAVING = 435,
     HEADER_P = 436,
     HOLD = 437,
     HOUR_P = 438,
     HOURS_P = 439,
     IDENTITY_P = 440,
     IF_P = 441,
     IGNORE_P = 442,
     ILIKE = 443,
     IMMEDIATE = 444,
     IMMUTABLE = 445,
     IMPLICIT_P = 446,
     IMPORT_P = 447,
     IN_P = 448,
     INCLUDE_P = 449,
     INCLUDING = 450,
     INCREMENT = 451,
     INDEX = 452,
     INDEXES = 453,
     INHERIT = 454,
     INHERITS = 455,
     INITIALLY = 456,
     INLINE_P = 457,
     INNER_P = 458,
     INOUT = 459,
     INPUT_P = 460,
     INSENSITIVE = 461,
     INSERT = 462,
     INSTALL = 463,
     INSTEAD = 464,
     INT_P = 465,
     INTEGER = 466,
     INTERSECT = 467,
     INTERVAL = 468,
     INTO = 469,
     INVOKER = 470,
     IS = 471,
     ISNULL = 472,
     ISOLATION = 473,
     JOIN = 474,
     JSON = 475,
     KEY = 476,
     LABEL = 477,
     LANGUAGE = 478,
     LARGE_P = 479,
     LAST_P = 480,
     LATERAL_P = 481,
     LEADING = 482,
     LEAKPROOF = 483,
     LEFT = 484,
     LEVEL = 485,
     LIKE = 486,
     LIMIT = 487,
     LISTEN = 488,
     LOAD = 489,
     LOCAL = 490,
     LOCATION = 491,
     LOCK_P = 492,
     LOCKED = 493,
     LOGGED = 494,
     MACRO = 495,
     MAP = 496,
     MAPPING = 497,
     MATCH = 498,
     MATERIALIZED = 499,
     MAXVALUE = 500,
     METHOD = 501,
     MICROSECOND_P = 502,
     MICROSECONDS_P = 503,
     MILLISECOND_P = 504,
     MILLISECONDS_P = 505,
     MINUTE_P = 506,
     MINUTES_P = 507,
     MINVALUE = 508,
     MODE = 509,
     MONTH_P = 510,
     MONTHS_P = 511,
     MOVE = 512,
     NAME_P = 513,
     NAMES = 514,
     NATIONAL = 515,
     NATURAL = 516,
     NCHAR = 517,
     NEW = 518,
     NEXT = 519,
     NO = 520,
     NONE = 521,
     NOT = 522,
     NOTHING = 523,
     NOTIFY = 524,
     NOTNULL = 525,
     NOWAIT = 526,
     NULL_P = 527,
     NULLIF = 528,
     NULLS_P = 529,
     NUMERIC = 530,
     OBJECT_P = 531,
     OF = 532,
     OFF = 533,
     OFFSET = 534,
     OIDS = 535,
     OLD = 536,
     ON = 537,
     ONLY = 538,
     OPERATOR = 539,
     OPTION = 540,
     OPTIONS = 541,
     OR = 542,
     ORDER = 543,
     ORDINALITY = 544,
     OUT_P = 545,
     OUTER_P = 546,
     OVER = 547,
     OVERLAPS = 548,
     OVERLAY = 549,
     OVERRIDING = 550,
     OWNED = 551,
     OWNER = 552,
     PARALLEL = 553,
     PARSER = 554,
     PARTIAL = 555,
     PARTITION = 556,
     PASSING = 557,
     PASSWORD = 558,
     PERCENT = 559,
     PIVOT = 560,
     PIVOT_LONGER = 561,
     PIVOT_WIDER = 562,
     PLACING = 563,
     PLANS = 564,
     POLICY = 565,
     POSITION = 566,
     POSITIONAL = 567,
     PRAGMA_P = 568,
     PRECEDING = 569,
     PRECISION = 570,
     PREPARE = 571,
     PREPARED = 572,
     PRESERVE = 573,
     PRIMARY = 574,
     PRIOR = 575,
     PRIVILEGES = 576,
     PROCEDURAL = 577,
     PROCEDURE = 578,
     PROGRAM = 579,
     PUBLICATION = 580,
     QUALIFY = 581,
     QUOTE = 582,
     RANGE = 583,
     READ_P = 584,
     REAL = 585,
     REASSIGN = 586,
     RECHECK = 587,
     RECURSIVE = 588,
     REF = 589,
     REFERENCES = 590,
     REFERENCING = 591,
     REFRESH = 592,
     REINDEX = 593,
     RELATIVE_P = 594,
     RELEASE = 595,
     RENAME = 596,
     REPEATABLE = 597,
     REPLACE = 598,
     REPLICA = 599,
     RESET = 600,
     RESPECT_P = 601,
     RESTART = 602,
     RESTRICT = 603,
     RETURNING = 604,
     RETURNS = 605,
     REVOKE = 606,
     RIGHT = 607,
     ROLE = 608,
     ROLLBACK = 609,
     ROLLUP = 610,
     ROW = 611,
     ROWS = 612,
     RULE = 613,
     SAMPLE = 614,
     SAVEPOINT = 615,
     SCHEMA = 616,
     SCHEMAS = 617,
     SCROLL = 618,
     SEARCH = 619,
     SECOND_P = 620,
     SECONDS_P = 621,
     SECURITY = 622,
     SELECT = 623,
     SEMI = 624,
     SEQUENCE = 625,
     SEQUENCES = 626,
     SERIALIZABLE = 627,
     SERVER = 628,
     SESSION = 629,
     SET = 630,
     SETOF = 631,
     SETS = 632,
     SHARE = 633,
     SHOW = 634,
     SIMILAR = 635,
     SIMPLE = 636,
     SKIP = 637,
     SMALLINT = 638,
     SNAPSHOT = 639,
     SOME = 640,
     SQL_P = 641,
     STABLE = 642,
     STANDALONE_P = 643,
     START = 644,
     STATEMENT = 645,
     STATISTICS = 646,
     STDIN = 647,
     STDOUT = 648,
     STORAGE = 649,
     STORED = 650,
     STRICT_P = 651,
     STRIP_P = 652,
     STRUCT = 653,
     SUBSCRIPTION = 654,
     SUBSTRING = 655,
     SUMMARIZE = 656,
     SYMMETRIC = 657,
     SYSID = 658,
     SYSTEM_P = 659,
     TABLE = 660,
     TABLES = 661,
     TABLESAMPLE = 662,
     TABLESPACE = 663,
     TEMP = 664,
     TEMPLATE = 665,
     TEMPORARY = 666,
     TEXT_P = 667,
     THEN = 668,
     TIME = 669,
     TIMESTAMP = 670,
     TO = 671,
     TRAILING = 672,
     TRANSACTION = 673,
     TRANSFORM = 674,
     TREAT = 675,
     TRIGGER = 676,
     TRIM = 677,
     TRUE_P = 678,
     TRUNCATE = 679,
     TRUSTED = 680,
     TRY_CAST = 681,
     TYPE_P = 682,
     TYPES_P = 683,
     UNBOUNDED = 684,
     UNCOMMITTED = 685,
     UNENCRYPTED = 686,
     UNION = 687,
     UNIQUE = 688,
     UNKNOWN = 689,
     UNLISTEN = 690,
     UNLOGGED = 691,
     UNPIVOT = 692,
     UNTIL = 693,
     UPDATE = 694,
     USE_P = 695,
     USER = 696,
     USING = 697,
     VACUUM = 698,
     VALID = 699,
     VALIDATE = 700,
     VALIDATOR = 701,
     VALUE_P = 702,
     VALUES = 703,
     VARCHAR = 704,
     VARIADIC = 705,
     VARYING = 706,
     VERBOSE = 707,
     VERSION_P = 708,
     VIEW = 709,
     VIEWS = 710,
     VIRTUAL = 711,
     VOLATILE = 712,
     WHEN = 713,
     WHERE = 714,
     WHITESPACE_P = 715,
     WINDOW = 716,
     WITH = 717,
     WITHIN = 718,
     WITHOUT = 719,
     WORK = 720,
     WRAPPER = 721,
     WRITE_P = 722,
     XML_P = 723,
     XMLATTRIBUTES = 724,
     XMLCONCAT = 725,
     XMLELEMENT = 726,
     XMLEXISTS = 727,
     XMLFOREST = 728,
     XMLNAMESPACES = 729,
     XMLPARSE = 730,
     XMLPI = 731,
     XMLROOT = 732,
     XMLSERIALIZE = 733,
     XMLTABLE = 734,
     YEAR_P = 735,
     YEARS_P = 736,
     YES_P = 737,
     ZONE = 738,
     NOT_LA = 739,
     NULLS_LA = 740,
     WITH_LA = 741,
     POSTFIXOP = 742,
     UMINUS = 743
   };
#endif
/* Tokens.  */
#define IDENT 258
#define FCONST 259
#define SCONST 260
#define BCONST 261
#define XCONST 262
#define Op 263
#define ICONST 264
#define PARAM 265
#define TYPECAST 266
#define DOT_DOT 267
#define COLON_EQUALS 268
#define EQUALS_GREATER 269
#define INTEGER_DIVISION 270
#define POWER_OF 271
#define LAMBDA_ARROW 272
#define DOUBLE_ARROW 273
#define LESS_EQUALS 274
#define GREATER_EQUALS 275
#define NOT_EQUALS 276
#define ABORT_P 277
#define ABSOLUTE_P 278
#define ACCESS 279
#define ACTION 280
#define ADD_P 281
#define ADMIN 282
#define AFTER 283
#define AGGREGATE 284
#define ALL 285
#define ALSO 286
#define ALTER 287
#define ALWAYS 288
#define ANALYSE 289
#define ANALYZE 290
#define AND 291
#define ANTI 292
#define ANY 293
#define ARRAY 294
#define AS 295
#define ASC_P 296
#define ASOF 297
#define ASSERTION 298
#define ASSIGNMENT 299
#define ASYMMETRIC 300
#define AT 301
#define ATTACH 302
#define ATTRIBUTE 303
#define AUTHORIZATION 304
#define BACKWARD 305
#define BEFORE 306
#define BEGIN_P 307
#define BETWEEN 308
#define BIGINT 309
#define BINARY 310
#define BIT 311
#define BOOLEAN_P 312
#define BOTH 313
#define BY 314
#define CACHE 315
#define CALL_P 316
#define CALLED 317
#define CASCADE 318
#define CASCADED 319
#define CASE 320
#define CAST 321
#define CATALOG_P 322
#define CHAIN 323
#define CHAR_P 324
#define CHARACTER 325
#define CHARACTERISTICS 326
#define CHECK_P 327
#define CHECKPOINT 328
#define CLASS 329
#define CLOSE 330
#define CLUSTER 331
#define COALESCE 332
#define COLLATE 333
#define COLLATION 334
#define COLUMN 335
#define COLUMNS 336
#define COMMENT 337
#define COMMENTS 338
#define COMMIT 339
#define COMMITTED 340
#define COMPRESSION 341
#define CONCURRENTLY 342
#define CONFIGURATION 343
#define CONFLICT 344
#define CONNECTION 345
#define CONSTRAINT 346
#define CONSTRAINTS 347
#define CONTENT_P 348
#define CONTINUE_P 349
#define CONVERSION_P 350
#define COPY 351
#define COST 352
#define CREATE_P 353
#define CROSS 354
#define CSV 355
#define CUBE 356
#define CURRENT_P 357
#define CURSOR 358
#define CYCLE 359
#define DATA_P 360
#define DATABASE 361
#define DAY_P 362
#define DAYS_P 363
#define DEALLOCATE 364
#define DEC 365
#define DECIMAL_P 366
#define DECLARE 367
#define DEFAULT 368
#define DEFAULTS 369
#define DEFERRABLE 370
#define DEFERRED 371
#define DEFINER 372
#define DELETE_P 373
#define DELIMITER 374
#define DELIMITERS 375
#define DEPENDS 376
#define DESC_P 377
#define DESCRIBE 378
#define DETACH 379
#define DICTIONARY 380
#define DISABLE_P 381
#define DISCARD 382
#define DISTINCT 383
#define DO 384
#define DOCUMENT_P 385
#define DOMAIN_P 386
#define DOUBLE_P 387
#define DROP 388
#define EACH 389
#define ELSE 390
#define ENABLE_P 391
#define ENCODING 392
#define ENCRYPTED 393
#define END_P 394
#define ENUM_P 395
#define ESCAPE 396
#define EVENT 397
#define EXCEPT 398
#define EXCLUDE 399
#define EXCLUDING 400
#define EXCLUSIVE 401
#define EXECUTE 402
#define EXISTS 403
#define EXPLAIN 404
#define EXPORT_P 405
#define EXPORT_STATE 406
#define EXTENSION 407
#define EXTERNAL 408
#define EXTRACT 409
#define FALSE_P 410
#define FAMILY 411
#define FETCH 412
#define FILTER 413
#define FIRST_P 414
#define FLOAT_P 415
#define FOLLOWING 416
#define FOR 417
#define FORCE 418
#define FOREIGN 419
#define FORWARD 420
#define FREEZE 421
#define FROM 422
#define FULL 423
#define FUNCTION 424
#define FUNCTIONS 425
#define GENERATED 426
#define GLOB 427
#define GLOBAL 428
#define GRANT 429
#define GRANTED 430
#define GROUP_P 431
#define GROUPING 432
#define GROUPING_ID 433
#define HANDLER 434
#define HAVING 435
#define HEADER_P 436
#define HOLD 437
#define HOUR_P 438
#define HOURS_P 439
#define IDENTITY_P 440
#define IF_P 441
#define IGNORE_P 442
#define ILIKE 443
#define IMMEDIATE 444
#define IMMUTABLE 445
#define IMPLICIT_P 446
#define IMPORT_P 447
#define IN_P 448
#define INCLUDE_P 449
#define INCLUDING 450
#define INCREMENT 451
#define INDEX 452
#define INDEXES 453
#define INHERIT 454
#define INHERITS 455
#define INITIALLY 456
#define INLINE_P 457
#define INNER_P 458
#define INOUT 459
#define INPUT_P 460
#define INSENSITIVE 461
#define INSERT 462
#define INSTALL 463
#define INSTEAD 464
#define INT_P 465
#define INTEGER 466
#define INTERSECT 467
#define INTERVAL 468
#define INTO 469
#define INVOKER 470
#define IS 471
#define ISNULL 472
#define ISOLATION 473
#define JOIN 474
#define JSON 475
#define KEY 476
#define LABEL 477
#define LANGUAGE 478
#define LARGE_P 479
#define LAST_P 480
#define LATERAL_P 481
#define LEADING 482
#define LEAKPROOF 483
#define LEFT 484
#define LEVEL 485
#define LIKE 486
#define LIMIT 487
#define LISTEN 488
#define LOAD 489
#define LOCAL 490
#define LOCATION 491
#define LOCK_P 492
#define LOCKED 493
#define LOGGED 494
#define MACRO 495
#define MAP 496
#define MAPPING 497
#define MATCH 498
#define MATERIALIZED 499
#define MAXVALUE 500
#define METHOD 501
#define MICROSECOND_P 502
#define MICROSECONDS_P 503
#define MILLISECOND_P 504
#define MILLISECONDS_P 505
#define MINUTE_P 506
#define MINUTES_P 507
#define MINVALUE 508
#define MODE 509
#define MONTH_P 510
#define MONTHS_P 511
#define MOVE 512
#define NAME_P 513
#define NAMES 514
#define NATIONAL 515
#define NATURAL 516
#define NCHAR 517
#define NEW 518
#define NEXT 519
#define NO 520
#define NONE 521
#define NOT 522
#define NOTHING 523
#define NOTIFY 524
#define NOTNULL 525
#define NOWAIT 526
#define NULL_P 527
#define NULLIF 528
#define NULLS_P 529
#define NUMERIC 530
#define OBJECT_P 531
#define OF 532
#define OFF 533
#define OFFSET 534
#define OIDS 535
#define OLD 536
#define ON 537
#define ONLY 538
#define OPERATOR 539
#define OPTION 540
#define OPTIONS 541
#define OR 542
#define ORDER 543
#define ORDINALITY 544
#define OUT_P 545
#define OUTER_P 546
#define OVER 547
#define OVERLAPS 548
#define OVERLAY 549
#define OVERRIDING 550
#define OWNED 551
#define OWNER 552
#define PARALLEL 553
#define PARSER 554
#define PARTIAL 555
#define PARTITION 556
#define PASSING 557
#define PASSWORD 558
#define PERCENT 559
#define PIVOT 560
#define PIVOT_LONGER 561
#define PIVOT_WIDER 562
#define PLACING 563
#define PLANS 564
#define POLICY 565
#define POSITION 566
#define POSITIONAL 567
#define PRAGMA_P 568
#define PRECEDING 569
#define PRECISION 570
#define PREPARE 571
#define PREPARED 572
#define PRESERVE 573
#define PRIMARY 574
#define PRIOR 575
#define PRIVILEGES 576
#define PROCEDURAL 577
#define PROCEDURE 578
#define PROGRAM 579
#define PUBLICATION 580
#define QUALIFY 581
#define QUOTE 582
#define RANGE 583
#define READ_P 584
#define REAL 585
#define REASSIGN 586
#define RECHECK 587
#define RECURSIVE 588
#define REF 589
#define REFERENCES 590
#define REFERENCING 591
#define REFRESH 592
#define REINDEX 593
#define RELATIVE_P 594
#define RELEASE 595
#define RENAME 596
#define REPEATABLE 597
#define REPLACE 598
#define REPLICA 599
#define RESET 600
#define RESPECT_P 601
#define RESTART 602
#define RESTRICT 603
#define RETURNING 604
#define RETURNS 605
#define REVOKE 606
#define RIGHT 607
#define ROLE 608
#define ROLLBACK 609
#define ROLLUP 610
#define ROW 611
#define ROWS 612
#define RULE 613
#define SAMPLE 614
#define SAVEPOINT 615
#define SCHEMA 616
#define SCHEMAS 617
#define SCROLL 618
#define SEARCH 619
#define SECOND_P 620
#define SECONDS_P 621
#define SECURITY 622
#define SELECT 623
#define SEMI 624
#define SEQUENCE 625
#define SEQUENCES 626
#define SERIALIZABLE 627
#define SERVER 628
#define SESSION 629
#define SET 630
#define SETOF 631
#define SETS 632
#define SHARE 633
#define SHOW 634
#define SIMILAR 635
#define SIMPLE 636
#define SKIP 637
#define SMALLINT 638
#define SNAPSHOT 639
#define SOME 640
#define SQL_P 641
#define STABLE 642
#define STANDALONE_P 643
#define START 644
#define STATEMENT 645
#define STATISTICS 646
#define STDIN 647
#define STDOUT 648
#define STORAGE 649
#define STORED 650
#define STRICT_P 651
#define STRIP_P 652
#define STRUCT 653
#define SUBSCRIPTION 654
#define SUBSTRING 655
#define SUMMARIZE 656
#define SYMMETRIC 657
#define SYSID 658
#define SYSTEM_P 659
#define TABLE 660
#define TABLES 661
#define TABLESAMPLE 662
#define TABLESPACE 663
#define TEMP 664
#define TEMPLATE 665
#define TEMPORARY 666
#define TEXT_P 667
#define THEN 668
#define TIME 669
#define TIMESTAMP 670
#define TO 671
#define TRAILING 672
#define TRANSACTION 673
#define TRANSFORM 674
#define TREAT 675
#define TRIGGER 676
#define TRIM 677
#define TRUE_P 678
#define TRUNCATE 679
#define TRUSTED 680
#define TRY_CAST 681
#define TYPE_P 682
#define TYPES_P 683
#define UNBOUNDED 684
#define UNCOMMITTED 685
#define UNENCRYPTED 686
#define UNION 687
#define UNIQUE 688
#define UNKNOWN 689
#define UNLISTEN 690
#define UNLOGGED 691
#define UNPIVOT 692
#define UNTIL 693
#define UPDATE 694
#define USE_P 695
#define USER 696
#define USING 697
#define VACUUM 698
#define VALID 699
#define VALIDATE 700
#define VALIDATOR 701
#define VALUE_P 702
#define VALUES 703
#define VARCHAR 704
#define VARIADIC 705
#define VARYING 706
#define VERBOSE 707
#define VERSION_P 708
#define VIEW 709
#define VIEWS 710
#define VIRTUAL 711
#define VOLATILE 712
#define WHEN 713
#define WHERE 714
#define WHITESPACE_P 715
#define WINDOW 716
#define WITH 717
#define WITHIN 718
#define WITHOUT 719
#define WORK 720
#define WRAPPER 721
#define WRITE_P 722
#define XML_P 723
#define XMLATTRIBUTES 724
#define XMLCONCAT 725
#define XMLELEMENT 726
#define XMLEXISTS 727
#define XMLFOREST 728
#define XMLNAMESPACES 729
#define XMLPARSE 730
#define XMLPI 731
#define XMLROOT 732
#define XMLSERIALIZE 733
#define XMLTABLE 734
#define YEAR_P 735
#define YEARS_P 736
#define YES_P 737
#define ZONE 738
#define NOT_LA 739
#define NULLS_LA 740
#define WITH_LA 741
#define POSTFIXOP 742
#define UMINUS 743




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 14 "third_party/libpg_query/grammar/grammar.y"
{
	core_YYSTYPE		core_yystype;
	/* these fields must match core_YYSTYPE: */
	int					ival;
	char				*str;
	const char			*keyword;
	const char          *conststr;

	char				chr;
	bool				boolean;
	PGJoinType			jtype;
	PGDropBehavior		dbehavior;
	PGOnCommitAction		oncommit;
	PGOnCreateConflict		oncreateconflict;
	PGList				*list;
	PGNode				*node;
	PGValue				*value;
	PGObjectType			objtype;
	PGTypeName			*typnam;
	PGObjectWithArgs		*objwithargs;
	PGDefElem				*defelt;
	PGSortBy				*sortby;
	PGWindowDef			*windef;
	PGJoinExpr			*jexpr;
	PGIndexElem			*ielem;
	PGAlias				*alias;
	PGRangeVar			*range;
	PGIntoClause			*into;
	PGWithClause			*with;
	PGInferClause			*infer;
	PGOnConflictClause	*onconflict;
	PGOnConflictActionAlias onconflictshorthand;
	PGAIndices			*aind;
	PGResTarget			*target;
	PGInsertStmt			*istmt;
	PGVariableSetStmt		*vsetstmt;
	PGOverridingKind       override;
	PGSortByDir            sortorder;
	PGSortByNulls          nullorder;
	PGConstrType           constr;
	PGLockClauseStrength lockstrength;
	PGLockWaitPolicy lockwaitpolicy;
	PGSubLinkType subquerytype;
	PGViewCheckOption viewcheckoption;
	PGInsertColumnOrder bynameorposition;
}
/* Line 1529 of yacc.c.  */
#line 1072 "third_party/libpg_query/grammar/grammar_out.hpp"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif




// LICENSE_CHANGE_END


/*
 * The YY_EXTRA data that a flex scanner allows us to pass around.  Private
 * state needed for raw parsing/lexing goes here.
 */
typedef struct base_yy_extra_type {
	/*
	 * Fields used by the core scanner.
	 */
	core_yy_extra_type core_yy_extra;

	/*
	 * State variables for base_yylex().
	 */
	bool have_lookahead;           /* is lookahead info valid? */
	int lookahead_token;           /* one-token lookahead */
	core_YYSTYPE lookahead_yylval; /* yylval for lookahead token */
	YYLTYPE lookahead_yylloc;      /* yylloc for lookahead token */
	char *lookahead_end;           /* end of current token */
	char lookahead_hold_char;      /* to be put back at *lookahead_end */

	/*
	 * State variables that belong to the grammar.
	 */
	PGList *parsetree; /* final parse result is delivered here */
} base_yy_extra_type;

/*
 * In principle we should use yyget_extra() to fetch the yyextra field
 * from a yyscanner struct.  However, flex always puts that field first,
 * and this is sufficiently performance-critical to make it seem worth
 * cheating a bit to use an inline macro.
 */
#define pg_yyget_extra(yyscanner) (*((base_yy_extra_type **)(yyscanner)))

/* from parser.c */
int base_yylex(YYSTYPE *lvalp, YYLTYPE *llocp, core_yyscan_t yyscanner);

/* from gram.y */
void parser_init(base_yy_extra_type *yyext);
int base_yyparse(core_yyscan_t yyscanner);

}

// LICENSE_CHANGE_END




// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #14
// See the end of this file for a list

/*-------------------------------------------------------------------------
 *
 * datetime.h
 *	  Definitions for date/time support code.
 *	  The support code is shared with other date data types,
 *	   including abstime, reltime, date, and time.
 *
 *
 * Portions Copyright (c) 1996-2015, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/include/utils/datetime.h
 *
 *-------------------------------------------------------------------------
 */





// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #14
// See the end of this file for a list

/*-------------------------------------------------------------------------
 *
 * timestamp.h
 *	  Definitions for the SQL "timestamp" and "interval" types.
 *
 * Portions Copyright (c) 1996-2015, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/include/utils/timestamp.h
 *
 *-------------------------------------------------------------------------
 */




// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #14
// See the end of this file for a list

/*-------------------------------------------------------------------------
 *
 * timestamp.h
 *	  PGTimestamp and PGInterval typedefs and related macros.
 *
 * Note: this file must be includable in both frontend and backend contexts.
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/include/datatype/timestamp.h
 *
 *-------------------------------------------------------------------------
 */


#include <cstdint>

/*
 * PGTimestamp represents absolute time.
 *
 * PGInterval represents delta time. Keep track of months (and years), days,
 * and hours/minutes/seconds separately since the elapsed time spanned is
 * unknown until instantiated relative to an absolute time.
 *
 * Note that Postgres uses "time interval" to mean a bounded interval,
 * consisting of a beginning and ending time, not a time span - thomas 97/03/20
 *
 * Timestamps, as well as the h/m/s fields of intervals, are stored as
 * int64_t values with units of microseconds.  (Once upon a time they were
 * double values with units of seconds.)
 *
 * PGTimeOffset and pg_fsec_t are convenience typedefs for temporary variables.
 * Do not use pg_fsec_t in values stored on-disk.
 * Also, pg_fsec_t is only meant for *fractional* seconds; beware of overflow
 * if the value you need to store could be many seconds.
 */
namespace duckdb_libpgquery {

typedef int64_t PGTimestamp;
typedef int64_t PGTimestampTz;
typedef int64_t PGTimeOffset;
typedef int32_t pg_fsec_t; /* fractional seconds (in microseconds) */

typedef struct {
	PGTimeOffset time; /* all time units other than days, months and
								 * years */
	int32_t day;       /* days, after time for alignment */
	int32_t month;     /* months and years, after time for alignment */
} PGInterval;
}

// LICENSE_CHANGE_END




// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #14
// See the end of this file for a list

/*-------------------------------------------------------------------------
 *
 * pgtime.h
 *	  PostgreSQL internal timezone library
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 *
 * IDENTIFICATION
 *	  src/include/pgtime.h
 *
 *-------------------------------------------------------------------------
 */


#include <cstdint>

/*
 * The API of this library is generally similar to the corresponding
 * C library functions, except that we use pg_time_t which (we hope) is
 * 64 bits wide, and which is most definitely signed not unsigned.
 */

typedef int64_t pg_time_t;

struct pg_tm
{
	int			tm_sec;
	int			tm_min;
	int			tm_hour;
	int			tm_mday;
	int			tm_mon;			/* origin 1, not 0! */
	int			tm_year;		/* relative to 1900 */
	int			tm_wday;
	int			tm_yday;
	int			tm_isdst;
	long int	tm_gmtoff;
	const char *tm_zone;
};

typedef struct pg_tz pg_tz;
typedef struct pg_tzenum pg_tzenum;

/* Maximum length of a timezone name (not including trailing null) */
#define TZ_STRLEN_MAX 255

/* these functions are in localtime.c */

struct pg_tm *pg_localtime(const pg_time_t *timep, const pg_tz *tz);
struct pg_tm *pg_gmtime(const pg_time_t *timep);
int pg_next_dst_boundary(const pg_time_t *timep,
					 long int *before_gmtoff,
					 int *before_isdst,
					 pg_time_t *boundary,
					 long int *after_gmtoff,
					 int *after_isdst,
					 const pg_tz *tz);
bool pg_interpret_timezone_abbrev(const char *abbrev,
							 const pg_time_t *timep,
							 long int *gmtoff,
							 int *isdst,
							 const pg_tz *tz);
bool pg_get_timezone_offset(const pg_tz *tz, long int *gmtoff);
const char *pg_get_timezone_name(pg_tz *tz);
bool pg_tz_acceptable(pg_tz *tz);

/* these functions and variables are in pgtz.c */

pg_tz *session_timezone;
pg_tz *log_timezone;

void pg_timezone_initialize(void);
pg_tz *pg_tzset(const char *tzname);
pg_tz *pg_tzset_offset(long gmtoffset);

pg_tzenum *pg_tzenumerate_start(void);
pg_tz *pg_tzenumerate_next(pg_tzenum *dir);
void pg_tzenumerate_end(pg_tzenum *dir);


// LICENSE_CHANGE_END


/* Macros to handle packing and unpacking the typmod field for intervals */
#define INTERVAL_FULL_RANGE (0x7FFF)
#define INTERVAL_RANGE_MASK (0x7FFF)
#define INTERVAL_FULL_PRECISION (0xFFFF)
#define INTERVAL_PRECISION_MASK (0xFFFF)
#define INTERVAL_TYPMOD(p,r) ((((r) & INTERVAL_RANGE_MASK) << 16) | ((p) & INTERVAL_PRECISION_MASK))
#define INTERVAL_PRECISION(t) ((t) & INTERVAL_PRECISION_MASK)
#define INTERVAL_RANGE(t) (((t) >> 16) & INTERVAL_RANGE_MASK)


// LICENSE_CHANGE_END



/*
 * Field types for time decoding.
 *
 * Can't have more of these than there are bits in an unsigned int
 * since these are turned into bit masks during parsing and decoding.
 *
 * Furthermore, the values for YEAR, MONTH, DAY, HOUR, MINUTE, SECOND
 * must be in the range 0..14 so that the associated bitmasks can fit
 * into the left half of an INTERVAL's typmod value.  Since those bits
 * are stored in typmods, you can't change them without initdb!
 */

#define RESERV	0
#define MONTH	1
#define YEAR	2
#define DAY		3
#define JULIAN	4
#define TZ		5				/* fixed-offset timezone abbreviation */
#define DTZ		6				/* fixed-offset timezone abbrev, DST */
#define DYNTZ	7				/* dynamic timezone abbreviation */
#define IGNORE_DTF	8
#define AMPM	9
#define HOUR	10
#define MINUTE	11
#define SECOND	12
#define MILLISECOND 13
#define MICROSECOND 14
#define DOY		15
#define DOW		16
#define UNITS	17
#define ADBC	18
/* these are only for relative dates */
#define AGO		19
#define ABS_BEFORE		20
#define ABS_AFTER		21
/* generic fields to help with parsing */
#define ISODATE 22
#define ISOTIME 23
/* these are only for parsing intervals */
#define WEEK		24
#define DECADE		25
#define CENTURY		26
#define MILLENNIUM	27
/* hack for parsing two-word timezone specs "MET DST" etc */
#define DTZMOD	28				/* "DST" as a separate word */
/* reserved for unrecognized string values */
#define UNKNOWN_FIELD	31




// LICENSE_CHANGE_END


namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 14 "third_party/libpg_query/grammar/grammar.y"
{
	core_YYSTYPE		core_yystype;
	/* these fields must match core_YYSTYPE: */
	int					ival;
	char				*str;
	const char			*keyword;
	const char          *conststr;

	char				chr;
	bool				boolean;
	PGJoinType			jtype;
	PGDropBehavior		dbehavior;
	PGOnCommitAction		oncommit;
	PGOnCreateConflict		oncreateconflict;
	PGList				*list;
	PGNode				*node;
	PGValue				*value;
	PGObjectType			objtype;
	PGTypeName			*typnam;
	PGObjectWithArgs		*objwithargs;
	PGDefElem				*defelt;
	PGSortBy				*sortby;
	PGWindowDef			*windef;
	PGJoinExpr			*jexpr;
	PGIndexElem			*ielem;
	PGAlias				*alias;
	PGRangeVar			*range;
	PGIntoClause			*into;
	PGWithClause			*with;
	PGInferClause			*infer;
	PGOnConflictClause	*onconflict;
	PGOnConflictActionAlias onconflictshorthand;
	PGAIndices			*aind;
	PGResTarget			*target;
	PGInsertStmt			*istmt;
	PGVariableSetStmt		*vsetstmt;
	PGOverridingKind       override;
	PGSortByDir            sortorder;
	PGSortByNulls          nullorder;
	PGConstrType           constr;
	PGLockClauseStrength lockstrength;
	PGLockWaitPolicy lockwaitpolicy;
	PGSubLinkType subquerytype;
	PGViewCheckOption viewcheckoption;
	PGInsertColumnOrder bynameorposition;
}
/* Line 193 of yacc.c.  */
#line 1292 "third_party/libpg_query/grammar/grammar_out.cpp"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


/* Copy the second part of user declarations.  */


/* Line 216 of yacc.c.  */
#line 1317 "third_party/libpg_query/grammar/grammar_out.cpp"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss;
  YYSTYPE yyvs;
    YYLTYPE yyls;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  683
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   67100

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  511
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  440
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2030
/* YYNRULES -- Number of states.  */
#define YYNSTATES  3384

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   743

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   505,   506,   495,     2,     2,
     500,   501,   493,   491,   504,   492,   502,   494,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   510,   503,
     487,   489,   488,   507,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   498,     2,   499,   496,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   508,     2,   509,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   490,   497
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     9,    11,    13,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    88,    93,   100,   105,   112,   117,
     124,   129,   136,   138,   141,   145,   148,   150,   154,   157,
     161,   163,   167,   170,   176,   180,   187,   192,   199,   206,
     213,   219,   225,   232,   242,   247,   253,   261,   268,   273,
     282,   287,   290,   295,   299,   306,   311,   314,   317,   320,
     323,   325,   328,   329,   331,   334,   337,   340,   342,   346,
     351,   354,   356,   357,   360,   364,   367,   371,   378,   385,
     394,   401,   410,   417,   426,   433,   442,   451,   462,   471,
     482,   484,   485,   495,   497,   502,   507,   515,   518,   520,
     524,   527,   530,   531,   536,   540,   541,   543,   544,   547,
     551,   557,   560,   563,   564,   573,   579,   580,   586,   592,
     600,   603,   604,   606,   608,   610,   614,   617,   618,   620,
     621,   623,   627,   629,   633,   635,   638,   640,   644,   647,
     654,   663,   669,   671,   672,   674,   678,   681,   686,   692,
     696,   701,   708,   714,   720,   729,   737,   739,   745,   754,
     762,   764,   765,   769,   779,   792,   796,   797,   802,   809,
     811,   814,   816,   818,   819,   821,   824,   827,   829,   832,
     835,   837,   840,   844,   847,   850,   853,   856,   860,   864,
     868,   870,   874,   876,   877,   879,   882,   885,   888,   891,
     894,   897,   900,   903,   905,   907,   908,   911,   921,   934,
     946,   947,   950,   952,   954,   956,   958,   960,   962,   966,
     967,   969,   972,   974,   976,   979,   982,   986,   988,   990,
     993,   996,   998,  1001,  1005,  1011,  1015,  1018,  1024,  1026,
    1028,  1030,  1031,  1037,  1045,  1051,  1054,  1058,  1060,  1062,
    1065,  1068,  1069,  1073,  1078,  1083,  1084,  1088,  1091,  1092,
    1096,  1098,  1100,  1102,  1104,  1106,  1108,  1110,  1112,  1114,
    1116,  1120,  1124,  1126,  1129,  1132,  1135,  1138,  1141,  1144,
    1145,  1149,  1153,  1157,  1158,  1160,  1163,  1165,  1168,  1171,
    1174,  1177,  1181,  1186,  1188,  1192,  1194,  1196,  1198,  1200,
    1204,  1206,  1209,  1210,  1212,  1215,  1216,  1218,  1222,  1223,
    1226,  1227,  1231,  1235,  1237,  1243,  1247,  1249,  1253,  1255,
    1258,  1260,  1265,  1271,  1277,  1284,  1288,  1296,  1301,  1313,
    1315,  1319,  1322,  1325,  1328,  1329,  1333,  1335,  1337,  1340,
    1343,  1346,  1349,  1351,  1352,  1354,  1357,  1364,  1369,  1376,
    1381,  1388,  1397,  1402,  1409,  1411,  1413,  1415,  1417,  1419,
    1422,  1424,  1427,  1429,  1432,  1434,  1436,  1438,  1440,  1444,
    1448,  1452,  1456,  1459,  1462,  1464,  1468,  1470,  1472,  1474,
    1478,  1480,  1482,  1483,  1485,  1487,  1489,  1491,  1495,  1504,
    1516,  1527,  1535,  1546,  1556,  1558,  1560,  1563,  1567,  1576,
    1588,  1598,  1600,  1602,  1606,  1607,  1609,  1613,  1615,  1616,
    1618,  1619,  1621,  1622,  1624,  1628,  1630,  1632,  1634,  1638,
    1639,  1642,  1645,  1646,  1649,  1650,  1652,  1653,  1655,  1657,
    1659,  1663,  1667,  1669,  1671,  1675,  1679,  1683,  1687,  1691,
    1695,  1700,  1704,  1707,  1709,  1711,  1713,  1715,  1717,  1721,
    1723,  1725,  1729,  1733,  1735,  1738,  1743,  1748,  1751,  1755,
    1761,  1767,  1769,  1771,  1775,  1776,  1788,  1800,  1811,  1824,
    1826,  1829,  1835,  1840,  1845,  1850,  1855,  1863,  1869,  1874,
    1882,  1889,  1899,  1909,  1914,  1916,  1918,  1920,  1922,  1924,
    1926,  1928,  1934,  1936,  1938,  1942,  1944,  1947,  1950,  1953,
    1957,  1959,  1963,  1970,  1973,  1974,  1978,  1982,  1987,  1992,
    1997,  2002,  2006,  2009,  2011,  2013,  2014,  2016,  2018,  2019,
    2022,  2024,  2030,  2032,  2033,  2036,  2039,  2040,  2042,  2043,
    2047,  2053,  2055,  2059,  2064,  2068,  2070,  2072,  2073,  2076,
    2079,  2080,  2083,  2086,  2088,  2090,  2092,  2093,  2096,  2101,
    2107,  2112,  2115,  2119,  2122,  2125,  2128,  2131,  2133,  2136,
    2140,  2141,  2143,  2144,  2150,  2152,  2157,  2164,  2167,  2169,
    2170,  2175,  2176,  2178,  2180,  2183,  2186,  2189,  2191,  2193,
    2196,  2199,  2201,  2203,  2205,  2207,  2209,  2211,  2215,  2219,
    2220,  2222,  2226,  2228,  2231,  2233,  2235,  2237,  2239,  2241,
    2244,  2249,  2254,  2260,  2262,  2264,  2267,  2268,  2271,  2272,
    2274,  2278,  2280,  2281,  2283,  2286,  2290,  2293,  2298,  2301,
    2305,  2308,  2309,  2311,  2314,  2315,  2320,  2326,  2328,  2331,
    2334,  2335,  2337,  2341,  2343,  2346,  2350,  2354,  2358,  2362,
    2366,  2370,  2372,  2377,  2387,  2397,  2401,  2402,  2405,  2408,
    2409,  2415,  2419,  2421,  2425,  2431,  2435,  2437,  2440,  2442,
    2446,  2452,  2454,  2457,  2461,  2466,  2472,  2477,  2483,  2488,
    2495,  2501,  2506,  2512,  2518,  2524,  2527,  2532,  2534,  2536,
    2537,  2539,  2544,  2550,  2555,  2556,  2559,  2562,  2565,  2567,
    2569,  2571,  2573,  2574,  2579,  2582,  2584,  2587,  2590,  2595,
    2598,  2605,  2608,  2610,  2614,  2619,  2620,  2623,  2624,  2627,
    2628,  2630,  2634,  2638,  2641,  2642,  2645,  2650,  2652,  2654,
    2656,  2657,  2660,  2664,  2670,  2677,  2680,  2684,  2690,  2696,
    2702,  2706,  2711,  2712,  2714,  2716,  2718,  2720,  2722,  2725,
    2730,  2732,  2734,  2736,  2738,  2741,  2745,  2746,  2748,  2750,
    2752,  2754,  2756,  2759,  2762,  2765,  2768,  2771,  2773,  2777,
    2778,  2780,  2782,  2784,  2786,  2792,  2795,  2797,  2799,  2801,
    2803,  2808,  2810,  2813,  2816,  2818,  2822,  2826,  2829,  2831,
    2832,  2838,  2841,  2847,  2850,  2852,  2856,  2860,  2861,  2863,
    2865,  2867,  2869,  2871,  2873,  2875,  2877,  2879,  2881,  2883,
    2885,  2887,  2889,  2891,  2893,  2895,  2897,  2899,  2901,  2903,
    2905,  2907,  2909,  2913,  2917,  2921,  2925,  2929,  2933,  2937,
    2938,  2940,  2944,  2948,  2954,  2957,  2960,  2964,  2968,  2972,
    2976,  2980,  2984,  2988,  2992,  2996,  3000,  3004,  3008,  3012,
    3016,  3020,  3023,  3026,  3030,  3034,  3037,  3040,  3044,  3048,
    3054,  3059,  3066,  3070,  3076,  3081,  3088,  3093,  3100,  3106,
    3114,  3118,  3121,  3126,  3130,  3133,  3137,  3141,  3145,  3149,
    3154,  3158,  3163,  3167,  3172,  3178,  3185,  3192,  3200,  3207,
    3215,  3222,  3230,  3234,  3239,  3244,  3251,  3253,  3258,  3262,
    3268,  3270,  3274,  3277,  3280,  3284,  3288,  3292,  3296,  3300,
    3304,  3308,  3312,  3316,  3320,  3324,  3328,  3332,  3336,  3340,
    3343,  3346,  3352,  3359,  3366,  3374,  3376,  3378,  3381,  3383,
    3385,  3388,  3391,  3395,  3397,  3400,  3405,  3407,  3409,  3412,
    3415,  3420,  3422,  3424,  3428,  3432,  3437,  3439,  3443,  3450,
    3458,  3468,  3476,  3484,  3490,  3492,  3494,  3496,  3502,  3509,
    3516,  3521,  3526,  3531,  3536,  3543,  3549,  3555,  3561,  3566,
    3573,  3578,  3586,  3596,  3602,  3603,  3609,  3614,  3615,  3617,
    3618,  3621,  3622,  3624,  3628,  3632,  3635,  3638,  3639,  3646,
    3648,  3649,  3653,  3654,  3657,  3660,  3661,  3663,  3668,  3671,
    3674,  3677,  3680,  3683,  3688,  3692,  3694,  3700,  3704,  3706,
    3710,  3712,  3715,  3719,  3721,  3725,  3727,  3730,  3732,  3733,
    3735,  3737,  3739,  3741,  3743,  3745,  3747,  3749,  3751,  3753,
    3755,  3757,  3759,  3761,  3763,  3765,  3767,  3769,  3771,  3773,
    3778,  3780,  3785,  3787,  3792,  3794,  3797,  3799,  3802,  3804,
    3807,  3809,  3813,  3815,  3819,  3821,  3824,  3826,  3830,  3832,
    3835,  3837,  3838,  3840,  3844,  3846,  3850,  3854,  3856,  3860,
    3864,  3865,  3867,  3869,  3871,  3873,  3875,  3877,  3879,  3881,
    3883,  3885,  3890,  3894,  3897,  3901,  3902,  3906,  3910,  3913,
    3916,  3918,  3919,  3922,  3925,  3929,  3932,  3934,  3936,  3940,
    3946,  3948,  3951,  3956,  3959,  3960,  3962,  3963,  3965,  3968,
    3971,  3975,  3981,  3983,  3984,  3986,  3989,  3990,  3993,  3994,
    3997,  4001,  4005,  4009,  4015,  4016,  4019,  4021,  4022,  4024,
    4025,  4027,  4031,  4033,  4036,  4040,  4043,  4045,  4050,  4053,
    4055,  4056,  4060,  4062,  4066,  4068,  4071,  4076,  4079,  4080,
    4082,  4086,  4088,  4091,  4093,  4097,  4099,  4102,  4104,  4108,
    4110,  4112,  4114,  4117,  4119,  4121,  4124,  4126,  4128,  4131,
    4139,  4142,  4148,  4152,  4156,  4158,  4160,  4162,  4164,  4166,
    4168,  4170,  4172,  4174,  4176,  4178,  4180,  4182,  4184,  4186,
    4188,  4190,  4192,  4194,  4196,  4199,  4202,  4206,  4210,  4211,
    4213,  4215,  4217,  4219,  4221,  4223,  4225,  4227,  4233,  4237,
    4238,  4240,  4242,  4244,  4246,  4248,  4253,  4261,  4268,  4271,
    4272,  4274,  4276,  4278,  4280,  4294,  4311,  4313,  4316,  4317,
    4319,  4320,  4322,  4323,  4326,  4327,  4329,  4330,  4337,  4346,
    4353,  4362,  4369,  4378,  4382,  4385,  4387,  4388,  4393,  4400,
    4404,  4407,  4412,  4416,  4422,  4424,  4425,  4427,  4429,  4430,
    4432,  4434,  4436,  4438,  4440,  4442,  4444,  4446,  4448,  4450,
    4452,  4454,  4456,  4458,  4460,  4462,  4464,  4466,  4468,  4470,
    4472,  4474,  4476,  4478,  4480,  4482,  4484,  4486,  4488,  4490,
    4492,  4494,  4496,  4498,  4500,  4502,  4506,  4508,  4510,  4512,
    4514,  4516,  4518,  4521,  4523,  4525,  4528,  4532,  4536,  4540,
    4542,  4546,  4550,  4553,  4557,  4561,  4565,  4569,  4571,  4573,
    4575,  4577,  4581,  4587,  4589,  4591,  4593,  4595,  4599,  4602,
    4605,  4609,  4611,  4613,  4618,  4625,  4631,  4636,  4643,  4645,
    4647,  4649,  4651,  4653,  4655,  4656,  4658,  4662,  4664,  4665,
    4673,  4677,  4679,  4682,  4686,  4689,  4690,  4693,  4694,  4697,
    4702,  4708,  4712,  4718,  4720,  4721,  4724,  4725,  4728,  4730,
    4732,  4734,  4737,  4741,  4744,  4747,  4750,  4753,  4757,  4762,
    4766,  4768,  4770,  4772,  4774,  4775,  4777,  4781,  4783,  4787,
    4790,  4800,  4813,  4825,  4838,  4853,  4857,  4862,  4867,  4868,
    4876,  4887,  4897,  4900,  4904,  4905,  4910,  4912,  4914,  4916,
    4918,  4920,  4922,  4924,  4926,  4928,  4930,  4932,  4934,  4936,
    4938,  4940,  4942,  4944,  4946,  4948,  4950,  4952,  4954,  4956,
    4958,  4960,  4962,  4964,  4966,  4968,  4970,  4972,  4974,  4976,
    4978,  4980,  4982,  4984,  4986,  4988,  4990,  4992,  4994,  4996,
    4998,  5000,  5002,  5004,  5006,  5008,  5010,  5012,  5014,  5016,
    5018,  5020,  5022,  5024,  5026,  5028,  5030,  5032,  5034,  5036,
    5038,  5040,  5042,  5044,  5046,  5048,  5050,  5052,  5054,  5056,
    5058,  5060,  5062,  5064,  5066,  5068,  5070,  5072,  5074,  5076,
    5078,  5080,  5082,  5084,  5086,  5088,  5090,  5092,  5094,  5096,
    5098,  5100,  5102,  5104,  5106,  5108,  5110,  5112,  5114,  5116,
    5118,  5120,  5122,  5124,  5126,  5128,  5130,  5132,  5134,  5136,
    5138,  5140,  5142,  5144,  5146,  5148,  5150,  5152,  5154,  5156,
    5158,  5160,  5162,  5164,  5166,  5168,  5170,  5172,  5174,  5176,
    5178,  5180,  5182,  5184,  5186,  5188,  5190,  5192,  5194,  5196,
    5198,  5200,  5202,  5204,  5206,  5208,  5210,  5212,  5214,  5216,
    5218,  5220,  5222,  5224,  5226,  5228,  5230,  5232,  5234,  5236,
    5238,  5240,  5242,  5244,  5246,  5248,  5250,  5252,  5254,  5256,
    5258,  5260,  5262,  5264,  5266,  5268,  5270,  5272,  5274,  5276,
    5278,  5280,  5282,  5284,  5286,  5288,  5290,  5292,  5294,  5296,
    5298,  5300,  5302,  5304,  5306,  5308,  5310,  5312,  5314,  5316,
    5318,  5320,  5322,  5324,  5326,  5328,  5330,  5332,  5334,  5336,
    5338,  5340,  5342,  5344,  5346,  5348,  5350,  5352,  5354,  5356,
    5358,  5360,  5362,  5364,  5366,  5368,  5370,  5372,  5374,  5376,
    5378,  5380,  5382,  5384,  5386,  5388,  5390,  5392,  5394,  5396,
    5398,  5400,  5402,  5404,  5406,  5408,  5410,  5412,  5414,  5416,
    5418,  5420,  5422,  5424,  5426,  5428,  5430,  5432,  5434,  5436,
    5438,  5440,  5442,  5444,  5446,  5448,  5450,  5452,  5454,  5456,
    5458,  5460,  5462,  5464,  5466,  5468,  5470,  5472,  5474,  5476,
    5478,  5480,  5482,  5484,  5486,  5488,  5490,  5492,  5494,  5496,
    5498,  5500,  5502,  5504,  5506,  5508,  5510,  5512,  5514,  5516,
    5518,  5520,  5522,  5524,  5526,  5528,  5530,  5532,  5534,  5536,
    5538,  5540,  5542,  5544,  5546,  5548,  5550,  5552,  5554,  5556,
    5558,  5560,  5562,  5564,  5566,  5568,  5570,  5572,  5574,  5576,
    5578,  5580,  5582,  5584,  5586,  5588,  5590,  5592,  5594,  5596,
    5598,  5600,  5602,  5604,  5606,  5608,  5610,  5612,  5614,  5616,
    5618,  5620,  5622,  5624,  5626,  5628,  5630,  5632,  5634,  5636,
    5638,  5640,  5642,  5644,  5646,  5648,  5650,  5652,  5654,  5656,
    5658,  5660,  5662,  5664,  5666,  5668,  5670,  5672,  5674,  5676,
    5678,  5680,  5682,  5684,  5686,  5688,  5690,  5692,  5694,  5696,
    5698,  5700,  5702,  5704,  5706,  5708,  5710,  5712,  5714,  5716,
    5718,  5720,  5722,  5724,  5726,  5728,  5730,  5732,  5734,  5736,
    5738,  5740,  5742,  5744,  5746,  5748,  5750,  5752,  5754,  5756,
    5758,  5760,  5762,  5764,  5766,  5768,  5770,  5772,  5774,  5776,
    5778,  5780,  5782,  5784,  5786,  5788,  5790,  5792,  5794,  5796,
    5798,  5800,  5802,  5804,  5806,  5808,  5810,  5812,  5814,  5816,
    5818,  5820,  5822,  5824,  5826,  5828,  5830,  5832,  5834,  5836,
    5838,  5840,  5842,  5844,  5846,  5848,  5850,  5852,  5854,  5856,
    5858,  5860,  5862,  5864,  5866,  5868,  5870,  5872,  5874,  5876,
    5878,  5880,  5882,  5884,  5886,  5888,  5890,  5892,  5894,  5896,
    5898,  5900,  5902,  5904,  5906,  5908,  5910,  5912,  5914,  5916,
    5918,  5920,  5922,  5924,  5926,  5928,  5930,  5932,  5934,  5936,
    5938,  5940,  5942,  5944,  5946,  5948,  5950,  5952,  5954,  5956,
    5958,  5960,  5962,  5964,  5966,  5968,  5970,  5972,  5974,  5976,
    5978,  5980,  5982,  5984,  5986,  5988,  5990,  5992,  5994,  5996,
    5998,  6000,  6002,  6004,  6006,  6008,  6010,  6012,  6014,  6016,
    6018,  6020,  6022,  6024,  6026,  6028,  6030,  6032,  6034,  6036,
    6038,  6040,  6042,  6044,  6046,  6048,  6050,  6052,  6054,  6056,
    6058,  6060,  6062,  6064,  6066,  6068,  6070,  6072,  6074,  6076,
    6078,  6080,  6082,  6084,  6086,  6088,  6090,  6092,  6094,  6096,
    6098,  6100,  6102,  6104,  6106,  6108,  6110,  6112,  6114,  6116,
    6118
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     512,     0,    -1,   513,    -1,   513,   503,   514,    -1,   514,
      -1,   892,    -1,   560,    -1,   515,    -1,   925,    -1,   926,
      -1,   938,    -1,   893,    -1,   629,    -1,   941,    -1,   554,
      -1,   625,    -1,   882,    -1,   556,    -1,   570,    -1,   550,
      -1,   526,    -1,   921,    -1,   927,    -1,   618,    -1,   558,
      -1,   897,    -1,   895,    -1,   896,    -1,   885,    -1,   529,
      -1,   914,    -1,   553,    -1,   879,    -1,   527,    -1,   646,
      -1,   567,    -1,   628,    -1,   569,    -1,   916,    -1,   930,
      -1,   908,    -1,   933,    -1,   939,    -1,    -1,    32,   405,
     732,   523,    -1,    32,   405,   186,   148,   732,   523,    -1,
      32,   197,   857,   523,    -1,    32,   197,   186,   148,   857,
     523,    -1,    32,   370,   857,   523,    -1,    32,   370,   186,
     148,   857,   523,    -1,    32,   454,   857,   523,    -1,    32,
     454,   186,   148,   857,   523,    -1,   518,    -1,   516,   518,
      -1,   375,   113,   775,    -1,   133,   113,    -1,   347,    -1,
     347,   562,   563,    -1,   375,   564,    -1,   375,   171,   617,
      -1,   522,    -1,   519,   504,   522,    -1,    26,   597,    -1,
      26,   186,   267,   148,   597,    -1,    26,    80,   597,    -1,
      26,    80,   186,   267,   148,   597,    -1,    32,   528,   867,
     517,    -1,    32,   528,   867,   133,   267,   272,    -1,    32,
     528,   867,   375,   267,   272,    -1,    32,   528,   867,   375,
     391,   566,    -1,    32,   528,   867,   375,   585,    -1,    32,
     528,   867,   345,   585,    -1,    32,   528,   867,   375,   394,
     867,    -1,    32,   528,   867,    26,   171,   617,    40,   185,
     573,    -1,    32,   528,   867,   516,    -1,    32,   528,   867,
     133,   185,    -1,    32,   528,   867,   133,   185,   186,   148,
      -1,   133,   528,   186,   148,   867,   622,    -1,   133,   528,
     867,   622,    -1,    32,   528,   867,   525,   427,   745,   741,
     521,    -1,    32,   528,   867,   524,    -1,    26,   587,    -1,
      32,    91,   861,   571,    -1,   445,    91,   861,    -1,   133,
      91,   186,   148,   861,   622,    -1,   133,    91,   861,   622,
      -1,   375,   239,    -1,   375,   436,    -1,   375,   585,    -1,
     345,   585,    -1,   524,    -1,   442,   775,    -1,    -1,   581,
      -1,   375,   581,    -1,    26,   581,    -1,   133,   595,    -1,
     520,    -1,   523,   504,   520,    -1,   286,   500,   519,   501,
      -1,   375,   105,    -1,   375,    -1,    -1,   109,   861,    -1,
     109,   316,   861,    -1,   109,    30,    -1,   109,   316,    30,
      -1,    32,   361,   861,   341,   416,   861,    -1,    32,   405,
     732,   341,   416,   861,    -1,    32,   405,   186,   148,   732,
     341,   416,   861,    -1,    32,   370,   857,   341,   416,   861,
      -1,    32,   370,   186,   148,   857,   341,   416,   861,    -1,
      32,   454,   857,   341,   416,   861,    -1,    32,   454,   186,
     148,   857,   341,   416,   861,    -1,    32,   197,   857,   341,
     416,   861,    -1,    32,   197,   186,   148,   857,   341,   416,
     861,    -1,    32,   405,   732,   341,   528,   861,   416,   861,
      -1,    32,   405,   186,   148,   732,   341,   528,   861,   416,
     861,    -1,    32,   405,   732,   341,    91,   861,   416,   861,
      -1,    32,   405,   186,   148,   732,   341,    91,   861,   416,
     861,    -1,    80,    -1,    -1,   534,   207,   537,   214,   531,
     532,   530,   538,   540,    -1,   646,    -1,   295,   541,   447,
     646,    -1,   500,   545,   501,   646,    -1,   500,   545,   501,
     295,   541,   447,   646,    -1,   113,   448,    -1,   857,    -1,
     857,    40,   867,    -1,    59,   258,    -1,    59,   311,    -1,
      -1,   500,   548,   501,   738,    -1,   282,    91,   861,    -1,
      -1,   658,    -1,    -1,   867,   841,    -1,   549,   489,   775,
      -1,   500,   542,   501,   489,   775,    -1,   287,   343,    -1,
     287,   187,    -1,    -1,   282,    89,   533,   129,   439,   375,
     547,   738,    -1,   282,    89,   533,   129,   268,    -1,    -1,
     867,   543,   544,   673,   674,    -1,   782,   543,   544,   673,
     674,    -1,   500,   775,   501,   543,   544,   673,   674,    -1,
     349,   847,    -1,    -1,   441,    -1,   404,    -1,   549,    -1,
     542,   504,   549,    -1,    78,   872,    -1,    -1,   872,    -1,
      -1,   535,    -1,   545,   504,   535,    -1,   536,    -1,   546,
     504,   536,    -1,   546,    -1,   546,   504,    -1,   539,    -1,
     548,   504,   539,    -1,   867,   841,    -1,    98,   427,   857,
      40,   140,   647,    -1,    98,   427,   857,    40,   140,   500,
     551,   501,    -1,    98,   427,   857,    40,   745,    -1,   552,
      -1,    -1,   866,    -1,   552,   504,   866,    -1,   313,   867,
      -1,   313,   867,   489,   913,    -1,   313,   867,   500,   819,
     501,    -1,    98,   106,   857,    -1,    98,   555,   106,   857,
      -1,    98,   106,   186,   267,   148,   857,    -1,    98,   287,
     343,   106,   857,    -1,    98,   106,   857,   167,   866,    -1,
      98,   106,   186,   267,   148,   857,   167,   866,    -1,    98,
     287,   343,   106,   857,   167,   866,    -1,   866,    -1,    98,
     616,   370,   857,   557,    -1,    98,   616,   370,   186,   267,
     148,   857,   557,    -1,    98,   287,   343,   616,   370,   857,
     557,    -1,   561,    -1,    -1,   147,   861,   559,    -1,    98,
     616,   405,   943,    40,   147,   861,   559,   942,    -1,    98,
     616,   405,   186,   267,   148,   943,    40,   147,   861,   559,
     942,    -1,   500,   817,   501,    -1,    -1,    32,   370,   857,
     561,    -1,    32,   370,   186,   148,   857,   561,    -1,   564,
      -1,   561,   564,    -1,   462,    -1,   486,    -1,    -1,     4,
      -1,   491,     4,    -1,   492,     4,    -1,   566,    -1,    40,
     747,    -1,    60,   563,    -1,   104,    -1,   265,   104,    -1,
     196,   565,   563,    -1,   245,   563,    -1,   253,   563,    -1,
     265,   245,    -1,   265,   253,    -1,   296,    59,   872,    -1,
     370,   258,   872,    -1,   389,   562,   563,    -1,   347,    -1,
     347,   562,   563,    -1,    59,    -1,    -1,   865,    -1,   491,
     865,    -1,   492,   865,    -1,    22,   568,    -1,    52,   568,
      -1,   389,   568,    -1,    84,   568,    -1,   139,   568,    -1,
     354,   568,    -1,   465,    -1,   418,    -1,    -1,   440,   857,
      -1,    98,   616,   405,   857,   500,   603,   501,   592,   584,
      -1,    98,   616,   405,   186,   267,   148,   857,   500,   603,
     501,   592,   584,    -1,    98,   287,   343,   616,   405,   857,
     500,   603,   501,   592,   584,    -1,    -1,   571,   596,    -1,
     611,    -1,   950,    -1,   811,    -1,   563,    -1,   866,    -1,
     266,    -1,   500,   561,   501,    -1,    -1,   866,    -1,   265,
      25,    -1,   348,    -1,    63,    -1,   375,   272,    -1,   375,
     113,    -1,    91,   861,   577,    -1,   577,    -1,   591,    -1,
      78,   872,    -1,   267,   272,    -1,   272,    -1,   433,   602,
      -1,   319,   221,   602,    -1,    72,   500,   775,   501,   586,
      -1,   442,    86,   861,    -1,   113,   776,    -1,   335,   857,
     605,   614,   583,    -1,   456,    -1,   395,    -1,   578,    -1,
      -1,   171,   617,    40,   185,   573,    -1,   171,   617,    40,
     500,   775,   501,   579,    -1,    40,   500,   775,   501,   579,
      -1,   595,   574,    -1,   282,   439,   575,    -1,   582,    -1,
     607,    -1,   582,   607,    -1,   607,   582,    -1,    -1,   282,
      84,   133,    -1,   282,    84,   118,   357,    -1,   282,    84,
     318,   357,    -1,    -1,   500,   589,   501,    -1,   265,   199,
      -1,    -1,    91,   861,   612,    -1,   612,    -1,    83,    -1,
      92,    -1,   114,    -1,   185,    -1,   198,    -1,   391,    -1,
     394,    -1,    30,    -1,   608,    -1,   589,   504,   608,    -1,
     442,   197,   599,    -1,   115,    -1,   267,   115,    -1,   201,
     116,    -1,   201,   189,    -1,   462,   585,    -1,   462,   280,
      -1,   464,   280,    -1,    -1,   500,   598,   501,    -1,   594,
     195,   588,    -1,   594,   145,   588,    -1,    -1,   876,    -1,
     267,   115,    -1,   115,    -1,   201,   189,    -1,   201,   116,
      -1,   267,   444,    -1,   265,   199,    -1,   867,   745,   606,
      -1,   867,   744,   580,   606,    -1,   601,    -1,   598,   504,
     601,    -1,   867,    -1,   597,    -1,   615,    -1,   587,    -1,
     876,   489,   572,    -1,   876,    -1,   462,   593,    -1,    -1,
     613,    -1,   613,   504,    -1,    -1,   867,    -1,   500,   609,
     501,    -1,    -1,   606,   576,    -1,    -1,   282,   118,   575,
      -1,   876,   489,   572,    -1,   876,    -1,   876,   502,   876,
     489,   572,    -1,   876,   502,   876,    -1,   604,    -1,   609,
     504,   604,    -1,   609,    -1,   609,   504,    -1,   745,    -1,
     869,   873,   495,   427,    -1,   376,   869,   873,   495,   427,
      -1,    72,   500,   775,   501,   571,    -1,   433,   500,   610,
     501,   602,   571,    -1,   433,   590,   571,    -1,   319,   221,
     500,   610,   501,   602,   571,    -1,   319,   221,   590,   571,
      -1,   164,   221,   500,   610,   501,   335,   857,   605,   614,
     583,   571,    -1,   600,    -1,   613,   504,   600,    -1,   243,
     168,    -1,   243,   300,    -1,   243,   381,    -1,    -1,   231,
     857,   594,    -1,   411,    -1,   409,    -1,   235,   411,    -1,
     235,   409,    -1,   173,   411,    -1,   173,   409,    -1,   436,
      -1,    -1,    33,    -1,    59,   113,    -1,   133,   619,   186,
     148,   621,   622,    -1,   133,   619,   621,   622,    -1,   133,
     620,   186,   148,   858,   622,    -1,   133,   620,   858,   622,
      -1,   133,   623,   861,   282,   872,   622,    -1,   133,   623,
     186,   148,   861,   282,   872,   622,    -1,   133,   427,   624,
     622,    -1,   133,   427,   186,   148,   624,   622,    -1,   405,
      -1,   106,    -1,   370,    -1,   169,    -1,   240,    -1,   240,
     405,    -1,   454,    -1,   244,   454,    -1,   197,    -1,   164,
     405,    -1,    79,    -1,    95,    -1,   361,    -1,   391,    -1,
     412,   364,   299,    -1,   412,   364,   125,    -1,   412,   364,
     410,    -1,   412,   364,    88,    -1,    24,   246,    -1,   142,
     421,    -1,   152,    -1,   164,   105,   466,    -1,   325,    -1,
     373,    -1,   872,    -1,   621,   504,   872,    -1,    63,    -1,
     348,    -1,    -1,   310,    -1,   358,    -1,   421,    -1,   745,
      -1,   624,   504,   745,    -1,    98,   616,   626,   857,   627,
      40,   405,   646,    -1,    98,   616,   626,   186,   267,   148,
     857,   627,    40,   405,   646,    -1,    98,   287,   343,   616,
     626,   857,   627,    40,   405,   646,    -1,    98,   616,   626,
     857,   627,    40,   775,    -1,    98,   616,   626,   186,   267,
     148,   857,   627,    40,   775,    -1,    98,   287,   343,   616,
     626,   857,   627,    40,   775,    -1,   169,    -1,   240,    -1,
     500,   501,    -1,   500,   819,   501,    -1,   534,   439,   922,
     375,   547,   712,   923,   540,    -1,    96,   641,   857,   605,
     639,   630,   635,   644,   631,   562,   636,    -1,    96,   500,
     646,   501,   416,   635,   644,   562,   636,    -1,   167,    -1,
     416,    -1,   633,   120,   866,    -1,    -1,   643,    -1,   632,
     504,   643,    -1,   442,    -1,    -1,    40,    -1,    -1,   324,
      -1,    -1,   640,    -1,   500,   645,   501,    -1,   905,    -1,
     563,    -1,   493,    -1,   500,   632,   501,    -1,    -1,   876,
     637,    -1,   462,   280,    -1,    -1,   640,   642,    -1,    -1,
      55,    -1,    -1,    55,    -1,   280,    -1,   166,    -1,   119,
     634,   866,    -1,   272,   634,   866,    -1,   100,    -1,   181,
      -1,   327,   634,   866,    -1,   141,   634,   866,    -1,   163,
     327,   609,    -1,   163,   327,   493,    -1,   301,    59,   609,
      -1,   301,    59,   493,    -1,   163,   267,   272,   609,    -1,
     163,   272,   609,    -1,   137,   866,    -1,   905,    -1,   866,
      -1,   392,    -1,   393,    -1,   638,    -1,   645,   504,   638,
      -1,   648,    -1,   647,    -1,   500,   648,   501,    -1,   500,
     647,   501,    -1,   651,    -1,   649,   670,    -1,   649,   669,
     703,   676,    -1,   649,   669,   675,   704,    -1,   658,   649,
      -1,   658,   649,   670,    -1,   658,   649,   669,   703,   676,
      -1,   658,   649,   669,   675,   704,    -1,   651,    -1,   647,
      -1,   368,   667,   846,    -1,    -1,   368,   667,   846,   661,
     712,   738,   692,   701,   788,   702,   680,    -1,   368,   666,
     848,   661,   712,   738,   692,   701,   788,   702,   680,    -1,
     167,   713,   650,   661,   738,   692,   701,   788,   702,   680,
      -1,   167,   713,   368,   666,   848,   661,   738,   692,   701,
     788,   702,   680,    -1,   711,    -1,   405,   732,    -1,   649,
     432,   664,   665,   649,    -1,   649,   432,   664,   649,    -1,
     649,   212,   664,   649,    -1,   649,   143,   664,   649,    -1,
     653,   715,   442,   848,    -1,   653,   715,   442,   848,   176,
      59,   860,    -1,   653,   715,   176,    59,   860,    -1,   653,
     715,   282,   657,    -1,   653,   715,   282,   657,   176,    59,
     860,    -1,   653,   715,   282,   657,   442,   848,    -1,   653,
     715,   282,   657,   442,   848,   176,    59,   860,    -1,   654,
     715,   282,   848,   214,   258,   861,   652,   860,    -1,   654,
     715,   282,   848,    -1,   447,    -1,   448,    -1,   305,    -1,
     307,    -1,   437,    -1,   306,    -1,   776,    -1,   776,   193,
     500,   648,   501,    -1,   718,    -1,   655,    -1,   656,   504,
     655,    -1,   656,    -1,   656,   504,    -1,   462,   659,    -1,
     486,   659,    -1,   462,   333,   659,    -1,   660,    -1,   659,
     504,   660,    -1,   861,   874,    40,   500,   881,   501,    -1,
     214,   662,    -1,    -1,   411,   663,   857,    -1,   409,   663,
     857,    -1,   235,   411,   663,   857,    -1,   235,   409,   663,
     857,    -1,   173,   411,   663,   857,    -1,   173,   409,   663,
     857,    -1,   436,   663,   857,    -1,   405,   857,    -1,   857,
      -1,   405,    -1,    -1,    30,    -1,   128,    -1,    -1,    59,
     258,    -1,   128,    -1,   128,   282,   500,   817,   501,    -1,
      30,    -1,    -1,   187,   274,    -1,   346,   274,    -1,    -1,
     670,    -1,    -1,   288,    59,   671,    -1,   288,    59,    30,
     673,   674,    -1,   672,    -1,   671,   504,   672,    -1,   775,
     442,   811,   674,    -1,   775,   673,   674,    -1,    41,    -1,
     122,    -1,    -1,   485,   159,    -1,   485,   225,    -1,    -1,
     677,   678,    -1,   678,   677,    -1,   677,    -1,   678,    -1,
     675,    -1,    -1,   232,   686,    -1,   232,   686,   504,   687,
      -1,   157,   691,   688,   690,   283,    -1,   157,   691,   690,
     283,    -1,   279,   687,    -1,   279,   688,   690,    -1,     4,
     495,    -1,     9,   495,    -1,     4,   304,    -1,     9,   304,
      -1,     9,    -1,     9,   357,    -1,   442,   359,   682,    -1,
      -1,   867,    -1,    -1,   681,   500,   679,   501,   685,    -1,
     679,    -1,   679,   500,   867,   501,    -1,   679,   500,   867,
     504,     9,   501,    -1,   407,   682,    -1,   683,    -1,    -1,
     342,   500,     9,   501,    -1,    -1,   775,    -1,    30,    -1,
     775,   495,    -1,     4,   304,    -1,     9,   304,    -1,   775,
      -1,   777,    -1,   491,   689,    -1,   492,   689,    -1,   865,
      -1,     4,    -1,   356,    -1,   357,    -1,   159,    -1,   264,
      -1,   176,    59,   694,    -1,   176,    59,    30,    -1,    -1,
     695,    -1,   693,   504,   695,    -1,   693,    -1,   693,   504,
      -1,   775,    -1,   696,    -1,   698,    -1,   697,    -1,   699,
      -1,   500,   501,    -1,   355,   500,   817,   501,    -1,   101,
     500,   817,   501,    -1,   177,   377,   500,   694,   501,    -1,
     177,    -1,   178,    -1,   180,   775,    -1,    -1,   326,   775,
      -1,    -1,   705,    -1,   162,   329,   283,    -1,   703,    -1,
      -1,   706,    -1,   705,   706,    -1,   707,   708,   709,    -1,
     162,   439,    -1,   162,   265,   221,   439,    -1,   162,   378,
      -1,   162,   221,   378,    -1,   277,   856,    -1,    -1,   271,
      -1,   382,   238,    -1,    -1,   448,   500,   817,   501,    -1,
     710,   504,   500,   817,   501,    -1,   710,    -1,   710,   504,
      -1,   167,   714,    -1,    -1,   715,    -1,   713,   504,   715,
      -1,   713,    -1,   713,   504,    -1,   732,   727,   684,    -1,
     733,   728,   684,    -1,   711,   726,   684,    -1,   226,   733,
     728,    -1,   647,   727,   684,    -1,   226,   647,   727,    -1,
     725,    -1,   500,   725,   501,   726,    -1,   715,   305,   500,
     848,   162,   721,   716,   501,   727,    -1,   715,   437,   717,
     500,   722,   162,   724,   501,   727,    -1,   176,    59,   859,
      -1,    -1,   194,   274,    -1,   144,   274,    -1,    -1,   776,
     193,   500,   848,   501,    -1,   776,   193,   868,    -1,   778,
      -1,   500,   815,   501,    -1,   719,   193,   500,   848,   501,
      -1,   719,   193,   868,    -1,   720,    -1,   721,   720,    -1,
     868,    -1,   500,   859,   501,    -1,   722,   193,   500,   848,
     501,    -1,   723,    -1,   724,   723,    -1,   500,   725,   501,
      -1,   715,    99,   219,   715,    -1,   715,   729,   219,   715,
     731,    -1,   715,   219,   715,   731,    -1,   715,   261,   729,
     219,   715,    -1,   715,   261,   219,   715,    -1,   715,    42,
     729,   219,   715,   731,    -1,   715,    42,   219,   715,   731,
      -1,   715,   312,   219,   715,    -1,   715,    37,   219,   715,
     731,    -1,   715,   369,   219,   715,   731,    -1,    40,   868,
     500,   859,   501,    -1,    40,   868,    -1,   867,   500,   859,
     501,    -1,   867,    -1,   726,    -1,    -1,   726,    -1,    40,
     500,   739,   501,    -1,    40,   868,   500,   739,   501,    -1,
     867,   500,   739,   501,    -1,    -1,   168,   730,    -1,   229,
     730,    -1,   352,   730,    -1,   369,    -1,    37,    -1,   203,
      -1,   291,    -1,    -1,   442,   500,   859,   501,    -1,   282,
     775,    -1,   857,    -1,   857,   493,    -1,   283,   857,    -1,
     283,   500,   857,   501,    -1,   782,   737,    -1,   357,   167,
     500,   735,   501,   737,    -1,   782,   736,    -1,   734,    -1,
     735,   504,   734,    -1,    40,   500,   739,   501,    -1,    -1,
     486,   289,    -1,    -1,   459,   775,    -1,    -1,   740,    -1,
     739,   504,   740,    -1,   868,   745,   741,    -1,    78,   872,
      -1,    -1,   867,   745,    -1,   742,   504,   867,   745,    -1,
     356,    -1,   398,    -1,   745,    -1,    -1,   747,   746,    -1,
     376,   747,   746,    -1,   747,    39,   498,   865,   499,    -1,
     376,   747,    39,   498,   865,   499,    -1,   747,    39,    -1,
     376,   747,    39,    -1,   743,   500,   742,   501,   746,    -1,
     241,   500,   821,   501,   746,    -1,   432,   500,   742,   501,
     746,    -1,   746,   498,   499,    -1,   746,   498,   865,   499,
      -1,    -1,   749,    -1,   751,    -1,   753,    -1,   757,    -1,
     763,    -1,   764,   774,    -1,   764,   500,   865,   501,    -1,
     751,    -1,   754,    -1,   758,    -1,   763,    -1,   871,   750,
      -1,   500,   818,   501,    -1,    -1,   210,    -1,   211,    -1,
     383,    -1,    54,    -1,   330,    -1,   160,   752,    -1,   132,
     315,    -1,   111,   750,    -1,   110,   750,    -1,   275,   750,
      -1,    57,    -1,   500,   865,   501,    -1,    -1,   755,    -1,
     756,    -1,   755,    -1,   756,    -1,    56,   762,   500,   817,
     501,    -1,    56,   762,    -1,   759,    -1,   760,    -1,   759,
      -1,   760,    -1,   761,   500,   865,   501,    -1,   761,    -1,
      70,   762,    -1,    69,   762,    -1,   449,    -1,   260,    70,
     762,    -1,   260,    69,   762,    -1,   262,   762,    -1,   451,
      -1,    -1,   415,   500,   865,   501,   765,    -1,   415,   765,
      -1,   414,   500,   865,   501,   765,    -1,   414,   765,    -1,
     213,    -1,   486,   414,   483,    -1,   464,   414,   483,    -1,
      -1,   480,    -1,   481,    -1,   255,    -1,   256,    -1,   107,
      -1,   108,    -1,   183,    -1,   184,    -1,   251,    -1,   252,
      -1,   365,    -1,   366,    -1,   249,    -1,   250,    -1,   247,
      -1,   248,    -1,   766,    -1,   767,    -1,   768,    -1,   769,
      -1,   770,    -1,   771,    -1,   772,    -1,   773,    -1,   766,
     416,   767,    -1,   768,   416,   769,    -1,   768,   416,   770,
      -1,   768,   416,   771,    -1,   769,   416,   770,    -1,   769,
     416,   771,    -1,   770,   416,   771,    -1,    -1,   777,    -1,
     775,    11,   745,    -1,   775,    78,   872,    -1,   775,    46,
     414,   483,   775,    -1,   491,   775,    -1,   492,   775,    -1,
     775,   491,   775,    -1,   775,   492,   775,    -1,   775,   493,
     775,    -1,   775,   494,   775,    -1,   775,    15,   775,    -1,
     775,   495,   775,    -1,   775,   496,   775,    -1,   775,    16,
     775,    -1,   775,   487,   775,    -1,   775,   488,   775,    -1,
     775,   489,   775,    -1,   775,    19,   775,    -1,   775,    20,
     775,    -1,   775,    21,   775,    -1,   775,   810,   775,    -1,
     810,   775,    -1,   775,   810,    -1,   775,    36,   775,    -1,
     775,   287,   775,    -1,   267,   775,    -1,   484,   775,    -1,
     775,   172,   775,    -1,   775,   231,   775,    -1,   775,   231,
     775,   141,   775,    -1,   775,   484,   231,   775,    -1,   775,
     484,   231,   775,   141,   775,    -1,   775,   188,   775,    -1,
     775,   188,   775,   141,   775,    -1,   775,   484,   188,   775,
      -1,   775,   484,   188,   775,   141,   775,    -1,   775,   380,
     416,   775,    -1,   775,   380,   416,   775,   141,   775,    -1,
     775,   484,   380,   416,   775,    -1,   775,   484,   380,   416,
     775,   141,   775,    -1,   775,   216,   272,    -1,   775,   217,
      -1,   775,   216,   267,   272,    -1,   775,   267,   272,    -1,
     775,   270,    -1,   775,    17,   775,    -1,   775,    18,   775,
      -1,   799,   293,   799,    -1,   775,   216,   423,    -1,   775,
     216,   267,   423,    -1,   775,   216,   155,    -1,   775,   216,
     267,   155,    -1,   775,   216,   434,    -1,   775,   216,   267,
     434,    -1,   775,   216,   128,   167,   775,    -1,   775,   216,
     267,   128,   167,   775,    -1,   775,   216,   277,   500,   821,
     501,    -1,   775,   216,   267,   277,   500,   821,   501,    -1,
     775,    53,   845,   776,    36,   775,    -1,   775,   484,    53,
     845,   776,    36,   775,    -1,   775,    53,   402,   776,    36,
     775,    -1,   775,   484,    53,   402,   776,    36,   775,    -1,
     775,   193,   831,    -1,   775,   484,   193,   831,    -1,   775,
     812,   807,   647,    -1,   775,   812,   807,   500,   775,   501,
      -1,   113,    -1,    81,   500,   775,   501,    -1,   493,   851,
     855,    -1,   867,   502,   493,   851,   855,    -1,   777,    -1,
     776,    11,   745,    -1,   491,   776,    -1,   492,   776,    -1,
     776,   491,   776,    -1,   776,   492,   776,    -1,   776,   493,
     776,    -1,   776,   494,   776,    -1,   776,    15,   776,    -1,
     776,   495,   776,    -1,   776,   496,   776,    -1,   776,    16,
     776,    -1,   776,   487,   776,    -1,   776,   488,   776,    -1,
     776,   489,   776,    -1,   776,    19,   776,    -1,   776,    20,
     776,    -1,   776,    21,   776,    -1,   776,   810,   776,    -1,
     810,   776,    -1,   776,   810,    -1,   776,   216,   128,   167,
     776,    -1,   776,   216,   267,   128,   167,   776,    -1,   776,
     216,   277,   500,   821,   501,    -1,   776,   216,   267,   277,
     500,   821,   501,    -1,   778,    -1,   799,    -1,   779,   844,
      -1,   837,    -1,   864,    -1,   505,     9,    -1,   506,   878,
      -1,   498,   818,   499,    -1,   784,    -1,    39,   647,    -1,
      39,   498,   818,   499,    -1,   832,    -1,   647,    -1,   647,
     840,    -1,   148,   647,    -1,   700,   500,   817,   501,    -1,
     507,    -1,    10,    -1,   500,   775,   501,    -1,   508,   802,
     509,    -1,   241,   508,   806,   509,    -1,   781,    -1,   863,
     500,   501,    -1,   863,   500,   819,   669,   668,   501,    -1,
     863,   500,   450,   820,   669,   668,   501,    -1,   863,   500,
     819,   504,   450,   820,   669,   668,   501,    -1,   863,   500,
      30,   819,   669,   668,   501,    -1,   863,   500,   128,   819,
     669,   668,   501,    -1,   780,   785,   786,   787,   791,    -1,
     783,    -1,   780,    -1,   783,    -1,    79,   162,   500,   775,
     501,    -1,    66,   500,   775,    40,   745,   501,    -1,   426,
     500,   775,    40,   745,   501,    -1,   154,   500,   822,   501,
      -1,   294,   500,   824,   501,    -1,   311,   500,   826,   501,
      -1,   400,   500,   827,   501,    -1,   420,   500,   775,    40,
     745,   501,    -1,   422,   500,    58,   830,   501,    -1,   422,
     500,   227,   830,   501,    -1,   422,   500,   417,   830,   501,
      -1,   422,   500,   830,   501,    -1,   273,   500,   775,   504,
     775,   501,    -1,    77,   500,   817,   501,    -1,   498,   775,
     162,   867,   193,   775,   499,    -1,   498,   775,   162,   867,
     193,   777,   186,   775,   499,    -1,   463,   176,   500,   670,
     501,    -1,    -1,   158,   500,   459,   775,   501,    -1,   158,
     500,   775,   501,    -1,    -1,   151,    -1,    -1,   461,   789,
      -1,    -1,   790,    -1,   789,   504,   790,    -1,   867,    40,
     792,    -1,   292,   792,    -1,   292,   867,    -1,    -1,   500,
     793,   794,   669,   795,   501,    -1,   867,    -1,    -1,   301,
      59,   816,    -1,    -1,   328,   796,    -1,   357,   796,    -1,
      -1,   797,    -1,    53,   797,    36,   797,    -1,   429,   314,
      -1,   429,   161,    -1,   102,   356,    -1,   775,   314,    -1,
     775,   161,    -1,   356,   500,   817,   501,    -1,   356,   500,
     501,    -1,   798,    -1,   500,   816,   504,   775,   501,    -1,
     868,   510,   775,    -1,   800,    -1,   801,   504,   800,    -1,
     801,    -1,   801,   504,    -1,   775,   510,   775,    -1,   803,
      -1,   804,   504,   803,    -1,   804,    -1,   804,   504,    -1,
     805,    -1,    -1,    38,    -1,   385,    -1,    30,    -1,     8,
      -1,   809,    -1,   491,    -1,   492,    -1,   493,    -1,   494,
      -1,    15,    -1,   495,    -1,   496,    -1,    16,    -1,   487,
      -1,   488,    -1,   489,    -1,    19,    -1,    20,    -1,    21,
      -1,     8,    -1,   284,   500,   813,   501,    -1,   808,    -1,
     284,   500,   813,   501,    -1,   808,    -1,   284,   500,   813,
     501,    -1,   231,    -1,   484,   231,    -1,   172,    -1,   484,
     172,    -1,   188,    -1,   484,   188,    -1,   808,    -1,   867,
     502,   813,    -1,   777,    -1,   814,   504,   777,    -1,   814,
      -1,   814,   504,    -1,   775,    -1,   816,   504,   775,    -1,
     816,    -1,   816,   504,    -1,   817,    -1,    -1,   820,    -1,
     819,   504,   820,    -1,   775,    -1,   875,    13,   775,    -1,
     875,    14,   775,    -1,   745,    -1,   821,   504,   745,    -1,
     823,   167,   775,    -1,    -1,     3,    -1,   766,    -1,   767,
      -1,   768,    -1,   769,    -1,   770,    -1,   771,    -1,   772,
      -1,   773,    -1,   866,    -1,   775,   825,   828,   829,    -1,
     775,   825,   828,    -1,   308,   775,    -1,   776,   193,   776,
      -1,    -1,   775,   828,   829,    -1,   775,   829,   828,    -1,
     775,   828,    -1,   775,   829,    -1,   816,    -1,    -1,   167,
     775,    -1,   162,   775,    -1,   775,   167,   817,    -1,   167,
     817,    -1,   817,    -1,   647,    -1,   500,   817,   501,    -1,
      65,   836,   833,   835,   139,    -1,   834,    -1,   833,   834,
      -1,   458,   775,   413,   775,    -1,   135,   775,    -1,    -1,
     775,    -1,    -1,   867,    -1,   867,   840,    -1,   502,   862,
      -1,   498,   775,   499,    -1,   498,   839,   510,   839,   499,
      -1,   775,    -1,    -1,   838,    -1,   840,   838,    -1,    -1,
     841,   838,    -1,    -1,   500,   501,    -1,   500,   819,   501,
      -1,   502,   862,   842,    -1,   498,   775,   499,    -1,   498,
     839,   510,   839,   499,    -1,    -1,   844,   843,    -1,    45,
      -1,    -1,   848,    -1,    -1,   849,    -1,   847,   504,   849,
      -1,   847,    -1,   847,   504,    -1,   775,    40,   877,    -1,
     775,     3,    -1,   775,    -1,   144,   500,   859,   501,    -1,
     144,   867,    -1,   850,    -1,    -1,   775,    40,   867,    -1,
     852,    -1,   853,   504,   852,    -1,   853,    -1,   853,   504,
      -1,   343,   500,   854,   501,    -1,   343,   852,    -1,    -1,
     857,    -1,   856,   504,   857,    -1,   868,    -1,   867,   840,
      -1,   861,    -1,   858,   504,   861,    -1,   858,    -1,   858,
     504,    -1,   859,    -1,   500,   859,   501,    -1,   868,    -1,
     876,    -1,   870,    -1,   867,   840,    -1,   865,    -1,     4,
      -1,   866,   841,    -1,     6,    -1,     7,    -1,   863,   866,
      -1,   863,   500,   819,   669,   668,   501,   866,    -1,   748,
     866,    -1,   764,   500,   775,   501,   774,    -1,   764,   865,
     774,    -1,   764,   866,   774,    -1,   423,    -1,   155,    -1,
     272,    -1,     9,    -1,     5,    -1,     3,    -1,   944,    -1,
     945,    -1,   867,    -1,     5,    -1,     3,    -1,   944,    -1,
     949,    -1,     3,    -1,   944,    -1,   946,    -1,     3,    -1,
     944,    -1,   947,    -1,   867,    -1,   867,   873,    -1,   502,
     862,    -1,   873,   502,   862,    -1,   500,   859,   501,    -1,
      -1,   869,    -1,     3,    -1,   948,    -1,   944,    -1,   950,
      -1,   876,    -1,     5,    -1,     3,    -1,   316,   861,   880,
      40,   881,    -1,   500,   821,   501,    -1,    -1,   646,    -1,
     529,    -1,   628,    -1,   629,    -1,   921,    -1,    98,   361,
     857,   883,    -1,    98,   361,   186,   267,   148,   857,   883,
      -1,    98,   287,   343,   361,   857,   883,    -1,   883,   884,
      -1,    -1,   570,    -1,   885,    -1,   556,    -1,   939,    -1,
      98,   891,   197,   888,   889,   282,   857,   887,   500,   548,
     501,   890,   738,    -1,    98,   891,   197,   888,   186,   267,
     148,   599,   282,   857,   887,   500,   548,   501,   890,   738,
      -1,   867,    -1,   442,   886,    -1,    -1,    87,    -1,    -1,
     599,    -1,    -1,   462,   585,    -1,    -1,   433,    -1,    -1,
      32,   405,   732,   375,   361,   861,    -1,    32,   405,   186,
     148,   732,   375,   361,   861,    -1,    32,   370,   857,   375,
     361,   861,    -1,    32,   370,   186,   148,   857,   375,   361,
     861,    -1,    32,   454,   857,   375,   361,   861,    -1,    32,
     454,   186,   148,   857,   375,   361,   861,    -1,   163,    73,
     894,    -1,    73,   894,    -1,   867,    -1,    -1,   150,   106,
     866,   636,    -1,   150,   106,   867,   416,   866,   636,    -1,
     192,   106,   866,    -1,   149,   900,    -1,   149,   904,   898,
     900,    -1,   149,   452,   900,    -1,   149,   500,   903,   501,
     900,    -1,   452,    -1,    -1,   905,    -1,   563,    -1,    -1,
     892,    -1,   560,    -1,   515,    -1,   938,    -1,   893,    -1,
     629,    -1,   941,    -1,   625,    -1,   882,    -1,   556,    -1,
     570,    -1,   550,    -1,   526,    -1,   921,    -1,   618,    -1,
     558,    -1,   885,    -1,   529,    -1,   914,    -1,   553,    -1,
     879,    -1,   527,    -1,   646,    -1,   567,    -1,   628,    -1,
     916,    -1,   930,    -1,   908,    -1,   933,    -1,   939,    -1,
       3,    -1,   944,    -1,   948,    -1,   901,    -1,   866,    -1,
     906,    -1,   903,   504,   906,    -1,    35,    -1,    34,    -1,
     423,    -1,   155,    -1,   282,    -1,   902,    -1,   907,   899,
      -1,   901,    -1,   904,    -1,   375,   909,    -1,   375,   235,
     909,    -1,   375,   374,   909,    -1,   375,   173,   909,    -1,
     910,    -1,   936,   167,   102,    -1,   414,   483,   912,    -1,
     361,   866,    -1,   936,   416,   913,    -1,   936,   489,   913,
      -1,   936,   416,   113,    -1,   936,   489,   113,    -1,   905,
      -1,   563,    -1,   866,    -1,     3,    -1,   764,   866,   774,
      -1,   764,   500,   865,   501,   866,    -1,   563,    -1,   113,
      -1,   235,    -1,   911,    -1,   913,   504,   911,    -1,   234,
     915,    -1,   208,   915,    -1,   163,   208,   915,    -1,   866,
      -1,   867,    -1,   443,   918,   920,   898,    -1,   443,   918,
     920,   898,   857,   874,    -1,   443,   918,   920,   898,   925,
      -1,   443,   500,   919,   501,    -1,   443,   500,   919,   501,
     857,   874,    -1,   904,    -1,   452,    -1,   166,    -1,   168,
      -1,     3,    -1,   168,    -1,    -1,   917,    -1,   919,   504,
     917,    -1,   166,    -1,    -1,   534,   118,   167,   922,   924,
     923,   540,    -1,   424,   663,   922,    -1,   732,    -1,   732,
     867,    -1,   732,    40,   867,    -1,   459,   775,    -1,    -1,
     442,   714,    -1,    -1,   904,   898,    -1,   904,   898,   857,
     874,    -1,    47,   928,   866,   929,   636,    -1,   124,   928,
       3,    -1,   124,   106,   186,   148,     3,    -1,   106,    -1,
      -1,    40,   867,    -1,    -1,   345,   932,    -1,   936,    -1,
      30,    -1,   931,    -1,   414,   483,    -1,   418,   218,   230,
      -1,   934,   646,    -1,   401,   646,    -1,   401,   937,    -1,
     934,   937,    -1,   934,   414,   483,    -1,   934,   418,   218,
     230,    -1,   934,    30,   935,    -1,   934,    -1,   379,    -1,
     123,    -1,   406,    -1,    -1,   867,    -1,   936,   502,   867,
      -1,   867,    -1,   937,   502,   867,    -1,    61,   780,    -1,
      98,   616,   454,   857,   605,   890,    40,   646,   940,    -1,
      98,   616,   454,   186,   267,   148,   857,   605,   890,    40,
     646,   940,    -1,    98,   287,   343,   616,   454,   857,   605,
     890,    40,   646,   940,    -1,    98,   616,   333,   454,   857,
     500,   609,   501,   890,    40,   646,   940,    -1,    98,   287,
     343,   616,   333,   454,   857,   500,   609,   501,   890,    40,
     646,   940,    -1,   462,    72,   285,    -1,   462,    64,    72,
     285,    -1,   462,   235,    72,   285,    -1,    -1,    98,   616,
     405,   943,    40,   646,   942,    -1,    98,   616,   405,   186,
     267,   148,   943,    40,   646,   942,    -1,    98,   287,   343,
     616,   405,   943,    40,   646,   942,    -1,   462,   105,    -1,
     462,   265,   105,    -1,    -1,   857,   605,   592,   584,    -1,
      22,    -1,    23,    -1,    24,    -1,    25,    -1,    26,    -1,
      27,    -1,    28,    -1,    29,    -1,    31,    -1,    32,    -1,
      33,    -1,    43,    -1,    44,    -1,    46,    -1,    47,    -1,
      48,    -1,    50,    -1,    51,    -1,    52,    -1,    59,    -1,
      60,    -1,    61,    -1,    62,    -1,    63,    -1,    64,    -1,
      67,    -1,    68,    -1,    71,    -1,    73,    -1,    74,    -1,
      75,    -1,    76,    -1,    82,    -1,    83,    -1,    84,    -1,
      85,    -1,    86,    -1,    88,    -1,    89,    -1,    90,    -1,
      92,    -1,    93,    -1,    94,    -1,    95,    -1,    96,    -1,
      97,    -1,   100,    -1,   101,    -1,   102,    -1,   103,    -1,
     104,    -1,   105,    -1,   106,    -1,   107,    -1,   108,    -1,
     109,    -1,   112,    -1,   114,    -1,   116,    -1,   117,    -1,
     118,    -1,   119,    -1,   120,    -1,   121,    -1,   123,    -1,
     124,    -1,   125,    -1,   126,    -1,   127,    -1,   130,    -1,
     131,    -1,   132,    -1,   133,    -1,   134,    -1,   136,    -1,
     137,    -1,   138,    -1,   140,    -1,   141,    -1,   142,    -1,
     144,    -1,   145,    -1,   146,    -1,   147,    -1,   149,    -1,
     150,    -1,   151,    -1,   152,    -1,   153,    -1,   156,    -1,
     158,    -1,   159,    -1,   161,    -1,   163,    -1,   165,    -1,
     169,    -1,   170,    -1,   173,    -1,   175,    -1,   179,    -1,
     181,    -1,   182,    -1,   183,    -1,   184,    -1,   185,    -1,
     186,    -1,   187,    -1,   189,    -1,   190,    -1,   191,    -1,
     192,    -1,   194,    -1,   195,    -1,   196,    -1,   197,    -1,
     198,    -1,   199,    -1,   200,    -1,   202,    -1,   205,    -1,
     206,    -1,   207,    -1,   208,    -1,   209,    -1,   215,    -1,
     218,    -1,   220,    -1,   221,    -1,   222,    -1,   223,    -1,
     224,    -1,   225,    -1,   228,    -1,   230,    -1,   233,    -1,
     234,    -1,   235,    -1,   236,    -1,   237,    -1,   238,    -1,
     239,    -1,   240,    -1,   242,    -1,   243,    -1,   244,    -1,
     245,    -1,   246,    -1,   247,    -1,   248,    -1,   249,    -1,
     250,    -1,   251,    -1,   252,    -1,   253,    -1,   254,    -1,
     255,    -1,   256,    -1,   257,    -1,   258,    -1,   259,    -1,
     263,    -1,   264,    -1,   265,    -1,   268,    -1,   269,    -1,
     271,    -1,   274,    -1,   276,    -1,   277,    -1,   278,    -1,
     280,    -1,   281,    -1,   284,    -1,   285,    -1,   286,    -1,
     289,    -1,   292,    -1,   295,    -1,   296,    -1,   297,    -1,
     298,    -1,   299,    -1,   300,    -1,   301,    -1,   302,    -1,
     303,    -1,   304,    -1,   309,    -1,   310,    -1,   313,    -1,
     314,    -1,   316,    -1,   317,    -1,   318,    -1,   320,    -1,
     321,    -1,   322,    -1,   323,    -1,   324,    -1,   325,    -1,
     327,    -1,   328,    -1,   329,    -1,   331,    -1,   332,    -1,
     333,    -1,   334,    -1,   336,    -1,   337,    -1,   338,    -1,
     339,    -1,   340,    -1,   341,    -1,   342,    -1,   343,    -1,
     344,    -1,   345,    -1,   346,    -1,   347,    -1,   348,    -1,
     350,    -1,   351,    -1,   353,    -1,   354,    -1,   355,    -1,
     357,    -1,   358,    -1,   359,    -1,   360,    -1,   361,    -1,
     362,    -1,   363,    -1,   364,    -1,   365,    -1,   366,    -1,
     367,    -1,   370,    -1,   371,    -1,   372,    -1,   373,    -1,
     374,    -1,   375,    -1,   377,    -1,   378,    -1,   379,    -1,
     381,    -1,   382,    -1,   384,    -1,   386,    -1,   387,    -1,
     388,    -1,   389,    -1,   390,    -1,   391,    -1,   392,    -1,
     393,    -1,   394,    -1,   395,    -1,   396,    -1,   397,    -1,
     399,    -1,   401,    -1,   403,    -1,   404,    -1,   406,    -1,
     408,    -1,   409,    -1,   410,    -1,   411,    -1,   412,    -1,
     418,    -1,   419,    -1,   421,    -1,   424,    -1,   425,    -1,
     427,    -1,   428,    -1,   429,    -1,   430,    -1,   431,    -1,
     434,    -1,   435,    -1,   436,    -1,   438,    -1,   439,    -1,
     440,    -1,   441,    -1,   443,    -1,   444,    -1,   445,    -1,
     446,    -1,   447,    -1,   451,    -1,   453,    -1,   454,    -1,
     455,    -1,   456,    -1,   457,    -1,   460,    -1,   463,    -1,
     464,    -1,   465,    -1,   466,    -1,   467,    -1,   468,    -1,
     480,    -1,   481,    -1,   482,    -1,   483,    -1,    53,    -1,
      54,    -1,    56,    -1,    57,    -1,    69,    -1,    70,    -1,
      77,    -1,    81,    -1,   110,    -1,   111,    -1,   148,    -1,
     154,    -1,   160,    -1,   171,    -1,   177,    -1,   178,    -1,
     204,    -1,   210,    -1,   211,    -1,   213,    -1,   241,    -1,
     260,    -1,   262,    -1,   266,    -1,   273,    -1,   275,    -1,
     290,    -1,   294,    -1,   311,    -1,   315,    -1,   330,    -1,
     356,    -1,   376,    -1,   383,    -1,   398,    -1,   400,    -1,
     414,    -1,   415,    -1,   420,    -1,   422,    -1,   426,    -1,
     448,    -1,   449,    -1,   469,    -1,   470,    -1,   471,    -1,
     472,    -1,   473,    -1,   474,    -1,   475,    -1,   476,    -1,
     477,    -1,   478,    -1,   479,    -1,    42,    -1,    49,    -1,
      55,    -1,    79,    -1,    87,    -1,    99,    -1,   166,    -1,
     168,    -1,   171,    -1,   172,    -1,   188,    -1,   203,    -1,
     216,    -1,   217,    -1,   219,    -1,   229,    -1,   231,    -1,
     241,    -1,   261,    -1,   270,    -1,   291,    -1,   293,    -1,
     312,    -1,   352,    -1,   380,    -1,   398,    -1,   407,    -1,
     452,    -1,    37,    -1,    42,    -1,    49,    -1,    55,    -1,
      79,    -1,    81,    -1,    87,    -1,    99,    -1,   166,    -1,
     168,    -1,   172,    -1,   188,    -1,   203,    -1,   216,    -1,
     217,    -1,   219,    -1,   229,    -1,   231,    -1,   261,    -1,
     270,    -1,   291,    -1,   293,    -1,   312,    -1,   352,    -1,
     369,    -1,   380,    -1,   407,    -1,   426,    -1,   452,    -1,
      37,    -1,    42,    -1,    49,    -1,    53,    -1,    54,    -1,
      55,    -1,    56,    -1,    57,    -1,    70,    -1,    69,    -1,
      77,    -1,    79,    -1,    81,    -1,    87,    -1,    99,    -1,
     110,    -1,   111,    -1,   148,    -1,   154,    -1,   160,    -1,
     166,    -1,   168,    -1,   171,    -1,   172,    -1,   177,    -1,
     178,    -1,   188,    -1,   203,    -1,   204,    -1,   211,    -1,
     213,    -1,   210,    -1,   216,    -1,   217,    -1,   219,    -1,
     229,    -1,   231,    -1,   241,    -1,   260,    -1,   261,    -1,
     262,    -1,   266,    -1,   270,    -1,   273,    -1,   275,    -1,
     291,    -1,   290,    -1,   293,    -1,   294,    -1,   311,    -1,
     312,    -1,   315,    -1,   330,    -1,   352,    -1,   356,    -1,
     369,    -1,   376,    -1,   380,    -1,   383,    -1,   398,    -1,
     400,    -1,   407,    -1,   414,    -1,   415,    -1,   420,    -1,
     422,    -1,   426,    -1,   448,    -1,   449,    -1,   452,    -1,
     469,    -1,   470,    -1,   471,    -1,   472,    -1,   473,    -1,
     474,    -1,   475,    -1,   476,    -1,   477,    -1,   478,    -1,
     479,    -1,    37,    -1,    42,    -1,    49,    -1,    55,    -1,
      79,    -1,    81,    -1,    87,    -1,    99,    -1,   166,    -1,
     168,    -1,   171,    -1,   172,    -1,   188,    -1,   203,    -1,
     216,    -1,   217,    -1,   219,    -1,   229,    -1,   231,    -1,
     241,    -1,   261,    -1,   270,    -1,   291,    -1,   293,    -1,
     312,    -1,   352,    -1,   369,    -1,   380,    -1,   398,    -1,
     407,    -1,   426,    -1,   452,    -1,    30,    -1,    34,    -1,
      35,    -1,    36,    -1,    38,    -1,    39,    -1,    40,    -1,
      41,    -1,    45,    -1,    58,    -1,    65,    -1,    66,    -1,
      72,    -1,    78,    -1,    80,    -1,    91,    -1,    98,    -1,
     113,    -1,   115,    -1,   122,    -1,   128,    -1,   129,    -1,
     135,    -1,   139,    -1,   143,    -1,   155,    -1,   157,    -1,
     162,    -1,   164,    -1,   167,    -1,   174,    -1,   176,    -1,
     180,    -1,   193,    -1,   201,    -1,   212,    -1,   214,    -1,
     226,    -1,   227,    -1,   232,    -1,   267,    -1,   272,    -1,
     279,    -1,   282,    -1,   283,    -1,   287,    -1,   288,    -1,
     305,    -1,   306,    -1,   307,    -1,   308,    -1,   319,    -1,
     326,    -1,   335,    -1,   349,    -1,   368,    -1,   385,    -1,
     402,    -1,   405,    -1,   413,    -1,   416,    -1,   417,    -1,
     423,    -1,   432,    -1,   433,    -1,   437,    -1,   442,    -1,
     450,    -1,   458,    -1,   459,    -1,   461,    -1,   462,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   490,   490,   506,   518,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,   538,   539,   540,   541,
     542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
     552,   553,   554,   555,   556,   557,   558,   559,   560,   561,
     562,   563,   564,   566,     9,    18,    27,    36,    45,    54,
      63,    72,    85,    87,    93,    94,    99,   103,   107,   118,
     126,   130,   139,   148,   157,   166,   175,   184,   192,   200,
     209,   218,   227,   236,   253,   262,   271,   280,   290,   303,
     318,   327,   335,   350,   358,   368,   378,   385,   392,   400,
     407,   418,   419,   424,   428,   433,   438,   446,   447,   452,
     456,   457,   458,     7,    13,    19,    25,     6,    15,    25,
      35,    45,    55,    65,    75,    85,    95,   106,   117,   127,
     140,   141,     9,    23,    29,    36,    42,    49,    59,    63,
      71,    72,    73,    77,    86,    95,   102,   103,   108,   120,
     125,   150,   155,   160,   166,   176,   186,   192,   203,   214,
     229,   230,   236,   237,   242,   243,   249,   250,   254,   255,
     260,   262,   268,   269,   273,   274,   277,   278,   283,     7,
      16,    25,    46,    47,    50,    54,     7,    14,    22,     9,
      15,    22,    28,    34,    41,    48,    59,     9,    19,    29,
      42,    43,     7,    14,    31,    51,    52,     9,    17,    29,
      30,    34,    35,    36,    41,    42,    43,    48,    52,    56,
      60,    64,    68,    72,    76,    80,    84,    88,    92,    97,
     101,   105,   112,   113,   117,   118,   119,     2,     9,    15,
      21,    28,    35,    45,    46,    47,     2,     7,    21,    36,
      56,    57,    84,    85,    86,    87,    88,    89,    93,    94,
      99,   104,   105,   106,   107,   108,   113,   120,   121,   122,
     139,   146,   153,   163,   173,   185,   193,   202,   220,   221,
     225,   226,   230,   239,   262,   276,   283,   288,   290,   292,
     294,   297,   300,   301,   302,   303,   308,   312,   313,   318,
     325,   330,   331,   332,   333,   334,   335,   336,   337,   343,
     344,   348,   353,   360,   367,   374,   386,   387,   388,   389,
     393,   398,   399,   400,   405,   410,   411,   412,   413,   414,
     415,   420,   440,   469,   470,   474,   478,   479,   480,   484,
     488,   496,   497,   502,   503,   504,   508,   516,   517,   522,
     523,   527,   532,   536,   540,   545,   553,   554,   558,   559,
     563,   564,   570,   581,   594,   608,   622,   636,   650,   673,
     677,   684,   688,   696,   701,   708,   718,   719,   720,   721,
     722,   729,   736,   737,   742,   743,     9,    19,    29,    39,
      49,    59,    69,    79,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   115,   116,   117,   118,   119,   120,   125,   126,
     131,   132,   133,   138,   139,   140,   143,   144,     8,    20,
      33,    46,    58,    70,    86,    87,    91,    95,     7,     1,
      30,    53,    54,    59,    63,    68,    72,    80,    81,    85,
      86,    91,    92,    96,    97,   102,   103,   104,   105,   106,
     111,   119,   123,   128,   129,   134,   138,   143,   147,   151,
     155,   159,   163,   167,   171,   175,   179,   183,   187,   191,
     195,   199,   203,   211,   217,   218,   219,   224,   228,    47,
      48,    52,    53,    68,    69,    76,    84,    92,   100,   108,
     116,   127,   128,   155,   160,   168,   184,   201,   218,   235,
     236,   255,   259,   263,   267,   271,   280,   290,   299,   308,
     318,   328,   339,   353,   370,   370,   374,   374,   378,   378,
     382,   388,   395,   399,   400,   404,   405,   419,   426,   433,
     443,   444,   447,   459,   470,   478,   483,   488,   493,   498,
     506,   514,   519,   524,   531,   532,   536,   537,   538,   542,
     549,   550,   554,   555,   559,   560,   561,   565,   566,   570,
     571,   587,   588,   591,   600,   611,   612,   613,   616,   617,
     618,   622,   623,   624,   625,   629,   630,   634,   636,   652,
     654,   659,   662,   670,   674,   678,   682,   686,   690,   697,
     702,   709,   710,   714,   719,   723,   727,   735,   742,   743,
     748,   749,   753,   754,   759,   761,   763,   768,   788,   789,
     791,   796,   797,   801,   802,   805,   806,   831,   832,   837,
     841,   842,   846,   847,   851,   852,   853,   854,   855,   859,
     872,   879,   886,   893,   894,   898,   899,   903,   904,   908,
     909,   913,   914,   918,   919,   923,   934,   935,   936,   937,
     941,   942,   947,   948,   949,   958,   964,   973,   974,   987,
     988,   992,   993,   997,   998,  1004,  1010,  1018,  1027,  1035,
    1044,  1053,  1057,  1062,  1072,  1085,  1086,  1089,  1090,  1091,
    1094,  1102,  1112,  1113,  1116,  1124,  1133,  1137,  1144,  1145,
    1149,  1158,  1162,  1187,  1191,  1204,  1218,  1233,  1245,  1258,
    1272,  1286,  1299,  1314,  1333,  1339,  1344,  1350,  1357,  1358,
    1366,  1370,  1374,  1380,  1387,  1392,  1393,  1394,  1395,  1396,
    1397,  1401,  1402,  1414,  1415,  1420,  1427,  1434,  1441,  1473,
    1484,  1497,  1502,  1503,  1506,  1507,  1510,  1511,  1516,  1517,
    1522,  1526,  1532,  1553,  1561,  1574,  1577,  1581,  1581,  1584,
    1585,  1587,  1592,  1599,  1604,  1610,  1615,  1621,  1627,  1633,
    1642,  1644,  1647,  1651,  1652,  1653,  1654,  1655,  1656,  1661,
    1681,  1682,  1683,  1684,  1695,  1709,  1710,  1716,  1721,  1726,
    1731,  1736,  1741,  1746,  1751,  1757,  1763,  1769,  1776,  1798,
    1807,  1811,  1819,  1823,  1831,  1843,  1864,  1868,  1874,  1878,
    1891,  1899,  1909,  1911,  1913,  1915,  1917,  1919,  1924,  1925,
    1932,  1941,  1949,  1958,  1969,  1977,  1978,  1979,  1983,  1983,
    1986,  1986,  1989,  1989,  1992,  1992,  1995,  1995,  1998,  1998,
    2001,  2001,  2004,  2004,  2007,  2009,  2011,  2013,  2015,  2017,
    2019,  2021,  2023,  2028,  2033,  2039,  2046,  2051,  2057,  2063,
    2094,  2096,  2098,  2106,  2121,  2123,  2125,  2127,  2129,  2131,
    2133,  2135,  2137,  2139,  2141,  2143,  2145,  2147,  2149,  2151,
    2154,  2156,  2158,  2161,  2163,  2165,  2167,  2169,  2174,  2179,
    2186,  2191,  2198,  2203,  2210,  2215,  2223,  2231,  2239,  2247,
    2265,  2273,  2281,  2289,  2297,  2305,  2313,  2317,  2333,  2341,
    2349,  2357,  2365,  2373,  2381,  2385,  2389,  2393,  2397,  2405,
    2413,  2421,  2429,  2449,  2471,  2482,  2489,  2503,  2511,  2519,
    2539,  2541,  2543,  2545,  2547,  2549,  2551,  2553,  2555,  2557,
    2559,  2561,  2563,  2565,  2567,  2569,  2571,  2573,  2575,  2577,
    2579,  2581,  2585,  2589,  2593,  2607,  2608,  2612,  2626,  2627,
    2628,  2635,  2639,  2643,  2646,  2657,  2662,  2664,  2675,  2699,
    2710,  2721,  2725,  2732,  2736,  2741,  2758,  2764,  2768,  2775,
    2783,  2791,  2802,  2822,  2858,  2869,  2870,  2877,  2883,  2885,
    2887,  2891,  2900,  2905,  2912,  2927,  2934,  2938,  2942,  2946,
    2950,  2960,  2969,  2991,  2992,  2996,  2997,  2998,  3002,  3003,
    3010,  3011,  3015,  3016,  3021,  3029,  3031,  3045,  3048,  3075,
    3076,  3079,  3080,  3091,  3097,  3104,  3113,  3130,  3175,  3183,
    3191,  3199,  3207,  3228,  3229,  3232,  3233,  3237,  3247,  3248,
    3252,  3253,  3257,  3264,  3265,  3270,  3271,  3276,  3277,  3280,
    3281,  3282,  3285,  3286,  3289,  3290,  3291,  3292,  3293,  3294,
    3295,  3296,  3297,  3298,  3299,  3300,  3301,  3302,  3305,  3307,
    3312,  3314,  3319,  3321,  3323,  3325,  3327,  3329,  3331,  3333,
    3347,  3349,  3354,  3358,  3365,  3370,  3376,  3380,  3387,  3392,
    3399,  3404,  3412,  3416,  3422,  3426,  3435,  3446,  3447,  3451,
    3455,  3462,  3463,  3464,  3465,  3466,  3467,  3468,  3469,  3470,
    3471,  3481,  3485,  3492,  3499,  3500,  3516,  3520,  3525,  3529,
    3544,  3549,  3553,  3556,  3559,  3560,  3561,  3564,  3571,  3581,
    3595,  3596,  3600,  3611,  3612,  3615,  3616,  3619,  3623,  3630,
    3634,  3642,  3653,  3654,  3658,  3659,  3663,  3664,  3668,  3669,
    3670,  3674,  3683,  3691,  3707,  3708,  3713,  3714,  3724,  3725,
    3729,  3730,  3734,  3735,  3738,  3754,  3762,  3772,  3773,  3776,
    3777,  3780,  3784,  3785,  3789,  3790,  3793,  3794,  3795,  3805,
    3806,  3817,  3821,  3849,  3851,  3857,  3858,  3862,  3863,  3866,
    3868,  3878,  3881,  3892,  3896,  3900,  3912,  3916,  3925,  3932,
    3970,  3974,  3978,  3982,  3986,  3990,  3994,  4000,  4001,  4017,
    4018,  4019,  4022,  4023,  4029,  4030,  4031,  4034,  4035,  4036,
    4039,  4040,  4041,  4044,  4045,  4048,  4050,  4055,  4056,  4059,
    4067,  4068,  4069,  4070,  4073,  4074,  4077,     7,    18,    19,
      23,    24,    25,    26,    27,     7,    26,    50,    73,    80,
      85,    86,    87,    88,     8,    33,    62,    66,    67,    72,
      73,    78,    79,    83,    84,    89,    90,     7,    16,    25,
      34,    43,    52,     5,    12,    22,    23,     7,    19,    33,
       9,    16,    26,    33,    44,    45,    50,    51,    52,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    90,
      91,    92,    97,    98,   103,   107,   115,   116,   121,   122,
     123,   129,   134,   142,   143,    10,    16,    22,    28,    38,
      39,    47,    58,    70,    78,    86,    93,   103,   105,   111,
     115,   119,   134,   141,   142,   143,   147,   148,     7,    14,
      20,    28,    29,     8,    22,    36,    48,    56,    70,    71,
      72,    73,    74,    87,    88,    93,    94,    98,    99,     7,
      18,    31,    35,    42,    53,    54,    60,    61,     9,    19,
       7,    18,    25,    34,    35,    39,    40,     2,     7,    15,
      26,    27,    34,     3,    10,    17,    24,    31,    38,    45,
      52,    61,    61,    63,    63,    65,    66,    70,    71,     6,
       8,    21,    34,    47,    65,    87,    88,    89,    90,    11,
      24,    37,    54,    55,    56,    61,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENT", "FCONST", "SCONST", "BCONST",
  "XCONST", "Op", "ICONST", "PARAM", "TYPECAST", "DOT_DOT", "COLON_EQUALS",
  "EQUALS_GREATER", "INTEGER_DIVISION", "POWER_OF", "LAMBDA_ARROW",
  "DOUBLE_ARROW", "LESS_EQUALS", "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P",
  "ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE",
  "ALL", "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI",
  "ANY", "ARRAY", "AS", "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT",
  "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION", "BACKWARD",
  "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT", "BOOLEAN_P",
  "BOTH", "BY", "CACHE", "CALL_P", "CALLED", "CASCADE", "CASCADED", "CASE",
  "CAST", "CATALOG_P", "CHAIN", "CHAR_P", "CHARACTER", "CHARACTERISTICS",
  "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COALESCE",
  "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT", "COMMENTS",
  "COMMIT", "COMMITTED", "COMPRESSION", "CONCURRENTLY", "CONFIGURATION",
  "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONTENT_P",
  "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P", "CROSS", "CSV",
  "CUBE", "CURRENT_P", "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P",
  "DAYS_P", "DEALLOCATE", "DEC", "DECIMAL_P", "DECLARE", "DEFAULT",
  "DEFAULTS", "DEFERRABLE", "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER",
  "DELIMITERS", "DEPENDS", "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY",
  "DISABLE_P", "DISCARD", "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P",
  "DOUBLE_P", "DROP", "EACH", "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED",
  "END_P", "ENUM_P", "ESCAPE", "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING",
  "EXCLUSIVE", "EXECUTE", "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE",
  "EXTENSION", "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY", "FETCH",
  "FILTER", "FIRST_P", "FLOAT_P", "FOLLOWING", "FOR", "FORCE", "FOREIGN",
  "FORWARD", "FREEZE", "FROM", "FULL", "FUNCTION", "FUNCTIONS",
  "GENERATED", "GLOB", "GLOBAL", "GRANT", "GRANTED", "GROUP_P", "GROUPING",
  "GROUPING_ID", "HANDLER", "HAVING", "HEADER_P", "HOLD", "HOUR_P",
  "HOURS_P", "IDENTITY_P", "IF_P", "IGNORE_P", "ILIKE", "IMMEDIATE",
  "IMMUTABLE", "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDE_P", "INCLUDING",
  "INCREMENT", "INDEX", "INDEXES", "INHERIT", "INHERITS", "INITIALLY",
  "INLINE_P", "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE", "INSERT",
  "INSTALL", "INSTEAD", "INT_P", "INTEGER", "INTERSECT", "INTERVAL",
  "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN", "JSON", "KEY",
  "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LATERAL_P", "LEADING",
  "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN", "LOAD", "LOCAL",
  "LOCATION", "LOCK_P", "LOCKED", "LOGGED", "MACRO", "MAP", "MAPPING",
  "MATCH", "MATERIALIZED", "MAXVALUE", "METHOD", "MICROSECOND_P",
  "MICROSECONDS_P", "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P",
  "MINUTES_P", "MINVALUE", "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P",
  "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NONE",
  "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF",
  "NULLS_P", "NUMERIC", "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD",
  "ON", "ONLY", "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER",
  "ORDINALITY", "OUT_P", "OUTER_P", "OVER", "OVERLAPS", "OVERLAY",
  "OVERRIDING", "OWNED", "OWNER", "PARALLEL", "PARSER", "PARTIAL",
  "PARTITION", "PASSING", "PASSWORD", "PERCENT", "PIVOT", "PIVOT_LONGER",
  "PIVOT_WIDER", "PLACING", "PLANS", "POLICY", "POSITION", "POSITIONAL",
  "PRAGMA_P", "PRECEDING", "PRECISION", "PREPARE", "PREPARED", "PRESERVE",
  "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM",
  "PUBLICATION", "QUALIFY", "QUOTE", "RANGE", "READ_P", "REAL", "REASSIGN",
  "RECHECK", "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH",
  "REINDEX", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE", "REPLACE",
  "REPLICA", "RESET", "RESPECT_P", "RESTART", "RESTRICT", "RETURNING",
  "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW",
  "ROWS", "RULE", "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCROLL",
  "SEARCH", "SECOND_P", "SECONDS_P", "SECURITY", "SELECT", "SEMI",
  "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SET",
  "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE", "SKIP",
  "SMALLINT", "SNAPSHOT", "SOME", "SQL_P", "STABLE", "STANDALONE_P",
  "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE",
  "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION", "SUBSTRING",
  "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES",
  "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P",
  "THEN", "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION",
  "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED",
  "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED",
  "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED",
  "UNPIVOT", "UNTIL", "UPDATE", "USE_P", "USER", "USING", "VACUUM",
  "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES", "VARCHAR",
  "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VIEW", "VIEWS",
  "VIRTUAL", "VOLATILE", "WHEN", "WHERE", "WHITESPACE_P", "WINDOW", "WITH",
  "WITHIN", "WITHOUT", "WORK", "WRAPPER", "WRITE_P", "XML_P",
  "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST",
  "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE",
  "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P", "ZONE", "NOT_LA", "NULLS_LA",
  "WITH_LA", "'<'", "'>'", "'='", "POSTFIXOP", "'+'", "'-'", "'*'", "'/'",
  "'%'", "'^'", "UMINUS", "'['", "']'", "'('", "')'", "'.'", "';'", "','",
  "'#'", "'$'", "'?'", "'{'", "'}'", "':'", "$accept", "stmtblock",
  "stmtmulti", "stmt", "AlterTableStmt",
  "alter_identity_column_option_list", "alter_column_default",
  "alter_identity_column_option", "alter_generic_option_list",
  "alter_table_cmd", "alter_using", "alter_generic_option_elem",
  "alter_table_cmds", "alter_generic_options", "opt_set_data",
  "DeallocateStmt", "RenameStmt", "opt_column", "InsertStmt",
  "insert_rest", "insert_target", "opt_by_name_or_position",
  "opt_conf_expr", "opt_with_clause", "insert_column_item", "set_clause",
  "opt_or_action", "opt_on_conflict", "index_elem", "returning_clause",
  "override_kind", "set_target_list", "opt_collate", "opt_class",
  "insert_column_list", "set_clause_list", "set_clause_list_opt_comma",
  "index_params", "set_target", "CreateTypeStmt", "opt_enum_val_list",
  "enum_val_list", "PragmaStmt", "CreateDatabaseStmt",
  "opt_extension_name", "CreateSeqStmt", "OptSeqOptList", "ExecuteStmt",
  "execute_param_clause", "AlterSeqStmt", "SeqOptList", "opt_with",
  "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst", "TransactionStmt",
  "opt_transaction", "UseStmt", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "DropStmt",
  "drop_type_any_name", "drop_type_name", "any_name_list",
  "opt_drop_behavior", "drop_type_name_on_any_name", "type_name_list",
  "CreateFunctionStmt", "macro_alias", "param_list", "UpdateStmt",
  "CopyStmt", "copy_from", "copy_delimiter", "copy_generic_opt_arg_list",
  "opt_using", "opt_as", "opt_program", "copy_options",
  "copy_generic_opt_arg", "copy_generic_opt_elem", "opt_oids",
  "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "SelectStmt", "select_with_parens",
  "select_no_parens", "select_clause", "opt_select", "simple_select",
  "value_or_values", "pivot_keyword", "unpivot_keyword",
  "pivot_column_entry", "pivot_column_list_internal", "pivot_column_list",
  "with_clause", "cte_list", "common_table_expr", "into_clause",
  "OptTempTableName", "opt_table", "all_or_distinct", "by_name",
  "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_count", "sample_clause",
  "opt_sample_func", "tablesample_entry", "tablesample_clause",
  "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_list_opt_comma", "group_by_item", "empty_grouping_set",
  "rollup_clause", "cube_clause", "grouping_sets_clause",
  "grouping_or_grouping_id", "having_clause", "qualify_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "values_clause_opt_comma",
  "from_clause", "from_list", "from_list_opt_comma", "table_ref",
  "opt_pivot_group_by", "opt_include_nulls", "single_pivot_value",
  "pivot_header", "pivot_value", "pivot_value_list", "unpivot_header",
  "unpivot_value", "unpivot_value_list", "joined_table", "alias_clause",
  "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
  "join_qual", "relation_expr", "func_table", "rowsfrom_item",
  "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "opt_array_bounds", "SimpleTypename", "ConstTypename", "GenericType",
  "opt_type_modifiers", "Numeric", "opt_float", "Bit", "ConstBit",
  "BitWithLength", "BitWithoutLength", "Character", "ConstCharacter",
  "CharacterWithLength", "CharacterWithoutLength", "character",
  "opt_varying", "ConstDatetime", "ConstInterval", "opt_timezone",
  "year_keyword", "month_keyword", "day_keyword", "hour_keyword",
  "minute_keyword", "second_keyword", "millisecond_keyword",
  "microsecond_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "d_expr", "indirection_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr", "list_comprehension",
  "within_group_clause", "filter_clause", "export_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "qualified_row", "row", "dict_arg", "dict_arguments",
  "dict_arguments_opt_comma", "map_arg", "map_arguments",
  "map_arguments_opt_comma", "opt_map_arguments_opt_comma", "sub_type",
  "all_Op", "MathOp", "qual_Op", "qual_all_Op", "subquery_Op",
  "any_operator", "c_expr_list", "c_expr_list_opt_comma", "expr_list",
  "expr_list_opt_comma", "opt_expr_list_opt_comma", "func_arg_list",
  "func_arg_expr", "type_list", "extract_list", "extract_arg",
  "overlay_list", "overlay_placing", "position_list", "substr_list",
  "substr_from", "substr_for", "trim_list", "in_expr", "case_expr",
  "when_clause_list", "when_clause", "case_default", "case_arg",
  "columnref", "indirection_el", "opt_slice_bound", "indirection",
  "opt_indirection", "opt_func_arguments", "extended_indirection_el",
  "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "qualified_name", "name_list",
  "name_list_opt_comma", "name_list_opt_comma_opt_bracket", "name",
  "attr_name", "func_name", "AexprConst", "Iconst", "Sconst", "ColId",
  "ColIdOrString", "type_function_name", "function_name_token",
  "type_name_token", "any_name", "attrs", "opt_name_list", "param_name",
  "ColLabel", "ColLabelOrString", "named_param", "PrepareStmt",
  "prep_type_clause", "PreparableStmt", "CreateSchemaStmt",
  "OptSchemaEltList", "schema_stmt", "IndexStmt", "access_method",
  "access_method_clause", "opt_concurrently", "opt_index_name",
  "opt_reloptions", "opt_unique", "AlterObjectSchemaStmt",
  "CheckPointStmt", "opt_col_id", "ExportStmt", "ImportStmt",
  "ExplainStmt", "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "VariableSetStmt", "set_rest", "generic_set",
  "var_value", "zone_value", "var_list", "LoadStmt", "file_name",
  "VacuumStmt", "vacuum_option_elem", "opt_full", "vacuum_option_list",
  "opt_freeze", "DeleteStmt", "relation_expr_opt_alias",
  "where_or_current_clause", "using_clause", "AnalyzeStmt", "AttachStmt",
  "DetachStmt", "opt_database", "opt_database_alias", "VariableResetStmt",
  "generic_reset", "reset_rest", "VariableShowStmt", "show_or_describe",
  "opt_tables", "var_name", "table_id", "CallStmt", "ViewStmt",
  "opt_check_option", "CreateAsStmt", "opt_with_data", "create_as_target",
  "unreserved_keyword", "col_name_keyword", "func_name_keyword",
  "type_name_keyword", "other_keyword", "type_func_name_keyword",
  "reserved_keyword", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,    60,    62,    61,
     742,    43,    45,    42,    47,    37,    94,   743,    91,    93,
      40,    41,    46,    59,    44,    35,    36,    63,   123,   125,
      58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   511,   512,   513,   513,   514,   514,   514,   514,   514,
     514,   514,   514,   514,   514,   514,   514,   514,   514,   514,
     514,   514,   514,   514,   514,   514,   514,   514,   514,   514,
     514,   514,   514,   514,   514,   514,   514,   514,   514,   514,
     514,   514,   514,   514,   515,   515,   515,   515,   515,   515,
     515,   515,   516,   516,   517,   517,   518,   518,   518,   518,
     519,   519,   520,   520,   520,   520,   520,   520,   520,   520,
     520,   520,   520,   520,   520,   520,   520,   520,   520,   520,
     520,   520,   520,   520,   520,   520,   520,   520,   520,   520,
     520,   521,   521,   522,   522,   522,   522,   523,   523,   524,
     525,   525,   525,   526,   526,   526,   526,   527,   527,   527,
     527,   527,   527,   527,   527,   527,   527,   527,   527,   527,
     528,   528,   529,   530,   530,   530,   530,   530,   531,   531,
     532,   532,   532,   533,   533,   533,   534,   534,   535,   536,
     536,   537,   537,   537,   538,   538,   538,   539,   539,   539,
     540,   540,   541,   541,   542,   542,   543,   543,   544,   544,
     545,   545,   546,   546,   547,   547,   548,   548,   549,   550,
     550,   550,   551,   551,   552,   552,   553,   553,   553,   554,
     554,   554,   554,   554,   554,   554,   555,   556,   556,   556,
     557,   557,   558,   558,   558,   559,   559,   560,   560,   561,
     561,   562,   562,   562,   563,   563,   563,   563,   564,   564,
     564,   564,   564,   564,   564,   564,   564,   564,   564,   564,
     564,   564,   565,   565,   566,   566,   566,   567,   567,   567,
     567,   567,   567,   568,   568,   568,   569,   570,   570,   570,
     571,   571,   572,   572,   572,   572,   572,   572,   573,   573,
     574,   575,   575,   575,   575,   575,   576,   576,   576,   576,
     577,   577,   577,   577,   577,   577,   577,   577,   578,   578,
     579,   579,   580,   580,   580,   581,   582,   583,   583,   583,
     583,   583,   584,   584,   584,   584,   585,   586,   586,   587,
     587,   588,   588,   588,   588,   588,   588,   588,   588,   589,
     589,   590,   591,   591,   591,   591,   592,   592,   592,   592,
     593,   594,   594,   594,   595,   596,   596,   596,   596,   596,
     596,   597,   597,   598,   598,   599,   600,   600,   600,   601,
     601,   602,   602,   603,   603,   603,   604,   605,   605,   606,
     606,   607,   608,   608,   608,   608,   609,   609,   610,   610,
     611,   611,   611,   612,   612,   612,   612,   612,   612,   613,
     613,   614,   614,   614,   614,   615,   616,   616,   616,   616,
     616,   616,   616,   616,   617,   617,   618,   618,   618,   618,
     618,   618,   618,   618,   619,   619,   619,   619,   619,   619,
     619,   619,   619,   619,   619,   619,   619,   619,   619,   619,
     619,   619,   620,   620,   620,   620,   620,   620,   621,   621,
     622,   622,   622,   623,   623,   623,   624,   624,   625,   625,
     625,   625,   625,   625,   626,   626,   627,   627,   628,   629,
     629,   630,   630,   631,   631,   632,   632,   633,   633,   634,
     634,   635,   635,   636,   636,   637,   637,   637,   637,   637,
     638,   639,   639,   640,   640,   641,   641,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   643,   644,   644,   644,   645,   645,   646,
     646,   647,   647,   648,   648,   648,   648,   648,   648,   648,
     648,   649,   649,   650,   650,   651,   651,   651,   651,   651,
     651,   651,   651,   651,   651,   651,   651,   651,   651,   651,
     651,   651,   651,   651,   652,   652,   653,   653,   654,   654,
     655,   655,   655,   656,   656,   657,   657,   658,   658,   658,
     659,   659,   660,   661,   661,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   663,   663,   664,   664,   664,   665,
     666,   666,   667,   667,   668,   668,   668,   669,   669,   670,
     670,   671,   671,   672,   672,   673,   673,   673,   674,   674,
     674,   675,   675,   675,   675,   676,   676,   677,   677,   677,
     677,   678,   678,   679,   679,   679,   679,   679,   679,   680,
     680,   681,   681,   682,   682,   682,   682,   683,   684,   684,
     685,   685,   686,   686,   686,   686,   686,   687,   688,   688,
     688,   689,   689,   690,   690,   691,   691,   692,   692,   692,
     693,   693,   694,   694,   695,   695,   695,   695,   695,   696,
     697,   698,   699,   700,   700,   701,   701,   702,   702,   703,
     703,   704,   704,   705,   705,   706,   707,   707,   707,   707,
     708,   708,   709,   709,   709,   710,   710,   711,   711,   712,
     712,   713,   713,   714,   714,   715,   715,   715,   715,   715,
     715,   715,   715,   715,   715,   716,   716,   717,   717,   717,
     718,   718,   719,   719,   720,   720,   721,   721,   722,   722,
     723,   724,   724,   725,   725,   725,   725,   725,   725,   725,
     725,   725,   725,   725,   726,   726,   726,   726,   727,   727,
     728,   728,   728,   728,   728,   729,   729,   729,   729,   729,
     729,   730,   730,   731,   731,   732,   732,   732,   732,   733,
     733,   734,   735,   735,   736,   736,   737,   737,   738,   738,
     739,   739,   740,   741,   741,   742,   742,   743,   743,   744,
     744,   745,   745,   745,   745,   745,   745,   745,   745,   745,
     746,   746,   746,   747,   747,   747,   747,   747,   747,   747,
     748,   748,   748,   748,   749,   750,   750,   751,   751,   751,
     751,   751,   751,   751,   751,   751,   751,   751,   752,   752,
     753,   753,   754,   754,   755,   756,   757,   757,   758,   758,
     759,   760,   761,   761,   761,   761,   761,   761,   762,   762,
     763,   763,   763,   763,   764,   765,   765,   765,   766,   766,
     767,   767,   768,   768,   769,   769,   770,   770,   771,   771,
     772,   772,   773,   773,   774,   774,   774,   774,   774,   774,
     774,   774,   774,   774,   774,   774,   774,   774,   774,   774,
     775,   775,   775,   775,   775,   775,   775,   775,   775,   775,
     775,   775,   775,   775,   775,   775,   775,   775,   775,   775,
     775,   775,   775,   775,   775,   775,   775,   775,   775,   775,
     775,   775,   775,   775,   775,   775,   775,   775,   775,   775,
     775,   775,   775,   775,   775,   775,   775,   775,   775,   775,
     775,   775,   775,   775,   775,   775,   775,   775,   775,   775,
     775,   775,   775,   775,   775,   775,   775,   775,   775,   775,
     776,   776,   776,   776,   776,   776,   776,   776,   776,   776,
     776,   776,   776,   776,   776,   776,   776,   776,   776,   776,
     776,   776,   776,   776,   776,   777,   777,   777,   778,   778,
     778,   778,   778,   778,   778,   778,   778,   778,   778,   778,
     778,   779,   779,   779,   779,   779,   779,   780,   780,   780,
     780,   780,   780,   781,   781,   782,   782,   783,   783,   783,
     783,   783,   783,   783,   783,   783,   783,   783,   783,   783,
     783,   784,   784,   785,   785,   786,   786,   786,   787,   787,
     788,   788,   789,   789,   790,   791,   791,   791,   792,   793,
     793,   794,   794,   795,   795,   795,   796,   796,   797,   797,
     797,   797,   797,   798,   798,   799,   799,   800,   801,   801,
     802,   802,   803,   804,   804,   805,   805,   806,   806,   807,
     807,   807,   808,   808,   809,   809,   809,   809,   809,   809,
     809,   809,   809,   809,   809,   809,   809,   809,   810,   810,
     811,   811,   812,   812,   812,   812,   812,   812,   812,   812,
     813,   813,   814,   814,   815,   815,   816,   816,   817,   817,
     818,   818,   819,   819,   820,   820,   820,   821,   821,   822,
     822,   823,   823,   823,   823,   823,   823,   823,   823,   823,
     823,   824,   824,   825,   826,   826,   827,   827,   827,   827,
     827,   827,   828,   829,   830,   830,   830,   831,   831,   832,
     833,   833,   834,   835,   835,   836,   836,   837,   837,   838,
     838,   838,   839,   839,   840,   840,   841,   841,   842,   842,
     842,   843,   843,   843,   844,   844,   845,   845,   846,   846,
     847,   847,   848,   848,   849,   849,   849,   850,   850,   851,
     851,   852,   853,   853,   854,   854,   855,   855,   855,   856,
     856,   857,   857,   858,   858,   859,   859,   860,   860,   861,
     862,   863,   863,   864,   864,   864,   864,   864,   864,   864,
     864,   864,   864,   864,   864,   864,   864,   865,   866,   867,
     867,   867,   868,   868,   869,   869,   869,   870,   870,   870,
     871,   871,   871,   872,   872,   873,   873,   874,   874,   875,
     876,   876,   876,   876,   877,   877,   878,   879,   880,   880,
     881,   881,   881,   881,   881,   882,   882,   882,   883,   883,
     884,   884,   884,   884,   885,   885,   886,   887,   887,   888,
     888,   889,   889,   890,   890,   891,   891,   892,   892,   892,
     892,   892,   892,   893,   893,   894,   894,   895,   895,   896,
     897,   897,   897,   897,   898,   898,   899,   899,   899,   900,
     900,   900,   900,   900,   900,   900,   900,   900,   900,   900,
     900,   900,   900,   900,   900,   900,   900,   900,   900,   900,
     900,   900,   900,   900,   900,   900,   900,   900,   900,   901,
     901,   901,   902,   902,   903,   903,   904,   904,   905,   905,
     905,   905,   906,   907,   907,   908,   908,   908,   908,   909,
     909,   909,   909,   910,   910,   910,   910,   911,   911,   912,
     912,   912,   912,   912,   912,   912,   913,   913,   914,   914,
     914,   915,   915,   916,   916,   916,   916,   916,   917,   917,
     917,   917,   917,   918,   918,   919,   919,   920,   920,   921,
     921,   922,   922,   922,   923,   923,   924,   924,   925,   925,
     926,   927,   927,   928,   928,   929,   929,   930,   931,   931,
     932,   932,   932,   933,   933,   933,   933,   933,   933,   933,
     933,   934,   934,   935,   935,   936,   936,   937,   937,   938,
     939,   939,   939,   939,   939,   940,   940,   940,   940,   941,
     941,   941,   942,   942,   942,   943,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
     944,   944,   944,   944,   944,   945,   945,   945,   945,   945,
     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,
     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,
     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,
     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,
     945,   945,   945,   945,   945,   945,   945,   945,   945,   946,
     946,   946,   946,   946,   946,   946,   946,   946,   946,   946,
     946,   946,   946,   946,   946,   946,   946,   946,   946,   946,
     946,   946,   946,   946,   946,   946,   946,   947,   947,   947,
     947,   947,   947,   947,   947,   947,   947,   947,   947,   947,
     947,   947,   947,   947,   947,   947,   947,   947,   947,   947,
     947,   947,   947,   947,   947,   947,   948,   948,   948,   948,
     948,   948,   948,   948,   948,   948,   948,   948,   948,   948,
     948,   948,   948,   948,   948,   948,   948,   948,   948,   948,
     948,   948,   948,   948,   948,   948,   948,   948,   948,   948,
     948,   948,   948,   948,   948,   948,   948,   948,   948,   948,
     948,   948,   948,   948,   948,   948,   948,   948,   948,   948,
     948,   948,   948,   948,   948,   948,   948,   948,   948,   948,
     948,   948,   948,   948,   948,   948,   948,   948,   948,   948,
     948,   948,   948,   948,   948,   948,   948,   949,   949,   949,
     949,   949,   949,   949,   949,   949,   949,   949,   949,   949,
     949,   949,   949,   949,   949,   949,   949,   949,   949,   949,
     949,   949,   949,   949,   949,   949,   949,   949,   949,   950,
     950,   950,   950,   950,   950,   950,   950,   950,   950,   950,
     950,   950,   950,   950,   950,   950,   950,   950,   950,   950,
     950,   950,   950,   950,   950,   950,   950,   950,   950,   950,
     950,   950,   950,   950,   950,   950,   950,   950,   950,   950,
     950,   950,   950,   950,   950,   950,   950,   950,   950,   950,
     950,   950,   950,   950,   950,   950,   950,   950,   950,   950,
     950,   950,   950,   950,   950,   950,   950,   950,   950,   950,
     950
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     4,     6,     4,     6,     4,     6,
       4,     6,     1,     2,     3,     2,     1,     3,     2,     3,
       1,     3,     2,     5,     3,     6,     4,     6,     6,     6,
       5,     5,     6,     9,     4,     5,     7,     6,     4,     8,
       4,     2,     4,     3,     6,     4,     2,     2,     2,     2,
       1,     2,     0,     1,     2,     2,     2,     1,     3,     4,
       2,     1,     0,     2,     3,     2,     3,     6,     6,     8,
       6,     8,     6,     8,     6,     8,     8,    10,     8,    10,
       1,     0,     9,     1,     4,     4,     7,     2,     1,     3,
       2,     2,     0,     4,     3,     0,     1,     0,     2,     3,
       5,     2,     2,     0,     8,     5,     0,     5,     5,     7,
       2,     0,     1,     1,     1,     3,     2,     0,     1,     0,
       1,     3,     1,     3,     1,     2,     1,     3,     2,     6,
       8,     5,     1,     0,     1,     3,     2,     4,     5,     3,
       4,     6,     5,     5,     8,     7,     1,     5,     8,     7,
       1,     0,     3,     9,    12,     3,     0,     4,     6,     1,
       2,     1,     1,     0,     1,     2,     2,     1,     2,     2,
       1,     2,     3,     2,     2,     2,     2,     3,     3,     3,
       1,     3,     1,     0,     1,     2,     2,     2,     2,     2,
       2,     2,     2,     1,     1,     0,     2,     9,    12,    11,
       0,     2,     1,     1,     1,     1,     1,     1,     3,     0,
       1,     2,     1,     1,     2,     2,     3,     1,     1,     2,
       2,     1,     2,     3,     5,     3,     2,     5,     1,     1,
       1,     0,     5,     7,     5,     2,     3,     1,     1,     2,
       2,     0,     3,     4,     4,     0,     3,     2,     0,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     1,     2,     2,     2,     2,     2,     2,     0,
       3,     3,     3,     0,     1,     2,     1,     2,     2,     2,
       2,     3,     4,     1,     3,     1,     1,     1,     1,     3,
       1,     2,     0,     1,     2,     0,     1,     3,     0,     2,
       0,     3,     3,     1,     5,     3,     1,     3,     1,     2,
       1,     4,     5,     5,     6,     3,     7,     4,    11,     1,
       3,     2,     2,     2,     0,     3,     1,     1,     2,     2,
       2,     2,     1,     0,     1,     2,     6,     4,     6,     4,
       6,     8,     4,     6,     1,     1,     1,     1,     1,     2,
       1,     2,     1,     2,     1,     1,     1,     1,     3,     3,
       3,     3,     2,     2,     1,     3,     1,     1,     1,     3,
       1,     1,     0,     1,     1,     1,     1,     3,     8,    11,
      10,     7,    10,     9,     1,     1,     2,     3,     8,    11,
       9,     1,     1,     3,     0,     1,     3,     1,     0,     1,
       0,     1,     0,     1,     3,     1,     1,     1,     3,     0,
       2,     2,     0,     2,     0,     1,     0,     1,     1,     1,
       3,     3,     1,     1,     3,     3,     3,     3,     3,     3,
       4,     3,     2,     1,     1,     1,     1,     1,     3,     1,
       1,     3,     3,     1,     2,     4,     4,     2,     3,     5,
       5,     1,     1,     3,     0,    11,    11,    10,    12,     1,
       2,     5,     4,     4,     4,     4,     7,     5,     4,     7,
       6,     9,     9,     4,     1,     1,     1,     1,     1,     1,
       1,     5,     1,     1,     3,     1,     2,     2,     2,     3,
       1,     3,     6,     2,     0,     3,     3,     4,     4,     4,
       4,     3,     2,     1,     1,     0,     1,     1,     0,     2,
       1,     5,     1,     0,     2,     2,     0,     1,     0,     3,
       5,     1,     3,     4,     3,     1,     1,     0,     2,     2,
       0,     2,     2,     1,     1,     1,     0,     2,     4,     5,
       4,     2,     3,     2,     2,     2,     2,     1,     2,     3,
       0,     1,     0,     5,     1,     4,     6,     2,     1,     0,
       4,     0,     1,     1,     2,     2,     2,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     1,     3,     3,     0,
       1,     3,     1,     2,     1,     1,     1,     1,     1,     2,
       4,     4,     5,     1,     1,     2,     0,     2,     0,     1,
       3,     1,     0,     1,     2,     3,     2,     4,     2,     3,
       2,     0,     1,     2,     0,     4,     5,     1,     2,     2,
       0,     1,     3,     1,     2,     3,     3,     3,     3,     3,
       3,     1,     4,     9,     9,     3,     0,     2,     2,     0,
       5,     3,     1,     3,     5,     3,     1,     2,     1,     3,
       5,     1,     2,     3,     4,     5,     4,     5,     4,     6,
       5,     4,     5,     5,     5,     2,     4,     1,     1,     0,
       1,     4,     5,     4,     0,     2,     2,     2,     1,     1,
       1,     1,     0,     4,     2,     1,     2,     2,     4,     2,
       6,     2,     1,     3,     4,     0,     2,     0,     2,     0,
       1,     3,     3,     2,     0,     2,     4,     1,     1,     1,
       0,     2,     3,     5,     6,     2,     3,     5,     5,     5,
       3,     4,     0,     1,     1,     1,     1,     1,     2,     4,
       1,     1,     1,     1,     2,     3,     0,     1,     1,     1,
       1,     1,     2,     2,     2,     2,     2,     1,     3,     0,
       1,     1,     1,     1,     5,     2,     1,     1,     1,     1,
       4,     1,     2,     2,     1,     3,     3,     2,     1,     0,
       5,     2,     5,     2,     1,     3,     3,     0,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     3,     3,     3,     3,     3,     3,     0,
       1,     3,     3,     5,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     2,     2,     3,     3,     2,     2,     3,     3,     5,
       4,     6,     3,     5,     4,     6,     4,     6,     5,     7,
       3,     2,     4,     3,     2,     3,     3,     3,     3,     4,
       3,     4,     3,     4,     5,     6,     6,     7,     6,     7,
       6,     7,     3,     4,     4,     6,     1,     4,     3,     5,
       1,     3,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
       2,     5,     6,     6,     7,     1,     1,     2,     1,     1,
       2,     2,     3,     1,     2,     4,     1,     1,     2,     2,
       4,     1,     1,     3,     3,     4,     1,     3,     6,     7,
       9,     7,     7,     5,     1,     1,     1,     5,     6,     6,
       4,     4,     4,     4,     6,     5,     5,     5,     4,     6,
       4,     7,     9,     5,     0,     5,     4,     0,     1,     0,
       2,     0,     1,     3,     3,     2,     2,     0,     6,     1,
       0,     3,     0,     2,     2,     0,     1,     4,     2,     2,
       2,     2,     2,     4,     3,     1,     5,     3,     1,     3,
       1,     2,     3,     1,     3,     1,     2,     1,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     4,
       1,     4,     1,     4,     1,     2,     1,     2,     1,     2,
       1,     3,     1,     3,     1,     2,     1,     3,     1,     2,
       1,     0,     1,     3,     1,     3,     3,     1,     3,     3,
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     4,     3,     2,     3,     0,     3,     3,     2,     2,
       1,     0,     2,     2,     3,     2,     1,     1,     3,     5,
       1,     2,     4,     2,     0,     1,     0,     1,     2,     2,
       3,     5,     1,     0,     1,     2,     0,     2,     0,     2,
       3,     3,     3,     5,     0,     2,     1,     0,     1,     0,
       1,     3,     1,     2,     3,     2,     1,     4,     2,     1,
       0,     3,     1,     3,     1,     2,     4,     2,     0,     1,
       3,     1,     2,     1,     3,     1,     2,     1,     3,     1,
       1,     1,     2,     1,     1,     2,     1,     1,     2,     7,
       2,     5,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     3,     3,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     5,     3,     0,
       1,     1,     1,     1,     1,     4,     7,     6,     2,     0,
       1,     1,     1,     1,    13,    16,     1,     2,     0,     1,
       0,     1,     0,     2,     0,     1,     0,     6,     8,     6,
       8,     6,     8,     3,     2,     1,     0,     4,     6,     3,
       2,     4,     3,     5,     1,     0,     1,     1,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     1,     1,     1,     1,
       1,     1,     2,     1,     1,     2,     3,     3,     3,     1,
       3,     3,     2,     3,     3,     3,     3,     1,     1,     1,
       1,     3,     5,     1,     1,     1,     1,     3,     2,     2,
       3,     1,     1,     4,     6,     5,     4,     6,     1,     1,
       1,     1,     1,     1,     0,     1,     3,     1,     0,     7,
       3,     1,     2,     3,     2,     0,     2,     0,     2,     4,
       5,     3,     5,     1,     0,     2,     0,     2,     1,     1,
       1,     2,     3,     2,     2,     2,     2,     3,     4,     3,
       1,     1,     1,     1,     0,     1,     3,     1,     3,     2,
       9,    12,    11,    12,    14,     3,     4,     4,     0,     7,
      10,     9,     2,     3,     0,     4,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
     137,   235,     0,  1317,  1316,  1384,   235,     0,  1266,   235,
     456,   373,     0,  1402,  1384,     0,   235,     0,   137,     0,
       0,     0,     0,     0,     0,   516,   519,   517,     0,     0,
       0,   235,   553,     0,  1401,   235,     0,     0,   545,   518,
       0,  1364,     0,     0,     0,     0,     0,     2,     4,     7,
      20,    33,    29,     0,    19,    31,    14,    17,    24,     6,
      35,    37,    18,    23,    15,    36,    12,    34,   492,   479,
     558,   491,     0,     0,   136,   657,   499,    32,    16,    28,
       5,    11,    26,    27,    25,  1275,    40,    30,    38,    21,
       8,     9,    22,    39,    41,  1400,    10,    42,    13,   234,
     233,   227,     0,     0,     0,     0,     0,  1383,     0,   228,
    1199,  1426,  1427,  1428,  1429,  1430,  1431,  1432,  1433,  1434,
    1435,  1436,  1789,  1437,  1438,  1439,  1440,  1441,  1790,  1442,
    1443,  1444,  1735,  1736,  1791,  1737,  1738,  1445,  1446,  1447,
    1448,  1449,  1450,  1451,  1452,  1739,  1740,  1453,  1454,  1455,
    1456,  1457,  1741,  1792,  1742,  1458,  1459,  1460,  1461,  1462,
    1793,  1463,  1464,  1465,  1466,  1467,  1468,  1469,  1470,  1471,
    1794,  1472,  1473,  1474,  1475,  1476,  1477,  1478,  1479,  1480,
    1481,  1743,  1744,  1482,  1483,  1484,  1485,  1486,  1487,  1488,
    1489,  1490,  1491,  1492,  1493,  1494,  1495,  1496,  1497,  1498,
    1499,  1500,  1501,  1502,  1503,  1504,  1505,  1506,  1507,  1508,
    1509,  1745,  1510,  1511,  1512,  1513,  1514,  1746,  1515,  1516,
    1517,  1747,  1518,  1519,  1520,  1795,  1796,  1521,  1522,  1748,
    1798,  1523,  1524,  1749,  1750,  1525,  1526,  1527,  1528,  1529,
    1530,  1531,  1532,  1799,  1533,  1534,  1535,  1536,  1537,  1538,
    1539,  1540,  1541,  1542,  1543,  1544,  1800,  1751,  1545,  1546,
    1547,  1548,  1549,  1752,  1753,  1754,  1550,  1801,  1802,  1551,
    1803,  1552,  1553,  1554,  1555,  1556,  1557,  1558,  1804,  1559,
    1805,  1560,  1561,  1562,  1563,  1564,  1565,  1566,  1567,  1755,
    1568,  1569,  1570,  1571,  1572,  1573,  1574,  1575,  1576,  1577,
    1578,  1579,  1580,  1581,  1582,  1583,  1584,  1585,  1756,  1807,
    1757,  1586,  1587,  1588,  1758,  1589,  1590,  1808,  1591,  1759,
    1592,  1760,  1593,  1594,  1595,  1596,  1597,  1598,  1599,  1600,
    1601,  1761,  1809,  1602,  1810,  1762,  1603,  1604,  1605,  1606,
    1607,  1608,  1609,  1610,  1611,  1612,  1613,  1614,  1763,  1811,
    1615,  1616,  1764,  1617,  1618,  1619,  1620,  1621,  1622,  1623,
    1624,  1625,  1626,  1627,  1628,  1765,  1629,  1630,  1631,  1632,
    1633,  1634,  1635,  1636,  1637,  1638,  1639,  1640,  1641,  1642,
    1643,  1644,  1645,  1646,  1647,  1812,  1648,  1649,  1650,  1766,
    1651,  1652,  1653,  1654,  1655,  1656,  1657,  1658,  1659,  1660,
    1661,  1662,  1663,  1664,  1665,  1666,  1667,  1767,  1668,  1669,
    1670,  1813,  1671,  1672,  1768,  1673,  1674,  1675,  1676,  1677,
    1678,  1679,  1680,  1681,  1682,  1683,  1684,  1685,  1769,  1686,
    1770,  1687,  1688,  1689,  1690,  1815,  1691,  1692,  1693,  1694,
    1695,  1771,  1772,  1696,  1697,  1773,  1698,  1774,  1699,  1700,
    1775,  1701,  1702,  1703,  1704,  1705,  1706,  1707,  1708,  1709,
    1710,  1711,  1712,  1713,  1714,  1715,  1716,  1717,  1776,  1777,
    1718,  1816,  1719,  1720,  1721,  1722,  1723,  1724,  1725,  1726,
    1727,  1728,  1729,  1730,  1778,  1779,  1780,  1781,  1782,  1783,
    1784,  1785,  1786,  1787,  1788,  1731,  1732,  1733,  1734,  1409,
       0,     0,  1181,  1200,  1201,  1209,  1199,  1748,  1755,  1769,
    1265,  1264,  1200,   230,   455,     0,     0,  1198,     0,     0,
       0,     0,     0,   367,   366,     0,  1255,   372,     0,     0,
     186,     0,  1203,   105,  1617,   103,  1202,  1179,  1383,     0,
       0,   394,   395,   385,     0,   404,     0,   387,   392,   388,
       0,   413,   406,   414,   396,   386,   407,   397,   384,     0,
     415,     0,   390,     0,     0,     0,   231,   196,   373,   137,
       0,  1281,  1291,  1300,  1296,  1290,  1298,  1288,  1294,  1280,
    1302,  1289,  1293,  1286,  1303,  1284,  1301,  1299,  1287,  1295,
    1279,  1283,  1270,  1275,  1306,  1297,  1304,  1292,  1305,  1307,
    1282,  1308,  1285,     0,  1266,     0,     0,  1741,  1792,  1746,
       0,  1759,     0,  1762,  1763,  1651,  1770,  1773,  1774,  1775,
    1776,     0,   709,     0,   494,   661,   671,   709,   714,   975,
     737,   976,   725,  1202,  1171,     0,  1351,  1352,  1349,  1348,
     176,  1229,  1389,  1771,  1696,  1405,  1390,  1387,  1388,   232,
     552,   550,     0,  1149,  1523,  1562,  1655,  1666,  1771,  1325,
    1329,     0,   229,  1394,     0,  1407,  1395,   500,  1202,   544,
       0,   236,  1363,     0,  1368,     0,  1631,   527,   530,  1218,
     528,   492,     0,     1,   137,     0,   143,     0,   548,   548,
       0,   548,     0,   484,     0,     0,   492,   487,   491,   658,
    1274,  1378,  1404,  1771,  1696,  1393,  1396,  1531,     0,     0,
    1531,     0,  1531,     0,  1531,     0,  1386,     0,  1133,     0,
    1134,  1182,     0,   338,  1531,   179,   371,   370,   369,   368,
     373,  1531,  1239,     0,     0,   424,   425,     0,     0,     0,
       0,     0,  1250,   106,   104,     0,  1381,   402,   403,     0,
     393,   389,   391,     0,  1210,  1817,  1818,  1819,   780,  1820,
     809,   787,   809,   809,  1821,  1822,  1823,  1824,   776,   776,
    1497,   789,  1825,  1826,  1827,  1531,  1828,  1829,   777,   778,
     814,  1830,  1831,  1832,  1833,  1834,     0,     0,  1835,   809,
    1836,   776,  1837,  1838,  1839,   781,  1840,   747,  1841,     0,
    1842,   779,   748,  1843,   817,   817,  1844,     0,   804,  1845,
     412,     0,   416,   762,   763,   764,   765,   790,   791,   766,
     796,   797,   801,   767,   849,   776,  1211,  1212,  1531,   412,
    1213,   408,  1531,   412,  1173,  1531,     0,     0,   192,     0,
    1272,  1309,  1846,  1847,  1848,  1849,  1850,  1851,  1852,  1853,
    1855,  1854,  1856,  1857,  1858,  1859,  1860,  1861,  1862,  1863,
    1864,  1865,  1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,
    1874,  1877,  1875,  1876,  1878,  1879,  1880,  1881,  1882,  1883,
    1884,  1885,  1886,  1887,  1888,  1889,  1890,  1892,  1891,  1893,
    1894,  1895,  1896,  1897,  1898,  1899,  1900,  1901,  1902,  1903,
    1904,  1905,  1906,  1907,  1908,  1909,  1910,  1911,  1912,  1913,
    1914,  1915,  1916,  1917,  1918,  1919,  1920,  1921,  1922,  1923,
    1924,  1925,  1926,  1323,     0,  1324,  1314,  1278,  1310,  1311,
     137,   454,     0,  1263,  1350,     0,     0,     0,  1090,   709,
     714,     0,     0,   727,     0,  1105,     0,  1111,     0,     0,
       0,   709,   499,     0,   671,     0,   708,   599,   707,   599,
     553,     0,   534,   719,     0,     0,   722,   720,     0,   722,
       0,     0,     0,   722,   718,   679,     0,   599,     0,   710,
     599,   707,     0,   729,   726,  1172,  1269,     0,     0,     0,
       0,  1391,     0,     0,     0,  1184,  1186,  1187,  1058,  1197,
     962,     0,  1736,  1737,  1738,  1126,  1739,  1740,  1742,  1743,
    1744,   916,  1745,  1195,  1747,  1749,  1750,  1752,  1753,  1754,
    1755,  1756,  1757,     0,  1196,  1760,  1598,  1765,  1766,  1768,
    1771,  1772,  1194,  1777,     0,     0,     0,  1160,  1081,     0,
       0,     0,   961,     0,   957,     0,     0,   770,   771,   792,
     793,   772,   798,   799,   773,     0,  1156,   850,   945,  1144,
     994,   966,   974,   953,  1025,   946,     0,   956,   948,  1152,
     534,  1150,     0,   949,  1183,  1136,  1127,   534,  1148,  1328,
    1326,  1332,  1327,     0,     0,     0,     0,     0,  1172,  1371,
    1370,  1362,  1360,  1361,  1359,  1358,  1365,     0,  1367,  1275,
    1076,  1078,     0,   529,     0,     0,     0,   482,   481,     3,
       0,     0,     0,     0,   546,   547,     0,     0,     0,     0,
       0,     0,     0,     0,   642,   573,   574,   576,   639,   643,
     651,     0,     0,     0,     0,     0,   488,     0,  1218,  1403,
    1399,  1397,     0,     0,     0,   121,   121,     0,     0,     0,
       0,     0,    97,    46,    90,     0,     0,     0,     0,   210,
     223,     0,     0,     0,     0,     0,   220,     0,     0,   203,
      48,   197,   199,     0,   121,     0,    44,     0,     0,     0,
      50,     0,   454,  1199,     0,  1927,  1789,  1790,  1791,  1792,
    1742,  1793,  1794,     0,  1795,  1796,  1748,  1798,  1799,  1800,
    1801,  1802,  1803,  1804,  1805,  1755,  1807,  1808,  1809,  1810,
    1811,  1812,  1953,  1813,  1769,  1815,  1775,     0,  1816,   967,
    1084,   558,  1082,  1219,     0,  1200,  1206,  1132,     0,  1220,
    1959,  1960,  1961,  1962,  1963,  1964,  1965,  1966,  1967,  1968,
    1969,  1970,  1971,  1972,  1973,  1974,  1975,  1976,  1977,  1978,
    1979,  1980,  1981,  1982,  1983,  1984,  1985,  1986,  1987,  1988,
    1989,  1990,  1991,  1992,  1993,  1994,  1995,  1996,  1997,  1998,
    1999,  2000,  2001,  2002,  2003,  2004,  2005,  2006,  2007,  2008,
    2009,  2010,  2011,  2012,  2013,  2014,  2015,  2016,  2017,  2018,
    2019,  2020,  2021,  2022,  2023,  2024,  2025,  1913,  2026,  2027,
    2028,  2029,  2030,  1129,  1180,  1222,  1221,  1223,  1135,     0,
       0,   452,     0,     0,     0,     0,     0,     0,  1235,     0,
     180,     0,  1531,   191,  1531,   338,     0,  1531,   338,  1531,
       0,  1249,  1252,     0,   405,   401,   399,   398,   400,   808,
     795,   803,   802,  1081,   785,   784,   783,     0,   782,     0,
       0,   809,   809,   807,   786,   762,     0,     0,     0,   813,
       0,   811,     0,   410,   411,     0,   382,     0,   755,   751,
       0,   822,   823,   824,   825,   832,   833,   830,   831,   826,
     827,   820,   821,   828,   829,   818,   819,     0,   834,   835,
     836,   837,   838,   839,   840,   841,   768,   774,     0,     0,
     377,     0,  1214,     0,     0,   379,     0,     0,     0,   373,
     137,     0,   204,  1319,  1320,  1318,     0,     0,  1277,   207,
     224,  1313,  1322,  1312,  1321,  1276,  1271,     0,  1267,   443,
       0,     0,     0,     0,  1091,  1092,  1093,  1094,  1095,  1096,
    1097,  1098,  1099,     0,     0,  1100,   670,   668,     0,     0,
       0,     0,     0,     0,     0,   920,   946,     0,     0,  1127,
       0,  1076,  1110,     0,     0,     0,     0,     0,     0,  1076,
    1116,     0,     0,   693,   705,   592,   598,   669,     0,   667,
       0,  1149,   662,     0,   739,     0,   719,     0,   718,     0,
       0,   721,   715,     0,   716,     0,     0,     0,     0,   717,
       0,     0,     0,     0,     0,   665,     0,   705,   666,     0,
     736,  1338,  1337,  1346,   177,     0,  1087,     0,   137,  1392,
    1406,     0,  1081,   954,  1125,     0,     0,   959,  1038,   875,
       0,     0,   876,   854,   855,     0,  1159,  1168,  1076,  1080,
       0,   957,  1076,     0,   950,  1226,   951,  1028,  1030,     0,
       0,   958,     0,  1190,     0,   849,   849,  1155,  1058,     0,
    1048,  1051,     0,     0,  1055,  1056,  1057,     0,     0,     0,
    1147,     0,  1066,  1068,     0,     0,   891,  1064,     0,   894,
       0,     0,     0,     0,  1052,  1053,  1054,  1044,  1045,  1046,
    1047,  1049,  1050,  1062,  1043,   872,     0,   947,     0,   997,
       0,   871,  1153,   660,     0,  1188,  1185,     0,  1128,   660,
    1340,  1344,  1345,  1343,     0,  1339,  1331,  1330,  1335,  1333,
    1336,  1334,  1408,     0,  1372,  1356,     0,  1353,  1079,   655,
     531,  1175,     0,     0,  1377,   142,   141,     0,     0,   504,
     503,   567,   559,   561,   567,     0,   502,     0,   615,   616,
       0,     0,     0,     0,   648,   646,  1184,  1197,   603,   577,
     602,     0,     0,   581,     0,   607,   850,   641,   486,   571,
     572,   575,   485,     0,   644,     0,   654,     0,   523,   525,
     508,   522,   520,   505,   513,   642,   576,     0,  1379,  1398,
       0,     0,     0,     0,     0,  1531,     0,     0,    81,    62,
     290,   750,   120,     0,     0,     0,     0,     0,     0,     0,
      89,    86,    87,    88,     0,     0,     0,     0,   208,   209,
     222,     0,   213,   214,   211,   215,   216,     0,     0,   201,
     202,     0,     0,     0,     0,   200,     0,     0,     0,     0,
       0,     0,     0,     0,  1385,  1380,   558,   558,   558,     0,
     556,   557,     0,     0,  1130,  1133,   442,   346,     0,   336,
       0,     0,     0,   183,   182,  1239,     0,     0,     0,     0,
       0,     0,   373,  1242,  1240,  1238,  1241,  1243,  1503,   171,
       0,     0,   187,   190,     0,   335,   309,     0,     0,  1254,
       0,     0,     0,  1531,  1251,   325,     0,  1382,     0,     0,
       0,   412,     0,   806,   805,   756,   752,     0,     0,     0,
       0,     0,     0,   417,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   412,   409,  1215,     0,   412,  1174,     0,
     412,   195,  1273,  1315,   205,   225,   206,   226,   477,     0,
     449,   457,   462,   440,     0,   440,     0,   459,   463,   440,
     458,     0,   440,   453,   454,     0,   990,     0,   980,     0,
       0,   728,     0,     0,   981,   922,   923,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   940,   939,   982,   732,     0,
     735,     0,     0,  1108,  1109,     0,   983,     0,     0,  1115,
       0,     0,     0,   988,     0,   672,     0,     0,   587,   594,
       0,   597,   591,     0,   534,   493,  1523,  1562,     0,   545,
     545,   545,   533,   543,     0,   619,     0,     0,     0,   694,
       0,     0,   696,   698,     0,     0,   701,     0,   678,   677,
       0,     0,     0,   740,     0,     0,     0,  1179,     0,   178,
       0,  1228,     0,  1231,  1232,  1233,  1230,  1227,  1234,     0,
       0,     0,  1124,  1120,     0,     0,  1033,  1035,  1037,     0,
    1042,  1048,  1051,  1055,  1056,  1057,  1052,  1053,  1054,  1044,
    1045,  1046,  1047,  1049,  1050,  1070,     0,     0,  1024,     0,
       0,  1158,     0,   918,     0,   952,   963,     0,  1031,   964,
       0,     0,     0,  1192,  1193,   851,   860,   863,   895,   896,
     867,   868,   869,   873,  1225,  1224,  1154,     0,  1146,     0,
       0,   852,   877,   882,     0,  1117,   912,     0,   900,     0,
     890,     0,   898,   902,   878,   893,     0,   874,     0,  1147,
    1067,  1069,     0,  1065,     0,   864,   865,   866,   856,   857,
     858,   859,   861,   862,   870,  1041,  1039,  1040,     0,  1133,
       0,  1145,     0,     0,   999,     0,     0,   897,  1151,     0,
     739,   558,  1137,  1160,   739,     0,   849,  1373,  1218,  1366,
    1218,  1355,  1077,  1176,  1217,   137,     0,  1375,   132,   128,
       0,   162,   164,   660,     0,  1136,   565,   566,   570,     0,
       0,   570,   549,   501,  1766,  1651,     0,     0,     0,     0,
     608,   649,     0,   640,   605,   606,     0,   604,  1184,   609,
    1183,   610,   613,   614,   582,   650,  1169,   652,     0,   645,
       0,  1177,   507,   526,     0,     0,     0,     0,     0,   490,
     489,   656,     0,    47,     0,  1531,    64,     0,     0,     0,
       0,     0,     0,   240,     0,   340,   240,   102,  1531,   412,
    1531,   412,  1430,  1498,  1667,     0,    60,    93,     0,   314,
     114,     0,   299,   343,    83,    98,   107,     0,     0,    49,
     198,   212,   217,   110,   221,   218,  1259,   219,   121,     0,
      45,     0,   108,     0,  1257,     0,     0,    51,   112,  1261,
     556,   556,   556,     0,  1083,     0,     0,     0,  1085,  1086,
    1132,     0,   441,     0,   337,     0,   451,   431,   432,   442,
     181,     0,  1237,     0,   191,   338,     0,   338,     0,  1239,
       0,     0,   173,   169,     0,     0,     0,     0,   328,   326,
     359,     0,   333,   327,   336,     0,     0,   285,     0,  1424,
       0,     0,     0,     0,   426,     0,     0,     0,     0,     0,
     775,   788,   383,   762,     0,   816,   815,   817,   817,   762,
       0,   745,   762,     0,   760,     0,   800,   769,   842,   843,
     844,   845,   846,   847,   848,   376,  1216,   378,     0,   380,
     444,     0,   447,     0,   446,   450,   445,   439,     0,   472,
       0,     0,     0,     0,     0,     0,     0,  1268,     0,   977,
    1089,     0,  1103,  1102,   921,   928,   931,   935,   936,   937,
    1104,     0,     0,     0,   932,   933,   934,   924,   925,   926,
     927,   929,   930,   938,   737,     0,     0,   731,  1113,  1112,
    1106,  1107,     0,   985,   986,   987,  1114,     0,     0,   585,
     583,   586,   588,   584,     0,     0,   706,   739,   545,   545,
     545,   545,   542,     0,     0,     0,   738,     0,   636,   702,
     700,     0,   724,     0,   697,     0,   703,     0,     0,   688,
     695,   711,     0,   744,     0,   713,  1347,  1088,   551,   955,
       0,     0,  1121,     0,   917,     0,  1036,   965,  1059,     0,
    1023,     0,     0,     0,  1167,     0,  1077,  1029,  1027,   960,
     849,     0,     0,     0,     0,     0,     0,     0,   901,   892,
       0,   899,   903,     0,     0,     0,   886,     0,     0,   884,
     913,   880,     0,     0,   914,  1132,     0,  1138,     0,     0,
     998,  1007,   663,   659,   619,   556,  1168,   619,     0,  1341,
    1357,  1354,     0,  1376,     0,   151,     0,     0,     0,     0,
     154,   165,  1375,     0,   168,     0,   560,   562,     0,  1060,
     570,   564,   612,   611,     0,   580,   647,   578,     0,   653,
       0,   524,     0,   510,     0,   681,     0,     0,     0,     0,
       0,   289,     0,     0,     0,   240,     0,   348,     0,   355,
       0,     0,   340,   321,    82,     0,     0,     0,    56,   101,
      74,    66,    52,    80,     0,     0,    85,     0,    78,    95,
      96,    94,    99,     0,   275,   250,   286,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   558,   554,   555,   968,  1131,   475,   476,
     203,   474,   347,     0,     0,   185,     0,   189,   335,     0,
    1254,     0,  1236,   373,     0,     0,   172,   174,     0,   191,
     338,     0,   313,   309,   334,   307,   306,   308,     0,  1425,
     196,     0,  1419,   338,  1253,     0,     0,   427,     0,   421,
       0,  1248,   794,   758,     0,   812,   810,   759,     0,   757,
     753,   761,   412,   478,     0,   435,   473,   460,   465,     0,
     471,   467,   466,   461,   469,   468,   464,   978,   989,  1101,
       0,     0,     0,     0,   730,   733,     0,   984,   979,   704,
       0,     0,   619,     0,     0,     0,     0,   536,   535,   541,
       0,     0,  1001,   699,     0,     0,     0,   686,   676,   682,
       0,     0,     0,   741,     0,   742,   712,     0,  1123,  1119,
    1032,  1034,  1071,  1157,  1076,  1162,  1164,     0,     0,     0,
    1026,  1191,   853,     0,     0,   883,  1118,   904,     0,     0,
       0,   879,  1059,     0,     0,     0,     0,     0,   888,     0,
    1142,  1133,     0,  1141,     0,     0,     0,     0,   973,   664,
     636,     0,   919,   636,     0,   532,  1374,     0,  1369,   130,
     131,     0,     0,     0,   146,   123,   129,     0,     0,   163,
     151,   139,   568,   569,     0,   563,   579,  1170,  1178,   509,
       0,   957,     0,     0,   506,     0,   115,   240,     0,     0,
      63,     0,   357,   301,   349,   332,   316,     0,     0,     0,
     241,     0,   374,     0,     0,   322,     0,     0,     0,     0,
     302,     0,     0,   261,     0,     0,   332,     0,   339,   257,
     258,     0,    55,    75,     0,    71,     0,   100,     0,     0,
       0,     0,     0,    58,    70,     0,    53,     0,   412,   412,
      61,   300,  1210,  1817,  1818,  1819,  1820,  1821,  1822,  1823,
    1824,  1825,  1826,  1937,  1827,  1828,  1829,  1830,  1831,  1832,
    1833,  1834,  1946,  1835,   247,  1836,  1598,  1837,  1838,  1839,
    1840,  1841,     0,  1842,   748,  1843,  1844,  2022,  1845,  1044,
    1045,   245,   342,   242,   350,   244,   246,     0,  1211,   243,
     345,   111,  1260,     0,   109,     0,  1258,   118,   116,   113,
    1262,   971,   972,   969,   556,   454,   434,   184,     0,     0,
    1424,     0,     0,     0,  1531,     0,   170,     0,  1254,   188,
     335,     0,   365,   285,   360,     0,  1424,  1422,     0,  1254,
    1418,     0,   418,     0,     0,     0,   754,   746,   381,   448,
       0,   470,   941,     0,     0,     0,     0,   595,     0,   601,
     636,   540,   539,   538,   537,   618,  1473,  1749,  1650,     0,
     622,   617,   620,   625,   627,   626,   628,   624,   635,     0,
     638,   723,  1072,  1074,     0,     0,     0,     0,   687,     0,
     689,     0,   691,     0,   743,  1122,  1165,  1166,  1161,     0,
     850,   910,   908,   905,     0,   906,   887,     0,     0,   885,
     881,     0,   915,     0,  1139,     0,   993,     0,   996,  1010,
    1005,  1006,  1001,   968,  1001,  1342,   150,   127,   153,   152,
       0,   160,     0,  1136,     0,   151,     0,   155,   428,     0,
       0,   521,   680,   514,   515,     0,   353,    65,     0,   332,
       0,   240,   318,   317,   320,   315,   319,     0,   375,     0,
       0,   259,     0,   266,   304,   305,   303,   260,   332,   338,
     262,     0,     0,     0,    67,    57,    54,    59,    68,     0,
       0,    69,    72,   744,    84,    77,  1946,  1955,     0,     0,
       0,     0,     0,     0,   430,   437,   203,     0,     0,   309,
    1421,     0,     0,   423,     0,     0,   335,   175,     0,     0,
       0,  1424,     0,     0,   237,     0,   282,     0,   193,  1423,
       0,     0,  1410,     0,     0,  1246,  1247,     0,   436,   942,
       0,   943,   734,     0,     0,   593,  1001,     0,     0,     0,
     629,   623,  1000,  1002,     0,     0,   590,  1075,   683,     0,
     685,     0,   709,   558,     0,   709,   692,  1163,   991,     0,
     907,   911,   909,   889,  1143,  1140,   995,  1012,  1009,   638,
    1189,   638,     0,     0,     0,     0,   138,   135,   122,   140,
    1061,   511,   512,     0,   240,     0,   331,   354,   271,   249,
       0,     0,     0,   256,   263,   364,   265,     0,    76,    92,
       0,     0,   344,   119,   117,   970,   454,     0,  1254,   285,
    1418,   420,     0,     0,     0,   309,   196,  1420,   298,   291,
     292,   293,   294,   295,   296,   297,   312,   311,   283,   284,
       0,     0,     0,     0,     0,   422,  1248,     0,   166,     0,
     157,   157,   944,   596,     0,   638,     0,     0,     0,   621,
       0,     0,   637,     0,   497,  1073,     0,   675,   673,   556,
       0,   674,     0,     0,   558,   590,   590,   124,     0,   125,
     161,     0,     0,     0,   338,   356,     0,   323,   330,   269,
     268,   270,   274,     0,   272,     0,   288,     0,   281,   249,
       0,    79,     0,   351,   429,   433,     0,   239,  1412,   335,
       0,  1418,   285,  1424,  1418,     0,  1415,     0,   419,     0,
       0,  1254,     0,     0,   159,   159,     0,   590,   631,     0,
     630,  1003,  1004,   592,   684,     0,     0,   992,     0,  1015,
     496,   495,     0,     0,     0,     0,   364,   310,     0,     0,
       0,   271,     0,   264,   361,   362,   363,     0,   277,   267,
     278,    73,    91,   352,     0,   335,  1413,   238,   194,  1411,
    1416,  1417,     0,   157,   739,   167,   156,   567,   158,   567,
     600,   498,   632,   589,     0,   690,  1011,     0,     0,     0,
       0,   134,   739,   145,     0,   281,   324,   329,   248,   273,
     287,     0,     0,     0,   279,     0,   280,  1418,     0,   159,
    1244,   570,   570,  1735,  1474,  1703,     0,  1013,  1016,  1014,
    1008,   126,   133,     0,   240,   253,     0,   252,     0,   341,
     276,  1414,  1254,   567,   148,   147,     0,  1020,  1019,  1018,
    1022,  1021,   739,   358,   251,   255,   254,   739,   570,     0,
     144,  1245,   149,  1017
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    46,    47,    48,   571,  2510,  2511,  2512,  2165,  1152,
    3231,  2166,  1153,  1154,  2514,   572,   573,  1704,   574,  2714,
    2088,  2457,  3213,    53,  2971,  2091,  1112,  2975,  3178,  2708,
    2970,  2459,  3254,  3307,  2972,  2092,  2093,  3179,  2094,   575,
    2565,  2566,   576,    56,   528,   577,  1782,   578,   838,   579,
    1783,  1731,  1511,  1172,  1721,  1419,   580,   101,    61,   581,
    2499,  2832,  3224,  2524,  3359,  2768,  2769,  3221,  3222,  2502,
    2167,  3288,  3289,  2579,  1713,  3283,  2238,  3166,  2171,  2153,
    2770,  2247,  3126,  2872,  2168,  2750,  2239,  3216,  1794,  2240,
    3217,  2991,  2241,  1757,  1786,  2503,  3290,  2172,  1758,  2498,
    2833,  1700,  2242,  3228,  2243,   529,  2754,   582,   563,   564,
     829,  1366,   565,   810,   583,   741,  1792,   584,   585,  2219,
    3036,  2604,  3037,  2298,  2213,  1428,  2295,  1838,  1761,  1429,
     516,  1853,  2605,  2550,  1839,   586,  1044,    69,    70,   962,
      71,  2985,    72,    73,  1678,  1679,  1680,   664,   677,   678,
    1484,  1922,   670,  1116,  1647,   652,   653,  2207,   692,  1751,
    1642,  1643,  2098,  2466,  1671,  1672,  1125,  1126,  1909,  3194,
    1910,  1911,  1476,  1477,  3075,  1659,  1663,  1664,  2119,  2109,
    1650,  2368,  2910,  2911,  2912,  2913,  2914,  2915,  2916,  1045,
    2642,  3086,  1667,  1668,  1128,  1129,  1130,  1676,  2129,    75,
      76,  2070,  2442,  2443,   625,  2927,  1503,  1681,  2646,  2647,
    2648,  2931,  2932,  2933,   626,   956,   957,   980,   976,  1492,
    1932,   627,   628,  1888,  1889,  2337,   983,  1925,  1942,  1943,
    2655,  1811,   811,  2154,  1516,  1369,   813,  1046,   814,  1344,
    1047,  1348,   816,  1048,  1049,  1050,   819,  1051,  1052,  1053,
     822,  1340,  1054,  1055,  1359,  1388,  1389,  1390,  1391,  1392,
    1393,  1394,  1395,  1396,  1100,  1682,  1057,  1058,  1059,  1060,
    1061,   630,  1062,  1063,  1599,  2064,  2441,  2920,  3082,  3083,
    2698,  2960,  3107,  3204,  3319,  3347,  3348,  1064,  1065,  1547,
    1548,  1549,  1966,  1967,  1968,  1969,  2058,  1593,  1594,  1066,
    2835,  1596,  1986,  2923,  2924,  1101,  1470,  1540,  1221,  1222,
    1517,  1443,  1444,  1451,  1863,  1458,  1463,  1893,  1894,  1471,
    2026,  1067,  1962,  1963,  2393,  1525,  1068,   720,  1228,  1551,
    1606,  2693,  2061,  1597,  2020,  1077,  1069,  1078,  1071,  1536,
    1537,  2404,  2666,  2667,  1993,  2125,   632,  1631,  2131,  2132,
     834,  1303,  1072,  1073,  1074,  1075,  1076,   634,  1223,   502,
     825,  3308,  1402,  1106,  1224,  1304,  2016,  1546,   587,   990,
    1957,   588,  1318,  1775,   589,  3066,  2885,  1332,  1796,  2252,
     531,   590,   591,   511,    82,    83,    84,   701,  1422,   592,
    1423,  1424,   924,    85,  1512,   926,   927,   594,   659,   660,
    1513,  1616,  1514,   595,   638,   596,  1096,   674,  1097,  1099,
     597,  1090,  2455,  2087,    90,    91,    92,   108,  1182,   598,
     646,   647,   599,    95,  1140,   661,   666,   600,   601,  3062,
     602,  2582,  1326,   512,   504,   505,   827,  1306,  1226,  1307
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -2907
static const int yypact[] =
{
    6509,   499,   841, -2907, -2907,   306,   499, 45538, 59953,   499,
      77,   871, 47462, -2907,   320,  5804,   499, 50348, 66583,   371,
     334, 28480,   496, 50829, 50829, -2907, -2907, -2907, 59953, 50348,
   51310,   499,   315, 60434, -2907,   499, 30404, 47943,   173, -2907,
   50348,    41,   234, 51791, 50348,  2145,   673,   246, -2907, -2907,
   -2907, -2907, -2907,   132, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,   147, -2907,
     224,   156, 28480, 28480,  1064,   289, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907,   327, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, 29923, -2907, -2907, -2907, -2907,
   -2907, -2907, 52272, 50348, 52753, 48424, 53234, -2907,   822, -2907,
     143, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,   165,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,   167,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,   169, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
     356,   676, -2907,   180, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907,  2145, 50348, -2907, 53715,   593,
     615,   503, 54196, -2907, -2907, 50348, -2907, -2907,   766,    70,
   -2907,   684, -2907, -2907, 48905, -2907, -2907, -2907,   740,   903,
     747, -2907, -2907, -2907,   549, -2907,   150, -2907, -2907,   598,
     559, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,   768,
   -2907, 63801, -2907, 60915, 54677, 55158, -2907,   525,  1030, 66600,
   27033, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907,   327, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, 50829, 59953, 50829,   537,   642,   993,   679,
   28961,   692, 30886,   705,   725,  1045,   728,   734,   748,   756,
     234, 27515, 55639, 55639,   -57,  4160, -2907, 55639, 56120, -2907,
     754, -2907,   794,   676, -2907,   822, -2907, -2907, -2907, -2907,
      67,   801, -2907,   811,  1096, -2907, -2907, -2907,   816, -2907,
   -2907,  1066, 18542, 18542, 61396, 61396,   822, 61396,   863, -2907,
   -2907,    46, -2907, -2907,  1064, -2907,   865, -2907,   676, -2907,
   47943, -2907, -2907,   225,  1158, 18542, 50348,   869, -2907,   879,
     869,   876,   888, -2907,  6509,  1245,  1134, 47943,   360,   360,
    1366,   360,   974,   991,  3467,  3731, -2907,  1756, -2907,   931,
   -2907, 50348,  1023,   966,  1238, -2907,   865,  1320,   390,  1129,
    1327,  5130,  1329,   964,  1331,   989,  1425,  9959, 18542, 43133,
   -2907,   676,   980,   985,  1220,  1342, -2907, -2907, -2907, -2907,
     784,  1244, -2907,  1489, 50348, -2907, -2907,  1090, 56601, 57082,
   57563, 58044,  1452, -2907, -2907,  1402, -2907, -2907, -2907,  1101,
   -2907, -2907, -2907,   191, -2907, -2907, -2907, -2907, -2907, -2907,
    1121, -2907,  1121,  1121, -2907, -2907, -2907, -2907,  1087,  1087,
    1283,  1103, -2907, -2907, -2907,  1453, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907,  1108,  1174, -2907,  1121,
   -2907,  1087, -2907, -2907, -2907, -2907, -2907, -2907, -2907, 66146,
   -2907, -2907, -2907, -2907,   411,   505, -2907,  1116, -2907, -2907,
     108,  1119, -2907,  1566, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907,  1126, -2907,  2104,  1087, -2907, -2907,  1485,   204,
    1140, -2907,  1496,   205, -2907,  1498,  1381, 18542, -2907,  1322,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,   234,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907,   601, -2907, -2907, 40440, -2907, -2907,
   66600,  1167,  1262, -2907, -2907, 18542, 18542,  1180,  3198, 55639,
   56120, 18542, 50348, -2907, 18542, 22084,  1182, 18542, 18542, 10465,
   18542, 26071, 55639,  4160,  1183, 50348, -2907,  1281,  1199,  1281,
     315, 28480,  1477, -2907,   212,  1490,  1423, -2907, 28480,  1423,
     514,  1226,  1501,  1423, -2907,   238,  1509,  1281, 31367, -2907,
    1281,  1231,  1450, -2907, -2907,   661, -2907, 40440, 12995, 64267,
    1707, -2907,  1513, 59953,  1251, -2907, -2907, -2907, -2907, -2907,
   -2907,   643,  1748,   123,  1752, 18542,   123,   123,  1266,   185,
     185, -2907,  1268, -2907,   186,  1270,  1287,  1758,  1776,   137,
     158,  1174,   123, 18542, -2907,   185,  1288,  1784,  1292,  1788,
     124,   133, -2907,   187, 18542, 18542, 18542,  1650, 18542,  9453,
    1786,  1796, -2907, 50348,   676,  1300,   822, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907,   149,  7423, -2907, -2907, -2907,
    1338, -2907, -2907, -2907, -2907,  1511, 18542, -2907, -2907,  1303,
    1477, -2907,   190, -2907, -2907, -2907,   682,  1477, -2907, -2907,
   -2907, -2907, -2907,   229,  1706, 39478, 39959, 59953,   676, 61877,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907,   620, -2907,   327,
   41993,  1305,  1309,   869, 50348, 50348,  1772, -2907, -2907, -2907,
   47943,   157,  1599,  1441, -2907, -2907,  1064,  1064, 13988,   152,
     209,    94, 14494, 19048,  1656,  1541,   217,   600,  1660, -2907,
    1546,  1767, 22084, 18542, 18542,   974,   991, 18542,   879, -2907,
   -2907, -2907,  1597, 50348, 46019,   774,   808,  1328,  1413,  1332,
       9,  1740, -2907,  1333, -2907,  1418, 50348, 66146,   214, -2907,
    1777,   214,   214,   268,  1779,  1424,   253,  1581,    43,   474,
    1333,  1436, -2907, 47943,   267,    44,  1333, 50348,  1426,   458,
    1333, 59953,  1167,   139, 12995, -2907,  1248,  1263,  1341,   324,
     122,  1383,  1388, 12995,  1481,  1503,   162,  1521,  1549,  1579,
    1622,  1635,  1639,  1643,  1646,   136,  1648,  1657,  1659,  1662,
    1673,  1691, -2907,  1703,   164,  1705,   170, 12995,  1710, -2907,
   41993,   -15, -2907, -2907,  1720,   174, -2907, 37433,  1335, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,  1427,
   59953,  1379,  1699,   822, 50348, 50348,  1242,  1702,  1753, 64733,
   -2907, 50348,  1587,  1436,  1589,  1357,  1828,  1612,   985,  1615,
    1386, -2907, 62358,  1880, -2907, -2907, -2907, -2907, -2907, -2907,
    1392, -2907, -2907, 18542, -2907, -2907, -2907,  1889, -2907, 64267,
   64267,  1121,  1121, -2907, -2907,  1861,  1487,  1488,  1889, -2907,
    1889, -2907, 59953, -2907, -2907, 64267, -2907, 59953,  1405,  1406,
    1889, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907,  1889,  1492, -2907,
    1493,  1494,  1504, -2907, -2907, -2907, -2907, -2907, 59953, 59953,
   -2907, 43133,  1403, 50348, 50348, -2907, 50348, 59953,  1411,   639,
   66600, 44576, -2907, -2907, -2907, -2907,  1037,  1105, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, 43133, -2907,  2138,
     822, 41038,  1415, 18542, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907,  1430,  1747, -2907, -2907, -2907,  6920,  1431,
   41078,  1433, 22084, 22084,  2302, -2907, -2907, 22084,  1435,   676,
   45057, 40958,  1422,  1443, 41419, 15000, 18542, 15000, 15000, 41459,
   -2907,  1445, 41499, 55639,  1407, 49386, -2907, -2907, 50348, -2907,
   18542, 18542,  4160, 49867,  1460, 28480, -2907, 28480, -2907,  1723,
   28480, -2907, -2907,  1887, -2907, 28480,  1728, 18542, 28480, -2907,
   28480,  1674,  1675,  1451, 28480, -2907, 50348,  1455, -2907, 50348,
   -2907, -2907, -2907, -2907,  1446,   713, -2907,   741,  1317, -2907,
   -2907, 18542, 18542, -2907, 41993,  1505, 18542, -2907, 18542, 42177,
   35698, 15506, 42177,  1941,  1941, 33772, -2907,  1613, 41539, -2907,
    1459,   950,  7913,  1458, -2907, -2907, -2907, -2907,  1461,  1462,
    1449,   676, 18542, -2907, 18542,  4482,  4482, -2907,   296, 64267,
   18542, 18542, 18542, 18542, 18542, 18542, 18542, 18542, 42652,  1550,
     211, 59953, 18542, 18542,  1469,   982, -2907, 18542,  1698, -2907,
    1472, 18542,  1557,   920, 18542, 18542, 18542, 18542, 18542, 18542,
   18542, 18542, 18542, -2907, -2907, 24595,   318,   683,  1798,  1817,
     -61,   346, 18542,  1812,  9959, -2907,   676, 38035,   140,  1812,
   -2907, -2907, -2907, -2907,   193, -2907, -2907, -2907, -2907,  1446,
   -2907,  1446, -2907, 59953, -2907, 50348,   225, 46981, 18542, -2907,
   -2907,  1499,  1497,  1506,  1555, -2907, -2907, 50348, 34253,  1780,
   -2907,   359,  1507, -2907, 40918,  1746,  1780,  1064, -2907, -2907,
   23096,  1627,  1787,  1726, -2907, -2907,  1711,  1712, -2907,  1510,
   42136, 19554, 19554, -2907,  1380, 41993,  1393, -2907, -2907, -2907,
   -2907, -2907, -2907,    76, -2907, 50348,    52, 31848, -2907,  1515,
     128, -2907,  2726,  1844,  1807,  1656,   600,  1522, -2907, -2907,
    1097,  1525, 62839, 50348,  1801,  1757,  1805,    69, -2907, -2907,
   -2907, 64267, -2907, 50348, 59953, 58525, 63320, 43614, 50348, 43133,
   -2907, -2907, -2907, -2907, 50348,   720, 50348,  6141, -2907, -2907,
   -2907,   214, -2907, -2907, -2907, -2907, -2907, 59953, 50348, -2907,
   -2907,   214, 59953, 50348,   214, -2907,  1157, 50348, 50348, 50348,
   50348,  1265, 50348, 50348, -2907, -2907,   -10,   -10,  1741, 10971,
     146, -2907, 18542, 18542, -2907, 18542,  1704, -2907,   762, -2907,
    1750,   163, 50348, -2907,  1865, -2907,  1586, 50348, 50348, 50348,
   50348, 50348,  1524, -2907, -2907, -2907, -2907, -2907,  1533, -2907,
    1548,  1893, -2907,  1436,  1901, 46500,   793,  1491,  1902,  1592,
    1909, 11477,  2020,  1800, -2907, -2907,  1783, -2907, 18542,  1567,
    1569,   108,   767, -2907, -2907,  1573,  1406,  1590,  1593,  1574,
    1576,   777, 64267, -2907,   798,  1889,   116,  1577,  1580,  1500,
    1089,   502,  1395,   204, -2907, -2907, 43133,   205, -2907,  1802,
     153, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,   809,
   27999, -2907, -2907,  2040,   822,  2040,   588, -2907, -2907,  2040,
   -2907,  2024,  2040, -2907,  1167, 64267, -2907,  8231, -2907, 18542,
   18542, -2907, 18542,  1918, -2907,  2076,  2076, 64267, 22084, 22084,
   22084, 22084, 22084, 22084,   619,  1288, 22084, 22084, 22084, 22084,
   22084, 22084, 22084, 22084, 22084, 23602,   492, -2907, -2907,   815,
    2048, 18542, 18542,  1937,  1918, 18542, -2907, 64267,  1603, -2907,
    1610,  1619, 18542, -2907, 64267, -2907, 50348,    27,    24,  1623,
    1624, -2907, -2907,  1626,  1477, -2907,   858,   897, 50348,  3884,
    4141,  5553, -2907, -2907, 18542,  1953,  1887,  1887, 28480, -2907,
   18542,  1630, -2907, -2907, 28480,  1970, -2907,  1887, -2907, -2907,
   32329,  1887,   843, -2907, 64267, 50348,   877, 64267, 40440, -2907,
   12995, -2907, 64267, -2907, -2907, -2907, -2907, -2907, -2907,  1632,
    1636, 18542,    80, -2907,  8271,  6678, -2907,  1634, -2907,  1625,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907,  1640,  1638, -2907,  1644,
   50348, -2907, 20060, -2907, 59953, -2907, -2907, 18542, 50348, -2907,
   18542,  1645,  8312, -2907, -2907, -2907,   220,   847, 42158,   346,
    4481,  4481,  4481, 42177, -2907, -2907, -2907,  1661, -2907, 22084,
   22084, -2907,  6082,  2481,  9453, -2907, -2907,  1980, -2907,   775,
   -2907,  1649, -2907, -2907,  3387, -2907, 35698,  6132, 18542,   219,
   -2907, 18542,  1469, 18542,  1736,  4481,  4481,  4481,   231,   231,
     220,   220,   220,   847,   346, -2907, -2907, -2907,  1653, 18542,
   43133, -2907,  1654,  1658,  2008,  1292, 18542, -2907, -2907, 28480,
    1460,   -15, -2907,  1650,  1460,  1889,  4482, -2907,   879, -2907,
     879, -2907, 41993, 50348, -2907,  1317, 28480,  1701,  2102,  2122,
   59953, -2907,  1666,  1812,  1676, -2907, -2907, -2907,  1679, 18542,
    4784,  1679, -2907,  1780,     6,  1883,  1124,  1124,  1380,  1888,
   -2907, -2907,  1733, -2907, -2907, -2907, 18542, 11983,  1417, -2907,
    1419, -2907, -2907, -2907, -2907,  1671, -2907, -2907,  1938, -2907,
   50348, -2907, -2907, 22084,  2120, 18542, 32810,  2121,  1925, -2907,
   -2907, -2907,  1769,  1333, 18542,  1917, -2907,   172,  1687,  2041,
     280,  1993, 59953, -2907,   333,   339, -2907,   184,  2043,   153,
    2046,   153, 43133, 43133, 43133,   884, -2907, -2907,   822, -2907,
   -2907,   886, -2907,   521, -2907, -2907, -2907,  1782,   618,  1333,
    1436, -2907, -2907, -2907, -2907, -2907, -2907, -2907,   285,   724,
    1333,  1785, -2907,  1790, -2907,  1793,   739,  1333, -2907, -2907,
     146,   146,   146, 12995, -2907,  1929,  1939,  1713, 41993, 41993,
   41993,  1717, -2907,   168, -2907, 59953, -2907, -2907, -2907,  1704,
    2050,   822,  1753, 50348,  1436,  1715,  2178,   985,  1386, -2907,
    1876,   712,   751, -2907, 59953, 50348, 50348, 50348, -2907, -2907,
   -2907,  1719,  1718, -2907, 59006,   -45,  1943,  1942, 50348,  1765,
   50348,  1332,  2188, 50348, -2907,   902, 16012,  2082, 50348,  1730,
   -2907, -2907, -2907, -2907,  1889, -2907, -2907,   -18,   -18, -2907,
   59953, -2907, -2907,  1735, -2907,  1737, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, 59953, -2907,
   -2907, 43133, -2907, 44095, -2907, -2907, -2907, -2907,   822, -2907,
     822,  1968, 59953, 38516,   822, 38997,   822, -2907,  1743, -2907,
   41993, 36187, 41993,  1937, -2907,   183,  2076,  4192,  4192,  4192,
    2855,  2074,   222,  1745,  4192,  4192,  4192,   275,   275,   183,
     183,   183,  2076,   492,   754, 45057,  1751, -2907, 41993, 41993,
   -2907, -2907,  1749, -2907, -2907, -2907, -2907,  1754,  1759, -2907,
   -2907, -2907, -2907, -2907, 59953,  1130, -2907,  1460,   173,   173,
     173,   173, -2907, 50348, 50348, 50348, 41993,  2183,  2066, -2907,
   -2907,  1887, 41993, 50348, -2907, 25586, -2907, 50348,  2085, -2907,
   -2907, -2907, 50348,  2174,   913, -2907, -2907, -2907, -2907, -2907,
   41827, 18542, -2907,  2114, -2907, 18542, 18542, -2907, -2907, 35698,
   -2907,  1760,  9453, 41849, -2907,  2061, 36209, -2907, 41993, -2907,
    4482, 18542,  2695,  4614, 18542,  1761, 18542,  2092, -2907, -2907,
    1763, -2907, -2907, 64267, 18542,  1766,  3630, 22084, 22084,  4226,
   -2907,  5421, 18542,  9453, -2907, 37455,  1762,  1771,  1741, 16518,
   -2907,  1976,  1770, -2907,  1953,   146,  1613,  1953,  1775, -2907,
   -2907, -2907,  1789, -2907, 18542,  1920,   506,  3508, 59953,   918,
   -2907, 34253,  1701, 18542,   676,   312, -2907, -2907,  1773, -2907,
    1679, -2907, -2907, -2907,  1995, -2907, -2907, -2907, 50348, -2907,
    1791, -2907, 31848,  2105,  9453, -2907, 31848, 50348, 50348, 36256,
    2132, -2907, 59953, 59953, 59953, -2907, 59953,  1781,  1794,   807,
    1797,   717, -2907,  2095,   807,  2112,   265,  1332,   253,  3653,
     624, -2907, -2907, -2907,  1862, 50348, -2907, 59953, -2907, -2907,
   -2907, -2907, -2907, 43614, -2907, -2907, -2907, 43133, 35216, 43133,
   50348, 50348, 50348, 50348, 50348, 50348, 50348, 50348, 50348, 50348,
    1799,  1804,  1810,  1741, -2907, -2907, -2907, -2907, -2907, -2907,
     474, -2907, -2907,   168,   822, -2907,  1803, -2907, 46500,  2145,
    1592,  2251,  1753,   660, 59472,  1813,  1795, -2907,   923,  1436,
    1806,  2262, -2907,   793, 46500, -2907, -2907, -2907,  2224, -2907,
     525,   201, -2907,   985, -2907,  2145,  1386, -2907,  2145, 41993,
   59953,  1873, -2907,  1406,  1821, -2907, -2907,  1406, 64267,  1406,
   -2907, -2907,   153, -2907,   929, -2907, -2907, -2907, -2907, 59953,
    1823, -2907,  1823, -2907, -2907,  1823, -2907, -2907, -2907, -2907,
   22084,  2149,  1830, 64267, -2907, -2907, 50348, -2907, -2907, -2907,
     936,  1831,  1953, 50348, 50348, 50348, 50348, -2907, -2907, -2907,
   17024, 18542,  1870, -2907,  1833, 13501,  2142, -2907, 25101, -2907,
     196,  1835, 32329, -2907, 59953, -2907, -2907, 18542, 41993, -2907,
   41993, -2907, -2907, -2907,  7582, -2907,  1834,  1838, 59953, 18542,
   -2907, -2907,   341, 18542, 18542,  6082, -2907,  7026, 18542, 64267,
     943,  6082,   387, 18542,  4855,  4918, 18542, 18542,  5617, 36311,
   -2907, 18542, 12489, -2907,  1839, 18542, 36501, 34734, -2907, 28480,
    2066,  1840, -2907,  2066,   822, -2907, 41993, 18542, -2907, -2907,
   -2907,  1894,   469, 30404,  2064, -2907, -2907,  1858, 59953, -2907,
    1920, 41993, -2907, -2907, 35698, -2907, -2907, -2907, -2907, -2907,
    2289,  1768,  1848,  1849, -2907,  1330, -2907, -2907, 59953,  1856,
   -2907,  1857,   807, -2907, 59953,  1899, -2907,   248,  2164,   102,
   -2907, 18542, -2907,  2253,  2324,  2095,  1871, 59953, 50348, 22084,
   -2907,   626,   181, -2907,  2152, 50348,  1899,  2288, -2907, -2907,
   -2907,   717, -2907,  2189,  2106, -2907,   214, -2907, 18542,   717,
    2107,   125, 59953, -2907, -2907,  2761, -2907, 64267,   153,   153,
   -2907, -2907,  1874,  1878,  1879,  1881,  1884,  1885,  1891,  1892,
    1895,  1896,  1900, -2907,  1903,  1910,  1911,  1921,  1926,  1927,
    1932,  1934,  1108,  1935, -2907,  1936,  1773,  1940,  1944,  1946,
    1947,  1951, 65199,  1955,  1956,  1957,  1958,  1116,  1959,  1037,
    1105, -2907, -2907, -2907, -2907, -2907, -2907,  1140,  1960, -2907,
    1907, -2907, -2907,  1966, -2907,  1969, -2907, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907,   146,  1167,    88, -2907, 59953,  1930,
    1765,  2350, 17530,   733,  2134,  1919, -2907,   822,  1592, -2907,
   46500,  1677,   621,  1942, -2907,   207,  1765, -2907,  2306,  1592,
    1965,  2382, -2907,  2173, 59953,  1963, -2907, -2907, -2907, -2907,
   44095,  1823,  3228, 22084, 64267,   963,   988, -2907,  2455,  2124,
    2066, -2907, -2907, -2907, -2907, -2907,  1967,   -70,  1973,  8947,
    1964, -2907, -2907, -2907, -2907, -2907, -2907, 41993, 41993, 59953,
    2150, -2907, -2907,  1975,  1979, 33291,  2422,  1981, -2907, 12995,
   -2907,  2290, -2907, 26552, -2907, 41993, 18542, -2907, -2907, 37502,
    2299,  6082,  6082,  7026,  1002, -2907,  6082, 18542, 18542,  6082,
    6082, 18542, -2907,  1988, -2907,  1003, -2907, 36810, -2907, 65665,
   -2907, -2907,  1870,   822,  1870, -2907,  1984, -2907, -2907, -2907,
    2044, -2907,  1004, -2907,  2404,  1920, 18542, -2907, -2907,  1998,
   31848, -2907, -2907, -2907, -2907, 31848,   807, -2907,  2159,  1899,
    2002, -2907, -2907, -2907, -2907, -2907, -2907, 36832, -2907,    58,
   18542, -2907,   230,  2855, -2907, -2907, -2907, -2907,  1899,   985,
   -2907, 50348,  2463,  2356, -2907, -2907, 41993, -2907, -2907,  1889,
    1889, -2907, -2907,  2174, -2907, -2907, -2907, -2907,  1140,   460,
   35216, 50348, 50348,  2004, -2907, -2907,   474,  2386,  1009,   793,
   -2907,  2145,  2145, 41993, 50348,  2359, 46500, -2907,  2468,  2010,
   50348,  1765,   959,   959, -2907,  2158, -2907,  2166, -2907, -2907,
    2485,   299, -2907, 18036, 50348, -2907, -2907, 29442, -2907,  3228,
    1026, -2907, -2907,  2025,  2029, -2907,  1870, 18542,  2030, 18542,
   -2907, 20566,  2031, -2907,  2499, 18542,  2098, 24108, -2907, 18542,
   -2907, 50348, 55639,   -10,  2042, 55639, -2907, -2907, -2907, 18542,
   -2907,  6082,  6082,  6082, -2907, -2907, -2907,  2243, -2907,  2150,
   -2907,  2150, 18542,  2145,  2038, 59953,   676,   -17, -2907, 41993,
   -2907, -2907, -2907, 50348, -2907, 43133, -2907,   807,    13,  2049,
   18542, 36879,  2274, -2907, -2907,  2312, -2907,  2371, -2907,  2116,
     472,  2135, -2907, -2907, -2907, -2907,  1167,   822,  1592,  1942,
    1965, -2907,  2063, 50348,  2145,   793,   525, -2907, -2907, -2907,
   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,
    2145,  2493,  2286,  2502,  2145, 41993,  1873, 18542, -2907,  1042,
    2500,    82, -2907, -2907,  2570,  2150,  2079, 20566,  2086, -2907,
   59953,  2088, 41993,  2230, -2907, -2907,  2089, -2907, -2907,   146,
   18542, -2907, 37557,  2533,  1741,  2098,  2098, -2907,   469, -2907,
   -2907,  2503, 29442,  2466,   985,   807,  1067, -2907,  2109, -2907,
   -2907, -2907, -2907,  1436, -2907, 36934,  2334,   135,  2318,  2049,
   18542, -2907,  2175, -2907, -2907, -2907,  2561, -2907, -2907, 46500,
    2103,  1965,  1942,  1765,  1965,  2323, -2907,  2325, -2907,  2111,
   37124,  1592, 29442, 59953, 59953, 59953,  2113,  2098, -2907,  2117,
   -2907, -2907, -2907, 49386, -2907,  2119,  2123, -2907, 18542,   254,
   -2907, -2907,  2165, 50348,  1072,    26,  2312, -2907, 43133, 35216,
    1742,    13,  2418, -2907, -2907, -2907, -2907,   106,  2339, -2907,
    2341, -2907, 41993, -2907,  2145, 46500, -2907, -2907, -2907, -2907,
   -2907, -2907, 29442,  2500,  1460, -2907, -2907,   359, -2907,   359,
   -2907, -2907, -2907, -2907,   822, -2907,  1422, 21072, 21072,  2131,
    2145, -2907,  1460, -2907,  2250,  2318, -2907, -2907, -2907, -2907,
   -2907,   476,   476,  2517, -2907,  2197, -2907,  1965,  1085, 59953,
   -2907,  1679,  1679, 22590,  2281,   138, 40998, -2907, -2907, -2907,
   -2907, -2907, -2907, 34253, -2907, -2907,  2614, -2907,   195, -2907,
   -2907, -2907,  1592,   359, -2907, -2907,  2604, -2907, -2907, -2907,
   -2907, -2907,  1460,   807, -2907, -2907, -2907,  1460,  1679, 21578,
   -2907, -2907, -2907, -2907
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2907, -2907, -2907,  1962,    79, -2907, -2907,   141, -2907,   928,
   -2907,   126,  -637,   490, -2907,    90,    93, -1094,     8, -2907,
   -2907, -2907, -2907, -2907,  -463,   194, -2907, -2907,  -604, -2448,
    -554, -2907, -2876, -2906, -2907, -2907,  -697, -2858, -1981,    97,
   -2907, -2907,    98, -2907, -2907,     4, -2019,    99, -2456,   100,
    -706, -1143,  -887, -1158, -2907,  -124,   101,  1191, -2907,     7,
   -2107, -2761,  -571, -2907,  -673, -2907,  -342, -2907,  -618, -2907,
    -831,  -626,  -657, -2667, -1099, -2907,  1526,  -378, -2907,   527,
   -2907, -2471, -2907, -2907,   519, -2907, -1109, -2907, -2172,   131,
    -592, -2513, -2481, -2093,  -702,   188,  -599,   166, -2083, -1206,
   -2907,   544, -2907,  -582, -2907,  -696, -2181,   103, -2907, -2907,
    1297,  -787, -2907,  1347,   104,  1382, -2024,    20,    23, -2907,
   -2907, -2907, -2907,  -785,   482, -1165, -2907,   417, -2907, -2907,
   -2907, -2907,  -188,   160, -2907,   119,   240,   -30,   -33, -2907,
     -29, -2907, -2907, -2907,   576, -2907, -2907,    18,    47,  1614,
    -982, -2907, -1599,   646, -2907,  1778,  1808, -2118,  -685,   -68,
   -2907,   622, -1596, -2057,  -549,  1033,  1594,  1598,   367, -2336,
   -2907,  -538, -2907,   -12, -2907, -2907,   610,  1078, -1503, -1502,
   -2907, -2115, -2907,  -457,  -346, -2907, -2907, -2907, -2907, -2907,
   -2334, -2209,  -527,  1054, -2907,  1621, -2907, -2907, -2907, -2907,
      33, -1486,  2719,   657,   130, -2907, -2907, -2907, -2907,   105,
   -2907,   814,  -178, -2907,  2137,  -542,  -621,  1816,    48,   221,
   -1700,    -9,  2156,   424, -2907, -2907,   426, -2011, -1458,   380,
    -256,  1408, -2907, -2907,  -552, -1297,  -780, -2907, -2907,   264,
    -529, -2907, -2907, -2907,  1050,  1949, -2907, -2907,  2576,  3012,
   -2907,  -623,  3437,   832,  -768,  1832,  -863,  1836,  -868,  -876,
    -871,  1843,  1845, -1483,  4859,  1716,  2685, -2150, -2907,   179,
   -2907, -1422,   208, -2907, -2907, -2907, -2907, -2224, -2907,  -421,
   -2907,  -419, -2907, -2907, -2907,  -545, -2494, -2907,  3872,   779,
   -2907, -2907,   382, -2907, -2907, -2907, -2907, -1508, -2907,  5692,
     685, -2907, -1951, -2907, -2907,  -931,  -644, -1059,  -963, -1164,
   -1303, -2907, -2907, -2907, -2907, -2907, -2907, -1443, -1686,  -232,
     744, -2907, -2907,   820, -2907, -2907, -2907,  -692, -1699,  -500,
   -2034, -2907, -2907, -2907,   749,  1306,    85,  -649, -1563, -2907,
     727, -2289, -2907, -2907,   357, -2907,  3449,  -496, -1081, -2325,
     358, -1312,   109, -2907,  1678,   277,  2524,  3748, -2436, -2907,
   -2907,  -536, -2550, -1083, -2907, -1356, -2907, -2907,   107, -2907,
     719,   110, -1576, -2907,    10, -2907,  -374, -2907, -2907, -2473,
   -2907,   111,   112,  2202, -2907, -2907, -2907,  -467, -2907,  -509,
    -506, -2907, -2907,    25,  -894,  1396, -2907,   114,   564, -2907,
     861, -2907,   700,   115,   113,   117,  1184, -2907, -2907, -2907,
      30,  -490,   349, -2907,  1185, -2907, -2907,  2799, -2907,   118,
   -2907, -2907,   120, -2907, -2907,  2784,  2721,   121,    11, -2418,
     127, -2696, -1637,    -7, -2907, -2907, -2907,  -513, -2907, -2434
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1959
static const yytype_int16 yytable[] =
{
     503,   721,   693,  1070,    57,  1171,   977,    62,    52,   812,
      79,    97,  1135,  1735,   503,   682,  1462,  1745,    74,  1355,
      65,  1311,  1985,    66,  1632,  1515,  1734,   831,   667,  1308,
      89,  1102,   815,  1425,  1316,  1699,    74,  1361,  1890,  2068,
    1418,   697,  1400,   593,  2471,   698,  1405,  1802,  2101,  2504,
    1710,  1946,  1706,  1748,   623,  1688,  2211,   929,  1806,  2444,
     840,  2464,  1439,  2447,   923,   503,   503,  1440,   833,  2497,
    1438,  1840,  2003,  2004,  1170,  1436,  1176,  2859,  1180,    49,
    1739,   959,  2540,  2541,  2542,  2425,   979,  2861,  1603,  1825,
      50,   680,  2837,    51,  2839,  1609,   713,    54,    55,    58,
      59,    60,  2873,    63,    64,   623,   623,    77,  1543,  2460,
      78,    80,    81,  2665,    86,    87,   500,    88,    93,    67,
      94,    96,  2552,  2074,  2876,   999,   930,    98,  -809,  -817,
     500,  2226,   514,   985,   999, -1932, -1932,   639,  -817,  1341,
    1342, -1806,  -814,  1124, -1207, -1182,  -814,  -480, -1207, -1946,
   -1946,  2568, -1204, -1204,   517,   663,  -483,  2729,   999,  2121,
    3253,  2734,  2124, -1806,  3040,  1127,  1353, -1797,  1088, -1814,
   -1797,  1363, -1806,   517, -1814, -1937, -1937, -1955, -1955, -1208,
    3058,   500,   500, -1957, -1957, -1208,   499, -1205, -1205,  2222,
    -776,  -789,  -804,  1408,  1867,   517,  1613,  1113,   517,  1869,
     629,   517,   694,   695,  2561,  2557,  3054,  2340,  -438,   672,
    2505,  1645,  2015,  1084,   705,  2391,  1363,  2995,  1412,  2610,
    2612,  1746,  2615,   999,  3331,  2649,  2369,  2370,  1091,   631,
    1747,  1559,  1610,  1412,   517,  2575,  1561,  2376,   999,   735,
      68,  2380,  1559,  3129,  1691,  -480,  1560,  1561,  1711,  1486,
     685,   629,   629,  3010,  -483,   749,  2018,  -203,    68,     3,
       4,   622,  -203,  1361,  2018,  3211,  1569,  1363,  1363,  3142,
     815,  1719,  2978,   690,  1722,  1723,    68,  1569,   690,  1335,
     631,   631,  1711,  1711,  1799,   681,  1867,  3029,   530,  -613,
    1868,  1869,  1432,  1308,  3323,  2065,  3006,  1651,  1571,  3368,
     636,   636,  2756,  3284,  2134,  3255,  2877,  3078,  3375,  1571,
     736,   960,   622,   622,   696,  1651,  1336,  2506,  1446,    21,
    2363,  2364,  2365,  2127,  2743,  3055, -1042,  2701,  2351,  2700,
    2217,  2349,  2703,  2205, -1042,    68,  1694, -1931, -1931,   686,
    3056,  1652,  1611,  2759,  1635,   650,  2632,  1702,  2055,  3309,
    2621,  2169,  1559,  2173,  3274,  3157,  2056,  1559,  1737,  1652,
    2436,  1560,  1561,  3171,  2992,  1702,  2962,   688,  1648,  2964,
     535,  3172,  1724,  2500,  1120,   567,  2532,  1718,  2772,  -749,
     966,  2352,  1501,  1341,  1342,   716,  3028,   641,  2742,  3049,
    1114,  1092,  1569,  1093,  1539,  3048,  1308,  1913,   979,  1353,
    2096,   679,   679,   737,  1733,  1740,  3060,   604,  3219,  2497,
     959,  2497,   107,  2725,   929,   967,  1144, -1063,  2883,  1571,
    2313,  1426,  1145,  1653,  1571, -1063,   538,  3339,  1913,  -480,
    -633,  1487,  1502,  3363,  2128,  3285,   689,  2993,  -483,  2066,
     738,   969,   780,   651,  3338,  1712,  1356,   961,  2662,  1122,
    2773,  2341,  3369,  3007,  1654,  1709,  1364,    25,    26,    27,
     815,   709,  1085,  1960,  1612,  3324,  2878,  3376,  1357,  3220,
    1147,  2722,  1654,  1649,   929,   739,  3124,   603,  3140,  1712,
    1712,  2097,  3237,  3212,  1683,  1684,   937,  2384,  1115,  1749,
    1337,  1696,  2206,  1687,  1950,  3134,  -480,  3132,  2649,  2622,
    1636,  1364,  2763,  1867,  2501,  -483,  1531,  1868,  1869,  1709,
    -749,  2151,   690,  1725,  2286,  1655,  3286,  2900,  3327,  2353,
      32,  1726,  2350,  1146,   740,  3057,  2891,  3118,  1985,  2507,
    3035,  2508,  2774,  1655,  3173,  1086,  1750,  2723,  1961,  3355,
     682,   673,   605,  1709,  1709,  3332,  2996,  3298,   993,  2764,
    2869,  1486,  1364,  1364,   826,   750,   987,    37,  3130,  2509,
    2548,  2549,  2881,   928,   973,  2765,  3076,   988,  3149,  2152,
    2135,   687,   929,   929,  1339,  3297,  1608,   515,   669,  2218,
     718,  1488,  3317,  2146,   719,  2204,  1685,    74,  1356,    39,
    3012,   682,  2469,  2449,  2837,   925,  2839,  1356,  3017,  2571,
      42,  1338,   635,   503,  2121,  1697,  2474,  2462,  1686,  -480,
    1357,  3318,  1365,  2019,   503,  2274,  3019,  3020,  -483,  1357,
    1634,  2427,  1526,  -809,  1358,  1735,  1789,  2619,   815,  1136,
    2986,   697,  1627,  1360,   722,   698, -1806,  -814,   718, -1207,
   -1182,  2071,   719, -1207,  1528,   503,   503,  3097,  -480,  1554,
    -480,  2552,    45,  2562,   952,  3121,   691,  -483, -1806,  -483,
    3122,  1089, -1797,  2766, -1814, -1797,  1528, -1806,   503, -1814,
     950,  2643,  2767,   683, -1208,  3236,  1147,  1094,  1089,  1884,
   -1208, -1042,   966,  1738,  3242,  1343,  1347,  -804,    57,  2307,
    1604,    62,    52,  2075,    79,    97,  2929,  1711,  1095,  1539,
    3243,  2533,    74,  2057,    65,  1416,  1417,    66,  1399,  1404,
    1225,   503,  1305,  1316,    89,  1729,  1592,   967,   934,   500,
    1416,  1417,  2151,  1103,  1589,  1590,  1591,  1592,  1803,  1804,
     500,  1148,  3238,  1495,   675,  1149,  3033,  2977,  3109,  1730,
    3111,  3356,  3004,   969,  -203,  -203,  1144,  2321,  2437,   684,
    2752,   953,  1145,  1379,  1380,    68,   517,  1120,  2859,  2633,
    2634,  2635,  2636,    49,  2709,  1150,  3052,  1779,  1881,  1882,
    1883,  1884, -1063,  2979,    50,  3038,  2753,    51,  3304,   700,
    2494,    54,    55,    58,    59,    60,  2204,    63,    64,   629,
     815,    77,   826,   699,    78,    80,    81,   812,    86,    87,
     629,    88,    93,    67,    94,    96,  2169,  2169,  2169,    68,
     681,    98,   519,  1813,  3049,  3005,  3053,  2710,   631,  1743,
     815,   815,  1899,  3296,  3357,  2348,  3299,   517,  2255,   631,
     503,  1914,  1122,   519,  2181,  1151,   815,  1587,  1588,  1589,
    1590,  1591,  1592,  2837,  2184,  2839,   730,  2187,  1935,  3366,
     939,  3358,  3185,  1146,  1702,  2301,   717,  1711,  1559,  1308,
    2302,   951,   831,  1824,  2348,  1703,   973,  1383,  1384,  3270,
    3271,  1830,   734,  2968,   520,  1356,   517,  1959,  1539,  1123,
     931,   742,   636,  1488,  3127,  3383,  2322,  1989,  1702,  3377,
    1314,  1985,   744,  1569,  1712,   520,  2323,  1357,   929,  1705,
    3205,  1832,  3206,  2417,   696,   923,   746,  1827,  2001,  2401,
    2969,  1358,   986,  1890,  2072,  2303,  1308,    99,    21,  3361,
     928,  3311,  2746,   836,    68,  1571,   745,  2671,   503,   503,
    2418,  1905,  2357,  1081,   503,  1840,  1729,   503,   503,  3116,
     503,   503,   503,   503,  2280,  2282,  2296,  1479,    74,  2281,
    2283,  2284,  2279,  2294,   503,  3141,  2278,   519,  1709,  1608,
    1730,   503,  1826,  1711,   100,  1505,  2593,  3232,  1508,  1356,
     748,  2508,  2597,  2039,  1826,  2599,  3257,   518,  1711,  2531,
     928,  1225,   826,  1879,  1880,  1881,  1882,  1883,  1884,  3158,
    1144,  1357,  2953,   747,   623,  2450,  1145,  2451,   503,  2785,
    1315,   623,   726,   751,   727,  1360,  1147,  2005,  2747,   682,
    2528,  2180,  1489,   752,  2262,  1144,   503,  3215,  1496,   520,
    2469,  1145,  1735,  2529,   728,   837,   729,   503,   503,   503,
     815,   503,   503,  1345,   679,  2021,  2285,   935,   102,  2543,
    2287,  1834,  3159,  2289,   519,   737,   999,  2419,   523,  2480,
     524,  3160,  2420,  2143,  1712,  1354,    25,    26,    27,   503,
    2300,  2200,  2201,  2202,  2304,  1149,  1766,  2306, -1256,   523,
     500,   524,  2748,  3161,  2749,   527,  2231,   500,   928,   928,
    2179,  3265,   738,  1639,  1640,  2535,  1646,   698,   698,  1397,
     698,  1482,  2040,  -492,  2534,  1150,   527,  1146,  1493,  2190,
    2539,  1089,  1410,  1767,  2197,  1411,   520,  -492,  2041,  1836,
    2027,   503,  -492,  2042,   999,   503,   503,  2564,  1709,    32,
    2680,  1625,  1146,  1144,  1626,   503,   503,   503,  2472,  1145,
     503,  1120,   753,   999,  1907,  1543,  1121,  2028,  3044,  1908,
     629,  1522,   936,    45,  3162,  1315,  2576,   629,  -557,  2155,
     826,  2043,  2584,  -557,  2259,   937,    37,  3163,   521,   718,
    1712, -1182,  -492,   719,  1736,  1151,   740,  2169,  2896,   631,
      68,  2173,   815,  2840,   718,  1712,   631,  1225,   719,   938,
     718,  2059,  -492,  1144,  1607,  2060,  1225,  1769,    39,  1145,
    1494,  2182,   941,   523,  1499,   524,  2185,   109,  2421,    42,
     513,   622,   103,   519,  1421,   944,  1122,   566,   622,  2422,
    1225,   104,   946,    43,  1949,  1445,  1985,  1950,  1079,  1080,
     527,  1082,   649,  -557,  1709,   945,   662, -1256,   947,  -492,
    1146,    21,   522,  1898,   948,  1900,  1901,    44,  -492,  1709,
     982,  1523,  1951,  1351,  1352,  1952,   105,  3373,   949,  2029,
    1147,    45,  1527,  1123,  2030,  2245,   950,  2246,  2346,  2031,
    2271, -1928, -1928,  2214,  1421,   520,  2215,  2358,  2263,  2359,
    -557,  1952,  1373,  1374,  1345,  1147, -1929, -1929,  2269,  1541,
     523,  2270,   524,   815,  3364,  3365,  2739,   984,  2741,  1354,
    1146,  1144,  2644,  3340,   991,   106,  2651,  1145,   525,  2272,
    2044,   989,  2270,  2308,   526,  1174,  2360,   527,  2361,  1149,
    2290,  3352,   826,  2291,   992,  2314,  2334,   839,   993,  2335,
    2895,  3382,  1773,  1553,  1098,  1774,   815,   929,  1776,  1777,
    1178,  2519,  1556,  2521,  1149,  1117,   503,  1119,   815,  1175,
    1379,  1380,   826,   826,  2381,  2342,  1083,  2382,   994,  1605,
    3164,  2783,  2347,  3165, -1930, -1930,   696,   696,   826,   696,
    1615,  3380,  1421,  1421,  1179,  2776,  3381,  1087,   815,    25,
      26,    27,  2516,  1104,  2518,   815,  2944,  1107,  2385,  1105,
    2415,  2382,  -492,  1147,  2740,  2522,  2445,  2526,  2523,  1108,
    2527,   522,  2383,   824,  1305,  2383, -1933, -1933,  1146,  2606,
    2387, -1934, -1934,  2587,   928,  2032,  1950,  2855,  2775,  1151,
    2784,   735,  1110,    10,  2656,   815,  2033,  2382,   815,  2717,
    1305,  1111,  2718,   815,  2868,  1118,   503,  2215,    74,  1139,
    2889,  1137,    32,  2890,  1151,   929,   925,  2897,  2142,   523,
    2898,   524,  1149,  1147,  2945,   503,   503,  1952,   718,  1141,
     503,  1107,   719,   503,  1383,  1384,  1142,   525,   503,   503,
     503,   503,   679,   526,  3071,  1181,   527,  1952,  1143,    37,
    1155,  1543,  1150,   503,   503,  1156,  1157,  1173,   503,  1177,
     503,  1309,   736,   503,    21,  1310,  2483,  1312,   503,  3072,
     503,   503,  2382,   503, -1935, -1935,  1158,   503,  2188,  2595,
    2596,    39,  1149,  3100,  3105,  3114,  1952,  1950,  3115,  1313,
    3148,  1317,    42,  2215,   503,   503, -1936, -1936,   623,   503,
     623,   503,  2469,   623,   503,  2560,  1953,  3182,   623,  1319,
    1952,   623,  2189,   623, -1938, -1938,    74,   623,  1954,  1331,
    1159,  1955,  1151,  3251,  1321,   503,  3252,   503,  1958,  2068,
    1333,  1147,   826,   503,   503,   503,   503,   503,   503,   503,
     503,  1305, -1939, -1939,    45,   503,   503,  1334,  3277,   500,
     503,  3278,  1339,  3322,   503,  1766,  3252,   503,   503,   503,
     503,   503,   503,   503,   503,   503,  3362,  1343,   503,  3252,
    1763,  3070, -1940, -1940,   500,   503,   500,  1225,  1346,   500,
    1305,  1349,  1151,  1347,   500,  1368,  2195,   500,  1350,   500,
    1149,   817,  1767,   500,  2103,  1926,  1362,  1927,   698,  1367,
    1929,   503,    25,    26,    27,  1933,  1370,  2783,  1936,  2987,
    1937,   824,  1160,  1398,  1941, -1941, -1941,  1956,  2248,   629,
    2196,  2831,  1401,   503,  1403,  3180,  1406,  1768, -1942, -1942,
      68,  1095, -1943, -1943,   503,   503, -1944, -1944,    21, -1945,
   -1945, -1947, -1947,  1407,   629,  1409,   629,  1427,   631,   629,
   -1948, -1948, -1949, -1949,   629, -1950, -1950,   629,  1430,   629,
    1433,  1161,  1460,   629,  1473,    32, -1951, -1951,  1475,  1162,
    3034,  1483,  2155,   631,   826,   631,  1769,   519,   631,  1478,
    1305,  1163,  1305,   631, -1952, -1952,   631,  1854,   631,  1490,
    1151,  3341,   631,  3342,  1491,   815, -1954, -1954, -1956, -1956,
    1498, -1256,    37, -1958, -1958,   622,  1497,   622,  1504,  2955,
     622,  1509,  1164,  1752,  1753,   622,  2122,  2123,   622,  1510,
     622,    38,  1225,  1519,   622,   503,   503,  1518,   503,  -608,
    -608,  1521,  2602,  -780,    39,  1381,  1382,  -787,    68,   520,
    1383,  1384,  1828,  -777,  1829,    42,  1526,  3378,    45,  3218,
    -633,  2469,  2072,  -612,  -612,  -611,  -611,  2983,  2984,    43,
     929,  -778,  1157,  1166,  1225,  1619,  1621,  -634,  1530,  -781,
    3180,   503,  1531,  -779,  1535,  1544,    25,    26,    27,  1545,
    1552,  1598,  1158,    44,  1600,   826,  1167,  1602,  1617,  1628,
    1629,  2230,  1633,  1637,  2025,  2888,  1638,    45,  1121,  1305,
    1123,   824,  1673,  1675,  3050,  1169,  1677,  1689,  1707,  1708,
    3180,  1714,  1709,   928,  1716,  2733,  1720,  1715,  1727,  1732,
    1728,  1760,  1742,  1756,    21,  1755,  1159,  1762,   826,   817,
    1771,  1772,   503,   503,  1781,   503,  1784,  1785,  2854,    32,
     826,   503,   503,   503,   503,   503,   503,  2863,  1787,   503,
     503,   503,   503,   503,   503,   503,   503,   503,   503,  1788,
    3180,  2879,  1790,  1797,   503,   503,  1791,   696,   503,  3015,
     826,  2076,  1798,  3146,   815,   503,    37,   826,   999,   688,
    1805,  1807,  1808,  1815,  1816,  1826,  2249,  1906,  1819,  1820,
    1821,  -492,  1831,  -558,  1859,  1614,  1856,   503,  -558,  1924,
    1822,   503,  3218,   503,   963,  -492,  1895,   503,    39,   964,
    -492,  1858,  1861,   523,  1864,   524,  1887,   826,  1160,    42,
     826,   928,  1928,  1225,  1896,   826,  1903,  1934,  1938,  1939,
    1948,  1940,  1559,    43,   503,  1945,  1992,   526,  1995,  2000,
     527,   623,  1997,  1961,  2017,  1998,  3093,   623,   689,  2024,
    2035,  1999,  2036,  2038,  2062,  2063,  2834,    44,  1543,  2069,
    -492,  3234,    25,    26,    27,   503,   965,  1161,  -558,   824,
     503,    45,   689,   503,   682,  1162,  2606,  2086,  2084,   815,
    -492,  3024,  3025,  2083,  2102,  2111,  2085,  1163,  2112,  2113,
    3197,  2099,   503,   503,  2116,  2114,  2115,   503,  2233,  2133,
    2137,  2138,  2148,  2141,  2149,  2144,  2150,    68,  2212,   690,
    2216,   503,  2221,  2232,   503,  -558,   503,   500,  1164,   817,
    2223,  2235,  1355,   500,   690,    32,  2887,  -492,  2234,  2236,
    2250,  2147,   503,  1305,  2251,   966,  -492,  2253,  2371,   503,
    2256,  2156,   503,  2159,  2374,  2258,  2170,  2257,  2260,   815,
    2261,  2264,  2174,  2265,  2176,  2267,  2266,  2268,  2276,   503,
    2297,  2277,    37,  2305,  2288,  1892,  2183,  1867,  2336,  1166,
     967,  2186,   503,  1953,   815,  2191,  2192,  2193,  2194,  1891,
    2198,  2199,   623,    74,  2343,  1954,   968,   629,  1955,   503,
     503,  2344,  1167,   629,    39,  1958,   969,  1421,  2934,   623,
    2345,  2299,  1735,  2354,  2355,    42,   503,  2356,   503,  2367,
    2373,  1169,  2375,  2388,  2397,  2389,   631,   503,  2396,    43,
    2399,  2398,   631,  2831,  2411,  2400,  2409,  2416,   970,  2423,
     815,   824,  2432,  2433,  2438,  1305,  1305,  1305,  2439,  2440,
    2454,  2456,  2458,    44,  2465,  2463,  -614,  2756,   622,  1930,
    2461,  2475,  2476,  2757,   622,  2478,  2479,    45,   500,  2482,
    2486,   824,   824,  2487,  2490,  2488,  2758,  2492,   691,  2493,
    2496,  2515,   971,  1841,  2517,   500,  1225,   824,  2530,   972,
    -492,  2536,   682,  2544,  1956,    21,  2537,   817,  2759,  2538,
    2760,  1371,  1372,  2545,  2546,  2558,  2547,  2554,  2559,  2563,
    2573,  3001,  2574,  2577,  2578,  1421,  1773,  2581,  2585,  1774,
    2590,  2592,  1776,  1777,  2600,  3023,  2601,   826,  1842,   973,
    2609,  2620,  2640,  3328,  2617,  2623,  2641,  2652,   629,   503,
    2627,  2626,  2654,  2659,  2669,  2628,   974,  1843,   815,  2678,
    2629,  2663,  2676,  2679,  1541,   629,   718,  2682,  2697,  2707,
     719,  2692,  2691,  2724,  2699,  1844,  2704,   631,  2726,  1845,
    2738,  2730,  2025,  2771,  1305,  2744,   928,  1373,  1374,  2787,
    2705,  2862,  2728,   815,   631,  2745,  2761,  2751,  2434,  2867,
    2851,  1846,  2871,  2858,  1847,  2852,  2870,  3135,  2875,   622,
     998,  2853,    21,  1867,  2866,  2884,  2893,  1868,  1869,  1848,
    2886,  1870,  1871,  1872,   975,    68,   622,  2215,   503,  1931,
    2894,  2919,  2899,  3208,  2921,  2925,  2930,  3316,  2936,  2937,
    2956,  2963,  2967,    25,    26,    27,  2974,  2976,  2980,  2981,
    2982,  1375,  1376,  1377,  1378,  1379,  1380,  2988,  2989,  1381,
    1382,  2990,  2762,  2994,  2999,   815,  2998,  2763,   503,   817,
    2694,  3000,   682,  3008,  3011,  3013, -1204,   929,  3014,  3018,
   -1927, -1928,  3031, -1929,   503,  3032, -1930, -1931,   503,   503,
    3041,   824,  2831, -1932, -1933,   503,  3030, -1934, -1935,   817,
     817,  3045, -1936,   682,   503, -1938,    32,   503,  3199,   503,
    1849,  3059, -1939, -1940,  2764,   817,   826,   503,  1850,  3046,
     503,   503,  3063, -1941,  2072,   503,   503,  3061, -1942, -1943,
    2765,  3039,   503,  3186, -1944,  3188, -1945, -1947, -1948,  1851,
    3196,  1828, -1949,    37,   500,  2525, -1950,   503, -1951, -1952,
      25,    26,    27, -1953,  2732,  3064,   503, -1954, -1955, -1956,
   -1957, -1958, -1205,  3067,  3073,  1852,  3074,  3077,  3081,  1383,
    1384,  3198,   681,  3079,  3201,    39,  3085,   503,  2834,  3087,
    3088,  3091,  3092,  3094,  2650,  3099,    42,  3104,  3112,  1558,
    2551,  3113,  1559,  3117,  3123,  1873,  1560,  1561,  2555,  3120,
      43,   815,  3125,  3137,  3138,  3145,  3147,  3153,  3154,  2567,
     818,  3155,  3276,    32,   629,  3168,  1305,  3280,  1874,  3269,
    1305,  2838,  1305,  3169,    44,  3170,  3183,  1569,  2766,  3184,
    3187,   501,   510,   824, -1959,  3190,   536,  2767,    45,  3191,
    3193,   536,  3200,   631,  3203,   633,  3007,   637,   637,  3223,
      37,  3266,   640,   536,   645,  3227,  3229,   645,  3230,  1571,
     665,   668,  3233,  3239,   668,  3245,  1773,   536,   536,  1774,
    1421,  3246,  1776,  1777,  3247,  2607,  2715,  2608,  3253,  3256,
    3258,  2613,    39,  2616,  1385,  1386,  1875,  3260,  2959,  3263,
    3264,   826,  3268,    42,  3273,  3275,   633,   633,  3279,  3282,
    3287,  3294,  3293,  3295,  1387,  1420,  2580,    43,  3300,   817,
    3301,  3302,  3320,   503,  3310,   682,   826,  3330,  3312,   665,
    3314,  3333,  2414,  3335,  3315,  3353,   668,   536,   668,   668,
     668,    44,  3350,   503,   503,  3331,  3332,  3367,   503,  3374,
    3379,   503,  1541,  2175,   824,    45,  1109,  2513,  3305,  2790,
     503,  2786,  3210, -1959,  3272,  2719,  3372,  3021,  3291,  3360,
    3133,  1454,   503,  3329,  3336,  1420,   503,   503,  3354, -1959,
    1698,   503,   826,  1541, -1959,  3167,   503,  2495,  2860,   503,
     503,   721,  2520,   682,   503,  1225,  3326,   824,   503,  3334,
    2755,  2491,   503,  2791,  3325,  1823,  1801,    68,  1770,   824,
     503,  2553,  3068,   998,  2880,  2874,  1867,  2882,  2603,  2481,
    1868,  1869, -1959,  2856,  1870,  1871,  1872,  3306,  1630,  2140,
    1670,  2467,  2631,  1669,  2731,  3313,  2477,  2834,  2108,   824,
    3259,  2673,   623,  1555,   998,  3189,   824,  1867,  1480,  2139,
     624,  1868,  1869,  2453,   503,  1870,  1871,  1872,   818,  1674,
     815,   817,   503,  2928,  2378,  3096,  1447,  2650,   954,  2625,
    2624,  1420,  2653,  1420,  1420,  1580,   940,  3139,  1481,  3261,
    1435,   503,  3262,  3349,  1437,  1814,   824,  2407,  2661,   824,
     826,  1441,  2392,  1442,   824,  2470,  2430,  1915,  2428,  1876,
    1877,  1878,  2966,  1879,  1880,  1881,  1882,  1883,  1884,    68,
    2446,  1157,  3249,  2702,  2452,  2836,   933,  1833,   500,  2386,
    2079,  2720,  2081,   539,   648,  2838,   706,     0,     0,     0,
       0,  1158,     0,     0,     0,    68,     0,     0,    68,  1482,
    2551,  2857,     0,     0,     0,     0,  1420,     0,     0,  1420,
    1420,     0,     0,     0,     0,  2735,  2736,     0,     0,     0,
       0,     0,     0,     0,     0,   503,     0,     0,     0,     0,
       0, -1959,   817,   998,     0,  1159,  1867,     0,     0,     0,
    1868,  1869,     0,  2788,  1870,  1871,  1872,     0,   629,   682,
       0,     0,     0,   928,     0,  1541,   503,   826,  2841,  2842,
    2843,  2844,  2845,  2846,  2847,  2848,  2849,  2850,     0,     0,
       0,     0,   503,     0,     0,   817,     0,   631,     0,     0,
       0,  1874,     0,     0,     0,     0,     0,   817,     0,  2136,
       0,     0,  1225,     0,     0,     0,     0,  1605,     0,   503,
       0,     0,  2779,     0,     0,     0,     0,     0,   818,   622,
     503,   503,  1874,     0,   503,     0,     0,   817,     0,     0,
       0,     0,     0,   681,   817,     0,     0,  1160,     0,     0,
       0,     0,     0,     0,     0, -1959,     0,     0,     0,   503,
       0,     0,  1587,  1588,  1589,  1590,  1591,  1592,     0,  1875,
       0,  2965,     0,     0,     0,     0,     0,     0,     0,     0,
    3051,     0,     0,   503,   817,     0,     0,   817,     0,     0,
       0,     0,   817,     0,     0,     0,  1161,     0,     0,     0,
    1875,     0,     0,     0,  1162,     0,     0,     0,     0,     0,
       0,     0,     0,  2838,     0,  1800,  1163,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1809,     0,  1810,     0,
     668,     0,   668,     0,     0,     0,   668,     0,  1817,   668,
       0,     0,     0,     0,     0,     0,   503,  1164,   536,     0,
     503,     0,     0,     0,     0,  1818,     0,     0,     0,     0,
     503,  1874,   503,     0,   503,     0,   824,     0,   503,     0,
     503,     0,   503,     0,     0,     0,     0,   830,   536,   536,
       0,     0,   503,     0,  1835,  1837,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   503,   818,     0,  1166,     0,
       0,    68,     0,     0,     0,     0,  3002,     0,  1305,     0,
       0,     0,     0,   503,     0,     0,     0,   932,   510,   637,
       0,  1167,     0,     0,   501,     0,   668,   820,     0,  1875,
       0,     0,     0,     0,  3047,   633,   958,   958,     0,  1541,
    1169,   958,   981,     0,     0,     0,     0,     0,     0,     0,
    3150,  3151,     0,     0,     0,     0,     0,  1421,  1865,  1866,
     503,     0,     0,  1886,     0,     0,   500,     0,   645,   645,
     503,   645,  1876,  1877,  1878,     0,  1879,  1880,  1881,  1882,
    1883,  1884,     0,   503,   668,     0,     0,     0,     0,     0,
     536,  1434,     0,   517,     0,   503,     0,     0,     0,     0,
       0,   668,     0,  1876,  1877,  1878,     0,  1879,  1880,  1881,
    1882,  1883,  1884,   503,     0,   668,     0,     0,     0,     0,
       0,     0,  3207,  3209,     0,     0,   998,     0,     0,  1867,
    3110,     0,     0,  1868,  1869,   503,   629,  1870,  1871,  1872,
       0,     0,     0,     0,     0,   824,     0,     0,   668,     0,
       0,   503,   668,   668,   668,   668,     0,     0,   818,     0,
       0,  1305,  2838,  3241,     0,   631,     0,     0,     0,     0,
       0,    68,    68,     0,     0,     0,     0,     0,     0,  3244,
       0,     0,     0,  3248,   817,   503,     0,     0,   818,   818,
       0,     0,     0,     0,     0,  1371,  1372,  2836,     0,     0,
     503,   503,     0,     0,   818,     0,     0,     0,     0,     0,
       0,   500,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   503,     0,     0,  2120,
    2120,     0,  1876,  1877,  1878,     0,  1879,  1880,  1881,  1882,
    1883,  1884,     0,    68,    68,     0,     0,     0,     0,     0,
     824,   500,     0,     0,     0,     0,     0,     0,     0,  3136,
       0,     0,   503,     0,     0,   820,     0,     0,     0,     0,
       0,  1373,  1374,     0,     0,     0,     0,     0,     0,  3143,
    3144,   629,     0,     0,    68,  1558,     0,     0,  1559,  1420,
       0,     0,  1560,  1561,     0,     0,     0,     0,  3156,  1420,
      68,   500,  1420,  3337,    68,     0,     0,     0,     0,     0,
     631,     0,     0,     0,  3235,     0,     0,     0,     0,     0,
     824,   629,     0,  1569,     0,     0,     0,     0,     0,  3351,
   -1959,     0,     0,     0, -1959,  1375,  1376,  1377,  1378,  1379,
    1380,     0,     0,  1381,  1382,   824,     0,     0,     0,     0,
     631,     0,     0,   958,   981,  1571,   668,     0,     0,  1459,
       0,     0,     0,   817,     0,   958,   958,     0,     0,   536,
       0,   629,     0,     0,     0,   633,     0,     0,     0,   671,
       0,     0,   633,  2273,  2275,     0,     0,     0,     0,     0,
       0,     0,   536,     0,   963,     0,     0,     0,   818,   964,
     631,   824,  1875,     0,     0,     0,     0,  1520,  1420,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2424,     0,
       0,     0,     0,     0,    68,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   708,     0,   711,     0,   715,  2836,     0,     0, -1959,
      68,     0,     0,  1383,  1384,   820,   965,   536,     0,     0,
       0,     0,     0,   821,     0, -1959,     0,     0,   817,     0,
   -1959,     0,     0,     0,  2315,  2316,  2317,  2318,  2319,  2320,
       0,  3110,  2324,  2325,  2326,  2327,  2328,  2329,  2330,  2331,
    2332,  2333,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1622,     0,  1624,     0,     0,     0,     0, -1959,   824,
       0,  2711,     0,     0,     0,     0,  1420,     0,   536,   536,
    1455,  3321,     0,     0,   668,   966,     0,     0,  1558,     0,
       0,  1559,     0,  1131,     0,  1560,  1561,     0,   817,     0,
     818,     0,     0,     0,   824,     0,  1459,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   668,  1701,     0,
     967,  1580,     0,   817,     0,    21,  1569,     0,  1385,  1386,
     668,     0,     0, -1959,     0,     0,   968,     0,     0,     0,
       0,     0,     0,  1157,     0,     0,   969,   668,     0,     0,
       0,   668,     0,     0,     0,  1744,     0,     0,  1571,     0,
       0,     0,     0,  1158,     0,  1876,  1877,  1878,     0,  1879,
    1880,  1881,  1882,  1883,  1884,     0,   824,     0,   970,   817,
       0,     0,     0,   820,     0,  2412,  2413,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1132,
       0,     0,     0,  2448,     0,     0,     0,  1159,  2777,     0,
     537,   818,     0,     0,     0,   537,  2778, -1959,   963,     0,
       0,  2683,   971,   964,     0,     0,     0,   537,     0,   972,
       0,     0,     0,     0,  2473,  2473,     0,     0,     0,     0,
       0,   537,   537,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1959,  2712,   818,     0,     0,     0,  1666,     0,
       0,   821,     0,    25,    26,    27,   818,  1455, -1959,   973,
       0,     0,     0, -1959,  2779,     0,     0,     0,     0,     0,
     965,     0,     0,     0,  1759,     0,   974,   817,   668,   668,
       0,     0,     0,     0,     0,   668,   818,     0,     0,  1160,
       0,   537,     0,   818,     0,     0,  1795,     0,     0,     0,
       0, -1959,   824,     0,     0,     0,     0,     0,     0,     0,
       0, -1959,   817,     0,     0,     0,    32,     0,  1587,  1588,
    1589,  1590,  1591,  1592, -1692,     0,  1812,     0,     0,     0,
       0,  1812,     0,   818,     0,   820,   818,     0,  1161,   966,
       0,   818,     0,     0,   975,     0,  1162,     0,     0,  1133,
       0,     0,     0,    37,  1580,     0,     0,     0,  1163,     0,
    2780,     0,   830,   830,     0,   820,   820,   536,   536,     0,
     536,   830,     0,     0,   967,     0,     0,     0,     0,     0,
       0,   820,  2594,     0,   817,    39,     0,     0,     0,  1164,
     968,     0,     0,     0,     0,     0,    42,     0,     0,     0,
     969,     0,     0,     0,     0,   723,     0,   725,     0,     0,
      43,   732,     0,     0,   733,     0,  1459,  1459,     0,     0,
       0,  1459, -1692,     0,   501,     0,     0,     0,     0,     0,
       0,     0,   970,     0,    44,     0,     0,   958,   823,  1912,
    1166,   821,   536,     0,     0,     0,     0,   668,  2713,   633,
   -1959,   633,     0,  1134,   633,     0,     0,     0,     0,   633,
       0,     0,   633,  1167,   633,     0,     0, -1692,   633,     0,
     536,     0,     0,   536,     0,     0,   971,     0,     0,     0,
       0, -1692,  1169,   972,  2781,     0, -1692,  2782,     0,     0,
       0, -1692,     0,     0,  1987,     0,     0,     0,     0,  1991,
   -1692,   943,     0,     0, -1692,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     817,     0,     0,   973,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   830, -1692,     0,     0,     0,
     974,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   824,     0,     0, -1959,     0, -1692,     0,     0,     0,
       0,  1587,  1588,  1589,  1590,  1591,  1592,     0,     0,     0,
       0,     0,     0,     0,     0,   820,     0,  1455,  1455,     0,
       0, -1694,  1455,  2684,  2685,     0,     0,  2077,     0,   668,
    1138,   668,     0,  1709,     0,     0,     0,     0,     0,     0,
       0,   668,  2095, -1692,     0,     0, -1692,     0,   975,   821,
       0,     0, -1692,     0,  1459,     0,     0,     0,     0,     0,
       0,     0,     0,  1320,     0,     0,     0,  1323,  1325,  1328,
    1330,     0,     0,   818,     0,     0,     0,   963,     0,   668,
     998,   536,   964,  1867,     0,     0,  1420,  1868,  1869,     0,
   -1692, -1959, -1959, -1959,     0,     0,  1701,   536,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   536,  2157,   536,
    2161,     0,   536, -1692,  1558,     0,   823,  1559,   536, -1694,
     536,  1560,  1561,     0,     0,     0,     0,     0,     0,     0,
       0,   830,   536,     0,     0,     0,   830,   536,     0,   965,
       0,   536,   536,   536,   536,     0,   536,   536,     0,     0,
       0,     0,  1569,     0,     0,     0,     0,   820,     0, -1959,
       0,     0,   537,     0, -1694,     0,   668,     0,     0,   669,
       0,   668,   668,   668,   668,   668,     0,     0, -1694,     0,
       0,     0,     0, -1694,  1571,     0,     0,     0, -1694,  2244,
       0,     0,   537,   537,     0,     0, -1692, -1694,     0,     0,
       0, -1694,     0,     0,     0,     0, -1692,     0,   966,   817,
       0,   821,     0,     0,     0,  2110,  2892,     0,     0,     0,
       0,     0,     0, -1692,     0, -1692, -1692,     0,     0,     0,
       0,     0,     0, -1694,     0,     0,     0,     0,     0,     0,
       0,   821,   821,   967,     0,     0,     0,  2686,     0,     0,
       0,     0,   818, -1694,     0,     0,     0,   821,     0,   968,
       0,     0, -1692,     0,     0, -1692, -1692, -1692,   820,   969,
       0,  1449,  1459,  1459,  1459,  1459,  1459,  1459, -1959,     0,
    1459,  1459,  1459,  1459,  1459,  1459,  1459,  1459,  1459,  1459,
       0,     0,     0,     0, -1959,     0,     0,     0,     0, -1959,
   -1694,   970,     0, -1694,   537,     0,   823,     0,     0, -1694,
     536,   820,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   668,   820,     0,     0,     0,     0,     0,     0,
       0,     0,   633,     0,  1420,     0,     0, -1959,   633,  1420,
       0,     0,     0,     0,   536,   971,     0, -1694,     0,   536,
       0,     0,   972,   820,     0,  3003,  1875,   818,     0,     0,
     820,     0,     0,     0,     0,     0,     0,     0,     0,  1558,
   -1694,     0,  1559,     0,     0,     0,  1560,  1561,     0,     0,
   -1959, -1959, -1959,     0,     0,     0,     0,  1835,  1837,     0,
    1580,     0,   973,     0,   536,     0,     0,     0,  2405,     0,
     820,     0,   536,   820,     0,     0,     0,  1569,   820,   974,
       0,     0,     0,     0,  1570,     0,     0,     0,     0,     0,
       0,     0,     0,  1459,  1459,     0,   669,   818,     0,     0,
       0,     0,     0,  1455,  1455,  1455,  1455,  1455,  1455,  1571,
    1987,  1455,  1455,  1455,  1455,  1455,  1455,  1455,  1455,  1455,
    1455,   821,   818, -1694,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1694,     0,     0,     0,     0,     0,  1371,
    1372,     0,  1690,   633,   823,     0,     0,   975,     0,     0,
   -1694,     0, -1694, -1694,     0,  1717, -1959,   536,     0,  3069,
     633,     0,     0,     0,  2095,     0,     0,     0,     0,     0,
       0,     0,   998,     0,     0,  1867,  1741,     0,   818,  1868,
    1869,     0,     0,  1870,  1871,  1872,     0,     0,     0, -1694,
       0,     0, -1694, -1694, -1694,     0,     0,     0,     0,     0,
    2674,     0,     0,  1572,   536,     0,     0,  1459,     0,     0,
     536,     0,     0,     0,     0,  1373,  1374,     0,     0,  1573,
       0,     0,     0,     0,  1574,     0,  1759,     0,     0, -1959,
   -1959, -1959,     0,  1879,  1880,  1881,  1882,  1883,  1884,     0,
       0,     0,     0,     0,     0,     0,     0,  1835,  1837,     0,
       0,     0,     0,  1474,  1455,  1455,     0,     0,  1420,     0,
   -1959,     0,  1577,   821,     0,     0,     0,  1587,  1588,  1589,
    1590,  1591,  1592,     0,     0,     0,  1507,     0,     0,  1375,
    1376,  1377,  1378,  1379,  1380,     0,   818,  1381,  1382,  1759,
       0,     0,     0,     0,     0,     0,     0,   668,     0,     0,
       0,     0,     0,     0,     0,     0,   823,     0,  1759,   668,
     668,   668,     0,  1764,  1765,  1580,     0,     0,     0,     0,
    1780,   818,   536,     0,   668,     0,     0,   668,     0,     0,
       0,     0,   668,     0,     0,     0,   823,   823,     0,     0,
       0,  1550,  1970,     0,  2598,     0,     0,     0,     0,  1971,
    1972,     0,   823,  1973,  1974,  1975,     0,     0,     0,     0,
       0,     0,   830,     0,     0,     0,     0,  1456,  1455,     0,
     820,     0,     0,     0,   821,     0,  1759,  1759,     0,  1759,
    1874,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   818,     0,     0,     0,  1383,  1384,     0,
       0,     0,   537,   537,     0,     0,     0,     0,     0,   501,
       0,  1582,     0,   998,     0,     0,  1867,   821,     0,     0,
    1868,  1869,     0,     0,  1870,  1871,  1872,     0,  2630,   821,
       0,     0,     0,     0,     0,     0,     0,   668,   668,   668,
       0,  2947,     0,     0,     0,     0,     0,   536,  1875,  1459,
       0,   536,     0,     0,     0,     0,   536,     0,     0,   821,
       0,     0,     0,     0,     0,     0,   821,     0,     0,     0,
       0,     0,     0,  1987,     0,     0,   998,     0,     0,  1867,
       0,     0,  1923,  1868,  1869,     0,     0,  1870,  1871,  1872,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1459,  1459,     0,  2948,     0,   821,  1420,     0,   821,
       0,     0,  1385,  1386,   821,  1583,     0,     0, -1959, -1959,
   -1959,     0,  1587,  1588,  1589,  1590,  1591,  1592,     0,   818,
       0,     0,  2716,     0,     0,  2095,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   823,     0,     0,   820,
       0,     0,   668,     0,  1456,     0,   536,     0,     0,     0,
     536,   536,   536,     0,     0,     0,  1759,  1701,  1759,     0,
    1795,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   536,
       0,  2789,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   536,   536,   536,   536,   536,   536,
     536,   536,   536,   536,     0,     0,     0,     0,  2468,     0,
       0,  1874,     0,     0,  2078,     0,  2080,     0,     0,     0,
       0,     0,  2244,     0,     0,     0,  2089,     0,   668,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1701,     0,
       0,  1876,  1877,  1878,   820,  1879,  1880,  1881,  1882,  1883,
    1884,     0,  1455,  1455,  1795,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2126,     0,     0,     0,     0,     0,
       0,     0,     0,  1759,  1874,     0,     0,     0,   823,  1875,
       0,     0,     0,     0,  1459,     0,     0,     0,     0,     0,
     536,   537,   537,     0,   537,     0,  1144,   668,   668,   668,
     668,     0,  1145,     0,     0,     0,     0,     0,     0,  1459,
    1157,     0,  1459,     0,   820,     0,   536,     0,   830,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1158,     0,  2938,     0,     0,     0,     0,     0,     0,   820,
       0,     0,  1875,     0,     0,     0,     0,     0,     0,     0,
       0,  2220,     0,     0,     0,     0,  2224,  2225,  2227,  2228,
    2229,  2961,     0,   633,     0,     0,   537,     0,   818,     0,
       0,     0,     0,     0,  1159,     0,     0,  2973,     0,     0,
       0,     0,  2095,     0,     0,     0,     0,     0,  1987,   823,
       0,     0,     0,     0,  1944,   820,   821,  1947,     0,     0,
       0,     0,  1701,  1146,     0,     0,     0,     0,  1759,     0,
       0,  1976,  1977,  1978,     0,  1979,  1980,  1981,  1982,  1983,
    1984,   830,   536,  1459,     0,     0,     0,     0,     0,   668,
       0,     0,   823,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   823,  1455,  3022,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1456,  1456,  1160,     0,     0,  1456,
    2922,     0,     0,     0,   823,     0,     0,     0,     0,     0,
       0,   823,  1876,  1877,  1878,     0,  1879,  1880,  1881,  1882,
    1883,  1884,     0,     0,  2940,     0,     0,     0,     0,     0,
       0,     0,     0,   820,     0,     0,     0,  2362,     0,     0,
       0,     0,     0,     0,     0,  1161,     0,     0,     0,     0,
       0,   823,  1759,  1162,   823,     0,     0,     0,     0,   823,
       0,     0,     0,     0,  2244,  1163,     0,     0,   820,     0,
       0,     0,     0,     0,     0,  1876,  1877,  1878,  3065,  1879,
    1880,  1881,  1882,  1883,  1884,     0,  1147,  1459,     0,     0,
       0,     0,     0,     0,     0,   537,  1164,     0,     0,  1558,
       0,     0,  1559,     0,     0,   821,  1560,  1561,     0,     0,
       0,   537,     0,  3084,  1455,     0,     0,     0,     0,   536,
       0,   537,     0,   537,     0,     0,   537,   536,     0,     0,
       0,     0,   537,     0,   537,     0,     0,  1569,     0,     0,
     820,  1165,  2067,     0, -1959,  1149,   537,  1166,     0,     0,
       0,   537,     0,  3108,     0,   537,   537,   537,   537,     0,
     537,   537,     0,     0,     0,     0,     0,     0,     0,  1571,
    1167,     0,     0,     0,   536,  1168,     0,     0,     0,   536,
       0,  1056,  1056,     0,     0,     0,     0,     0,     0,  1169,
       0,     0,  1456,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   536,     0,     0,     0,     0,
     821,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1708,     0,   536,   536,     0,     0,     0,
       0,     0,  2687,     0,     0,     0,     0,     0,   668,     0,
    1701,     0,     0,     0,   536,  1151,  1220,  1227,  1455,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   668,     0,
       0,  3181,     0, -1959,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   820,     0,     0, -1959,
     821,  1459,     0,     0, -1959,   536,   958,     0,     0,   958,
       0,     0,     0,     0,     0,  1558,     0,     0,  1559,     0,
       0,     0,  1560,  1561,     0,   821,     0,     0,     0,  2973,
       0,     0,     0,     0,     0,     0,     0,   668,     0,     0,
       0, -1708, -1959,     0,   537,     0,     0,     0,     0,     0,
       0,     0,     0,  1569,     0,     0,     0,     0,     0,     0,
   -1959,     0,  2556,     0,     0,     0,     0,   668,     0,     0,
       0,   823,     0,     0,  2569,  2570,  2572,     0,  2379,     0,
       0,   821,     0,  1947,     0,  1571, -1708,     0,     0,  2583,
       0,     0,  2586,     0,     0,  1580,     0,  2591,     0,     0,
   -1708,     0,     0,     0,  3084, -1708,     0,     0,     0,     0,
   -1708,     0,     0,     0,     0,     0,     0,     0,     0, -1708,
       0,     0,     0, -1708,     0,     0,  3181,     0,   537,     0,
    1456,  1456,  1456,  1456,  1456,  1456,  1550,     0,  1456,  1456,
    1456,  1456,  1456,  1456,  1456,  1456,  1456,  1456,  2951,     0,
       0,     0,     0,  1701,     0, -1708,     0,     0,     0,     0,
       0,     0,  3195,     0,     0,     0,  3181,   830,   830,   830,
       0,     0,     0,     0,     0, -1708,     0,  1912,     0, -1959,
       0,     0,     0,     0,  1431,     0,     0,   536,     0,   821,
    1448, -1959,     0,  1450,     0, -1959,  1461,  1464,  1469,  1472,
   -1959,     0,  2637,  2638,  2639,     0,     0,     0,     0,  1701,
       0,     0,     0,     0,     0,     0,  3181,     0,   540,     0,
       0,   537, -1708,     0,   821, -1708,     0,     0,     0,     0,
       0, -1708,     0,     0,     0,     0,     0,  1220, -1959,     0,
       0,     0,     0,     0,     0,   820,     0,     0,     0,     0,
     823,     0,     0,   830,  1524,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2095,   537, -1708,
       0,     0,  1529,   541,  2485,     0,     0,     0,     0,     0,
       0,  1456,  1456,  1532,  1533,  1534,     0,  1538,  1542,   542,
       0,  1580, -1708,     0,     0, -1959,   821,     0,     0,     0,
     543,     0,  1587,  1588,  1589,  1590,  1591,  1592,     0,     0,
       0,     0,     0,     0,     0,  1601,     0,  2727,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   544,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   545,     0,   669,     0,
       0,     0,     0,     0,     0,   823,     0,     0,   546,     0,
       0,     0,     0,   547,     0,     0,     0,  1644,     0,     0,
       0,  1660,  1665,     0,     0, -1708,     0,     0,     0,     0,
       0,     0,  1056,  1056,     0, -1708,   537, -1959,     0,     0,
       0,   548,     0,     0,     0,  1456,     0,     0,     0,     0,
       0,     0, -1708,  2865, -1708, -1708,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   823,     0,     0,     0,     0,
       0,     0,   821,  1220,   549,     0,     0,     0,   550,     0,
       0, -1708,  1220,     0, -1708, -1708, -1708,     0,     0,     0,
     823,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1220,     0,     0,     0,
       0,     0,  2901,  2902,  2903,  2904,     0,     0,     0,     0,
    1558,     0,     0,  1559,     0,     0,     0,  1560,  1561,     0,
       0, -1959,     0,     0,     0,     0,     0,     0,  1587,  1588,
    1589,  1590,  1591,  1592,   551,     0,   823,     0,     0,     0,
       0,   537,     0,     0,     0,   537,     0,     0,  1569,   552,
    1944,     0,     0,     0,     0, -1959,     0,     0,     0,     0,
    1558,     0,     0,  1559,     0,     0,     0,  1560,  1561,     0,
       0,  1564,  1565,  1566,     0,     0,     0,     0,     0,     0,
    1571,     0,   553,     0,     0,   554,     0,  1144,  1567,     0,
       0,     0,     0,  1145,   555,     0,     0,   556,  1569,     0,
       0,  1157,     0,     0,     0,  1570,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   557,     0,     0,     0,     0,
       0,  1158,     0,     0,     0,     0,     0,     0,     0,   558,
    1571,     0,     0,     0,  3009,     0,   559,     0,     0,     0,
       0,     0,     0,     0,   823,   560,     0,     0,     0,     0,
     537,   561,     0,     0,   537,   537,   537,     0,     0,     0,
       0,     0,     0,     0,     0,  1159,     0,     0,     0,     0,
       0,     0,     0,     0, -1959,     0,     0,     0,   562,   823,
       0,     0,     0,   537,     0,     0,     0,     0,     0,     0,
   -1959,     0,     0,     0,  1146, -1959,     0,     0,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   537,     0,     0,
       0,   821,  1857,     0,     0,     0,     0,     0,     0,  1456,
    1456,     0,     0,     0,  1572,     0,     0,     0,     0,     0,
       0,     0,     0, -1959,     0,     0,     0,     0,     0,     0,
    1573,     0,     0,     0,  1469,  1574,  1469,  1469,     0,     0,
       0,   823,     0,     0,     0,     0,     0,  1160,     0,  1056,
    1056,     0,     0,     0,     0,     0,     0,     0,  1575,  1576,
       0,     0,     0,     0,     0,     0,  1056,     0,     0,     0,
       0,     0,     0,  1577,     0,     0,  1580,     0,     0,     0,
       0,     0,     0,     0,  1944,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1964,  1161,  1965,     0,     0,
       0,     0,     0,     0,  1162,     0,     0,     0,     0,  1578,
    2379,     0,  1579,     0,     0,     0,  1163,     0,     0,     0,
       0,     0,     0,  2002,     0,     0,  1580,     0,     0,  2006,
    2007,  2008,  2009,  2010,  2011,  2012,  2013,  1147,     0,     0,
       0,  2022,  2023,     0,     0,     0,  2034,  1164,     0,     0,
    2037,     0,     0,  2045,  2046,  2047,  2048,  2049,  2050,  2051,
    2052,  2053,     0,     0,  2054,     0,     0,     0,     0,     0,
       0,  1056, -1959,  1220,     0,     0,     0,   823,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2177,     0,     0,     0,  1149,  2082,  1166,     0,
       0,     0,  1456,  3152,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   537,     0,     0,   -43,
       0,  1167,  1582,  3176,     0,     0,  2178,  1456,     0,     0,
    1533,  1534,     0,     0,     0,     0,     0,     0,     0,     0,
    1169,     1,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,     0,     3,     4,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     5,     0,     0,     0,
       0,     6,     0,     0,     0,     0, -1959,     0,     0,     0,
       7,     0,  3214,  1587,  1588,  1589,  1590,  1591,  1592,     0,
       0,     0,     8,     0,     0,     0,  1151,     0,     0,     0,
       0,     0,     0,     9,     0,     0,     0,     0,     0,     0,
       0,     0,  3240,     0,     0,    10,     0,    11,  1220,     0,
       0,  2208,  2209,     0,  2210,     0,  1583,     0,    12,  1584,
    1585,  1586,     0,  1587,  1588,  1589,  1590,  1591,  1592,     0,
       0,  1456,    13,    14,     0,     0,     0,  1457,     0,     0,
       0,     0,    15,     0,     0,     0,     0,     0,    16,     0,
    1220,     0,     0,     0,     0,     0,    17,     0,    18,    19,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    20,  3090,     0,     0,    21,     0,     0,     0,
       0,  2379,     0,     0,     0,     0,  1558,     0,     0,  1559,
       0,     0,     0,  1560,  1561,  1562,  1563,  1564,  1565,  1566,
       0,    22,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1567,     0,   823,    23,  2310,  2311,
       0,  2312,     0,     0,  1569,     0,     0,     0,   537,     0,
       0,  1570,     0,   537,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    24,     0,     0,     0,     0,  1595,     0,
    2338,  2339,     0,     0,  2082,     0,  1571,     0,     0,   537,
       0,     0,     0,     0,     0,  1456,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   537,
     537,     0,     0,  2366,     0,     0,     0,     0,     0,  2372,
       0,     0,  1595,     0,     0,     0,     0,     0,   537,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1220,
       0,     0,     0,     0,    25,    26,    27,     0,     0,     0,
    2390,     0,    28,     0,  1457,    29,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   537,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1572,  2403,     0,     0,    30,     0,  2406,     0,     0,  2408,
       0,     0,     0,    31,     0,     0,  1573,     0,     0,     0,
       0,  1574,     0,     0,     0,     0,     0,    32,     0,     0,
       0,     0,     0,     0,    33,     0,     0,     0,    34,     0,
       0,     0,     0,     0,  1575,  1576,     0,  2426,    35,     0,
    2429,     0,  2431,     0,     0,     0,     0,     0,     0,  1577,
      36,     0,  1595,     0,    37,     0,     0,     0,  2435,  1595,
       0,     0,     0,     0,     0,     0,     0,     0,  1558,     0,
       0,  1559,     0,    38,     0,  1560,  1561,  1562,  1563,  1564,
    1565,  1566,     0,     0,     0,  1578,    39,     0,  1579,    40,
       0,     0,    41,     0,     0,     0,  1567,    42,  1644,  1456,
       0,     0,  1580,     0,     0,  1581,  1569,     0,     0,     0,
       0,    43,     0,  1570,     0,  1665,  2052,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1056,    44,     0,     0,  1571,     0,
       0,     0,     0,  2489,     0,     0,     0,     0,     0,    45,
       0,     0,   -43,     0,     0,     0,     0,     0,     0,     0,
       0,   537,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1558,     0,     0,  1559,     0,     0,
       0,  1560,  1561,     0,     0,  1564,  1565,  1566,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1582,     0,
       0,     0,  1220,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1569,     0,     0,     0,     0,     0,     0,  1570,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1572,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1571,     0,     0,     0,  1573,     0,
       0,     0,     0,  1574,     0,  2589,     0,     0,     0,     0,
       0,     0,     0,  1595,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1575,  1576,     0,     0,
    1595,     0,  1595,     0,  1457,  1457,  1885,     0,     0,  1457,
       0,  1577,     0,  1595,     0,     0,  1595,     0,     0,     0,
       0,  1595,  1583,     0,  1595,  1584,  1585,  1586,     0,  1587,
    1588,  1589,  1590,  1591,  1592,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1578,  2395,     0,
    1579,     0,     0,     0,     0,     0,     0,     0,  1572,     0,
       0,     0,     0,     0,  1580,     0,     0,  1581,     0,     0,
       0,     0,     0,     0,  1573,     0,  1595,     0,     0,  1574,
       0,  1595,     0,     0,  1595,  1595,  1595,     0,     0,     0,
    1595,     0,     0,     0,  1595,     0,     0,     0,     0,     0,
       0,     0, -1959, -1959,     0,     0,     0,     0,     0,     0,
    2658,     0,     0,     0,  2660,  1965,     0,  1577,     0,     0,
       0,  2664,     0,     0,     0,     0,     0,     0,     0,     0,
    2672,     0,     0,  2675,     0,  2677,     0,     0,     0,     0,
       0,     0,     0,  2681,     0,     0,     0,     0,     0,     0,
       0,  2688,  2689,  1595,     0,     0, -1959,     0,  2696,     0,
    1582,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1580,     0,     0,  2706,     0,     0,     0,     0,     0,     0,
       0,     0,  2721,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1595,     0,     0,     0,
       0,     0,     0,  1056,     0,     0,     0,     0,     0,     0,
       0,     0,  1595,     0,     0,     0,     0,  1595,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1885,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1583,     0,  1582,  1584,  1585,  1586,
       0,  1587,  1588,  1589,  1590,  1591,  1592,     0,     0,     0,
       0,     0,     0,     0,  1860,     0,  1557,     0,     0,     0,
       0,  1558,     0,     0,  1559,     0,     0,     0,  1560,  1561,
    1562,  1563,  1564,  1565,  1566,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1567,
       0,     0,     0,  1568,     0,     0,     0,     0,     0,  1569,
       0,     0,     0,     0,     0,     0,  1570,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2917,
    2918,  1571,     0,     0,     0,     0,     0,     0,     0,     0,
    1583,     0,     0,  1584,  1585,  1586,  2935,  1587,  1588,  1589,
    1590,  1591,  1592,     0,     0,     0,     0,     0,  2939,     0,
       0,     0,  2941,  2942,     0,     0,     0,  2943,     0,     0,
       0,     0,  2946,     0,     0,  2949,  2950,     0,     0,  1595,
    2210,  1220,     0,     0,  2957,     0,     0,  1885,  1885,     0,
    1457,  1457,  1457,  1457,  1457,  1457,  1056,     0,  1457,  1457,
    1457,  1457,  1457,  1457,  1457,  1457,  1457,  1457,  1885,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1558,     0,     0,  1559,     0,  1572,     0,  1560,  1561,  1562,
    1563,  1564,  1565,  1566,     0,     0,     0,     0,     0,     0,
    2997,  1573,     0,     0,     0,     0,  1574,     0,  1567,     0,
       0,     0,  2668,     0,     0,     0,     0,     0,  1569,     0,
       0,     0,     0,     0,     0,  1570,     0,  3016,     0,  1575,
    1576,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1577,     0,  1595,  1595,     0,     0,
    1571,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1578,     0,     0,  1579,  1595,     0,     0,     0,  1595,  1595,
    1595,  1595,  1595,  1595,  1595,  1595,     0,  1580,     0,     0,
    1581,  1457,  1457,     0,  1595,  1595,     0,     0,     0,     0,
       0,  3043,     0,     0,     0,     0,  1595,     0,     0,  1595,
       0,     0,     0,     0,     0,     0,     0,  1595,  1595,  1595,
    1595,  1595,  1595,  1595,  1595,  1595,  1595,     0,     0,     0,
       0,     0,     0,     0,  1572,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1542,     0,
    1573,     0,     0,     0,  1595,  1574,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1220,     0,
       0,     0,     0,     0,     0,  2403,     0,     0,  1575,  1576,
       0,     0,     0,  1582,     0,     0,  3101,  3102,     0,     0,
    3103,     0,     0,  1577,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1457,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3119,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1578,
       0,     0,  1579,     0,     0,     0,     0,     0,     0,  3131,
       0,     0,     0,     0,     0,     0,  1580,     0,     0,  1581,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1595,  1595,  1595,     0,     0,     0,     0,  1583,     0,     0,
    1584,  1585,  1586,     0,  1587,  1588,  1589,  1590,  1591,  1592,
       0,  1558,  3175,     0,  1559,     0,     0,     0,  1560,  1561,
    1562,  1563,  1564,  1565,  1566,     0,     0,     0,     0,     0,
    2917,     0,     0,     0,  3192,     0,     0,     0,  1056,  1567,
       0,     0,     0,     0,     0,     0,     0,     0,  3202,  1569,
       0,     0,  1582,     0,     0,     0,  1570,     0,     0,     0,
       0,  1056,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3225,
       0,  1571,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1595,  1595,  1595,     0,     0,  1885,  1885,  1885,
    1885,  1885,  1885,     0,     0,     0,  1885,  1885,  1885,  1885,
    1885,  1885,  1885,  1885,  1885,  1885,     0,     0,     0,     0,
    1595,  1595,     0,     0,     0,     0,  3250,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2917,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1595,  1056,
       0,     0,     0,     0,  1595,     0,  1583,     0,     0,  1584,
    1585,  1586,     0,  1587,  1588,  1589,  1590,  1591,  1592,     0,
       0,     0,  1595,  1996,     0,  1572,     0,     0,     0,  3292,
       0,     0,     0,     0,     0,  1595,     0,     0,  1595,     0,
    1595,  1573,     0,     0,  1885,  1885,  1574,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1595,  1457,
    1457,  1595,     0,  1595,     0,     0,     0,  1595,     0,  1575,
    1576,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1577,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3346,  3346,     0,     0,
    1578,  1595,     0,  1579,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1580,     0,     0,
    1581,     0,  3346,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3346,  1558,
       0,     0,  1559,     0,     0,     0,  1560,  1561,  1562,  1563,
    1564,  1565,  1566,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1567,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1569,     0,  1558,
       0,  1595,  1559,     0,  1570,     0,  1560,  1561,  1562,  1563,
    1564,  1565,  1566,  1582,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1567,     0,  1571,
       0,     0,  1457,     0,     0,     0,     0,  1569,     0,     0,
    1558,     0,     0,  1559,  1570,     0,     0,  1560,  1561,  1562,
    1563,  1564,  1565,  1566,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1567,  1571,
    1595,     0,  1595,     0,     0,     0,  1595,     0,  1569,     0,
       0,     0,     0,     0,  1595,  1570,     0,  1595,     0,  1595,
       0,     0,     0,  1595,     0,     0,  1885,  1885,     0,     0,
    1595,  1595,     0,     0,     0,     0,     0,     0,  1595,     0,
    1571,     0,     0,     0,     0,     0,     0,  1583,  1595,     0,
    1584,  1585,  1586,  1572,  1587,  1588,  1589,  1590,  1591,  1592,
       0,     0,     0,  1595,  1996,     0,     0,     0,     0,  1573,
       0,     0,     0,     0,  1574,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1572,     0,     0,     0,  1575,  1576,     0,
       0,  1457,     0,     0,     0,     0,     0,     0,     0,  1573,
       0,     0,  1577,     0,  1574,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1572,     0,     0,  1575,  1576,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1578,     0,
    1573,  1579,  1577,     0,     0,  1574,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1580,     0,     0,  1581,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1575,  1576,
       0,     0,     0,     0,     0,     0,     0,     0,  1578,     0,
       0,  1579,     0,  1577,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1580,     0,     0,  1581,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1578,
       0,     0,  1579,     0,  1885,  1457,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1580,     0,     0,  1581,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1595,
    1595,  1582,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1595,     0,     0,
       0,  1595,     0,  1595,  1595,  1595,     0,     0,  1595,     0,
       0,  1595,  1595,     0,     0,     0,     0,     0,     0,  1595,
       0,  1582,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1595,
       0,     0,  1582,     0,     0,  1885,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1595,     0,
       0,     0,     0,     0,     0,  1583,     0,     0,  1584,  1585,
    1586,     0,  1587,  1588,  1589,  1590,  1591,  1592,     0,     0,
       0,     0,  2309,     0,     0,  1595,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1583,     0,     0,  1584,  1585,
    1586,  1885,  1587,  1588,  1589,  1590,  1591,  1592,     0,     0,
       0,     0,  2394,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1595,  1595,  1595,  1583,     0,     0,  1584,
    1585,  1586,     0,  1587,  1588,  1589,  1590,  1591,  1592,     0,
       0,  1595,     0,  2410,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1595,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1595,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1595,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1595,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1595,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1595,     0,     0,     0,     0,     0,     0,     0,
     110,   995,   517,   996,   997,   998,   999,  1000,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,  1595,     0,  1001,     0,     0,   122,
     123,   124,     0,   125,   126,   127,   128,   129,   130,   131,
     132,  1002,   134,  1003,  1004,     0,   137,   138,   139,   140,
     141,   142,  1005,   606,   143,   144,  1006,  1007,   147,     0,
     148,   149,   150,   151,   607,     0,   608,     0,  1008,   155,
     156,   157,   158,   159,   160,   161,   162,   163,  1595,   164,
     165,   166,   167,   168,   169,     0,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,  1009,  1010,   183,
    1011,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   770,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,  1012,   212,   213,   214,   215,
     216,   609,  1013,   218,     0,   219,   220,  1014,   222,     0,
     223,     0,   224,   225,    21,   226,   227,   228,   229,   230,
     231,     0,   232,     0,  1015,  1016,   235,     0,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,   262,  1017,  1018,     0,
    1019,     0,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,     0,     0,   277,   278,   279,   280,     0,
     281,   282,   283,   284,   285,   286,   287,   288,  1020,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,  1021,   309,  1022,
     311,   312,   313,   314,  1023,   315,   316,   317,   318,  1024,
     611,   320,  1025,   322,   323,   324,     0,   325,   326,     0,
       0,  1026,   328,   329,     0,     0,   330,   331,   332,   333,
     334,   613,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,    25,    26,    27,     0,   346,   347,   614,   349,
     350,   351,   352,   353,   354,   355,     0,   356,   357,   358,
     359,   360,   361,     0,   362,   363,   364,  1027,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,  1028,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,    32,     0,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
    1029,   415,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   616,   431,     0,
     432,   433,    37,   434,   435,   436,   437,   438,   439,   440,
       0,  1030,  1031,     0,     0,   443,   444,   617,   446,   618,
    1032,   448,   449,   619,   451,   452,   453,   454,   455,     0,
       0,   456,   457,   458,    39,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   620,  1033,     0,   470,   471,
     472,   473,   474,   475,   476,     0,     0,   477,     0,    43,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,  1034,     0,    44,     0,     0,     0,     0,  1035,  1036,
    1037,     0,     0,     0,     0,  1038,     0,  1039,  3080,     0,
       0,     0,  1040,  1041,  1042,  1043,   110,   995,   517,   996,
     997,   998,   999,  1000,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,   120,   121,     0,     0,     0,
       0,     0,  1001,     0,     0,   122,   123,   124,     0,   125,
     126,   127,   128,   129,   130,   131,   132,  1002,   134,  1003,
    1004,     0,   137,   138,   139,   140,   141,   142,  1005,   606,
     143,   144,  1006,  1007,   147,     0,   148,   149,   150,   151,
     607,     0,   608,     0,  1008,   155,   156,   157,   158,   159,
     160,   161,   162,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,  1009,  1010,   183,  1011,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,     0,     0,   196,   197,   770,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,  1012,   212,   213,   214,   215,   216,   609,  1013,   218,
       0,   219,   220,  1014,   222,     0,   223,     0,   224,   225,
      21,   226,   227,   228,   229,   230,   231,     0,   232,     0,
    1015,  1016,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,   262,  1017,  1018,     0,  1019,     0,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
       0,   277,   278,   279,   280,     0,   281,   282,   283,   284,
     285,   286,   287,   288,  1020,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,  1021,   309,  1022,   311,   312,   313,   314,
    1023,   315,   316,   317,   318,  1024,   611,   320,  1025,   322,
     323,   324,     0,   325,   326,     0,     0,  1026,   328,   329,
       0,     0,   330,   331,   332,   333,   334,   613,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,    25,    26,
      27,     0,   346,   347,   614,   349,   350,   351,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,     0,
     362,   363,   364,  1027,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,  1028,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    32,     0,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,  1029,   415,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   616,   431,     0,   432,   433,    37,   434,
     435,   436,   437,   438,   439,   440,     0,  1030,  1031,     0,
       0,   443,   444,   617,   446,   618,  1032,   448,   449,   619,
     451,   452,   453,   454,   455,     0,     0,   456,   457,   458,
      39,   459,   460,   461,   462,     0,   463,   464,   465,   466,
     467,   620,  1033,     0,   470,   471,   472,   473,   474,   475,
     476,     0,     0,   477,     0,    43,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,  1034,     0,    44,
       0,     0,     0,     0,  1035,  1036,  1037,     0,     0,     0,
       0,  1038,     0,  1039,     0,     0,     0,     0,  1040,  1041,
    1042,  1043,  1183,   995,   517,   996,   997,   998,   999,  1000,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,  1184,
     119,   120,   121,     0,     0,     0,  1185,     0,  1001,     0,
       0,  1186,   123,   124,     0,   125,   126,   127,  1187,   129,
     130,   131,   132,  1002,  1188,  1003,  1004,     0,   137,   138,
     139,   140,   141,   142,  1005,   606,   143,   144,  1006,  1007,
     147,     0,   148,   149,   150,   151,   607,     0,  1189,     0,
    1190,   155,   156,   157,   158,   159,  1191,   161,   162,   163,
       0,   164,   165,   166,   167,   168,   169,     0,  1192,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,  1009,
    1010,   183,  1011,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,  1193,     0,   196,
     197,   770,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,  1012,   212,   213,
     214,   215,   216,   609,  1013,   218,     0,   219,   220,  1014,
     222,     0,   223,     0,   224,  1194,     0,  1195,   227,   228,
    1196,  1197,   231,     0,   232,     0,  1015,  1016,   235,     0,
     236,   237,   238,   239,   240,   241,   242,  1198,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,  1199,   257,   258,   259,   260,   261,   262,  1017,
    1018,     0,  1019,     0,   266,  1200,  1201,   269,  1202,   271,
     272,   273,   274,   275,   276,     0,     0,   277,  1203,   279,
    1204,     0,   281,   282,   283,   284,   285,   286,   287,   288,
    1205,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,  1021,
    1206,  1022,   311,   312,   313,   314,  1023,   315,   316,  1207,
     318,  1024,   611,   320,  1025,   322,   323,   324,     0,   325,
     326,     0,     0,  1026,   328,   329,     0,     0,   330,   331,
    1208,   333,  1209,   613,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,     0,     0,   346,   347,
     614,  1210,   350,   351,   352,   353,   354,   355,     0,   356,
     357,   358,   359,   360,   361,     0,   362,   363,   364,  1027,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,  1211,   386,   387,   388,  1028,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,     0,  1212,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,  1213,
     412,   413,  1029,   415,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,  1214,   429,   616,
     431,     0,   432,   433,     0,   434,  1215,   436,   437,   438,
     439,   440,     0,  1030,  1031,     0,     0,   443,   444,   617,
     446,   618,  1032,   448,   449,  1216,   451,   452,   453,   454,
     455,     0,     0,   456,   457,   458,     0,   459,   460,   461,
     462,     0,   463,   464,   465,   466,   467,   468,  1033,  1217,
     470,  1218,   472,   473,   474,   475,   476,     0,     0,   477,
       0,     0,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,  1034,     0,     0,     0,     0,     0,     0,
    1035,  1036,  1037,     0,     0,     0,     0,  1038,     0,  1039,
    1219,     0,     0,     0,  1040,  1041,  1042,  1043,   110,   995,
     517,   996,   997,   998,   999,  1000,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,     0,     0,  1001,     0,     0,   122,   123,   124,
       0,   125,   126,   127,   128,   129,   130,   131,   132,  1002,
     134,  1003,  1004,  1465,   137,   138,   139,   140,   141,   142,
    1005,   606,   143,   144,  1006,  1007,   147,     0,   148,   149,
     150,   151,   607,     0,   608,     0,  1008,   155,   156,   157,
     158,   159,   160,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,  1009,  1010,   183,  1011,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   770,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,  1012,   212,   213,   214,   215,   216,   609,
    1013,   218,     0,   219,   220,  1014,   222,     0,   223,     0,
     224,   225,  1466,   226,   227,   228,   229,   230,   231,     0,
     232,     0,  1015,  1016,   235,     0,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,   262,  1017,  1018,     0,  1019,     0,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,     0,  1467,   277,   278,   279,   280,     0,   281,   282,
     283,   284,   285,   286,   287,   288,  1020,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,  1021,   309,  1022,   311,   312,
     313,   314,  1023,   315,   316,   317,   318,  1024,   611,   320,
    1025,   322,   323,   324,     0,   325,   326,     0,     0,  1026,
     328,   329,     0,     0,   330,   331,   332,   333,   334,   613,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,     0,     0,   346,   347,   614,   349,   350,   351,
     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,
     361,     0,   362,   363,   364,  1027,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,  1028,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,     0,     0,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,  1029,   415,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   616,   431,     0,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,     0,  1030,
    1031,     0,  1468,   443,   444,   617,   446,   618,  1032,   448,
     449,   619,   451,   452,   453,   454,   455,     0,     0,   456,
     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,
     465,   466,   467,   468,  1033,     0,   470,   471,   472,   473,
     474,   475,   476,     0,     0,   477,     0,     0,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,  1034,
       0,     0,     0,     0,     0,     0,  1035,  1036,  1037,     0,
       0,     0,     0,  1038,     0,  1039,     0,     0,     0,     0,
    1040,  1041,  1042,  1043,  1183,   995,   517,   996,   997,   998,
     999,  1000,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,  1185,     0,
    1001,     0,     0,  1186,   123,   124,     0,   125,   126,   127,
    1187,   129,   130,   131,   132,  1002,  1188,  1003,  1004,     0,
     137,   138,   139,   140,   141,   142,  1005,   606,   143,   144,
    1006,  1007,   147,     0,   148,   149,   150,   151,   607,     0,
    1189,     0,  1190,   155,   156,   157,   158,   159,  1191,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
    1192,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,  1009,  1010,   183,  1011,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   770,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,  1012,
     212,   213,   214,   215,   216,   609,  1013,   218,     0,   219,
     220,  1014,   222,     0,   223,     0,   224,  1194,     0,  1195,
     227,   228,  1196,  1197,   231,     0,   232,     0,  1015,  1016,
     235,     0,   236,   237,   238,   239,   240,   241,   242,  1198,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,  1199,   257,   258,   259,   260,   261,
     262,  1017,  1018,     0,  1019,     0,   266,  1200,  1201,   269,
    1202,   271,   272,   273,   274,   275,   276,     0,     0,   277,
    1203,   279,  1204,     0,   281,   282,   283,   284,   285,   286,
     287,   288,  1205,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,  1021,  1206,  1022,   311,   312,   313,   314,  1023,   315,
     316,  1207,   318,  1024,   611,   320,  1025,   322,   323,   324,
       0,   325,   326,     0,     0,  1026,   328,   329,     0,     0,
     330,   331,  1208,   333,  1209,   613,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,     0,     0,
     346,   347,   614,  1210,   350,   351,   352,   353,   354,   355,
       0,   356,   357,   358,   359,   360,   361,     0,   362,   363,
     364,  1027,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,  1211,   386,   387,   388,  1028,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,     0,
    1212,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,  1213,   412,   413,  1029,   415,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,  1214,
     429,   616,   431,     0,   432,   433,     0,   434,  1215,   436,
     437,   438,   439,   440,     0,  1030,  1031,     0,     0,   443,
     444,   617,   446,   618,  1032,   448,   449,  1216,   451,   452,
     453,   454,   455,     0,     0,   456,   457,   458,     0,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,
    1033,  2203,   470,  1218,   472,   473,   474,   475,   476,     0,
       0,   477,     0,     0,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,  1034,     0,     0,     0,     0,
       0,     0,  1035,  1036,  1037,     0,     0,     0,     0,  1038,
       0,  1039,     0,     0,     0,     0,  1040,  1041,  1042,  1043,
    1183,   995,   517,   996,   997,   998,   999,  1000,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,  1185,     0,  1001,     0,     0,  1186,
     123,   124,     0,   125,   126,   127,  1187,   129,   130,   131,
     132,  1002,  1188,  1003,  1004,     0,   137,   138,   139,   140,
     141,   142,  1005,   606,   143,   144,  1006,  1007,   147,     0,
     148,   149,   150,   151,   607,     0,  1189,     0,  1190,   155,
     156,   157,   158,   159,  1191,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,  1192,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,  1009,  1010,   183,
    1011,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   770,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,  1012,   212,   213,   214,   215,
     216,   609,  1013,   218,     0,   219,   220,  1014,   222,     0,
     223,     0,   224,  1194,     0,  1195,   227,   228,  1196,  1197,
     231,     0,   232,     0,  1015,  1016,   235,     0,   236,   237,
     238,   239,   240,   241,   242,  1198,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
    1199,   257,   258,   259,   260,   261,   262,  1017,  1018,     0,
    1019,     0,   266,  1200,  1201,   269,  1202,   271,   272,   273,
     274,   275,   276,     0,     0,   277,  1203,   279,  1204,     0,
     281,   282,   283,   284,   285,   286,   287,   288,  1205,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,  1021,  1206,  1022,
     311,   312,   313,   314,  1023,   315,   316,  1207,   318,  1024,
     611,   320,  1025,   322,   323,   324,     0,   325,   326,     0,
       0,  1026,   328,   329,     0,     0,   330,   331,  1208,   333,
    1209,   613,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,     0,     0,   346,   347,   614,  1210,
     350,   351,   352,   353,   354,   355,     0,   356,   357,   358,
     359,   360,   361,     0,   362,   363,   364,  1027,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,  1211,
     386,   387,   388,  1028,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,     0,  1212,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,  1213,   412,   413,
    1029,   415,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,  1214,   429,   616,   431,     0,
     432,   433,     0,   434,  1215,   436,   437,   438,   439,   440,
       0,  1030,  1031,     0,     0,   443,   444,   617,   446,   618,
    1032,   448,   449,  1216,   451,   452,   453,   454,   455,     0,
       0,   456,   457,   458,     0,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,  1033,     0,   470,  1218,
     472,   473,   474,   475,   476,     0,     0,   477,     0,     0,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,  1034,     0,     0,     0,     0,     0,     0,  1035,  1036,
    1037,     0,     0,     0,     0,  1038,     0,  1039,  2254,     0,
       0,     0,  1040,  1041,  1042,  1043,   110,   995,   517,   996,
     997,   998,   999,  1000,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118, -1049,   119,   120,   121,     0,     0,     0,
       0, -1049,  1001,     0,     0,   122,   123,   124,     0,   125,
     126,   127,   128,   129,   130,   131,   132,  1002,   134,  1003,
    1004,     0,   137,   138,   139,   140,   141,   142,  1005,   606,
     143,   144,  1006,  1007,   147,     0,   148,   149,   150,   151,
     607,     0,   608,     0,  1008,   155,   156,   157,   158,   159,
     160,   161,   162,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,  1009,  1010,   183,  1011,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,     0,     0,   196,   197,   770,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,  1012,   212,   213,   214,   215,   216,   609,  1013,   218,
       0,   219,   220,  1014,   222,     0,   223,     0,   224,   225,
       0,   226,   227,   228,   229,   230,   231,     0,   232,     0,
    1015,  1016,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,
     260,   261,   262,  1017,  1018,     0,  1019,     0,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
       0,   277,   278,   279,   280,     0,   281,   282,   283,   284,
     285,   286,   287,   288,  1020,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,  1021,   309,  1022,   311,   312,   313,   314,
    1023,   315,   316,   317,   318,  1024,   611,   320,  1025,   322,
     323,   324,     0,   325,   326,     0,     0,  1026,   328,   329,
       0,     0,   330,   331,   332,   333,   334,   613,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
       0,     0,   346,   347,   614,   349,   350,   351,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,     0,
     362,   363,   364,  1027,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   385,   386,   387,   388,  1028,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,     0,     0,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,  1029,   415, -1049,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   616,   431,     0,   432,   433,     0,   434,
     435,   436,   437,   438,   439,   440,     0,  1030,  1031,     0,
       0,   443,   444,   617,   446,   618,  1032,   448,   449,   619,
     451,   452,   453,   454,   455,     0,     0,   456,   457,   458,
       0,   459,   460,   461,   462,     0,   463,   464,   465,   466,
     467,   468,  1033,     0,   470,   471,   472,   473,   474,   475,
     476,     0,     0,   477,     0,     0,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,  1034,     0,     0,
       0,     0,     0,     0,  1035,  1036,  1037,     0,     0,     0,
       0,  1038,     0,  1039,     0,     0,     0,     0,  1040,  1041,
    1042,  1043,  1183,   995,   517,   996,   997,   998,   999,  1000,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,   120,   121,     0,     0,     0,  1185,     0,  1001,     0,
       0,  1186,   123,   124,     0,   125,   126,   127,  1187,   129,
     130,   131,   132,  1002,  1188,  1003,  1004,     0,   137,   138,
     139,   140,   141,   142,  1005,   606,   143,   144,  1006,  1007,
     147,     0,   148,   149,   150,   151,   607,     0,  1189,     0,
    1190,   155,   156,   157,   158,   159,  1191,   161,   162,   163,
       0,   164,   165,   166,   167,   168,   169,     0,  1192,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,  1009,
    1010,   183,  1011,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,
     197,   770,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,  1012,   212,   213,
     214,   215,   216,   609,  1013,   218,     0,   219,   220,  1014,
     222,     0,   223,     0,   224,  1194,     0,  1195,   227,   228,
    1196,  1197,   231,     0,   232,     0,  1015,  1016,   235,     0,
     236,   237,   238,   239,   240,   241,   242,  1198,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,  1199,   257,   258,   259,   260,   261,   262,  1017,
    1018,     0,  1019,     0,   266,  1200,  1201,   269,  1202,   271,
     272,   273,   274,   275,   276,     0,     0,   277,  1203,   279,
    1204,     0,   281,   282,   283,   284,   285,   286,   287,   288,
    1205,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,  1021,
    1206,  1022,   311,   312,   313,   314,  1023,   315,   316,  1207,
     318,  1024,   611,   320,  1025,   322,   323,   324,     0,   325,
     326,     0,     0,  1026,   328,   329,     0,     0,   330,   331,
    1208,   333,  1209,   613,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,     0,     0,   346,   347,
     614,  1210,   350,   351,   352,   353,   354,   355,     0,   356,
     357,   358,   359,   360,   361,     0,   362,   363,   364,  1027,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,  1211,   386,   387,   388,  1028,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,     0,  1212,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,  1213,
     412,   413,  1029,   415,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,  1214,   429,   616,
     431,     0,   432,   433,     0,   434,  1215,   436,   437,   438,
     439,   440,     0,  1030,  1031,     0,     0,   443,   444,   617,
     446,   618,  1032,   448,   449,  1216,   451,   452,   453,   454,
     455,     0,     0,   456,   457,   458,     0,   459,   460,   461,
     462,     0,   463,   464,   465,   466,   467,   468,  1033,     0,
     470,  1218,   472,   473,   474,   475,   476,     0,     0,   477,
       0,     0,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,  1034,     0,     0,     0,     0,     0,     0,
    1035,  1036,  1037,     0,     0,     0,     0,  1038,     0,  1039,
    2954,     0,     0,     0,  1040,  1041,  1042,  1043,  1183,   995,
     517,   996,   997,   998,   999,  1000,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,  1185,     0,  1001,     0,     0,  1186,   123,   124,
       0,   125,   126,   127,  1187,   129,   130,   131,   132,  1002,
    1188,  1003,  1004,     0,   137,   138,   139,   140,   141,   142,
    1005,   606,   143,   144,  1006,  1007,   147,     0,   148,   149,
     150,   151,   607,     0,  1189,     0,  1190,   155,   156,   157,
     158,   159,  1191,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,  1192,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,  1009,  1010,   183,  1011,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   770,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,  1012,   212,   213,   214,   215,   216,   609,
    1013,   218,     0,   219,   220,  1014,   222,     0,   223,     0,
     224,  1194,     0,  1195,   227,   228,  1196,  1197,   231,     0,
     232,     0,  1015,  1016,   235,     0,   236,   237,   238,   239,
     240,   241,   242,  1198,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,  1199,   257,
     258,   259,   260,   261,   262,  1017,  1018,     0,  1019,     0,
     266,  1200,  1201,   269,  1202,   271,   272,   273,   274,   275,
     276,     0,     0,   277,  1203,   279,  1204,     0,   281,   282,
     283,   284,   285,   286,   287,   288,  1205,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,  1021,  1206,  1022,   311,   312,
     313,   314,  1023,   315,   316,  1207,   318,  1024,   611,   320,
    1025,   322,   323,   324,     0,   325,   326,     0,     0,  1026,
     328,   329,     0,     0,   330,   331,  1208,   333,  1209,   613,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,     0,     0,   346,   347,   614,  1210,   350,   351,
     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,
     361,     0,   362,   363,   364,  1027,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,  1211,   386,   387,
     388,  1028,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,     0,  1212,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,  1213,   412,   413,  1029,   415,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,  1214,   429,   616,   431,     0,   432,   433,
       0,   434,  1215,   436,   437,   438,   439,   440,     0,  1030,
    1031,     0,     0,   443,   444,   617,   446,   618,  1032,   448,
     449,  1216,   451,   452,   453,   454,   455,     0,     0,   456,
     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,
     465,   466,   467,   468,  1033,     0,   470,  1218,   472,   473,
     474,   475,   476,     0,     0,   477,     0,     0,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,  1034,
       0,     0,     0,     0,     0,     0,  1035,  1036,  1037,     0,
       0,     0,     0,  1038,     0,  1039,     0,     0,     0,     0,
    1040,  1041,  1042,  1043,   110,   995,   517,   996,   997,     0,
     999,  1000,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,
    1001,     0,     0,   122,   123,   124,     0,   125,   126,   127,
     128,   129,   130,   131,   132,  1002,   134,  1003,  1004,     0,
     137,   138,   139,   140,   141,   142,  1005,   606,   143,   144,
    1006,  1007,   147,     0,   148,   149,   150,   151,   607,     0,
     608,     0,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,  1009,  1010,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   770,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,  1012,
     212,   213,   214,   215,   216,   609,  1013,   218,     0,   219,
     220,  1014,   222,     0,   223,     0,   224,   225,    21,   226,
     227,   228,   229,   230,   231,     0,   232,     0,  1015,  1016,
     235,     0,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
     262,  1017,  1018,     0,  1019,     0,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,     0,     0,   277,
     278,   279,   280,     0,   281,   282,   283,   284,   285,   286,
     287,   288,  1020,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,  1021,   309,  1022,   311,   312,   313,   314,     0,   315,
     316,   317,   318,  1024,   611,   320,  1025,   322,   323,   324,
       0,   325,   326,     0,     0,   327,   328,   329,     0,     0,
     330,   331,   332,   333,   334,   613,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,    25,    26,    27,     0,
     346,   347,   614,   349,   350,   351,   352,   353,   354,   355,
       0,   356,   357,   358,   359,   360,   361,     0,   362,   363,
     364,  1027,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,  1028,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,    32,
       0,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,  1029,   415,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   616,   431,     0,   432,   433,    37,   434,   435,   436,
     437,   438,   439,   440,     0,  1030,  1031,     0,     0,   443,
     444,   617,   446,   618,  1032,   448,   449,   619,   451,   452,
     453,   454,   455,     0,     0,   456,   457,   458,    39,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,   620,
    1033,     0,   470,   471,   472,   473,   474,   475,   476,     0,
       0,   477,     0,    43,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,     0,     0,    44,     0,     0,
       0,   110,   995,   517,   996,   997,   998,   999,  1000,  1038,
       0,  1039,     0,     0,     0,     0,  1040,  1041,  1042,  1043,
     111,   112,   113,   114,   115,   116,   117,   118,  1641,   119,
     120,   121,     0,     0,     0,     0,     0,  1001,     0,     0,
     122,   123,   124,     0,   125,   126,   127,   128,   129,   130,
     131,   132,  1002,   134,  1003,  1004,     0,   137,   138,   139,
     140,   141,   142,  1005,   606,   143,   144,  1006,  1007,   147,
       0,   148,   149,   150,   151,   607,     0,   608,     0,  1008,
     155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,  1009,  1010,
     183,  1011,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     770,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,  1012,   212,   213,   214,
     215,   216,   609,  1013,   218,     0,   219,   220,  1014,   222,
       0,   223,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,     0,   232,     0,  1015,  1016,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,   262,  1017,  1018,
       0,  1019,     0,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,     0,     0,   277,   278,   279,   280,
       0,   281,   282,   283,   284,   285,   286,   287,   288,  1020,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,  1021,   309,
    1022,   311,   312,   313,   314,  1023,   315,   316,   317,   318,
    1024,   611,   320,  1025,   322,   323,   324,     0,   325,   326,
       0,     0,  1026,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   613,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,     0,     0,   346,   347,   614,
     349,   350,   351,   352,   353,   354,   355,     0,   356,   357,
     358,   359,   360,   361,     0,   362,   363,   364,  1027,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,  1028,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,     0,     0,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,  1029,   415,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   616,   431,
       0,   432,   433,     0,   434,   435,   436,   437,   438,   439,
     440,     0,  1030,  1031,     0,     0,   443,   444,   617,   446,
     618,  1032,   448,   449,   619,   451,   452,   453,   454,   455,
       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,   468,  1033,     0,   470,
     471,   472,   473,   474,   475,   476,     0,     0,   477,     0,
       0,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,  1034,     0,     0,     0,     0,     0,     0,  1035,
    1036,  1037,     0,     0,     0,     0,  1038,     0,  1039,     0,
       0,     0,     0,  1040,  1041,  1042,  1043,   110,  1656,   517,
     996,   997,   998,  1657,  1000,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   111,   112,   113,   114,
     115,   116,   117,   118,  1658,   119,   120,   121,     0,     0,
       0,     0,     0,  1001,     0,     0,   122,   123,   124,     0,
     125,   126,   127,   128,   129,   130,   131,   132,  1002,   134,
    1003,  1004,     0,   137,   138,   139,   140,   141,   142,  1005,
     606,   143,   144,  1006,  1007,   147,     0,   148,   149,   150,
     151,   607,     0,   608,     0,  1008,   155,   156,   157,   158,
     159,   160,   161,   162,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,  1009,  1010,   183,  1011,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,     0,     0,   196,   197,   770,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,  1012,   212,   213,   214,   215,   216,   609,  1013,
     218,     0,   219,   220,  1014,   222,     0,   223,     0,   224,
     225,     0,   226,   227,   228,   229,   230,   231,     0,   232,
       0,  1015,  1016,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,   262,  1017,  1018,     0,  1019,     0,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
       0,     0,   277,   278,   279,   280,     0,   281,   282,   283,
     284,   285,   286,   287,   288,  1020,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,  1021,   309,  1022,   311,   312,   313,
     314,  1023,   315,   316,   317,   318,  1024,   611,   320,  1025,
     322,   323,   324,     0,   325,   326,     0,     0,  1026,   328,
     329,     0,     0,   330,   331,   332,   333,   334,   613,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,     0,     0,   346,   347,   614,   349,   350,   351,   352,
     353,   354,   355,     0,   356,   357,   358,   359,   360,   361,
       0,   362,   363,   364,  1027,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
    1028,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,     0,     0,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,  1029,   415,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   616,   431,     0,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,     0,  1030,  1031,
       0,     0,   443,   444,   617,   446,   618,  1032,   448,   449,
     619,   451,   452,   453,   454,   455,     0,     0,   456,   457,
     458,     0,   459,   460,   461,   462,     0,   463,   464,   465,
     466,   467,   468,  1033,     0,   470,   471,   472,   473,   474,
     475,   476,     0,     0,   477,     0,     0,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,  1034,     0,
       0,     0,     0,     0,     0,  1035,  1036,  1037,     0,     0,
       0,     0,  1038,     0,  1039,     0,     0,     0,     0,  1040,
    1041,  1042,  1043,   110,   995,   517,   996,   997,   998,   999,
    1000,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,     0,     0,     0,     0,     0,  1001,
       0,     0,   122,   123,   124,     0,   125,   126,   127,   128,
     129,   130,   131,   132,  1002,   134,  1003,  1004,     0,   137,
     138,   139,   140,   141,   142,  1005,   606,   143,   144,  1006,
    1007,   147,     0,   148,   149,   150,   151,   607,     0,   608,
       0,  1008,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
    1009,  1010,   183,  1011,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   770,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,  1012,   212,
     213,   214,   215,   216,   609,  1013,   218,     0,   219,   220,
    1014,   222,     0,   223,     0,   224,   225,  1466,   226,   227,
     228,   229,   230,   231,     0,   232,     0,  1015,  1016,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,
    1017,  1018,     0,  1019,     0,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,     0,     0,   277,   278,
     279,   280,     0,   281,   282,   283,   284,   285,   286,   287,
     288,  1020,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
    1021,   309,  1022,   311,   312,   313,   314,  1023,   315,   316,
     317,   318,  1024,   611,   320,  1025,   322,   323,   324,     0,
     325,   326,     0,     0,  1026,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   613,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   614,   349,   350,   351,   352,   353,   354,   355,     0,
     356,   357,   358,   359,   360,   361,     0,   362,   363,   364,
    1027,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,  1028,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,     0,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,  1029,   415,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     616,   431,     0,   432,   433,     0,   434,   435,   436,   437,
     438,   439,   440,     0,  1030,  1031,     0,     0,   443,   444,
     617,   446,   618,  1032,   448,   449,   619,   451,   452,   453,
     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,   468,  1033,
       0,   470,   471,   472,   473,   474,   475,   476,     0,     0,
     477,     0,     0,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,  1034,     0,     0,     0,     0,     0,
       0,  1035,  1036,  1037,     0,     0,     0,     0,  1038,     0,
    1039,     0,     0,     0,     0,  1040,  1041,  1042,  1043,   110,
     995,   517,   996,   997,   998,   999,  1000,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,  1001,     0,     0,   122,   123,
     124,     0,   125,   126,   127,   128,   129,   130,   131,   132,
    1002,   134,  1003,  1004,     0,   137,   138,   139,   140,   141,
     142,  1005,   606,   143,   144,  1006,  1007,   147,     0,   148,
     149,   150,   151,   607,     0,   608,     0,  1008,   155,   156,
     157,   158,   159,   160,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,  1009,  1010,   183,  1011,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   770,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,  1012,   212,   213,   214,   215,   216,
     609,  1013,   218,     0,   219,   220,  1014,   222,     0,   223,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
       0,   232,     0,  1015,  1016,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,   262,  1017,  1018,     0,  1019,
       0,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,     0,     0,   277,   278,   279,   280,     0,   281,
     282,   283,   284,   285,   286,   287,   288,  1020,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,  1021,   309,  1022,   311,
     312,   313,   314,  1023,   315,   316,   317,   318,  1024,   611,
     320,  1025,   322,   323,   324,     0,   325,   326,     0,     0,
    1026,   328,   329,     0,     0,   330,   331,   332,   333,   334,
     613,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   614,   349,   350,
     351,   352,   353,   354,   355,     0,   356,   357,   358,   359,
     360,   361,     0,   362,   363,   364,  1027,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,  1028,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,     0,     0,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,  1029,
     415,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   616,   431,     0,   432,
     433,     0,   434,   435,   436,   437,   438,   439,   440,     0,
    1030,  1031,     0,     0,   443,   444,   617,   446,   618,  1032,
     448,   449,   619,   451,   452,   453,   454,   455,     0,     0,
     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,   468,  1033,     0,   470,   471,   472,
     473,   474,   475,   476,     0,     0,   477,     0,     0,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
    1034,     0,     0,     0,     0,     0,     0,  1035,  1036,  1037,
       0,     0,     0,     0,  1038,     0,  1039,  1988,     0,     0,
       0,  1040,  1041,  1042,  1043,   110,   995,   517,   996,   997,
     998,   999,  1000,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1001,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1002,   134,  1003,  1004,
       0,   137,   138,   139,   140,   141,   142,  1005,   606,   143,
     144,  1006,  1007,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,  1008,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,  1009,  1010,   183,  1011,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   770,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1012,   212,   213,   214,   215,   216,   609,  1013,   218,     0,
     219,   220,  1014,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1015,
    1016,   235,     0,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,   262,  1017,  1018,     0,  1019,     0,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     277,   278,   279,   280,     0,   281,   282,   283,   284,   285,
     286,   287,   288,  1020,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,  1021,   309,  1022,   311,   312,   313,   314,  1023,
     315,   316,   317,   318,  1024,   611,   320,  1025,   322,   323,
     324,     0,   325,   326,     0,     0,  1026,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   613,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,
       0,   346,   347,   614,   349,   350,   351,   352,   353,   354,
     355,     0,   356,   357,   358,   359,   360,   361,     0,   362,
     363,   364,  1027,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,  1028,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
       0,     0,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,  1029,   415,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   616,   431,     0,   432,   433,  2588,   434,   435,
     436,   437,   438,   439,   440,     0,  1030,  1031,     0,     0,
     443,   444,   617,   446,   618,  1032,   448,   449,   619,   451,
     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,  1033,     0,   470,   471,   472,   473,   474,   475,   476,
       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,  1034,     0,     0,     0,
       0,     0,     0,  1035,  1036,  1037,     0,     0,     0,     0,
    1038,     0,  1039,     0,     0,     0,     0,  1040,  1041,  1042,
    1043,   110,   995,   517,   996,   997,   998,   999,  1000,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,
     120,   121,     0,     0,     0,     0,     0,  1001,     0,     0,
     122,   123,   124,     0,   125,   126,   127,   128,   129,   130,
     131,   132,  1002,   134,  1003,  1004,     0,   137,   138,   139,
     140,   141,   142,  1005,   606,   143,   144,  1006,  1007,   147,
       0,   148,   149,   150,   151,   607,     0,   608,     0,  1008,
     155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,  1009,  1010,
     183,  1011,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     770,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,  1012,   212,   213,   214,
     215,   216,   609,  1013,   218,     0,   219,   220,  1014,   222,
       0,   223,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,     0,   232,     0,  1015,  1016,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,   262,  1017,  1018,
       0,  1019,     0,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,     0,     0,   277,   278,   279,   280,
       0,   281,   282,   283,   284,   285,   286,   287,   288,  1020,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,  1021,   309,
    1022,   311,   312,   313,   314,  1023,   315,   316,   317,   318,
    1024,   611,   320,  1025,   322,   323,   324,     0,   325,   326,
       0,     0,  1026,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   613,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,     0,     0,   346,   347,   614,
     349,   350,   351,   352,   353,   354,   355,     0,   356,   357,
     358,   359,   360,   361,     0,   362,   363,   364,  1027,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,  1028,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,     0,     0,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,  1029,   415,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   616,   431,
       0,   432,   433,     0,   434,   435,   436,   437,   438,   439,
     440,     0,  1030,  1031,     0,     0,   443,   444,   617,   446,
     618,  1032,   448,   449,   619,   451,   452,   453,   454,   455,
       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,   468,  1033,     0,   470,
     471,   472,   473,   474,   475,   476,     0,  2695,   477,     0,
       0,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,  1034,     0,     0,     0,     0,     0,     0,  1035,
    1036,  1037,     0,     0,     0,     0,  1038,     0,  1039,     0,
       0,     0,     0,  1040,  1041,  1042,  1043,   110,   995,   517,
     996,   997,   998,   999,  1000,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   111,   112,   113,   114,
     115,   116,   117,   118,  2905,   119,   120,   121,     0,     0,
       0,     0,     0,  1001,     0,     0,   122,   123,   124,     0,
     125,   126,   127,   128,   129,   130,   131,   132,  1002,   134,
    1003,  1004,     0,   137,   138,   139,   140,   141,   142,  1005,
     606,   143,   144,  1006,  1007,   147,     0,   148,   149,   150,
     151,   607,     0,   608,     0,  1008,   155,   156,   157,   158,
     159,   160,   161,   162,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,   171,  2906,   173,   174,   175,   176,
     177,   178,   179,   180,  1009,  1010,   183,  1011,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,     0,     0,   196,   197,   770,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,  1012,   212,   213,   214,   215,   216,   609,  1013,
     218,     0,   219,   220,  1014,   222,     0,   223,     0,   224,
     225,     0,   226,   227,   228,   229,   230,   231,     0,   232,
       0,  2907,  1016,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,   262,  1017,  1018,     0,  1019,     0,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
       0,     0,   277,   278,   279,   280,     0,   281,   282,   283,
     284,   285,   286,   287,   288,  1020,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,  1021,   309,  1022,   311,   312,   313,
     314,  1023,   315,   316,   317,   318,  1024,   611,   320,  1025,
     322,   323,   324,     0,   325,   326,     0,     0,  1026,   328,
     329,     0,     0,   330,   331,   332,   333,   334,   613,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,     0,     0,   346,   347,   614,   349,   350,   351,   352,
     353,   354,   355,     0,   356,   357,   358,   359,   360,   361,
       0,   362,   363,   364,  1027,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,  2908,
    1028,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,     0,     0,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,  1029,   415,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   616,   431,     0,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,     0,  1030,  1031,
       0,     0,   443,   444,   617,   446,   618,  1032,   448,   449,
     619,   451,   452,   453,   454,   455,     0,     0,   456,   457,
     458,     0,   459,   460,   461,   462,     0,   463,   464,   465,
     466,   467,   468,  1033,     0,   470,   471,   472,   473,   474,
     475,   476,     0,     0,   477,     0,     0,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,  1034,     0,
       0,     0,     0,     0,     0,  1035,  1036,  1037,     0,     0,
       0,     0,  1038,     0,  2909,     0,     0,     0,     0,  1040,
    1041,  1042,  1043,   110,   995,   517,   996,   997,   998,   999,
    1000,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,     0,     0,     0,     0,     0,  1001,
       0,     0,   122,   123,   124,     0,   125,   126,   127,   128,
     129,   130,   131,   132,  1002,   134,  1003,  1004,     0,   137,
     138,   139,   140,   141,   142,  1005,   606,   143,   144,  1006,
    1007,   147,     0,   148,   149,   150,   151,   607,     0,   608,
       0,  1008,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
    1009,  1010,   183,  1011,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   770,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,  1012,   212,
     213,   214,   215,   216,   609,  1013,   218,     0,   219,   220,
    1014,   222,     0,   223,     0,   224,   225,     0,   226,   227,
     228,   229,   230,   231,     0,   232,     0,  1015,  1016,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,
    1017,  1018,     0,  1019,     0,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,     0,     0,   277,   278,
     279,   280,     0,   281,   282,   283,   284,   285,   286,   287,
     288,  1020,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
    1021,   309,  1022,   311,   312,   313,   314,  1023,   315,   316,
     317,   318,  1024,   611,   320,  1025,   322,   323,   324,     0,
     325,   326,     0,     0,  1026,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   613,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   614,   349,   350,   351,   352,   353,   354,   355,     0,
     356,   357,   358,   359,   360,   361,     0,   362,   363,   364,
    1027,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,  1028,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,     0,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,  1029,   415,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     616,   431,     0,   432,   433,  3042,   434,   435,   436,   437,
     438,   439,   440,     0,  1030,  1031,     0,     0,   443,   444,
     617,   446,   618,  1032,   448,   449,   619,   451,   452,   453,
     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,   468,  1033,
       0,   470,   471,   472,   473,   474,   475,   476,     0,     0,
     477,     0,     0,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,  1034,     0,     0,     0,     0,     0,
       0,  1035,  1036,  1037,     0,     0,     0,     0,  1038,     0,
    1039,     0,     0,     0,     0,  1040,  1041,  1042,  1043,   110,
     995,   517,   996,   997,   998,   999,  1000,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,  1001,     0,     0,   122,   123,
     124,     0,   125,   126,   127,   128,   129,   130,   131,   132,
    1002,   134,  1003,  1004,     0,   137,   138,   139,   140,   141,
     142,  1005,   606,   143,   144,  1006,  1007,   147,     0,   148,
     149,   150,   151,   607,     0,   608,     0,  1008,   155,   156,
     157,   158,   159,   160,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,  1009,  1010,   183,  1011,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   770,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,  1012,   212,   213,   214,   215,   216,
     609,  1013,   218,     0,   219,   220,  1014,   222,     0,   223,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
       0,   232,     0,  1015,  1016,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,   262,  1017,  1018,     0,  1019,
       0,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,     0,     0,   277,   278,   279,   280,     0,   281,
     282,   283,   284,   285,   286,   287,   288,  1020,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,  1021,   309,  1022,   311,
     312,   313,   314,  1023,   315,   316,   317,   318,  1024,   611,
     320,  1025,   322,   323,   324,     0,   325,   326,     0,     0,
    1026,   328,   329,     0,     0,   330,   331,   332,   333,   334,
     613,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   614,   349,   350,
     351,   352,   353,   354,   355,     0,   356,   357,   358,   359,
     360,   361,     0,   362,   363,   364,  1027,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,  1028,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,     0,     0,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,  1029,
     415,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   616,   431,     0,   432,
     433,  3174,   434,   435,   436,   437,   438,   439,   440,     0,
    1030,  1031,     0,     0,   443,   444,   617,   446,   618,  1032,
     448,   449,   619,   451,   452,   453,   454,   455,     0,     0,
     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,   468,  1033,     0,   470,   471,   472,
     473,   474,   475,   476,     0,     0,   477,     0,     0,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
    1034,     0,     0,     0,     0,     0,     0,  1035,  1036,  1037,
       0,     0,     0,     0,  1038,     0,  1039,     0,     0,     0,
       0,  1040,  1041,  1042,  1043,   110,   995,   517,   996,   997,
     998,   999,  1000,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1001,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1002,   134,  1003,  1004,
       0,   137,   138,   139,   140,   141,   142,  1005,   606,   143,
     144,  1006,  1007,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,  1008,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,  1009,  1010,   183,  1011,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   770,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1012,   212,   213,   214,   215,   216,   609,  1013,   218,     0,
     219,   220,  1014,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1015,
    1016,   235,     0,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,   262,  1017,  1018,     0,  1019,     0,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     277,   278,   279,   280,     0,   281,   282,   283,   284,   285,
     286,   287,   288,  1020,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,  1021,   309,  1022,   311,   312,   313,   314,  1023,
     315,   316,   317,   318,  1024,   611,   320,  1025,   322,   323,
     324,     0,   325,   326,     0,     0,  1026,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   613,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,
       0,   346,   347,   614,   349,   350,   351,   352,   353,   354,
     355,     0,   356,   357,   358,   359,   360,   361,     0,   362,
     363,   364,  1027,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,  1028,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
       0,     0,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,  1029,   415,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   616,   431,     0,   432,   433,     0,   434,   435,
     436,   437,   438,   439,   440,     0,  1030,  1031,     0,     0,
     443,   444,   617,   446,   618,  1032,   448,   449,   619,   451,
     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,  1033,     0,   470,   471,   472,   473,   474,   475,   476,
       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,  1034,     0,     0,     0,
       0,     0,     0,  1035,  1036,  1037,     0,     0,     0,     0,
    1038,     0,  1039,     0,     0,     0,     0,  1040,  1041,  1042,
    1043,   110,   995,   517,   996,   997,   998,   999,  1000,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,
     120,   121,     0,     0,     0,     0,     0,  1001,     0,     0,
     122,   123,   124,     0,   125,   126,   127,   128,   129,   130,
     131,   132,  1002,   134,  1003,  1004,     0,   137,   138,   139,
     140,   141,   142,  1005,   606,   143,   144,  1006,  1007,   147,
       0,   148,   149,   150,   151,   607,     0,   608,     0,  1008,
     155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,  1009,  1010,
     183,  1011,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     770,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,  1012,   212,   213,   214,
     215,   216,   609,  1013,   218,     0,   219,   220,  1014,   222,
       0,   223,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,     0,   232,     0,  1015,  1016,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,   262,  1017,  1018,
       0,  1019,     0,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,     0,     0,   277,   278,   279,   280,
       0,   281,   282,   283,   284,   285,   286,   287,   288,  1020,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,  1021,   309,
    1022,   311,   312,   313,   314,  1023,   315,   316,   317,   318,
    1024,   611,   320,  1025,   322,   323,   324,     0,   325,   326,
       0,     0,  1026,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   613,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,     0,     0,   346,   347,   614,
     349,   350,   351,   352,   353,   354,   355,     0,   356,   357,
     358,   359,   360,   361,     0,   362,   363,   364,  1027,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,  1028,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,     0,     0,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,  1029,   415,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   616,   431,
       0,   432,   433,     0,   434,   435,   436,   437,   438,   439,
     440,     0,  1030,  1031,     0,     0,   443,   444,   617,   446,
     618,  1032,   448,   449,   619,   451,   452,   453,   454,   455,
       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,   468,  1033,     0,   470,
     471,   472,   473,   474,   475,   476,     0,     0,   477,     0,
       0,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,  1034,     0,     0,     0,     0,     0,     0,  1661,
    1662,  1037,     0,     0,     0,     0,  1038,     0,  1039,     0,
       0,     0,     0,  1040,  1041,  1042,  1043,   110,  2118,   517,
     996,   997,   998,   999,  1000,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,
       0,     0,     0,  1001,     0,     0,   122,   123,   124,     0,
     125,   126,   127,   128,   129,   130,   131,   132,  1002,   134,
    1003,  1004,     0,   137,   138,   139,   140,   141,   142,  1005,
     606,   143,   144,  1006,  1007,   147,     0,   148,   149,   150,
     151,   607,     0,   608,     0,  1008,   155,   156,   157,   158,
     159,   160,   161,   162,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,  1009,  1010,   183,  1011,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,     0,     0,   196,   197,   770,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,  1012,   212,   213,   214,   215,   216,   609,  1013,
     218,     0,   219,   220,  1014,   222,     0,   223,     0,   224,
     225,     0,   226,   227,   228,   229,   230,   231,     0,   232,
       0,  1015,  1016,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,   262,  1017,  1018,     0,  1019,     0,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
       0,     0,   277,   278,   279,   280,     0,   281,   282,   283,
     284,   285,   286,   287,   288,  1020,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,  1021,   309,  1022,   311,   312,   313,
     314,  1023,   315,   316,   317,   318,  1024,   611,   320,  1025,
     322,   323,   324,     0,   325,   326,     0,     0,  1026,   328,
     329,     0,     0,   330,   331,   332,   333,   334,   613,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,     0,     0,   346,   347,   614,   349,   350,   351,   352,
     353,   354,   355,     0,   356,   357,   358,   359,   360,   361,
       0,   362,   363,   364,  1027,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
    1028,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,     0,     0,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,  1029,   415,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   616,   431,     0,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,     0,  1030,  1031,
       0,     0,   443,   444,   617,   446,   618,  1032,   448,   449,
     619,   451,   452,   453,   454,   455,     0,     0,   456,   457,
     458,     0,   459,   460,   461,   462,     0,   463,   464,   465,
     466,   467,   468,  1033,     0,   470,   471,   472,   473,   474,
     475,   476,     0,     0,   477,     0,     0,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,  1034,     0,
       0,     0,     0,     0,     0,  1035,  1036,  1037,     0,     0,
       0,     0,  1038,     0,  1039,     0,     0,     0,     0,  1040,
    1041,  1042,  1043,   110,   995,   517,   996,   997,   998,   999,
    1000,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,     0,     0,     0,     0,     0,  1001,
       0,     0,   122,   123,   124,     0,   125,   126,   127,   128,
     129,   130,   131,   132,  1002,   134,  1003,  1004,     0,   137,
     138,   139,   140,   141,   142,  1005,   606,   143,   144,  1006,
    1007,   147,     0,   148,   149,   150,   151,   607,     0,   608,
       0,  1008,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
    1009,  1010,   183,  1011,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   770,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,  1012,   212,
     213,   214,   215,   216,   609,  1013,   218,     0,   219,   220,
    1014,   222,     0,   223,     0,   224,   225,     0,   226,   227,
     228,   229,   230,   231,     0,   232,     0,  1015,  1016,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,
    1017,  1018,     0,  1019,     0,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,     0,     0,   277,   278,
     279,   280,     0,   281,   282,   283,   284,   285,   286,   287,
     288,  1020,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
    1021,   309,  1022,   311,   312,   313,   314,  1023,   315,   316,
     317,   318,  1024,   611,   320,  1025,   322,   323,   324,     0,
     325,   326,     0,     0,  1026,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   613,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   614,   349,   350,   351,   352,   353,   354,   355,     0,
     356,   357,   358,   359,   360,   361,     0,   362,   363,   364,
    1027,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,  1028,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,     0,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,  1029,   415,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     616,   431,     0,   432,   433,     0,   434,   435,   436,   437,
     438,   439,   440,     0,  1030,  1031,     0,     0,   443,   444,
     617,   446,   618,  1032,   448,   449,   619,   451,   452,   453,
     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,   468,  1033,
       0,   470,   471,   472,   473,   474,   475,   476,     0,     0,
     477,     0,     0,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,  1034,     0,     0,     0,     0,     0,
       0,  1035,  1036,  1037,     0,     0,     0,     0,  1038,     0,
    2402,     0,     0,     0,     0,  1040,  1041,  1042,  1043,   110,
     995,   517,   996,   997,   998,   999,  1000,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,  1001,     0,     0,   122,   123,
     124,     0,   125,   126,   127,   128,   129,   130,   131,   132,
    1002,   134,  1003,  1004,     0,   137,   138,   139,   140,   141,
     142,  1005,   606,   143,   144,  1006,  1007,   147,     0,   148,
     149,   150,   151,   607,     0,   608,     0,  1008,   155,   156,
     157,   158,   159,   160,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,   171,  2906,   173,   174,
     175,   176,   177,   178,   179,   180,  1009,  1010,   183,  1011,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   770,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,  1012,   212,   213,   214,   215,   216,
     609,  1013,   218,     0,   219,   220,  1014,   222,     0,   223,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
       0,   232,     0,  2907,  1016,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,   262,  1017,  1018,     0,  1019,
       0,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,     0,     0,   277,   278,   279,   280,     0,   281,
     282,   283,   284,   285,   286,   287,   288,  1020,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,  1021,   309,  1022,   311,
     312,   313,   314,  1023,   315,   316,   317,   318,  1024,   611,
     320,  1025,   322,   323,   324,     0,   325,   326,     0,     0,
    1026,   328,   329,     0,     0,   330,   331,   332,   333,   334,
     613,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   614,   349,   350,
     351,   352,   353,   354,   355,     0,   356,   357,   358,   359,
     360,   361,     0,   362,   363,   364,  1027,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,  2908,  1028,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,     0,     0,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,  1029,
     415,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   616,   431,     0,   432,
     433,     0,   434,   435,   436,   437,   438,   439,   440,     0,
    1030,  1031,     0,     0,   443,   444,   617,   446,   618,  1032,
     448,   449,   619,   451,   452,   453,   454,   455,     0,     0,
     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,   468,  1033,     0,   470,   471,   472,
     473,   474,   475,   476,     0,     0,   477,     0,     0,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
    1034,     0,     0,     0,     0,     0,     0,  1035,  1036,  1037,
       0,     0,     0,     0,  1038,     0,  2909,     0,     0,     0,
       0,  1040,  1041,  1042,  1043,   110,   995,   517,   996,   997,
     998,   999,  1000,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1001,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,  3343,  1002,   134,  1003,  1004,
       0,   137,   138,   139,   140,   141,   142,  1005,   606,   143,
     144,  1006,  1007,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,  1008,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,  3344,   174,   175,   176,   177,   178,
     179,   180,  1009,  1010,   183,  1011,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   770,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1012,   212,   213,   214,   215,   216,   609,  1013,   218,     0,
     219,   220,  1014,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1015,
    1016,   235,     0,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,   262,  1017,  1018,     0,  1019,     0,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     277,   278,   279,   280,     0,   281,   282,   283,   284,   285,
     286,   287,   288,  1020,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,  1021,   309,  1022,   311,   312,   313,   314,  1023,
     315,   316,   317,   318,  1024,   611,   320,  1025,   322,   323,
     324,     0,   325,   326,     0,     0,  1026,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   613,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,
       0,   346,   347,   614,   349,   350,   351,   352,   353,   354,
     355,     0,   356,   357,   358,   359,   360,   361,     0,   362,
     363,   364,  1027,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,  1028,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
       0,     0,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,  1029,   415,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   616,   431,     0,   432,   433,     0,   434,   435,
     436,   437,   438,   439,   440,     0,  1030,  1031,     0,     0,
     443,   444,   617,   446,   618,  1032,   448,   449,   619,   451,
     452,  3345,   454,   455,     0,     0,   456,   457,   458,     0,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,  1033,     0,   470,   471,   472,   473,   474,   475,   476,
       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,  1034,     0,     0,     0,
       0,     0,     0,  1035,  1036,  1037,     0,     0,     0,     0,
    1038,     0,  1039,     0,     0,     0,     0,  1040,  1041,  1042,
    1043,   110,   995,   517,   996,   997,   998,   999,  1000,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,
     120,   121,     0,     0,     0,     0,     0,  1001,     0,     0,
     122,   123,   124,     0,   125,   126,   127,   128,   129,   130,
     131,   132,  1002,   134,  1003,  1004,     0,   137,   138,   139,
     140,   141,   142,  1005,   606,   143,   144,  1006,  1007,   147,
       0,   148,   149,   150,   151,   607,     0,   608,     0,  1008,
     155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,   171,   172,
    3344,   174,   175,   176,   177,   178,   179,   180,  1009,  1010,
     183,  1011,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     770,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,  1012,   212,   213,   214,
     215,   216,   609,  1013,   218,     0,   219,   220,  1014,   222,
       0,   223,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,     0,   232,     0,  1015,  1016,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,   262,  1017,  1018,
       0,  1019,     0,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,     0,     0,   277,   278,   279,   280,
       0,   281,   282,   283,   284,   285,   286,   287,   288,  1020,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,  1021,   309,
    1022,   311,   312,   313,   314,  1023,   315,   316,   317,   318,
    1024,   611,   320,  1025,   322,   323,   324,     0,   325,   326,
       0,     0,  1026,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   613,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,     0,     0,   346,   347,   614,
     349,   350,   351,   352,   353,   354,   355,     0,   356,   357,
     358,   359,   360,   361,     0,   362,   363,   364,  1027,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,  1028,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,     0,     0,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,  1029,   415,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   616,   431,
       0,   432,   433,     0,   434,   435,   436,   437,   438,   439,
     440,     0,  1030,  1031,     0,     0,   443,   444,   617,   446,
     618,  1032,   448,   449,   619,   451,   452,  3345,   454,   455,
       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,   468,  1033,     0,   470,
     471,   472,   473,   474,   475,   476,     0,     0,   477,     0,
       0,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,  1034,     0,     0,     0,     0,     0,     0,  1035,
    1036,  1037,     0,     0,     0,     0,  1038,     0,  1039,     0,
       0,     0,     0,  1040,  1041,  1042,  1043,   110,   995,   517,
     996,   997,   998,   999,  1000,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,
       0,     0,     0,  1001,     0,     0,   122,   123,   124,     0,
     125,   126,   127,   128,   129,   130,   131,   132,  1002,   134,
    1003,  1004,     0,   137,   138,   139,   140,   141,   142,  1005,
     606,   143,   144,  1006,  1007,   147,     0,   148,   149,   150,
     151,   607,     0,   608,     0,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,  1009,  1010,   183,     0,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,     0,     0,   196,   197,   770,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,  1012,   212,   213,   214,   215,   216,   609,  1013,
     218,     0,   219,   220,  1014,   222,     0,   223,     0,   224,
     225,     0,   226,   227,   228,   229,   230,   231,     0,   232,
       0,  1015,  1016,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,   256,   257,   258,
     259,   260,   261,   262,  1017,  1018,     0,  1019,     0,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
       0,     0,   277,   278,   279,   280,     0,   281,   282,   283,
     284,   285,   286,   287,   288,  1020,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,  1021,   309,  1022,   311,   312,   313,
     314,     0,   315,   316,   317,   318,  1024,   611,   320,  1025,
     322,   323,   324,     0,   325,   326,     0,     0,  1026,   328,
     329,     0,     0,   330,   331,   332,   333,   334,   613,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,     0,     0,   346,   347,   614,   349,   350,   351,   352,
     353,   354,   355,     0,   356,   357,   358,   359,   360,   361,
       0,   362,   363,   364,  1027,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,
    1028,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,     0,     0,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,  1029,   415,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   616,   431,     0,   432,   433,     0,
     434,   435,   436,   437,   438,   439,   440,     0,  1030,  1031,
       0,     0,   443,   444,   617,   446,   618,  1032,   448,   449,
     619,   451,   452,   453,   454,   455,     0,     0,   456,   457,
     458,     0,   459,   460,   461,   462,     0,   463,   464,   465,
     466,   467,   468,  1033,     0,   470,   471,   472,   473,   474,
     475,   476,     0,     0,   477,     0,     0,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,     0,     0,
       0,     0,     0,     0,     0,  1452,  1453,     0,     0,     0,
       0,     0,  1038,     0,  1039,     0,     0,     0,     0,  1040,
    1041,  1042,  1043,   110,   995,   517,   996,   997,   998,   999,
    1000,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,     0,     0,     0,     0,     0,  1001,
       0,     0,   122,   123,   124,     0,   125,   126,   127,   128,
     129,   130,   131, -1959,  1002,   134,  1003,  1004,     0,   137,
     138,   139,   140,   141,   142,  1005,   606,   143,   144,  1006,
    1007,   147,     0,   148,   149,   150,   151,   607,     0,   608,
       0,  1008,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
     171,   172,  3344,   174,   175,   176,   177,   178,   179,   180,
    1009,  1010,   183,  1011,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   770,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,  1012,   212,
     213,   214,   215,   216,   609,  1013,   218,     0,   219,   220,
    1014,   222,     0,   223,     0,   224,   225,     0,   226,   227,
     228,   229, -1959,   231,     0,   232,     0,  1015,  1016,   235,
       0,   236,   237,   238,   239,   240,   241,   242, -1959,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,
    1017,  1018,     0,  1019,     0,   266,     0,     0,   269,   270,
     271,   272,   273,   274,   275,   276,     0,     0,   277,   278,
     279, -1959,     0,   281,   282,   283,   284,   285,   286,   287,
     288,  1020,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
    1021,   309,  1022,   311,   312,   313,   314,     0,   315,   316,
       0,   318,  1024,   611,   320,  1025,   322,   323,   324,     0,
     325,   326,     0,     0,  1026,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   613,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   614,   349,   350,   351,   352,   353,   354,   355,     0,
     356,   357,   358,   359,   360,   361,     0,   362,   363,   364,
    1027,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,  1028,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,     0,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
   -1959,   412,   413,  1029,   415,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     616,   431,     0,   432,   433,     0,   434,   435,   436,   437,
     438,   439,   440,     0,  1030,  1031,     0,     0,   443,   444,
     617,   446,   618,  1032,   448,   449,   619,   451,   452,  3345,
     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,   468,  1033,
       0,   470,   471,   472,   473,   474,   475,   476,     0,     0,
     477,     0,     0,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498, -1959,     0,     0,     0,     0,     0,
       0,  1035,  1036,  1037,     0,     0,     0,     0,  1038,     0,
    1039,     0,     0,     0,     0,  1040,  1041,  1042,  1043,   110,
     995,   517,   996,   997,     0,   999,  1000,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,  1001,     0,     0,   122,   123,
     124,     0,   125,   126,   127,   128,   129,   130,   131,   132,
    1002,   134,  1003,  1004,     0,   137,   138,   139,   140,   141,
     142,  1005,   606,   143,   144,  1006,  1007,   147,     0,   148,
     149,   150,   151,   607,     0,   608,     0,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,  1009,  1010,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   770,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,  1012,   212,   213,   214,   215,   216,
     609,  1013,   218,     0,   219,   220,  1014,   222,     0,   223,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
       0,   232,     0,  1015,  1016,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,   262,  1017,  1018,     0,  1019,
       0,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,     0,     0,   277,   278,   279,   280,     0,   281,
     282,   283,   284,   285,   286,   287,   288,  1020,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,  1021,   309,  1022,   311,
     312,   313,   314,     0,   315,   316,   317,   318,  1024,   611,
     320,  1025,   322,   323,   324,     0,   325,   326,     0,     0,
     327,   328,   329,     0,     0,   330,   331,   332,   333,   334,
     613,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   614,   349,   350,
     351,   352,   353,   354,   355,     0,   356,   357,   358,   359,
     360,   361,     0,   362,   363,   364,  1027,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,  2104,  2105,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,     0,     0,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,  1029,
     415,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   616,   431,     0,   432,
     433,     0,   434,   435,   436,   437,   438,   439,   440,     0,
    1030,  1031,     0,     0,   443,   444,   617,   446,   618,  1032,
     448,   449,   619,   451,   452,   453,   454,   455,     0,     0,
     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,   468,  1033,     0,   470,   471,   472,
     473,   474,   475,   476,     0,     0,   477,     0,     0,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
       0,     0,     0,     0,     0,     0,     0,  2106,  2107,     0,
       0,     0,     0,     0,  1038,     0,  1039,     0,     0,     0,
       0,  1040,  1041,  1042,  1043,   110,   995,   517,   996,   997,
     998,   999,  1000,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1001,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1002,   134,  1003,  1004,
       0,   137,   138,   139,   140,   141,   142,  1005,   606,   143,
     144,  1006,  1007,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,  1009,  1010,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   770,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1012,   212,   213,   214,   215,   216,   609,  1013,   218,     0,
     219,   220,  1014,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1015,
    1016,   235,     0,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,   262,  1017,  1018,     0,  1019,     0,   266,     0,   268,
     269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     277,   278,   279,   280,     0,   281,   282,   283,   284,   285,
     286,   287,   288,  1020,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,  1021,   309,  1022,   311,   312,   313,   314,     0,
     315,   316,   317,   318,  1024,   611,   320,  1025,   322,   323,
     324,     0,   325,   326,     0,     0,  1026,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   613,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,
       0,   346,   347,   614,   349,   350,   351,   352,   353,   354,
     355,     0,   356,   357,   358,   359,   360,   361,     0,   362,
     363,   364,  1027,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,  1028,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
       0,     0,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,  1029,   415,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   616,   431,     0,   432,   433,     0,   434,   435,
     436,   437,   438,   439,   440,     0,  1030,  1031,     0,     0,
     443,   444,   617,   446,   618,  1032,   448,   449,   619,   451,
     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,  1033,     0,   470,   471,   472,   473,   474,   475,   476,
       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,     0,     0,     0,     0,
       0,     0,     0,  1452,  1453,     0,     0,     0,     0,     0,
    1038,     0,  1039,     0,     0,     0,     0,  1040,  1041,  1042,
    1043,   110,   995,   517,   996,   997,     0,   999,  1000,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,
     120,   121,     0,     0,     0,     0,     0,  1001,     0,     0,
     122,   123,   124,     0,   125,   126,   127,   128,   129,   130,
     131,   132,  1002,   134,  1003,  1004,     0,   137,   138,   139,
     140,   141,   142,  1005,   606,   143,   144,  1006,  1007,   147,
       0,   148,   149,   150,   151,   607,     0,   608,     0,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,  1009,  1010,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     770,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,  1012,   212,   213,   214,
     215,   216,   609,  1013,   218,     0,   219,   220,  1014,   222,
       0,   223,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,     0,   232,     0,  1015,  1016,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,   262,  1017,  1018,
       0,  1019,     0,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,     0,     0,   277,   278,   279,   280,
       0,   281,   282,   283,   284,   285,   286,   287,   288,  1020,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,  1021,   309,
    1022,   311,   312,   313,   314,     0,   315,   316,   317,   318,
    1024,   611,   320,  1025,   322,   323,   324,     0,   325,   326,
       0,     0,   327,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   613,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,     0,     0,   346,   347,   614,
     349,   350,   351,   352,   353,   354,   355,     0,   356,   357,
     358,   359,   360,   361,     0,   362,   363,   364,  1027,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,  1028,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,     0,     0,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,  1029,   415,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   616,   431,
       0,   432,   433,     0,   434,   435,   436,   437,   438,   439,
     440,     0,  1030,  1031,     0,     0,   443,   444,   617,   446,
     618,  1032,   448,   449,   619,   451,   452,   453,   454,   455,
       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,   468,  1033,     0,   470,
     471,   472,   473,   474,   475,   476,     0,     0,   477,     0,
       0,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,     0,     0,     0,     0,     0,     0,   110,   995,
     517,   996,   997,   998,   999,  1000,  1038,     0,  1039,     0,
       0,     0,     0,  1040,  1041,  1042,  1043,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,     0,     0,  1001,     0,     0,   122,   123,   124,
       0,   125,   126,   127,   128,   129,   130,   131,     0,  1002,
     134,  1003,  1004,     0,   137,   138,   139,   140,   141,   142,
    1005,   606,   143,   144,  1006,  1007,   147,     0,   148,   149,
     150,   151,   607,     0,   608,     0,  1008,   155,   156,   157,
     158,   159,   160,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,  1009,  1010,   183,  1011,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   770,   199,   200,
       0,   201,   202,   203,     0,   204,     0,   206,     0,   207,
     208,   209,   210,  1012,   212,   213,   214,   215,   216,   609,
    1013,   218,     0,   219,   220,  1014,   222,     0,   223,     0,
     224,   225,     0,   226,   227,   228,   229,     0,   231,     0,
     232,     0,  1015,  1016,   235,     0,   236,   237,   238,   239,
     240,   241,   242,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,   262,  1017,  1018,     0,  1019,     0,
     266,     0,     0,   269,   270,   271,   272,   273,   274,   275,
     276,     0,     0,   277,   278,   279,     0,     0,   281,   282,
     283,   284,   285,   286,   287,   288,  1020,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,  1021,   309,  1022,   311,   312,
     313,   314,     0,   315,   316,     0,   318,  1024,   611,   320,
    1025,   322,   323,   324,     0,   325,   326,     0,     0,  1026,
     328,   329,     0,     0,   330,   331,   332,   333,   334,   613,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,     0,     0,   346,   347,   614,   349,   350,   351,
     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,
     361,     0,   362,   363,   364,  1027,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,  1028,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,     0,     0,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,     0,   412,   413,  1029,   415,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   616,   431,     0,   432,   433,
       0,   434,   435,   436,   437,   438,   439,   440,     0,  1030,
    1031,     0,     0,   443,   444,   617,   446,   618,  1032,   448,
     449,   619,   451,   452,   453,   454,   455,     0,     0,   456,
     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,
     465,   466,   467,   468,  1033,     0,   470,   471,   472,   473,
     474,   475,   476,     0,     0,   477,     0,     0,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,     0,
       0,     0,     0,     0,     0,     0,  1035,  1036,  1037,     0,
       0,     0,     0,  1038,     0,  1039,     0,     0,     0,     0,
    1040,  1041,  1042,  1043,   110,   995,   517,   996,   997,     0,
     999,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,
    1001,     0,     0,   122,   123,   124,     0,   125,   126,   127,
     128,   129,   130,   131,   132,  1002,   134,  1003,  1004,     0,
     137,   138,   139,   140,   141,   142,  1005,     0,   143,   144,
    1006,  1007,   147,     0,   148,   149,   150,   151,   152,     0,
     153,     0,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,  1009,  1010,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   770,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,  1012,
     212,   213,   214,   215,   216,   217,  1013,   218,     0,   219,
     220,  1014,   222,     0,   223,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,   232,  2926,  1015,  1016,
     235,     0,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
     262,  1017,  1018,     0,  1019,     0,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,     0,     0,   277,
     278,   279,   280,     0,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,  1021,   309,  1022,   311,   312,   313,   314,     0,   315,
     316,   317,   318,  1024,   319,   320,  1025,   322,   323,   324,
       0,   325,   326,     0,     0,   327,   328,   329,     0,     0,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,     0,     0,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
       0,   356,   357,   358,   359,   360,   361,     0,   362,   363,
     364,  1027,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,     0,
       0,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,  1029,   415,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,     0,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,     0,  1030,  1031,     0,     0,   443,
     444,   445,   446,   447,  1032,   448,   449,   450,   451,   452,
     453,   454,   455,     0,     0,   456,   457,   458,     0,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,
    1033,     0,   470,   471,   472,   473,   474,   475,   476,     0,
       0,   477,     0,     0,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,     0,     0,     0,     0,   110,
     995,   517,   996,   997,     0,   999,     0,     0,     0,  1038,
       0,  2645,     0,     0,     0,     0,  1040,  1041,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,  1001,     0,     0,   122,   123,
     124,     0,   125,   126,   127,   128,   129,   130,   131,   132,
    1002,   134,  1003,  1004,     0,   137,   138,   139,   140,   141,
     142,  1005,     0,   143,   144,  1006,  1007,   147,     0,   148,
     149,   150,   151,   152,     0,   153,     0,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,  1009,  1010,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   770,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,  1012,   212,   213,   214,   215,   216,
     217,  1013,   218,     0,   219,   220,  1014,   222,     0,   223,
       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,
       0,   232,     0,  1015,  1016,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,
     257,   258,   259,   260,   261,   262,  1017,  1018,     0,  1019,
       0,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,     0,     0,   277,   278,   279,   280,     0,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,  1021,   309,  1022,   311,
     312,   313,   314,     0,   315,   316,   317,   318,  1024,   319,
     320,  1025,   322,   323,   324,     0,   325,   326,     0,     0,
     327,   328,   329,     0,     0,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,     0,   356,   357,   358,   359,
     360,   361,     0,   362,   363,   364,  1027,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,     0,     0,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,  1029,
     415,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,     0,   432,
     433,     0,   434,   435,   436,   437,   438,   439,   440,     0,
    1030,  1031,     0,     0,   443,   444,   445,   446,   447,  1032,
     448,   449,   450,   451,   452,   453,   454,   455,     0,     0,
     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,   468,  1033,     0,   470,   471,   472,
     473,   474,   475,   476,     0,     0,   477,     0,     0,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
       0,     0,     0,     0,   506,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1038,     0,  2645,     0,     0,     0,
       0,  1040,  1041,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,
       0,   955,     0,     0,   123,   124,     0,   125,   126,   127,
       0,   129,   130,   131,   132,   133,     0,   135,   136,     0,
     137,   138,   139,   140,   141,   142,     0,     0,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   152,     0,
       0,     0,   154,   155,   156,   157,   158,   159,     0,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,  -492,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,  -492,   219,
     220,   221,   222,  -492,   223,     0,   224,     0,     0,     0,
     227,   228,   507,     0,   231,     0,   232,     0,   233,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,     0,   257,   258,   259,   260,   261,
     262,   263,   264,  -492,   265,     0,   266,     0,     0,   269,
       0,   271,   272,   273,   274,   275,   276,     0,     0,   277,
       0,   279,     0,  -492,   281,   282,   283,   284,   285,   286,
     287,   288,   508,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,     0,   310,   311,   312,   313,   314,     0,   315,
     316,     0,   318,     0,   319,   320,   321,   322,   323,   324,
    -492,   325,   326,     0,     0,   327,   328,   329,     0,  -492,
     330,   331,     0,   333,     0,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,     0,     0,
     346,   347,   348,     0,   350,   351,   352,   353,   354,   355,
       0,   356,   357,   358,   359,   360,   361,     0,   362,   363,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,     0,
       0,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,     0,   412,   413,   414,   415,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   509,
     429,   430,   431,     0,   432,   433,     0,   434,     0,   436,
     437,   438,   439,   440,     0,   441,   442,     0,     0,   443,
     444,   445,   446,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,  -492,     0,   456,   457,   458,     0,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,
     469,     0,   470,     0,   472,   473,   474,   475,   476,     0,
       0,   477,     0,     0,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   506,     0,   532,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1107,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   507,     0,   231,     0,   232,     0,   233,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,     0,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   266,     0,     0,
     269,     0,   271,   272,   273,   274,   275,   276,     0,     0,
     277,     0,   279,     0,     0,   281,   282,   283,   284,   285,
     286,   287,   288,   508,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,     0,   310,   311,   312,   313,   314,     0,
     315,   316,     0,   318,     0,   319,   320,   321,   322,   323,
     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,
       0,   330,   331,     0,   333,     0,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,
       0,   346,   347,   348,     0,   350,   351,   352,   353,   354,
     355,     0,   356,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,     0,   383,   384,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
       0,     0,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,     0,   412,   413,   414,   415,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     509,   429,   430,   431,     0,   432,   433,     0,   434,     0,
     436,   437,   438,   439,   440,     0,   441,   442,     0,     0,
     443,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,     0,   470,     0,   472,   473,   474,   475,   476,
       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   841,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2377,  3095,     0,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,   120,   121,     3,     4,     0,
     842,     0,     0,     0,     0,   843,   123,   124,     0,   125,
     126,   127,   844,   129,   130,   131,   845,   846,   847,   848,
     849,     0,   137,   138,   139,   140,   141,   142,     0,     0,
     143,   144,   850,   851,   147,     0,   148,   149,   150,   151,
     852,     0,   853,     0,   854,   155,   156,   157,   158,   159,
     855,   161,   162,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   856,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   857,   858,   183,     0,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,     0,     0,   196,   197,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,   859,   212,   213,   214,   215,   216,   860,     0,   218,
       0,   219,   220,   861,   222,     0,   223,     0,   224,   862,
      21,   863,   227,   228,   864,   865,   231,     0,   232,     0,
     866,   867,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   868,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,   869,   870,   258,   259,
     260,   261,   262,   871,   872,     0,   873,     0,   266,   874,
     875,   269,   876,   271,   272,   273,   274,   275,   276,     0,
       0,   277,   877,   279,   878,     0,   281,   282,   283,   284,
     285,   286,   287,   288,   879,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   880,   881,   882,   311,   312,   313,   883,
       0,   315,   316,   884,   318,     0,   885,   320,   886,   322,
     323,   324,     0,   325,   326,     0,     0,   327,   328,   329,
       0,     0,   330,   887,   888,   333,   889,   890,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,    25,    26,
      27,     0,   346,   347,   891,   892,   350,   351,   893,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,     0,
     362,   363,   364,   894,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   895,   386,   387,   388,   896,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    32,   897,   401,   402,   403,   404,   405,   406,   898,
     408,   409,   410,   899,   412,   413,   900,   415,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   901,   429,   902,   431,     0,   432,   433,    37,   434,
     903,   436,   437,   438,   439,   440,     0,   904,   905,     0,
       0,   443,   444,   906,   446,   907,     0,   448,   449,   908,
     451,   452,   453,   454,   455,     0,     0,   456,   457,   458,
      39,   459,   460,   461,   462,     0,   463,   464,   465,   466,
     467,   909,   910,     0,   470,   911,   472,   473,   474,   475,
     476,     0,     0,   477,     0,    43,   478,   479,   480,   481,
     482,   483,   912,   913,   914,   915,   916,   917,   918,   919,
     920,   921,   922,   495,   496,   497,   498,     0,   110,    44,
     532,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,     0,     0,     0,     0,     0,   122,   123,   124,
       0,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,     0,   137,   138,   139,   140,   141,   142,
       0,   606,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   607,     0,   608,     0,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   609,
       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,
     224,   225,    21,   226,   227,   228,   229,   230,   231,     0,
     232,     0,   233,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   610,     0,   277,   278,   279,   280,     0,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,     0,   315,   316,   317,   318,     0,   611,   320,
     321,   322,   323,   324,     0,   325,   326,     0,   612,   327,
     328,   329,     0,     0,   330,   331,   332,   333,   334,   613,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
      25,    26,    27,     0,   346,   347,   614,   349,   350,   351,
     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,
     361,     0,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,
     388,   389,   615,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    32,     0,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   616,   431,     0,   432,   433,
      37,   434,   435,   436,   437,   438,   439,   440,     0,   441,
     442,     0,     0,   443,   444,   617,   446,   618,     0,   448,
     449,   619,   451,   452,   453,   454,   455,     0,     0,   456,
     457,   458,    39,   459,   460,   461,   462,     0,   463,   464,
     465,   466,   467,   620,   469,     0,   470,   471,   472,   473,
     474,   475,   476,     0,     0,   477,     0,    43,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,     0,
       0,    44,   841,  1412,   517,     0,     0,     0,   999,     0,
       0,     0,     0,     0,     0,   621,     0,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,   120,   121,     0,     0,     0,   842,     0,     0,     0,
       0,   843,   123,   124,     0,   125,   126,   127,   844,   129,
     130,   131,   845,   846,   847,   848,   849,     0,   137,   138,
     139,   140,   141,   142,     0,     0,   143,   144,   850,   851,
     147,     0,   148,   149,   150,   151,   852,     0,   853,     0,
     854,   155,   156,   157,   158,   159,   855,   161,   162,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   856,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   857,
     858,   183,     0,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,   859,   212,   213,
     214,   215,   216,   860,  1413,   218,     0,   219,   220,   861,
     222,     0,   223,     0,   224,   862,     0,   863,   227,   228,
     864,   865,   231,     0,   232,     0,   866,   867,   235,     0,
     236,   237,   238,   239,   240,   241,   242,   868,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,   869,   870,   258,   259,   260,   261,   262,   871,
     872,     0,   873,     0,   266,   874,   875,   269,   876,   271,
     272,   273,   274,   275,   276,     0,     0,   277,   877,   279,
     878,     0,   281,   282,   283,   284,   285,   286,   287,   288,
     879,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   880,
     881,   882,   311,   312,   313,   883,     0,   315,   316,   884,
     318,     0,   885,   320,   886,   322,   323,   324,     0,   325,
     326,  1414,     0,   327,   328,   329,     0,     0,   330,   887,
     888,   333,   889,   890,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,     0,     0,   346,   347,
     891,   892,   350,   351,   893,   353,   354,   355,     0,   356,
     357,   358,   359,   360,   361,     0,   362,   363,   364,   894,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   895,   386,   387,   388,   896,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,     0,   897,   401,
     402,   403,   404,   405,   406,   898,   408,   409,   410,   899,
     412,   413,   900,   415,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   901,   429,   902,
     431,     0,   432,   433,     0,   434,   903,   436,   437,   438,
     439,   440,     0,   904,   905,     0,     0,   443,   444,   906,
     446,   907,  1415,   448,   449,   908,   451,   452,   453,   454,
     455,     0,     0,   456,   457,   458,     0,   459,   460,   461,
     462,     0,   463,   464,   465,   466,   467,  1297,   910,     0,
     470,   911,   472,   473,   474,   475,   476,     0,     0,   477,
       0,     0,   478,   479,   480,   481,   482,   483,   912,   913,
     914,   915,   916,   917,   918,   919,   920,   921,   922,   495,
     496,   497,   498,   110,     0,   532,     0,     0,     0,     0,
    1416,  1417,  2292,     0,     0,     0,     0,     0,     0,  2293,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,   124,     0,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,     0,   137,
     138,   139,   140,   141,   142,     0,   606,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,   607,     0,   608,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   609,     0,   218,     0,   219,   220,
     221,   222,     0,   223,     0,   224,   225,     0,   226,   227,
     228,   229,   230,   231,     0,   232,     0,   233,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,     0,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   610,     0,   277,   278,
     279,   280,     0,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
     317,   318,     0,   611,   320,   321,   322,   323,   324,     0,
     325,   326,     0,   612,   327,   328,   329,     0,     0,   330,
     331,   332,   333,   334,   613,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   614,   349,   350,   351,   352,   353,   354,   355,     0,
     356,   357,   358,   359,   360,   361,     0,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   385,   386,   387,   388,   389,   615,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,     0,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     616,   431,     0,   432,   433,     0,   434,   435,   436,   437,
     438,   439,   440,     0,   441,   442,     0,     0,   443,   444,
     617,   446,   618,     0,   448,   449,   619,   451,   452,   453,
     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,   620,   469,
       0,   470,   471,   472,   473,   474,   475,   476,     0,     0,
     477,     0,     0,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   110,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     621,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,
       0,     0,     0,   122,   123,   124,     0,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,     0,
     137,   138,   139,   140,   141,   142,     0,   606,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   607,     0,
     608,     0,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   609,     0,   218,     0,   219,
     220,   221,   222,     0,   223,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,   232,     0,   233,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,     0,   265,     0,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,     0,     0,   277,
     278,   279,   280,     0,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,     0,   315,
     316,   317,   318,     0,   611,   320,   321,   322,   323,   324,
       0,   325,   326,     0,     0,   327,   328,   329,     0,     0,
     330,   331,   332,   333,   334,   613,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,     0,     0,
     346,   347,   614,   349,   350,   351,   352,   353,   354,   355,
       0,   356,   357,   358,   359,   360,   361,     0,   362,   363,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   385,   386,   387,   388,   389,   615,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,     0,
       0,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   616,   431,     0,   432,   433,     0,   434,   435,   436,
     437,   438,   439,   440,     0,   441,   442,     0,     0,   443,
     444,   617,   446,   618,     0,   448,   449,   619,   451,   452,
     453,   454,   455,     0,     0,   456,   457,   458,     0,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,
     469,     0,   470,   471,   472,   473,   474,   475,   476,     0,
       0,   477,     0,     0,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   110,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    45,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,   606,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   609,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,   233,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     277,   278,   279,   280,     0,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     315,   316,   317,   318,     0,   611,   320,   321,   322,   323,
     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,
       0,   330,   331,   332,   333,   334,   613,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,
       0,   346,   347,   614,   349,   350,   351,   352,   353,   354,
     355,     0,   356,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
       0,     0,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   616,   431,     0,   432,   433,     0,   434,   435,
     436,   437,   438,   439,   440,     0,   441,   442,     0,     0,
     443,   444,   617,   446,   618,     0,   448,   449,   619,   451,
     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,     0,   470,   471,   472,   473,   474,   475,   476,
       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   506,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3177,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,   702,   119,   120,   121,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   123,   124,     0,   125,
     126,   127,     0,   129,   130,   131,   132,   133,     0,   135,
     136,     0,   137,   138,   139,   140,   141,   142,     0,     0,
     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,
     152,     0,     0,     0,   154,   155,   156,   157,   158,   159,
       0,   161,   162,   163,     0,   164,   165,   166,   167,   168,
     169,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,     0,     0,   196,   197,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
       0,   219,   220,   221,   222,     0,   223,     0,   224,     0,
      21,     0,   227,   228,   507,     0,   231,     0,   232,     0,
     233,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,     0,   257,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   266,     0,
       0,   269,     0,   271,   272,   273,   274,   275,   276,     0,
       0,   277,     0,   279,     0,     0,   281,   282,   283,   284,
     285,   286,   287,   288,   508,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,     0,   310,   311,   312,   313,   314,
       0,   315,   316,     0,   318,     0,   319,   320,   321,   322,
     323,   324,     0,   325,   326,     0,     0,   327,   328,   329,
       0,     0,   330,   331,     0,   333,     0,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,    25,    26,
      27,     0,   346,   347,   348,     0,   350,   351,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,     0,
     362,   363,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,    32,     0,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,     0,   412,   413,   414,   415,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   509,   429,   430,   431,     0,   432,   433,    37,   434,
       0,   436,   437,   438,   439,   440,     0,   703,   442,     0,
       0,   704,   444,   445,   446,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,     0,     0,   456,   457,   458,
      39,   459,   460,   461,   462,     0,   463,   464,   465,   466,
     467,   620,   469,     0,   470,     0,   472,   473,   474,   475,
     476,     0,     0,   477,     0,    43,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   506,     0,    44,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,     0,     0,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   123,   124,     0,
     125,   126,   127,     0,   129,   130,   131,   132,   133,     0,
     135,   136,     0,   137,   138,   139,   140,   141,   142,     0,
       0,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,   152,     0,     0,     0,   154,   155,   156,   157,   158,
     159,     0,   161,   162,   163,     0,   164,   165,   166,   167,
     168,   169,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,     0,     0,   196,   197,   198,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,     0,
     218,     0,   219,   220,   221,   222,     0,   223,     0,   224,
       0,    21,     0,   227,   228,   507,     0,   231,     0,   232,
       0,   233,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,     0,   257,   258,
     259,   260,   261,   262,   263,   264,     0,   265,     0,   266,
       0,     0,   269,     0,   271,   272,   273,   274,   275,   276,
       0,     0,   277,     0,   279,     0,     0,   281,   282,   283,
     284,   285,   286,   287,   288,   508,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,     0,   310,   311,   312,   313,
     314,     0,   315,   316,     0,   318,     0,   319,   320,   321,
     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,
     329,     0,     0,   330,   331,     0,   333,     0,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,    25,
      26,    27,     0,   346,   347,   348,     0,   350,   351,   352,
     353,   354,   355,     0,   356,   357,   358,   359,   360,   361,
       0,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,     0,   383,   384,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    32,     0,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,     0,   412,   413,   414,   415,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   509,   429,   430,   431,     0,   432,   433,    37,
     434,     0,   436,   437,   438,   439,   440,     0,   441,   442,
       0,     0,   443,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,     0,     0,   456,   457,
     458,    39,   459,   460,   461,   462,     0,   463,   464,   465,
     466,   467,   620,   469,     0,   470,     0,   472,   473,   474,
     475,   476,     0,     0,   477,     0,    43,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,     0,   506,
      44,   532,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,     0,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   123,
     124,     0,   125,   126,   127,     0,   129,   130,   131,   132,
     133,     0,   135,   136,     0,   137,   138,   139,   140,   141,
     142,     0,     0,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   152,     0,     0,     0,   154,   155,   156,
     157,   158,   159,     0,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,     0,   219,   220,   221,   222,     0,   223,
       0,   224,     0,     0,     0,   227,   228,   507,     0,   231,
       0,   232,     0,   233,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   266,     0,     0,   269,     0,   271,   272,   273,   274,
     275,   276,     0,     0,   277,     0,   279,     0,     0,   281,
     282,   283,   284,   285,   286,   287,   288,   508,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,     0,   310,   311,
     312,   313,   314,     0,   315,   316,     0,   318,     0,   319,
     320,   321,   322,   323,   324,     0,   325,   326,     0,     0,
     327,   328,   329,     0,     0,   330,   331,     0,   333,     0,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   348,     0,   350,
     351,   352,   353,   354,   355,     0,   356,   357,   358,   359,
     360,   361,     0,   362,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,     0,     0,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,     0,   412,   413,   414,
     415,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   509,   429,   430,   431,     0,   432,
     433,     0,   434,     0,   436,   437,   438,   439,   440,     0,
     441,   442,     0,     0,   443,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,     0,     0,
     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,   468,   469,     0,   470,     0,   472,
     473,   474,   475,   476,     0,     0,   477,     0,     0,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     506,     0,   532,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   942,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   507,     0,
     231,     0,   232,     0,   233,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
       0,   257,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   266,     0,     0,   269,     0,   271,   272,   273,
     274,   275,   276,     0,     0,   277,     0,   279,     0,     0,
     281,   282,   283,   284,   285,   286,   287,   288,   508,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,     0,   310,
     311,   312,   313,   314,     0,   315,   316,     0,   318,     0,
     319,   320,   321,   322,   323,   324,     0,   325,   326,     0,
       0,   327,   328,   329,     0,     0,   330,   331,     0,   333,
       0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,     0,     0,   346,   347,   348,     0,
     350,   351,   352,   353,   354,   355,     0,   356,   357,   358,
     359,   360,   361,     0,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,     0,     0,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,     0,   412,   413,
     414,   415,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   509,   429,   430,   431,     0,
     432,   433,     0,   434,     0,   436,   437,   438,   439,   440,
       0,   441,   442,     0,     0,   443,   444,   445,   446,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,     0,
       0,   456,   457,   458,     0,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,     0,   470,     0,
     472,   473,   474,   475,   476,     0,     0,   477,     0,     0,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   506,     0,   532,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1506,     0,     0,
     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,
     120,   121,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   123,   124,     0,   125,   126,   127,     0,   129,   130,
     131,   132,   133,     0,   135,   136,     0,   137,   138,   139,
     140,   141,   142,     0,     0,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   152,     0,     0,     0,   154,
     155,   156,   157,   158,   159,     0,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     198,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,     0,   218,     0,   219,   220,   221,   222,
       0,   223,     0,   224,     0,     0,     0,   227,   228,   507,
       0,   231,     0,   232,     0,   233,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,     0,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   266,     0,     0,   269,     0,   271,   272,
     273,   274,   275,   276,     0,     0,   277,     0,   279,     0,
       0,   281,   282,   283,   284,   285,   286,   287,   288,   508,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,     0,
     310,   311,   312,   313,   314,     0,   315,   316,     0,   318,
       0,   319,   320,   321,   322,   323,   324,     0,   325,   326,
       0,     0,   327,   328,   329,     0,     0,   330,   331,     0,
     333,     0,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,     0,     0,   346,   347,   348,
       0,   350,   351,   352,   353,   354,   355,     0,   356,   357,
     358,   359,   360,   361,     0,   362,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,     0,     0,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,     0,   412,
     413,   414,   415,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   509,   429,   430,   431,
       0,   432,   433,     0,   434,     0,   436,   437,   438,   439,
     440,     0,   441,   442,     0,     0,   443,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,   468,   469,     0,   470,
       0,   472,   473,   474,   475,   476,     0,     0,   477,     0,
       0,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   506,     0,   532,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2130,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,   120,   121,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   123,   124,     0,   125,   126,   127,     0,   129,
     130,   131,   132,   133,     0,   135,   136,     0,   137,   138,
     139,   140,   141,   142,     0,     0,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,   152,     0,     0,     0,
     154,   155,   156,   157,   158,   159,     0,   161,   162,   163,
       0,   164,   165,   166,   167,   168,   169,     0,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,     0,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,     0,   219,   220,   221,
     222,     0,   223,     0,   224,     0,     0,     0,   227,   228,
     507,     0,   231,     0,   232,     0,   233,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,     0,   257,   258,   259,   260,   261,   262,   263,
     264,     0,   265,     0,   266,     0,     0,   269,     0,   271,
     272,   273,   274,   275,   276,     0,     0,   277,     0,   279,
       0,     0,   281,   282,   283,   284,   285,   286,   287,   288,
     508,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
       0,   310,   311,   312,   313,   314,     0,   315,   316,     0,
     318,     0,   319,   320,   321,   322,   323,   324,     0,   325,
     326,     0,     0,   327,   328,   329,     0,     0,   330,   331,
       0,   333,     0,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,     0,     0,   346,   347,
     348,     0,   350,   351,   352,   353,   354,   355,     0,   356,
     357,   358,   359,   360,   361,     0,   362,   363,   364,   365,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,     0,     0,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,     0,
     412,   413,   414,   415,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   509,   429,   430,
     431,     0,   432,   433,     0,   434,     0,   436,   437,   438,
     439,   440,     0,   441,   442,     0,     0,   443,   444,   445,
     446,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,     0,     0,   456,   457,   458,     0,   459,   460,   461,
     462,     0,   463,   464,   465,   466,   467,   468,   469,     0,
     470,     0,   472,   473,   474,   475,   476,     0,     0,   477,
       0,     0,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   506,     0,   532,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2377,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   123,   124,     0,   125,   126,   127,     0,
     129,   130,   131,   132,   133,     0,   135,   136,     0,   137,
     138,   139,   140,   141,   142,     0,     0,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,   152,     0,     0,
       0,   154,   155,   156,   157,   158,   159,     0,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,     0,   218,     0,   219,   220,
     221,   222,     0,   223,     0,   224,     0,     0,     0,   227,
     228,   507,     0,   231,     0,   232,     0,   233,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,     0,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,     0,   266,     0,     0,   269,     0,
     271,   272,   273,   274,   275,   276,     0,     0,   277,     0,
     279,     0,     0,   281,   282,   283,   284,   285,   286,   287,
     288,   508,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,     0,   310,   311,   312,   313,   314,     0,   315,   316,
       0,   318,     0,   319,   320,   321,   322,   323,   324,     0,
     325,   326,     0,     0,   327,   328,   329,     0,     0,   330,
     331,     0,   333,     0,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   348,     0,   350,   351,   352,   353,   354,   355,     0,
     356,   357,   358,   359,   360,   361,     0,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,     0,
     383,   384,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,     0,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
       0,   412,   413,   414,   415,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   509,   429,
     430,   431,     0,   432,   433,     0,   434,     0,   436,   437,
     438,   439,   440,     0,   441,   442,     0,     0,   443,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,   468,   469,
       0,   470,     0,   472,   473,   474,   475,   476,     0,     0,
     477,     0,     0,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   506,     0,   532,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2484,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   123,   124,     0,   125,   126,   127,
       0,   129,   130,   131,   132,   133,     0,   135,   136,     0,
     137,   138,   139,   140,   141,   142,     0,     0,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   152,     0,
       0,     0,   154,   155,   156,   157,   158,   159,     0,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,     0,   219,
     220,   221,   222,     0,   223,     0,   224,     0,     0,     0,
     227,   228,   507,     0,   231,     0,   232,     0,   233,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,   265,     0,   266,     0,     0,   269,
       0,   271,   272,   273,   274,   275,   276,     0,     0,   277,
       0,   279,     0,     0,   281,   282,   283,   284,   285,   286,
     287,   288,   508,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,     0,   310,   311,   312,   313,   314,     0,   315,
     316,     0,   318,     0,   319,   320,   321,   322,   323,   324,
       0,   325,   326,     0,     0,   327,   328,   329,     0,     0,
     330,   331,     0,   333,     0,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,     0,     0,
     346,   347,   348,     0,   350,   351,   352,   353,   354,   355,
       0,   356,   357,   358,   359,   360,   361,     0,   362,   363,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,     0,
       0,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,     0,   412,   413,   414,   415,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   509,
     429,   430,   431,     0,   432,   433,     0,   434,     0,   436,
     437,   438,   439,   440,     0,   441,   442,     0,     0,   443,
     444,   445,   446,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,     0,     0,   456,   457,   458,     0,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,
     469,     0,   470,     0,   472,   473,   474,   475,   476,     0,
       0,   477,     0,     0,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   506,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3089,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   507,     0,   231,     0,   232,     0,   233,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,     0,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   266,     0,     0,
     269,     0,   271,   272,   273,   274,   275,   276,     0,     0,
     277,     0,   279,     0,     0,   281,   282,   283,   284,   285,
     286,   287,   288,   508,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,     0,   310,   311,   312,   313,   314,     0,
     315,   316,     0,   318,     0,   319,   320,   321,   322,   323,
     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,
       0,   330,   331,     0,   333,     0,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,
       0,   346,   347,   348,     0,   350,   351,   352,   353,   354,
     355,     0,   356,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,     0,   383,   384,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
       0,     0,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,     0,   412,   413,   414,   415,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     509,   429,   430,   431,     0,   432,   433,     0,   434,     0,
     436,   437,   438,   439,   440,     0,   441,   442,     0,     0,
     443,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,     0,   470,     0,   472,   473,   474,   475,   476,
       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   506,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1990,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,   120,   121,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   123,   124,     0,   125,
     126,   127,     0,   129,   130,   131,   132,   133,     0,   135,
     136,     0,   137,   138,   139,   140,   141,   142,     0,     0,
     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,
     152,     0,     0,     0,   154,   155,   156,   157,   158,   159,
       0,   161,   162,   163,     0,   164,   165,   166,   167,   168,
     169,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,     0,     0,   196,   197,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
       0,   219,   220,   221,   222,     0,   223,     0,   224,     0,
       0,     0,   227,   228,   507,     0,   231,     0,   232,     0,
     233,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,     0,   257,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   266,     0,
       0,   269,     0,   271,   272,   273,   274,   275,   276,     0,
       0,   277,     0,   279,     0,     0,   281,   282,   283,   284,
     285,   286,   287,   288,   508,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,     0,   310,   311,   312,   313,   314,
       0,   315,   316,     0,   318,     0,   319,   320,   321,   322,
     323,   324,     0,   325,   326,     0,     0,   327,   328,   329,
       0,     0,   330,   331,     0,   333,     0,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
       0,     0,   346,   347,   348,     0,   350,   351,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,     0,
     362,   363,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,     0,     0,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,     0,   412,   413,   414,   415,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   509,   429,   430,   431,     0,   432,   433,     0,   434,
       0,   436,   437,   438,   439,   440,     0,   441,   442,     0,
       0,   443,   444,   445,   446,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,     0,     0,   456,   457,   458,
       0,   459,   460,   461,   462,     0,   463,   464,   465,   466,
     467,   468,   469,     0,   470,     0,   472,   473,   474,   475,
     476,     0,     0,   477,     0,     0,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   506,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2090,     0,     0,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   123,   124,     0,
     125,   126,   127,     0,   129,   130,   131,   132,   133,     0,
     135,   136,     0,   137,   138,   139,   140,   141,   142,     0,
       0,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,   152,     0,     0,     0,   154,   155,   156,   157,   158,
     159,     0,   161,   162,   163,     0,   164,   165,   166,   167,
     168,   169,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,     0,     0,   196,   197,   198,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,     0,
     218,     0,   219,   220,   221,   222,     0,   223,     0,   224,
       0,     0,     0,   227,   228,   507,     0,   231,     0,   232,
       0,   233,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,     0,   257,   258,
     259,   260,   261,   262,   263,   264,     0,   265,     0,   266,
       0,     0,   269,     0,   271,   272,   273,   274,   275,   276,
       0,     0,   277,     0,   279,     0,     0,   281,   282,   283,
     284,   285,   286,   287,   288,   508,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,     0,   310,   311,   312,   313,
     314,     0,   315,   316,     0,   318,     0,   319,   320,   321,
     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,
     329,     0,     0,   330,   331,     0,   333,     0,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,     0,     0,   346,   347,   348,     0,   350,   351,   352,
     353,   354,   355,     0,   356,   357,   358,   359,   360,   361,
       0,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,     0,   383,   384,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,     0,     0,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,     0,   412,   413,   414,   415,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   509,   429,   430,   431,     0,   432,   433,     0,
     434,     0,   436,   437,   438,   439,   440,     0,   441,   442,
       0,     0,   443,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,     0,     0,   456,   457,
     458,     0,   459,   460,   461,   462,     0,   463,   464,   465,
     466,   467,   468,   469,     0,   470,     0,   472,   473,   474,
     475,   476,     0,     0,   477,     0,     0,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,     0,  2792,
    1412,   517,     0,     0,  1970,   999,     0,     0,     0,     0,
       0,  1971,  1972,     0,  2959,  1973,  1974,  1975,   111,   112,
     113,   114,   115,   116,   117,   118,  1230,   119,   120,   121,
    1231,  1232,  1233,  2793,  1234,  1235,  1236,  1237,  2794,   123,
     124,  1238,   125,   126,   127,  2795,   129,   130,   131,     0,
     758,  2796,   760,   761,  1239,   137,   138,   139,   140,   141,
     142,  1240,  1241,   143,   144,   762,   763,   147,  1242,   148,
     149,   150,   151,     0,  1243,  2797,  1244,  2798,   155,   156,
     157,   158,   159,  2799,   161,   162,   163,  1245,   164,   165,
     166,   167,   168,   169,  1246,  2800,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   768,   769,   183,  1247,
     184,  1248,   185,   186,   187,   188,   189,   190,  1249,   191,
     192,   193,   194,   195,  1250,  1251,   196,   197,   770,   199,
     200,  1252,   201,   202,   203,  1253,   204,   205,   206,  1254,
     207,   208,   209,   210,     0,   212,   213,   214,   215,   216,
       0,  1255,   218,  1256,   219,   220,   771,   222,  1257,   223,
    1258,   224,  2801,  1259,  2802,   227,   228,  2803,  2804,   231,
    1260,   232,  1261,     0,     0,   235,  1262,   236,   237,   238,
     239,   240,   241,   242,  2805,   244,   245,   246,   247,  1263,
     248,   249,   250,   251,   252,   253,   254,  1264,   255,  2806,
       0,   258,   259,   260,   261,   262,   778,   779,  1265,   780,
    1266,   266,  2807,  2808,   269,  2809,   271,   272,   273,   274,
     275,   276,  1267,  1268,   277,  2810,   279,  2811,  1269,   281,
     282,   283,   284,   285,   286,   287,   288,  2812,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   787,  2813,   789,   311,
     312,   313,  2814,  1270,   315,   316,  2815,   318,  1271,     0,
     320,   791,   322,   323,   324,  1272,   325,   326,  1273,  1274,
    2816,   328,   329,  1275,  1276,   330,     0,  2817,   333,  2818,
       0,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,  1277,  1278,  1279,  1280,   346,   347,     0,  2819,   350,
     351,     0,   353,   354,   355,  1281,   356,   357,   358,   359,
     360,   361,  1282,   362,   363,   364,   795,   366,   367,   368,
     369,  1283,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,  1284,   383,   384,  2820,   386,
     387,   388,   797,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,  1285,  2821,   401,   402,   403,   404,
     405,   406,  2822,   408,   409,   410,  2823,   412,   413,   801,
     415,  1286,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,  2824,   429,     0,   431,  1287,   432,
     433,  1288,   434,  2825,   436,   437,   438,   439,   440,  1289,
     804,   805,  1290,  1291,   443,   444,     0,   446,     0,  1292,
     448,   449,  2826,   451,   452,   453,   454,   455,  2827,  1294,
     456,   457,   458,  1295,   459,   460,   461,   462,  1296,   463,
     464,   465,   466,   467,     0,   808,  1298,   470,  2828,   472,
     473,   474,   475,   476,  1299,  1300,   477,  1301,  1302,   478,
     479,   480,   481,   482,   483,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   495,   496,   497,   498,
       0,   506,     0,  1976,  1977,  1978,  1970,  2829,  2830,  1981,
    1982,  1983,  1984,  1971,  1972,     0,     0,  1973,  1974,  1975,
     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,
     120,   121,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   123,   124,     0,   125,   126,   127,     0,   129,   130,
     131,   132,   133,     0,   135,   136,     0,   137,   138,   139,
     140,   141,   142,     0,     0,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   152,     0,     0,     0,   154,
     155,   156,   157,   158,   159,     0,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     198,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,     0,   218,     0,   219,   220,   221,   222,
       0,   223,     0,   224,     0,     0,     0,   227,   228,   507,
       0,   231,     0,   232,     0,   233,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,     0,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   266,     0,     0,   269,     0,   271,   272,
     273,   274,   275,   276,     0,     0,   277,     0,   279,     0,
       0,   281,   282,   283,   284,   285,   286,   287,   288,   508,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,     0,
     310,   311,   312,   313,   314,     0,   315,   316,     0,   318,
       0,   319,   320,   321,   322,   323,   324,     0,   325,   326,
       0,     0,   327,   328,   329,     0,     0,   330,   331,     0,
     333,     0,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,     0,     0,   346,   347,   348,
       0,   350,   351,   352,   353,   354,   355,     0,   356,   357,
     358,   359,   360,   361,     0,   362,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,     0,     0,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,     0,   412,
     413,   414,   415,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   509,   429,   430,   431,
       0,   432,   433,     0,   434,     0,   436,   437,   438,   439,
     440,     0,   441,   442,     0,     0,   443,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,   468,   469,     0,   470,
       0,   472,   473,   474,   475,   476,     0,     0,   477,     0,
       0,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,     0,     0,     0,  1976,  1977,  1978,     0,  1979,
    1980,  1981,  1982,  1983,  1984,  1558,     0,     0,  1559,     0,
       0,     0,  1560,  1561,  1562,  1563,  1564,  1565,  1566,     0,
       0,     0,     0,     0,     0,     0,     0,  1558,     0,     0,
    1559,     0,     0,  1567,  1560,  1561,  1562,  1563,  1564,  1565,
    1566,     0,     0,  1569,     0,     0,     0,     0,     0,     0,
    1570,     0,     0,     0,     0,  1567,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1569,     0,     0,     0,     0,
       0,     0,  1570,     0,  1558,  1571,     0,  1559,     0,     0,
       0,  1560,  1561,  1562,  1563,  1564,  1565,  1566,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1571,     0,     0,
       0,     0,  1567,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1569,     0,     0,     0,     0,     0,     0,  1570,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1558,
       0,     0,  1559,     0,     0,     0,  1560,  1561,  1562,  1563,
    1564,  1565,  1566,     0,  1571,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1567,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1569,     0,  1572,
       0,     0,     0,     0,  1570,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1573,     0,     0,     0,     0,
    1574,  1572,     0,     0,     0,     0,     0,     0,     0,  1571,
       0,     0,     0,     0,     0,     0,     0,  1573,     0,     0,
       0,     0,  1574,  1575,  1576,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1577,     0,
       0,     0,     0,     0,     0,  1575,  1576,     0,  1572,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1577,     0,     0,     0,  1573,     0,     0,     0,     0,  1574,
       0,     0,     0,     0,  1578,     0,     0,  1579,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1580,  1575,  1576,  1581,     0,  1578,     0,     0,  1579,
       0,     0,     0,  1572,     0,     0,     0,  1577,     0,     0,
       0,     0,     0,  1580,     0,     0,  1581,     0,     0,  1573,
       0,     0,     0,     0,  1574,     0,     0,     0,     0,  1558,
       0,     0,  1559,     0,     0,     0,  1560,  1561,  1562,  1563,
    1564,  1565,  1566,  1578,     0,     0,  1579,  1575,  1576,     0,
       0,     0,     0,     0,     0,     0,     0,  1567,     0,     0,
    1580,     0,  1577,  1581,     0,     0,     0,  1569,     0,     0,
       0,     0,     0,     0,  1570,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1582,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1578,  1571,
       0,  1579,     0,     0,     0,     0,     0,     0,     0,  1582,
       0,     0,     0,     0,     0,  1580,     0,     0,  1581,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1582,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1583,     0,  1572,  1584,  1585,  1586,     0,  1587,  1588,
    1589,  1590,  1591,  1592,     0,     0,     0,     0,  2618,  1573,
       0,  1582,     0,  1583,  1574,     0,  1584,  1585,  1586,     0,
    1587,  1588,  1589,  1590,  1591,  1592,     0,     0,     0,     0,
    2670,     0,     0,     0,     0,     0,     0,  1575,  1576,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1577,     0,     0,     0,     0,     0,     0,     0,
    1583,     0,     0,  1584,  1585,  1586,     0,  1587,  1588,  1589,
    1590,  1591,  1592,     0,     0,     0,     0,  2737,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1578,     0,
       0,  1579,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1580,     0,     0,  1581,     0,
       0,     0,     0,     0,     0,  1583,     0,     0,  1584,  1585,
    1586,     0,  1587,  1588,  1589,  1590,  1591,  1592,     0,     0,
       0,     0,  2952,     0,     0,     0,     0,     0,  1558,     0,
       0,  1559,     0,     0,     0,  1560,  1561,  1562,  1563,  1564,
    1565,  1566,     0,     0,     0,     0,     0,     0,     0,     0,
    1558,     0,     0,  1559,     0,     0,  1567,  1560,  1561,  1562,
    1563,  1564,  1565,  1566,     0,     0,  1569,     0,     0,     0,
       0,     0,     0,  1570,     0,     0,     0,     0,  1567,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1569,     0,
       0,  1582,     0,     0,     0,  1570,     0,  1558,  1571,     0,
    1559,     0,     0,     0,  1560,  1561,  1562,  1563,  1564,  1565,
    1566,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1571,     0,     0,     0,     0,  1567,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1569,     0,     0,     0,     0,
       0,     0,  1570,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1558,     0,     0,  1559,     0,     0,     0,  1560,
    1561,  1562,  1563,  1564,  1565,  1566,     0,  1571,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1567,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1569,     0,  1572,     0,     0,  1583,     0,  1570,  1584,  1585,
    1586,     0,  1587,  1588,  1589,  1590,  1591,  1592,  1573,     0,
       0,     0,  2958,  1574,  1572,     0,     0,     0,     0,     0,
       0,     0,  1571,     0,     0,     0,     0,     0,     0,     0,
    1573,     0,     0,     0,     0,  1574,  1575,  1576,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1577,     0,     0,     0,     0,     0,     0,  1575,  1576,
       0,  1572,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1577,     0,     0,     0,  1573,     0,     0,
       0,     0,  1574,     0,     0,     0,     0,  1578,     0,     0,
    1579,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1580,  1575,  1576,  1581,     0,  1578,
       0,     0,  1579,     0,     0,     0,  1572,     0,     0,     0,
    1577,     0,     0,     0,     0,     0,  1580,     0,     0,  1581,
       0,     0,  1573,     0,     0,     0,     0,  1574,     0,     0,
       0,     0,  1558,     0,     0,  1559,     0,     0,     0,  1560,
    1561,  1562,  1563,  1564,  1565,  1566,  1578,     0,     0,  1579,
    1575,  1576,     0,     0,     0,     0,     0,     0,     0,     0,
    1567,     0,     0,  1580,     0,  1577,  1581,     0,     0,     0,
    1569,     0,     0,     0,     0,     0,     0,  1570,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1582,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1578,  1571,     0,  1579,     0,     0,     0,     0,     0,
       0,     0,  1582,     0,     0,     0,     0,     0,  1580,     0,
       0,  1581,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1582,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1583,     0,  1572,  1584,  1585,  1586,
       0,  1587,  1588,  1589,  1590,  1591,  1592,     0,     0,     0,
       0,  3106,  1573,     0,  1582,     0,  1583,  1574,     0,  1584,
    1585,  1586,     0,  1587,  1588,  1589,  1590,  1591,  1592,     0,
       0,     0,     0,  3128,     0,     0,     0,     0,     0,     0,
    1575,  1576,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1577,     0,     0,     0,     0,
       0,     0,     0,  1583,     0,     0,  1584,  1585,  1586,     0,
    1587,  1588,  1589,  1590,  1591,  1592,     0,     0,     0,     0,
    3226,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1578,     0,     0,  1579,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1580,     0,
       0,  1581,     0,     0,     0,     0,     0,     0,  1583,     0,
       0,  1584,  1585,  1586,     0,  1587,  1588,  1589,  1590,  1591,
    1592,     0,     0,     0,     0,  3281,     0,     0,     0,     0,
       0,  1558,     0,     0,  1559,     0,     0,     0,  1560,  1561,
    1562,  1563,  1564,  1565,  1566,     0,     0,     0,     0,     0,
       0,     0,     0,  1558,     0,     0,  1559,     0,     0,  1567,
    1560,  1561,  1562,  1563,  1564,  1565,  1566,     0,     0,  1569,
       0,     0,     0,     0,     0,     0,  1570,     0,     0,     0,
       0,  1567,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1569,     0,     0,  1582,     0,     0,     0,  1570,     0,
    1558,  1571,     0,  1559,     0,     0,     0,  1560,  1561,  1562,
    1563,  1564,  1565,  1566,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1571,     0,     0,     0,     0,  1567,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1569,     0,
       0,     0,     0,     0,     0,  1570,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1558,     0,     0,  1559,     0,
       0,     0,  1560,  1561,  1562,  1563,  1564,  1565,  1566,     0,
    1571,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1567,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1569,     0,  1572,     0,     0,  1583,     0,
    1570,  1584,  1585,  1586,     0,  1587,  1588,  1589,  1590,  1591,
    1592,  1573,     0,     0,     0,  3303,  1574,  1572,     0,     0,
       0,     0,     0,     0,     0,  1571,     0,     0,     0,     0,
       0,     0,     0,  1573,     0,     0,     0,     0,  1574,  1575,
    1576,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1577,     0,     0,     0,     0,     0,
       0,  1575,  1576,     0,  1572,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1577,     0,     0,     0,
    1573,     0,     0,     0,     0,  1574,     0,     0,     0,     0,
    1578,     0,     0,  1579,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1580,  1575,  1576,
    1581,     0,  1578,     0,     0,  1579,     0,     0,     0,  1572,
       0,     0,     0,  1577,     0,     0,     0,     0,     0,  1580,
       0,     0,  1581,     0,     0,  1573,     0,     0,     0,     0,
    1574,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1578,
       0,     0,  1579,  1575,  1576,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1580,     0,  1577,  1581,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1582,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1578,     0,     0,  1579,     0,     0,
       0,     0,     0,     0,     0,  1582,     0,     0,     0,     0,
       0,  1580,     0,     0,  1581,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1582,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1583,     0,     0,
    1584,  1585,  1586,     0,  1587,  1588,  1589,  1590,  1591,  1592,
       0,     0,  1754,     0,     0,     0,     0,  1582,     0,  1583,
       0,     0,  1584,  1585,  1586,     0,  1587,  1588,  1589,  1590,
    1591,  1592,     0,     0,  2690,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1583,     0,     0,  1584,
    1585,  1586,     0,  1587,  1588,  1589,  1590,  1591,  1592,     0,
       0,  3098,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1229,     0,
       0,  1583,     0,     0,  1584,  1585,  1586,     0,  1587,  1588,
    1589,  1590,  1591,  1592,     0,     0,  3267,   111,   112,   113,
     114,   115,   116,   117,   118,  1230,   119,   120,   121,  1231,
    1232,  1233,   842,  1234,  1235,  1236,  1237,   843,   123,   124,
    1238,   125,   126,   127,   844,   129,   130,   131,   845,   846,
     847,   848,   849,  1239,   137,   138,   139,   140,   141,   142,
    1240,  1241,   143,   144,   850,   851,   147,  1242,   148,   149,
     150,   151,   852,  1243,   853,  1244,   854,   155,   156,   157,
     158,   159,   855,   161,   162,   163,  1245,   164,   165,   166,
     167,   168,   169,  1246,   856,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   857,   858,   183,  1247,   184,
    1248,   185,   186,   187,   188,   189,   190,  1249,   191,   192,
     193,   194,   195,  1250,  1251,   196,   197,   198,   199,   200,
    1252,   201,   202,   203,  1253,   204,   205,   206,  1254,   207,
     208,   209,   210,   859,   212,   213,   214,   215,   216,   860,
    1255,   218,  1256,   219,   220,   861,   222,  1257,   223,  1258,
     224,   862,  1259,   863,   227,   228,   864,   865,   231,  1260,
     232,  1261,   866,   867,   235,  1262,   236,   237,   238,   239,
     240,   241,   242,   868,   244,   245,   246,   247,  1263,   248,
     249,   250,   251,   252,   253,   254,  1264,   255,   869,   870,
     258,   259,   260,   261,   262,   871,   872,  1265,   873,  1266,
     266,   874,   875,   269,   876,   271,   272,   273,   274,   275,
     276,  1267,  1268,   277,   877,   279,   878,  1269,   281,   282,
     283,   284,   285,   286,   287,   288,   879,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   880,   881,   882,   311,   312,
     313,   883,  1270,   315,   316,   884,   318,  1271,   885,   320,
     886,   322,   323,   324,  1272,   325,   326,  1273,  1274,   327,
     328,   329,  1275,  1276,   330,   887,   888,   333,   889,   890,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
    1277,  1278,  1279,  1280,   346,   347,   891,   892,   350,   351,
     893,   353,   354,   355,  1281,   356,   357,   358,   359,   360,
     361,  1282,   362,   363,   364,   894,   366,   367,   368,   369,
    1283,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,  1284,   383,   384,   895,   386,   387,
     388,   896,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,  1285,   897,   401,   402,   403,   404,   405,
     406,   898,   408,   409,   410,   899,   412,   413,   900,   415,
    1286,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   901,   429,   902,   431,  1287,   432,   433,
    1288,   434,   903,   436,   437,   438,   439,   440,  1289,   904,
     905,  1290,  1291,   443,   444,   906,   446,   907,  1292,   448,
     449,   908,   451,   452,   453,   454,   455,  1293,  1294,   456,
     457,   458,  1295,   459,   460,   461,   462,  1296,   463,   464,
     465,   466,   467,  1297,   910,  1298,   470,   911,   472,   473,
     474,   475,   476,  1299,  1300,   477,  1301,  1302,   478,   479,
     480,   481,   482,   483,   912,   913,   914,   915,   916,   917,
     918,   919,   920,   921,   922,   495,   496,   497,   498,   506,
       0,     0,     0,     0,     0,     0,     0,     0,  2073,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   123,
     124,     0,   125,   126,   127,     0,   129,   130,   131,   132,
     133,     0,   135,   136,     0,   137,   138,   139,   140,   141,
     142,     0,     0,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   152,     0,     0,     0,   154,   155,   156,
     157,   158,   159,     0,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,     0,   219,   220,   221,   222,     0,   223,
       0,   224,     0,     0,     0,   227,   228,   507,     0,   231,
       0,   232,     0,   233,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   266,     0,     0,   269,     0,   271,   272,   273,   274,
     275,   276,     0,     0,   277,     0,   279,     0,     0,   281,
     282,   283,   284,   285,   286,   287,   288,   508,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,     0,   310,   311,
     312,   313,   314,     0,   315,   316,     0,   318,     0,   319,
     320,   321,   322,   323,   324,     0,   325,   326,     0,     0,
     327,   328,   329,     0,     0,   330,   331,     0,   333,     0,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   348,     0,   350,
     351,   352,   353,   354,   355,     0,   356,   357,   358,   359,
     360,   361,     0,   362,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,     0,     0,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,     0,   412,   413,   414,
     415,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   509,   429,   430,   431,     0,   432,
     433,     0,   434,     0,   436,   437,   438,   439,   440,     0,
     441,   442,     0,     0,   443,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,     0,     0,
     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,   468,   469,     0,   470,     0,   472,
     473,   474,   475,   476,     0,     0,   477,     0,     0,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     506,     0,     0,     0,     0,     0,     0,     0,     0,  2611,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   507,     0,
     231,     0,   232,     0,   233,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
       0,   257,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   266,     0,     0,   269,     0,   271,   272,   273,
     274,   275,   276,     0,     0,   277,     0,   279,     0,     0,
     281,   282,   283,   284,   285,   286,   287,   288,   508,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,     0,   310,
     311,   312,   313,   314,     0,   315,   316,     0,   318,     0,
     319,   320,   321,   322,   323,   324,     0,   325,   326,     0,
       0,   327,   328,   329,     0,     0,   330,   331,     0,   333,
       0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,     0,     0,   346,   347,   348,     0,
     350,   351,   352,   353,   354,   355,     0,   356,   357,   358,
     359,   360,   361,     0,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,     0,     0,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,     0,   412,   413,
     414,   415,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   509,   429,   430,   431,     0,
     432,   433,     0,   434,     0,   436,   437,   438,   439,   440,
       0,   441,   442,     0,     0,   443,   444,   445,   446,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,     0,
       0,   456,   457,   458,     0,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,     0,   470,     0,
     472,   473,   474,   475,   476,     0,     0,   477,     0,     0,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   841,  1412,   517,     0,     0,     0,   999,     0,     0,
    2614,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,
     120,   121,     0,     0,     0,   842,     0,     0,     0,     0,
     843,   123,   124,     0,   125,   126,   127,   844,   129,   130,
     131,   845,   846,   847,   848,   849,     0,   137,   138,   139,
     140,   141,   142,     0,     0,   143,   144,   850,   851,   147,
       0,   148,   149,   150,   151,   852,     0,   853,     0,   854,
     155,   156,   157,   158,   159,   855,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   856,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   857,   858,
     183,  1618,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     198,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,   859,   212,   213,   214,
     215,   216,   860,  1413,   218,     0,   219,   220,   861,   222,
       0,   223,     0,   224,   862,     0,   863,   227,   228,   864,
     865,   231,     0,   232,     0,   866,   867,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   868,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,   869,   870,   258,   259,   260,   261,   262,   871,   872,
       0,   873,     0,   266,   874,   875,   269,   876,   271,   272,
     273,   274,   275,   276,     0,     0,   277,   877,   279,   878,
       0,   281,   282,   283,   284,   285,   286,   287,   288,   879,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   880,   881,
     882,   311,   312,   313,   883,     0,   315,   316,   884,   318,
       0,   885,   320,   886,   322,   323,   324,     0,   325,   326,
    1414,     0,   327,   328,   329,     0,     0,   330,   887,   888,
     333,   889,   890,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,     0,     0,   346,   347,   891,
     892,   350,   351,   893,   353,   354,   355,     0,   356,   357,
     358,   359,   360,   361,     0,   362,   363,   364,   894,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     895,   386,   387,   388,   896,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,     0,   897,   401,   402,
     403,   404,   405,   406,   898,   408,   409,   410,   899,   412,
     413,   900,   415,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   901,   429,   902,   431,
       0,   432,   433,     0,   434,   903,   436,   437,   438,   439,
     440,     0,   904,   905,     0,     0,   443,   444,   906,   446,
     907,  1415,   448,   449,   908,   451,   452,   453,   454,   455,
       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,  1297,   910,     0,   470,
     911,   472,   473,   474,   475,   476,     0,     0,   477,     0,
       0,   478,   479,   480,   481,   482,   483,   912,   913,   914,
     915,   916,   917,   918,   919,   920,   921,   922,   495,   496,
     497,   498,   841,  1412,   517,     0,     0,     0,   999,  1416,
    1417,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,   120,   121,     0,     0,     0,   842,     0,     0,     0,
       0,   843,   123,   124,     0,   125,   126,   127,   844,   129,
     130,   131,   845,   846,   847,   848,   849,     0,   137,   138,
     139,   140,   141,   142,     0,     0,   143,   144,   850,   851,
     147,     0,   148,   149,   150,   151,   852,     0,   853,     0,
     854,   155,   156,   157,   158,   159,   855,   161,   162,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   856,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   857,
     858,   183,  1620,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,   859,   212,   213,
     214,   215,   216,   860,  1413,   218,     0,   219,   220,   861,
     222,     0,   223,     0,   224,   862,     0,   863,   227,   228,
     864,   865,   231,     0,   232,     0,   866,   867,   235,     0,
     236,   237,   238,   239,   240,   241,   242,   868,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,   869,   870,   258,   259,   260,   261,   262,   871,
     872,     0,   873,     0,   266,   874,   875,   269,   876,   271,
     272,   273,   274,   275,   276,     0,     0,   277,   877,   279,
     878,     0,   281,   282,   283,   284,   285,   286,   287,   288,
     879,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   880,
     881,   882,   311,   312,   313,   883,     0,   315,   316,   884,
     318,     0,   885,   320,   886,   322,   323,   324,     0,   325,
     326,  1414,     0,   327,   328,   329,     0,     0,   330,   887,
     888,   333,   889,   890,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,     0,     0,   346,   347,
     891,   892,   350,   351,   893,   353,   354,   355,     0,   356,
     357,   358,   359,   360,   361,     0,   362,   363,   364,   894,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,   895,   386,   387,   388,   896,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,     0,   897,   401,
     402,   403,   404,   405,   406,   898,   408,   409,   410,   899,
     412,   413,   900,   415,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   901,   429,   902,
     431,     0,   432,   433,     0,   434,   903,   436,   437,   438,
     439,   440,     0,   904,   905,     0,     0,   443,   444,   906,
     446,   907,  1415,   448,   449,   908,   451,   452,   453,   454,
     455,     0,     0,   456,   457,   458,     0,   459,   460,   461,
     462,     0,   463,   464,   465,   466,   467,  1297,   910,     0,
     470,   911,   472,   473,   474,   475,   476,     0,     0,   477,
       0,     0,   478,   479,   480,   481,   482,   483,   912,   913,
     914,   915,   916,   917,   918,   919,   920,   921,   922,   495,
     496,   497,   498,   841,  1412,   517,     0,     0,     0,   999,
    1416,  1417,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,     0,     0,     0,   842,     0,     0,
       0,     0,   843,   123,   124,     0,   125,   126,   127,   844,
     129,   130,   131,   845,   846,   847,   848,   849,     0,   137,
     138,   139,   140,   141,   142,     0,     0,   143,   144,   850,
     851,   147,     0,   148,   149,   150,   151,   852,     0,   853,
       0,   854,   155,   156,   157,   158,   159,   855,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   856,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     857,   858,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,   859,   212,
     213,   214,   215,   216,   860,  1413,   218,     0,   219,   220,
     861,   222,     0,   223,     0,   224,   862,     0,   863,   227,
     228,   864,   865,   231,     0,   232,     0,   866,   867,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   868,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,   869,   870,   258,   259,   260,   261,   262,
     871,   872,     0,   873,     0,   266,   874,   875,   269,   876,
     271,   272,   273,   274,   275,   276,     0,     0,   277,   877,
     279,   878,     0,   281,   282,   283,   284,   285,   286,   287,
     288,   879,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     880,   881,   882,   311,   312,   313,   883,     0,   315,   316,
     884,   318,     0,   885,   320,   886,   322,   323,   324,     0,
     325,   326,  1414,     0,   327,   328,   329,     0,     0,   330,
     887,   888,   333,   889,   890,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   891,   892,   350,   351,   893,   353,   354,   355,     0,
     356,   357,   358,   359,   360,   361,     0,   362,   363,   364,
     894,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,     0,
     383,   384,   895,   386,   387,   388,   896,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,   897,
     401,   402,   403,   404,   405,   406,   898,   408,   409,   410,
     899,   412,   413,   900,   415,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   901,   429,
     902,   431,     0,   432,   433,     0,   434,   903,   436,   437,
     438,   439,   440,     0,   904,   905,     0,     0,   443,   444,
     906,   446,   907,  1415,   448,   449,   908,   451,   452,   453,
     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,  1297,   910,
       0,   470,   911,   472,   473,   474,   475,   476,     0,     0,
     477,     0,     0,   478,   479,   480,   481,   482,   483,   912,
     913,   914,   915,   916,   917,   918,   919,   920,   921,   922,
     495,   496,   497,   498,     0,     0,  1558,     0,     0,  1559,
       0,  1416,  1417,  1560,  1561,  1562,  1563,  1564,  1565,  1566,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1567,     0,     0,     0,     0,  2096,
       0,     0,     0,     0,  1569,     0,  1558,     0,     0,  1559,
       0,  1570,     0,  1560,  1561,  1562,  1563,  1564,  1565,  1566,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1567,     0,  1571,     0,     0,     0,
       0,     0,     0,     0,  1569,     0,  1558,     0,     0,  1559,
       0,  1570,     0,  1560,  1561,  1562,  1563,  1564,  1565,  1566,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1567,     0,  1571,     0,     0,     0,
    2097,     0,     0,     0,  1569,     0,  1558,     0,     0,  1559,
       0,  1570,     0,  1560,  1561,  1562,  1563,  1564,  1565,  1566,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1567,     0,  1571,     0,  1855,     0,
       0,     0,     0,     0,  1569,     0,  1558,     0,     0,  1559,
    1572,  1570,     0,  1560,  1561,  1562,  1563,  1564,  1565,  1566,
       0,     0,     0,     0,     0,     0,  1573,     0,     0,     0,
       0,  1574,     0,     0,  1567,     0,  1571,     0,     0,     0,
    1891,     0,     0,     0,  1569,  1892,     0,     0,     0,     0,
    1572,  1570,     0,     0,  1575,  1576,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1573,     0,     0,  1577,
       0,  1574,     0,     0,     0,     0,  1571,     0,     0,  3370,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1572,     0,     0,     0,  1575,  1576,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1578,  1573,     0,  1579,  1577,
       0,  1574,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1580,     0,     0,  1581,     0,     0,     0,     0,
    1572,     0,     0,     0,  1575,  1576,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1578,  1573,     0,  1579,  1577,
       0,  1574,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1580,     0,     0,  1581,     0,     0,     0,     0,
    1572,     0,     0,     0,  1575,  1576,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1578,  1573,     0,  1579,  1577,
       0,  1574,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1580,     0,     0,  1581,     0,     0,     0,     0,
       0,     0,     0,     0,  1575,  1576,     0,     0,  1582,     0,
       0,     0,     0,     0,     0,  1578,     0,     0,  1579,  1577,
       0,     0,  3371,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1580,     0,     0,  1581,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1582,     0,
       0,     0,     0,     0,     0,  1578,     0,     0,  1579,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2100,     0,  1580,     0,     0,  1581,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1582,     0,
       0,     0,     0,     0,     0,     0,  1862,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1583,     0,     0,  1584,  1585,  1586,     0,  1587,
    1588,  1589,  1590,  1591,  1592,     0,     0,     0,  1582,     0,
       0,     0,     0,     0,     0,     0,     0,  1558,     0,     0,
    1559,     0,     0,     0,  1560,  1561,  1562,  1563,  1564,  1565,
    1566,     0,  1583,     0,     0,  1584,  1585,  1586,     0,  1587,
    1588,  1589,  1590,  1591,  1592,  1567,     0,     0,  1582,  1897,
       0,     0,     0,     0,     0,  1569,     0,  1558,     0,     0,
    1559,     0,  1570,     0,  1560,  1561,  1562,  1563,  1564,  1565,
    1566,     0,  1583,     0,     0,  1584,  1585,  1586,     0,  1587,
    1588,  1589,  1590,  1591,  1592,  1567,     0,  1571,     0,     0,
       0,     0,     0,     0,     0,  1569,     0,  1558,     0,     0,
    1559,     0,  1570,     0,  1560,  1561,  1562,  1563,  1564,  1565,
    1566,     0,  1583,     0,     0,  1584,  1585,  1586,     0,  1587,
    1588,  1589,  1590,  1591,  1592,  1567,     0,  1571,     0,  1904,
       0,     0,     0,     0,     0,  1569,     0,  1558,     0,     0,
    1559,     0,  1570,     0,  1560,  1561,  1562,  1563,  1564,  1565,
    1566,     0,  1583,     0,     0,  1584,  1585,  1586,     0,  1587,
    1588,  1589,  1590,  1591,  1592,  1567,     0,  1571,     0,     0,
       0,     0,     0,     0,     0,  1569,     0,     0,     0,     0,
       0,  1572,  1570,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1573,     0,     0,
       0,     0,  1574,     0,     0,     0,     0,  1571,     0,     0,
       0,     0,     0,     0,     0,     0,  1902,     0,     0,     0,
       0,  1572,     0,     0,     0,  1575,  1576,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1573,     0,     0,
    1577,     0,  1574,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1572,     0,     0,     0,  1575,  1576,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1578,  1573,     0,  1579,
    1577,     0,  1574,     0,     0,     0,     0,     0,     0,     0,
       0,  1994,     0,  1580,     0,     0,  1581,     0,     0,     0,
       0,  1572,     0,     0,     0,  1575,  1576,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1578,  1573,     0,  1579,
    1577,     0,  1574,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1580,     0,     0,  1581,     0,     0,     0,
       0,     0,     0,     0,     0,  1575,  1576,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1578,     0,     0,  1579,
    1577,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1580,     0,     0,  1581,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1582,
       0,     0,     0,     0,     0,     0,  1578,     0,     0,  1579,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1580,     0,     0,  1581,     0,     0,     0,
       0,     0,     0,     0,     0,  1558,     0,     0,  1559,  1582,
       0,     0,  1560,  1561,  1562,  1563,  1564,  1565,  1566,     0,
       0,     0,     0,     0,     0,     0,     0,  1558,     0,     0,
    1559,     0,     0,  1567,  1560,  1561,  1562,  1563,  1564,  1565,
    1566,     0,     0,  1569,     0,     0,     0,     0,     0,  1582,
    1570,     0,     0,     0,     0,  1567,     0,     0,     0,  2668,
       0,     0,     0,     0,     0,  1569,     0,     0,     0,     0,
       0,     0,  1570,  1583,     0,  1571,  1584,  1585,  1586,     0,
    1587,  1588,  1589,  1590,  1591,  1592,     0,     0,     0,  1582,
       0,     0,     0,     0,     0,     0,     0,  1571,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1583,     0,     0,  1584,  1585,  1586,     0,
    1587,  1588,  1589,  1590,  1591,  1592,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1583,     0,     0,  1584,  1585,  1586,     0,
    1587,  1588,  1589,  1590,  1591,  1592,     0,     0,     0,  1572,
       0,  1558,     0,     0,  1559,     0,     0,     0,  1560,  1561,
    1562,  1563,  1564,  1565,  1566,  1573,     0,     0,     0,     0,
    1574,  1572,     0,  1583,     0,     0,  1584,  1585,  1586,  1567,
    1587,  1588,  1589,  1590,  1591,  1592,     0,  1573,     0,  1569,
       0,     0,  1574,  1575,  1576,     0,  1570,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1577,     0,
       0,     0,     0,     0,     0,  1575,  1576,     0,     0,     0,
       0,  1571,     0,     0,     0,     0,     0,     0,     0,     0,
    1577,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1578,     0,     0,  1579,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1580,     0,     0,  1581,     0,  1578,     0,     0,  1579,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1580,     0,     0,  1581,     0,     0,     0,
       0,     0,     0,     0,  1558,     0,     0,  1559,     0,     0,
       0,  1560,  1561,  1562,  1563,  1564,  1565,  1566,     0,     0,
       0,     0,     0,     0,     0,  1572,  1558,     0,     0,  1559,
       0,     0,  1567,  1560,  1561,     0,     0,  1564,  1565,  1566,
       0,  1573,  1569,     0,     0,  1558,  1574,     0,  1559,  1570,
       0,     0,  1560,  1561,  1567,     0,  1564,  1565,  1566,     0,
       0,     0,     0,     0,  1569,     0,     0,  1582,     0,  1575,
    1576,  1570,     0,     0,  1571,     0,     0,     0,     0,     0,
       0,     0,     0,  1569,  1577,     0,     0,     0,     0,  1582,
    1570,     0,     0,     0,     0,     0,  1571,     0,     0,     0,
    2657,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1571,     0,     0,     0,     0,
    1578,     0,     0,  1579,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1580,     0,     0,
    1581,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1572,     0,
       0,  1583,     0,     0,  1584,  1585,  1586,     0,  1587,  1588,
    1589,  1590,  1591,  1592,  1573,     0,     0,     0,     0,  1574,
    1572,     0,     0,  1583,     0,     0,  1584,  1585,  1586,     0,
    1587,  1588,  1589,  1590,  1591,  1592,  1573,     0,     0,  1572,
       0,  1574,  1575,  1576,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1573,     0,  1577,     0,     0,
    1574,     0,     0,  1582,  1575,  1576,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1577,
       0,     0,     0,  1575,  1576,     0,     0,     0,     0,     0,
       0,     0,     0,  1578,     0,     0,  1579,     0,  1577,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1580,     0,     0,  1581,     0,  1578,     0,     0,  1579,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1580,     0,  1578,  1581,     0,  1579,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1580,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1583,     0,     0,
    1584,  1585,  1586,     0,  1587,  1588,  1589,  1590,  1591,  1592,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1582,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1582,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1582,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1583,     0,     0,  1584,  1585,  1586,     0,  1587,  1588,  1589,
    1590,  2117,  1592,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1583,     0,     0,  1584,  1585,  1586,     0,  1587,
    1588,  1589,  1590,  1591,  1592,  1229,     0,  2014,     0,     0,
       0,  1583,     0,     0,  1584,  1585,  1586,     0,  1587,  1588,
    1589,  1590,  1591,  1592,   111,   112,   113,   114,   115,   116,
     117,   118,  1230,   119,   120,   121,  1231,  1232,  1233,   842,
    1234,  1235,  1236,  1237,   843,   123,   124,  1238,   125,   126,
     127,   844,   129,   130,   131,   845,   846,   847,   848,   849,
    1239,   137,   138,   139,   140,   141,   142,  1240,  1241,   143,
     144,   850,   851,   147,  1242,   148,   149,   150,   151,   852,
    1243,   853,  1244,   854,   155,   156,   157,   158,   159,   855,
     161,   162,   163,  1245,   164,   165,   166,   167,   168,   169,
    1246,   856,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   857,   858,   183,  1247,   184,  1248,   185,   186,
     187,   188,   189,   190,  1249,   191,   192,   193,   194,   195,
    1250,  1251,   196,   197,   198,   199,   200,  1252,   201,   202,
     203,  1253,   204,   205,   206,  1254,   207,   208,   209,   210,
     859,   212,   213,   214,   215,   216,   860,  1255,   218,  1256,
     219,   220,   861,   222,  1257,   223,  1258,   224,   862,  1259,
     863,   227,   228,   864,   865,   231,  1260,   232,  1261,   866,
     867,   235,  1262,   236,   237,   238,   239,   240,   241,   242,
     868,   244,   245,   246,   247,  1263,   248,   249,   250,   251,
     252,   253,   254,  1264,   255,   869,   870,   258,   259,   260,
     261,   262,   871,   872,  1265,   873,  1266,   266,   874,   875,
     269,   876,   271,   272,   273,   274,   275,   276,  1267,  1268,
     277,   877,   279,   878,  1269,   281,   282,   283,   284,   285,
     286,   287,   288,   879,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   880,   881,   882,   311,   312,   313,   883,  1270,
     315,   316,   884,   318,  1271,   885,   320,   886,   322,   323,
     324,  1272,   325,   326,  1273,  1274,   327,   328,   329,  1275,
    1276,   330,   887,   888,   333,   889,   890,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,  1277,  1278,  1279,
    1280,   346,   347,   891,   892,   350,   351,   893,   353,   354,
     355,  1281,   356,   357,   358,   359,   360,   361,  1282,   362,
     363,   364,   894,   366,   367,   368,   369,  1283,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,  1284,   383,   384,   895,   386,   387,   388,   896,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
    1285,   897,   401,   402,   403,   404,   405,   406,   898,   408,
     409,   410,   899,   412,   413,   900,   415,  1286,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     901,   429,   902,   431,  1287,   432,   433,  1288,   434,   903,
     436,   437,   438,   439,   440,  1289,   904,   905,  1290,  1291,
     443,   444,   906,   446,   907,  1292,   448,   449,   908,   451,
     452,   453,   454,   455,  1293,  1294,   456,   457,   458,  1295,
     459,   460,   461,   462,  1296,   463,   464,   465,   466,   467,
    1297,   910,  1298,   470,   911,   472,   473,   474,   475,   476,
    1299,  1300,   477,  1301,  1302,   478,   479,   480,   481,   482,
     483,   912,   913,   914,   915,   916,   917,   918,   919,   920,
     921,   922,   495,   496,   497,   498,  1229,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,  1230,   119,   120,   121,  1231,  1232,  1233,
     842,  1234,  1235,  1236,  1237,   843,   123,   124,  1238,   125,
     126,   127,   844,   129,   130,   131,   845,   846,   847,   848,
     849,  1239,   137,   138,   139,   140,   141,   142,  1240,  1241,
     143,   144,   850,   851,   147,  1242,   148,   149,   150,   151,
     852,  1243,   853,  1244,   854,   155,   156,   157,   158,   159,
     855,   161,   162,   163,  1245,   164,   165,   166,   167,   168,
     169,  1246,   856,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   857,   858,   183,  1247,   184,  1248,   185,
     186,   187,   188,   189,   190,  1249,   191,   192,   193,   194,
     195,  1250,  1251,   196,   197,   198,   199,   200,  1252,   201,
     202,   203,  1253,   204,   205,   206,  1254,   207,   208,   209,
     210,   859,   212,   213,   214,   215,   216,   860,  1255,   218,
    1256,   219,   220,   861,   222,  1257,   223,  1258,   224,   862,
    1259,   863,   227,   228,   864,   865,   231,  1260,   232,  1261,
     866,   867,   235,  1262,   236,   237,   238,   239,   240,   241,
     242,   868,   244,   245,   246,   247,  1263,   248,   249,   250,
     251,   252,   253,   254,  1264,   255,   869,   870,   258,   259,
     260,   261,   262,   871,   872,  1265,   873,  1266,   266,   874,
     875,   269,   876,   271,   272,   273,   274,   275,   276,  1267,
    1268,   277,   877,   279,   878,  1269,   281,   282,   283,   284,
     285,   286,   287,   288,   879,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   880,   881,   882,   311,   312,   313,   883,
    1270,   315,   316,   884,   318,  1271,   885,   320,   886,   322,
     323,   324,  1272,   325,   326,  1273,  1274,   327,   328,   329,
    1275,  1276,   330,   887,   888,   333,   889,   890,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,  1277,  1278,
    1279,  1280,   346,   347,   891,   892,   350,   351,   893,   353,
     354,   355,  1281,   356,   357,   358,   359,   360,   361,  1282,
     362,   363,   364,   894,   366,   367,   368,   369,  1283,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,  1284,   383,   384,   895,   386,   387,   388,   896,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,  1285,   897,   401,   402,   403,   404,   405,   406,   898,
     408,   409,   410,   899,   412,   413,   900,   415,  1286,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   901,   429,   902,   431,  1287,   432,   433,  1288,   434,
     903,   436,   437,   438,   439,   440,  1289,   904,   905,  1290,
    1291,   443,   444,   906,   446,   907,  1292,   448,   449,   908,
     451,   452,   453,   454,   455,  1293,  1294,   456,   457,   458,
    1295,   459,   460,   461,   462,  1296,   463,   464,   465,   466,
     467,  1297,   910,  1298,   470,   911,   472,   473,   474,   475,
     476,  1299,  1300,   477,  1301,  1302,   478,   479,   480,   481,
     482,   483,   912,   913,   914,   915,   916,   917,   918,   919,
     920,   921,   922,   495,   496,   497,   498,  1229,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   111,   112,   113,   114,
    2162,   116,   117,   118,  1230,   119,   120,   121,  1231,  1232,
    1233,   842,  1234,  1235,  1236,  1237,   843,   123,   124,  1238,
     125,   126,   127,   844,   129,   130,   131,   845,   846,   847,
     848,   849,  1239,   137,   138,   139,   140,   141,   142,  1240,
    1241,   143,   144,   850,   851,   147,  1242,   148,   149,   150,
     151,   852,  1243,   853,  1244,   854,   155,   156,   157,   158,
     159,   855,   161,   162,   163,  1245,   164,   165,   166,   167,
     168,   169,  1246,   856,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   857,   858,   183,  1247,   184,  1248,
     185,   186,   187,   188,   189,   190,  1249,   191,   192,   193,
     194,   195,  1250,  1251,   196,   197,   198,  2163,   200,  1252,
     201,   202,   203,  1253,   204,   205,   206,  1254,   207,   208,
     209,   210,   859,   212,   213,   214,   215,   216,   860,  1255,
     218,  1256,   219,   220,   861,   222,  1257,   223,  1258,   224,
     862,  1259,   863,   227,   228,   864,   865,   231,  1260,   232,
    1261,   866,   867,   235,  1262,   236,   237,   238,   239,   240,
     241,   242,   868,   244,   245,   246,   247,  1263,   248,   249,
     250,   251,   252,   253,   254,  1264,   255,   869,   870,   258,
     259,   260,   261,   262,   871,   872,  1265,   873,  1266,   266,
     874,   875,   269,   876,   271,   272,   273,   274,   275,   276,
    1267,  1268,   277,   877,   279,   878,  1269,   281,   282,   283,
     284,   285,   286,   287,   288,   879,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   880,   881,   882,   311,   312,   313,
     883,  1270,   315,   316,   884,   318,  1271,   885,   320,   886,
     322,   323,   324,  1272,   325,   326,  1273,  1274,   327,   328,
     329,  1275,  1276,   330,   887,   888,   333,   889,   890,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,  1277,
    1278,  1279,  1280,   346,   347,   891,   892,   350,   351,   893,
     353,   354,   355,  1281,   356,   357,   358,   359,   360,   361,
    1282,   362,   363,   364,   894,   366,   367,   368,   369,  1283,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,  1284,   383,   384,   895,   386,   387,   388,
     896,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,  1285,   897,   401,   402,   403,   404,   405,  2164,
     898,   408,   409,   410,   899,   412,   413,   900,   415,  1286,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   901,   429,   902,   431,  1287,   432,   433,  1288,
     434,   903,   436,   437,   438,   439,   440,  1289,   904,   905,
    1290,  1291,   443,   444,   906,   446,   907,  1292,   448,   449,
     908,   451,   452,   453,   454,   455,  1293,  1294,   456,   457,
     458,  1295,   459,   460,   461,   462,  1296,   463,   464,   465,
     466,   467,  1297,   910,  1298,   470,   911,   472,   473,   474,
     475,   476,  1299,  1300,   477,  1301,  1302,   478,   479,   480,
     481,   482,   483,   912,   913,   914,   915,   916,   917,   918,
     919,   920,   921,   922,   495,   496,   497,   498,   841,     0,
     517,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,   842,     0,     0,     0,     0,   843,   123,   124,
       0,   125,   126,   127,   844,   129,   130,   131,   845,   846,
     847,   848,   849,     0,   137,   138,   139,   140,   141,   142,
       0,     0,   143,   144,   850,   851,   147,     0,   148,   149,
     150,   151,   852,     0,   853,     0,   854,   155,   156,   157,
     158,   159,   855,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   856,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   857,   858,   183,     0,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   859,   212,   213,   214,   215,   216,   860,
    1413,   218,     0,   219,   220,   861,   222,     0,   223,     0,
     224,   862,     0,   863,   227,   228,   864,   865,   231,     0,
     232,     0,   866,   867,   235,     0,   236,   237,   238,   239,
     240,   241,   242,   868,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,   869,   870,
     258,   259,   260,   261,   262,   871,   872,     0,   873,     0,
     266,   874,   875,   269,   876,   271,   272,   273,   274,   275,
     276,     0,     0,   277,   877,   279,   878,     0,   281,   282,
     283,   284,   285,   286,   287,   288,   879,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   880,   881,   882,   311,   312,
     313,   883,     0,   315,   316,   884,   318,     0,   885,   320,
     886,   322,   323,   324,     0,   325,   326,  1414,     0,   327,
     328,   329,     0,     0,   330,   887,   888,   333,   889,   890,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,     0,     0,   346,   347,   891,   892,   350,   351,
     893,   353,   354,   355,     0,   356,   357,   358,   359,   360,
     361,     0,   362,   363,   364,   894,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,   895,   386,   387,
     388,   896,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,     0,   897,   401,   402,   403,   404,   405,
     406,   898,   408,   409,   410,   899,   412,   413,   900,   415,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   901,   429,   902,   431,     0,   432,   433,
       0,   434,   903,   436,   437,   438,   439,   440,     0,   904,
     905,     0,     0,   443,   444,   906,   446,   907,  1415,   448,
     449,   908,   451,   452,   453,   454,   455,     0,     0,   456,
     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,
     465,   466,   467,  1297,   910,     0,   470,   911,   472,   473,
     474,   475,   476,     0,     0,   477,     0,     0,   478,   479,
     480,   481,   482,   483,   912,   913,   914,   915,   916,   917,
     918,   919,   920,   921,   922,   495,   496,   497,   498,   841,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       3,     4,     0,   842,     0,     0,     0,     0,   843,   123,
     124,     0,   125,   126,   127,   844,   129,   130,   131,   845,
     846,   847,   848,   849,     0,   137,   138,   139,   140,   141,
     142,     0,     0,   143,   144,   850,   851,   147,     0,   148,
     149,   150,   151,   852,     0,   853,     0,   854,   155,   156,
     157,   158,   159,   855,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   856,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   857,   858,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,   859,   212,   213,   214,   215,   216,
     860,     0,   218,     0,   219,   220,   861,   222,     0,   223,
       0,   224,   862,     0,   863,   227,   228,   864,   865,   231,
       0,   232,     0,   866,   867,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   868,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   869,
     870,   258,   259,   260,   261,   262,   871,   872,     0,   873,
       0,   266,   874,   875,   269,   876,   271,   272,   273,   274,
     275,   276,     0,     0,   277,   877,   279,   878,     0,   281,
     282,   283,   284,   285,   286,   287,   288,   879,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   880,   881,   882,   311,
     312,   313,   883,     0,   315,   316,   884,   318,     0,   885,
     320,   886,   322,   323,   324,     0,   325,   326,     0,     0,
     327,   328,   329,     0,     0,   330,   887,   888,   333,   889,
     890,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   891,   892,   350,
     351,   893,   353,   354,   355,     0,   356,   357,   358,   359,
     360,   361,     0,   362,   363,   364,   894,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   895,   386,
     387,   388,   896,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,     0,   897,   401,   402,   403,   404,
     405,   406,   898,   408,   409,   410,   899,   412,   413,   900,
     415,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   901,   429,   902,   431,     0,   432,
     433,     0,   434,   903,   436,   437,   438,   439,   440,     0,
     904,   905,     0,     0,   443,   444,   906,   446,   907,     0,
     448,   449,   908,   451,   452,   453,   454,   455,     0,     0,
     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,  1297,   910,     0,   470,   911,   472,
     473,   474,   475,   476,     0,     0,   477,     0,     0,   478,
     479,   480,   481,   482,   483,   912,   913,   914,   915,   916,
     917,   918,   919,   920,   921,   922,   495,   496,   497,   498,
     110,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,   122,
     123,   124,     0,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,   606,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   607,     0,   608,     0,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   609,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,   232,     0,   233,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,     0,     0,   277,   278,   279,   280,     0,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,     0,   315,   316,   317,   318,     0,
     611,   320,   321,   322,   323,   324,     0,   325,   326,     0,
       0,   327,   328,   329,     0,     0,   330,   331,   332,   333,
     334,   613,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,     0,     0,   346,   347,   614,   349,
     350,   351,   352,   353,   354,   355,     0,   356,   357,   358,
     359,   360,   361,     0,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,     0,     0,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   616,   431,     0,
     432,   433,     0,   434,   435,   436,   437,   438,   439,   440,
       0,   441,   442,     0,     0,   443,   444,   617,   446,   618,
       0,   448,   449,   619,   451,   452,   453,   454,   455,     0,
       0,   456,   457,   458,     0,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,     0,   470,   471,
     472,   473,   474,   475,   476,     0,     0,   477,     0,     0,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   110,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,
     120,   121,     0,     0,     0,     0,     0,     0,     0,     0,
     122,   123,   124,     0,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,     0,   137,   138,   139,
     140,   141,   142,     0,     0,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   152,     0,   153,     0,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     198,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,     0,   218,     0,   219,   220,   221,   222,
       0,   223,     0,   224,   225,     0,   226,   227,   228,   229,
     230,   231,     0,   232,     0,   233,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,     0,     0,   277,   278,   279,   280,
       0,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,     0,   315,   316,   317,   318,
       0,   319,   320,   321,   322,   323,   324,     0,   325,   326,
       0,     0,   327,   328,   329,     0,     0,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,     0,     0,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,     0,   356,   357,
     358,   359,   360,   361,     0,   362,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,     0,     0,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
       0,   432,   433,     0,   434,   435,   436,   437,   438,   439,
     440,     0,   441,   442,     0,     0,   443,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,   468,   469,     0,   470,
     471,   472,   473,   474,   475,   476,     0,     0,   477,     0,
       0,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   506,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,   120,   121,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   123,   124,     0,   125,   126,   127,     0,   129,
     130,   131,   132,   133,     0,   135,   136,     0,   137,   138,
     139,   140,   141,   142,     0,     0,   143,   144,   145,   146,
     147,  1691,   148,   149,   150,   151,   152,     0,     0,  1692,
     154,   155,   156,   157,   158,   159,     0,   161,   162,   163,
    1693,   164,   165,   166,   167,   168,   169,     0,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,     0,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,     0,   219,   220,   221,
     222,     0,   223,  1694,   224,     0,     0,     0,   227,   228,
     507,     0,   231,     0,   232,     0,   233,   234,   235,     0,
     236,   237,   238,   239,   240,  1695,   242,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,     0,   257,   258,   259,   260,   261,   262,   263,
     264,     0,   265,     0,   266,     0,     0,   269,     0,   271,
     272,   273,   274,   275,   276,     0,     0,   277,     0,   279,
       0,     0,   281,   282,   283,   284,   285,   286,   287,   288,
     508,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
       0,   310,   311,   312,   313,   314,     0,   315,   316,     0,
     318,     0,   319,   320,   321,   322,   323,   324,     0,   325,
     326,     0,     0,   327,   328,   329,     0,     0,   330,   331,
       0,   333,     0,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,     0,     0,   346,   347,
     348,     0,   350,   351,   352,   353,   354,   355,  1696,   356,
     357,   358,   359,   360,   361,     0,   362,   363,   364,   365,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,     0,     0,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,     0,
     412,   413,   414,   415,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   509,   429,   430,
     431,     0,   432,   433,     0,   434,     0,   436,   437,   438,
     439,   440,     0,   441,   442,     0,     0,   443,   444,   445,
     446,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,     0,  1697,   456,   457,   458,     0,   459,   460,   461,
     462,     0,   463,   464,   465,   466,   467,   468,   469,     0,
     470,     0,   472,   473,   474,   475,   476,     0,     0,   477,
       0,     0,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   506,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   123,   124,     0,   125,   126,   127,     0,
     129,   130,   131,   132,   133,     0,   135,   136,     0,   137,
     138,   139,   140,   141,   142,     0,     0,   143,   144,   145,
     146,   147,  1691,   148,   149,   150,   151,   152,     0,     0,
       0,   154,   155,   156,   157,   158,   159,     0,   161,   162,
     163,  1693,   164,   165,   166,   167,   168,   169,     0,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,     0,   218,     0,   219,   220,
     221,   222,     0,   223,  1694,   224,     0,     0,     0,   227,
     228,   507,     0,   231,     0,   232,     0,   233,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,     0,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,     0,   266,     0,     0,   269,     0,
     271,   272,   273,   274,   275,   276,     0,     0,   277,     0,
     279,  2237,     0,   281,   282,   283,   284,   285,   286,   287,
     288,   508,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,     0,   310,   311,   312,   313,   314,     0,   315,   316,
       0,   318,     0,   319,   320,   321,   322,   323,   324,     0,
     325,   326,     0,     0,   327,   328,   329,     0,     0,   330,
     331,     0,   333,     0,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   348,     0,   350,   351,   352,   353,   354,   355,  1696,
     356,   357,   358,   359,   360,   361,     0,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,     0,
     383,   384,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,     0,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
       0,   412,   413,   414,   415,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   509,   429,
     430,   431,     0,   432,   433,     0,   434,     0,   436,   437,
     438,   439,   440,     0,   441,   442,     0,     0,   443,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,     0,  1697,   456,   457,   458,     0,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,   468,   469,
       0,   470,     0,   472,   473,   474,   475,   476,     0,     0,
     477,     0,     0,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   506,     0,   532,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     3,     4,     0,     0,     0,
       0,     0,     0,     0,   123,   124,     0,   125,   126,   127,
       0,   129,   130,   131,   132,   133,     0,   135,   136,     0,
     137,   138,   139,   140,   141,   142,     0,     0,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   152,     0,
       0,     0,   154,   155,   156,   157,   158,   159,     0,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,     0,   219,
     220,   221,   222,     0,   223,     0,   224,     0,     0,     0,
     227,   228,   507,     0,   231,     0,   232,     0,   233,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,   265,     0,   266,     0,     0,   269,
       0,   271,   272,   273,   274,   275,   276,     0,     0,   277,
       0,   279,     0,     0,   281,   282,   283,   284,   285,   286,
     287,   288,   508,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,     0,   310,   311,   312,   313,   314,     0,   315,
     316,     0,   318,     0,   319,   320,   321,   322,   323,   324,
       0,   325,   326,     0,     0,   327,   328,   329,     0,     0,
     330,   331,     0,   333,     0,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,     0,     0,
     346,   347,   348,     0,   350,   351,   352,   353,   354,   355,
       0,   356,   357,   358,   359,   360,   361,     0,   362,   363,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,     0,
       0,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,     0,   412,   413,   414,   415,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   509,
     429,   430,   431,     0,   432,   433,     0,   434,     0,   436,
     437,   438,   439,   440,     0,   441,   442,     0,     0,   443,
     444,   445,   446,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,     0,     0,   456,   457,   458,     0,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,
     469,     0,   470,     0,   472,   473,   474,   475,   476,     0,
       0,   477,     0,     0,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   506,     0,   532,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,   533,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   507,     0,   231,     0,   232,     0,   233,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,     0,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   266,     0,     0,
     269,     0,   271,   272,   273,   274,   275,   276,     0,     0,
     277,     0,   279,     0,     0,   281,   282,   283,   284,   285,
     286,   287,   288,   508,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,     0,   310,   311,   312,   313,   314,     0,
     315,   316,     0,   318,     0,   319,   320,   321,   322,   323,
     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,
       0,   330,   331,     0,   333,     0,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,
       0,   346,   347,   348,     0,   350,   351,   352,   534,   354,
     355,     0,   356,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,     0,   383,   384,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
       0,     0,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,     0,   412,   413,   414,   415,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     509,   429,   430,   431,     0,   432,   433,     0,   434,     0,
     436,   437,   438,   439,   440,     0,   441,   442,     0,     0,
     443,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,     0,   470,     0,   472,   473,   474,   475,   476,
       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   506,     0,   532,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,   120,   121,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   123,   124,     0,   125,
     126,   127,     0,   129,   130,   131,   132,   133,     0,   135,
     136,     0,   137,   138,   139,   140,   141,   142,     0,     0,
     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,
     152,     0,     0,     0,   154,   155,   156,   157,   158,   159,
       0,   161,   162,   163,     0,   164,   165,   166,   167,   168,
     169,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,     0,     0,   196,   197,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
       0,   219,   220,   221,   222,     0,   223,     0,   224,     0,
       0,     0,   227,   228,   507,     0,   231,     0,   232,     0,
     233,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,     0,   257,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   266,     0,
       0,   269,     0,   271,   272,   273,   274,   275,   276,     0,
       0,   277,     0,   279,     0,     0,   281,   282,   283,   284,
     285,   286,   287,   288,   508,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,     0,   310,   311,   312,   313,   314,
       0,   315,   316,     0,   318,     0,   319,   320,   321,   322,
     323,   324,     0,   325,   326,     0,   612,   327,   328,   329,
       0,     0,   330,   331,     0,   333,     0,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
       0,     0,   346,   347,   348,     0,   350,   351,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,     0,
     362,   363,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,     0,     0,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,     0,   412,   413,   414,   415,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   509,   429,   430,   431,     0,   432,   433,     0,   434,
       0,   436,   437,   438,   439,   440,     0,   441,   442,     0,
       0,   443,   444,   445,   446,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,     0,     0,   456,   457,   458,
       0,   459,   460,   461,   462,     0,   463,   464,   465,   466,
     467,   468,   469,     0,   470,     0,   472,   473,   474,   475,
     476,     0,     0,   477,     0,     0,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   506,     0,   532,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   123,   124,     0,
     125,   126,   127,     0,   129,   130,   131,   132,   133,     0,
     135,   136,     0,   137,   138,   139,   140,   141,   142,     0,
       0,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,   152,     0,     0,     0,   154,   155,   156,   157,   158,
     159,     0,   161,   162,   163,     0,   164,   165,   166,   167,
     168,   169,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,     0,     0,   196,   197,   198,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,     0,
     218,     0,   219,   220,   221,   222,     0,   223,     0,   224,
       0,     0,     0,   227,   228,   507,     0,   231,     0,   232,
       0,   233,   234,   235,     0,   236,   237,   238,   239,   240,
     712,   242,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,     0,   257,   258,
     259,   260,   261,   262,   263,   264,     0,   265,     0,   266,
       0,     0,   269,     0,   271,   272,   273,   274,   275,   276,
       0,     0,   277,     0,   279,     0,     0,   281,   282,   283,
     284,   285,   286,   287,   288,   508,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,     0,   310,   311,   312,   313,
     314,     0,   315,   316,     0,   318,     0,   319,   320,   321,
     322,   323,   324,     0,   325,   326,     0,   612,   327,   328,
     329,     0,     0,   330,   331,     0,   333,     0,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,     0,     0,   346,   347,   348,     0,   350,   351,   352,
     353,   354,   355,     0,   356,   357,   358,   359,   360,   361,
       0,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,     0,   383,   384,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,     0,     0,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,     0,   412,   413,   414,   415,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   509,   429,   430,   431,     0,   432,   433,     0,
     434,     0,   436,   437,   438,   439,   440,     0,   441,   442,
       0,     0,   443,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,     0,     0,   456,   457,
     458,     0,   459,   460,   461,   462,     0,   463,   464,   465,
     466,   467,   468,   469,     0,   470,     0,   472,   473,   474,
     475,   476,     0,     0,   477,     0,     0,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   506,     0,
     532,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,   743,   119,   120,   121,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   123,   124,
       0,   125,   126,   127,     0,   129,   130,   131,   132,   133,
       0,   135,   136,     0,   137,   138,   139,   140,   141,   142,
       0,     0,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   152,     0,     0,     0,   154,   155,   156,   157,
     158,   159,     0,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,
     224,     0,     0,     0,   227,   228,   507,     0,   231,     0,
     232,     0,   233,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,     0,   257,
     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,
     266,     0,     0,   269,     0,   271,   272,   273,   274,   275,
     276,     0,     0,   277,     0,   279,     0,     0,   281,   282,
     283,   284,   285,   286,   287,   288,   508,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,     0,   310,   311,   312,
     313,   314,     0,   315,   316,     0,   318,     0,   319,   320,
     321,   322,   323,   324,     0,   325,   326,     0,     0,   327,
     328,   329,     0,     0,   330,   331,     0,   333,     0,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,     0,     0,   346,   347,   348,     0,   350,   351,
     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,
     361,     0,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,     0,     0,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,     0,   412,   413,   414,   415,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   509,   429,   430,   431,     0,   432,   433,
       0,   434,     0,   436,   437,   438,   439,   440,     0,   441,
     442,     0,     0,   443,   444,   445,   446,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,     0,     0,   456,
     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,
     465,   466,   467,   468,   469,     0,   470,     0,   472,   473,
     474,   475,   476,     0,     0,   477,     0,     0,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   506,
    1907,     0,     0,     0,     0,  1908,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   123,
     124,     0,   125,   126,   127,     0,   129,   130,   131,   132,
     133,     0,   135,   136,     0,   137,   138,   139,   140,   141,
     142,     0,     0,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   152,     0,     0,     0,   154,   155,   156,
     157,   158,   159,     0,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,     0,   219,   220,   221,   222,     0,   223,
       0,   224,     0,     0,     0,   227,   228,   507,     0,   231,
       0,   232,     0,   233,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   266,     0,     0,   269,     0,   271,   272,   273,   274,
     275,   276,     0,     0,   277,     0,   279,     0,     0,   281,
     282,   283,   284,   285,   286,   287,   288,   508,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,     0,   310,   311,
     312,   313,   314,     0,   315,   316,     0,   318,     0,   319,
     320,   321,   322,   323,   324,     0,   325,   326,     0,     0,
     327,   328,   329,     0,     0,   330,   331,     0,   333,     0,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   348,     0,   350,
     351,   352,   353,   354,   355,     0,   356,   357,   358,   359,
     360,   361,     0,   362,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,     0,     0,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,     0,   412,   413,   414,
     415,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   509,   429,   430,   431,     0,   432,
     433,     0,   434,     0,   436,   437,   438,   439,   440,     0,
     441,   442,     0,     0,   443,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,     0,     0,
     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,   468,   469,     0,   470,     0,   472,
     473,   474,   475,   476,     0,     0,   477,     0,     0,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     506,     0,   532,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   507,     0,
    1916,     0,   232,     0,   233,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
       0,   257,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   266,     0,     0,   269,     0,   271,   272,   273,
     274,   275,   276,     0,     0,   277,     0,   279,     0,     0,
     281,   282,  1917,   284,   285,   286,   287,   288,   508,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,     0,   310,
     311,   312,   313,   314,     0,   315,   316,     0,   318,     0,
     319,   320,   321,   322,   323,   324,     0,   325,   326,     0,
       0,   327,   328,   329,     0,     0,   330,   331,     0,   333,
       0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,     0,     0,   346,   347,   348,     0,
     350,   351,   352,   353,   354,   355,     0,   356,   357,   358,
     359,   360,   361,     0,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,     0,     0,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,     0,   412,   413,
     414,   415,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   509,   429,   430,   431,     0,
     432,   433,  1918,   434,     0,   436,  1919,   438,  1920,   440,
       0,   441,   442,     0,     0,   443,   444,   445,   446,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,     0,
       0,   456,   457,  1921,     0,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,     0,   470,     0,
     472,   473,   474,   475,   476,     0,     0,   477,     0,     0,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   506,     0,   532,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,
     120,   121,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   123,   124,     0,   125,   126,   127,     0,   129,   130,
     131,   132,   133,     0,   135,   136,     0,   137,   138,   139,
     140,   141,   142,     0,     0,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   152,     0,     0,     0,   154,
     155,   156,   157,   158,   159,     0,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     198,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,     0,   218,     0,   219,   220,   221,   222,
       0,   223,     0,   224,     0,     0,     0,   227,   228,   507,
       0,   231,     0,   232,     0,   233,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,     0,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   266,     0,     0,   269,     0,   271,   272,
     273,   274,   275,   276,     0,     0,   277,     0,   279,     0,
       0,   281,   282,   283,   284,   285,   286,   287,   288,   508,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,     0,
     310,   311,   312,   313,   314,     0,   315,   316,     0,   318,
       0,   319,   320,   321,   322,   323,   324,     0,   325,   326,
       0,     0,   327,   328,   329,     0,     0,   330,   331,     0,
     333,     0,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,     0,     0,   346,   347,   348,
       0,   350,   351,   352,   353,   354,   355,     0,   356,   357,
     358,   359,   360,   361,     0,   362,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,     0,     0,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,     0,   412,
     413,   414,   415,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   509,   429,   430,   431,
       0,   432,   433,     0,   434,     0,   436,   437,   438,   439,
     440,     0,   441,   442,     0,     0,   443,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,   468,   469,     0,   470,
       0,   472,   473,   474,   475,   476,     0,     0,   477,     0,
       0,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   506,     0,   517,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,   120,   121,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   123,   124,     0,   125,   126,   127,     0,   129,
     130,   131,   132,   133,     0,   135,   136,     0,   137,   138,
     139,   140,   141,   142,     0,     0,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,   152,     0,     0,     0,
     154,   155,   156,   157,   158,   159,     0,   161,   162,   163,
       0,   164,   165,   166,   167,   168,   169,     0,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,     0,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,     0,   219,   220,   221,
     222,     0,   223,     0,   224,     0,     0,     0,   227,   228,
     507,     0,   231,     0,   232,     0,   233,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,     0,   257,   258,   259,   260,   261,   262,   263,
     264,     0,   265,     0,   266,     0,     0,   269,     0,   271,
     272,   273,   274,   275,   276,     0,     0,   277,     0,   279,
       0,     0,   281,   282,   283,   284,   285,   286,   287,   288,
     508,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
       0,   310,   311,   312,   313,   314,     0,   315,   316,     0,
     318,     0,   319,   320,   321,   322,   323,   324,     0,   325,
     326,     0,     0,   327,   328,   329,     0,     0,   330,   331,
       0,   333,     0,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,     0,     0,   346,   347,
     348,     0,   350,   351,   352,   353,   354,   355,     0,   356,
     357,   358,   359,   360,   361,     0,   362,   363,   364,   365,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,     0,     0,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,     0,
     412,   413,   414,   415,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   509,   429,   430,
     431,     0,   432,   433,     0,   434,     0,   436,   437,   438,
     439,   440,     0,   441,   442,     0,     0,   443,   444,   445,
     446,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,     0,     0,   456,   457,   458,     0,   459,   460,   461,
     462,     0,   463,   464,   465,   466,   467,   468,   469,     0,
     470,     0,   472,   473,   474,   475,   476,     0,     0,   477,
       0,     0,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   506,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
     642,   119,   120,   121,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   123,   124,     0,   125,   126,   127,     0,
     129,   130,   131,   132,   133,     0,   135,   136,     0,   137,
     138,   139,   140,   141,   142,     0,     0,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,   152,     0,     0,
       0,   154,   155,   156,   157,   158,   159,     0,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,     0,   218,     0,   219,   220,
     221,   222,     0,   223,     0,   224,     0,     0,     0,   227,
     228,   507,     0,   231,     0,   232,     0,   233,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,     0,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,     0,   266,     0,     0,   269,     0,
     271,   272,   273,   274,   275,   276,     0,     0,   277,     0,
     279,     0,     0,   281,   282,   283,   284,   285,   286,   287,
     288,   508,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,     0,   310,   311,   312,   313,   314,     0,   315,   316,
       0,   318,     0,   319,   320,   321,   322,   323,   324,     0,
     325,   326,     0,     0,   327,   328,   329,     0,     0,   330,
     331,     0,   333,     0,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   348,     0,   350,   351,   352,   353,   354,   355,     0,
     356,   357,   358,   359,   360,   361,     0,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,     0,
     383,   384,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,     0,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
       0,   412,   413,   414,   415,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   509,   429,
     430,   431,     0,   432,   433,     0,   434,     0,   436,   437,
     438,   439,   440,     0,   643,   442,     0,     0,   644,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,   468,   469,
       0,   470,     0,   472,   473,   474,   475,   476,     0,     0,
     477,     0,     0,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   506,     0,   532,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   123,   124,     0,   125,   126,   127,
       0,   129,   130,   131,   132,   133,     0,   135,   136,     0,
     137,   138,   139,   140,   141,   142,     0,     0,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   152,     0,
       0,     0,   154,   155,   156,   157,   158,   159,     0,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,     0,   219,
     220,   221,   222,     0,   223,     0,   224,     0,     0,     0,
     227,   228,   507,     0,   231,     0,   232,     0,   233,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,   265,     0,   266,     0,     0,   269,
       0,   271,   272,   273,   274,   275,   276,     0,     0,   277,
       0,   279,     0,     0,   281,   282,   283,   284,   285,   286,
     287,   288,   508,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,     0,   310,   311,   312,   313,   314,     0,   315,
     316,     0,   318,     0,   319,   320,   321,   322,   323,   324,
       0,   325,   326,     0,     0,   327,   328,   329,     0,     0,
     330,   331,     0,   333,     0,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,     0,     0,
     346,   347,   348,     0,   350,   351,   352,   353,   354,   355,
       0,   356,   357,   358,   359,   360,   361,     0,   362,   363,
     364,   365,   366,   367,   676,   369,     0,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,     0,
       0,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,     0,   412,   413,   414,   415,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   509,
     429,   430,   431,     0,   432,   433,     0,   434,     0,   436,
     437,   438,   439,   440,     0,   441,   442,     0,     0,   443,
     444,   445,   446,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,     0,     0,   456,   457,   458,     0,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,
     469,     0,   470,     0,   472,   473,   474,   475,   476,     0,
       0,   477,     0,     0,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   506,     0,   532,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   507,     0,   231,     0,   232,     0,   233,
     234,   235,     0,   236,   237,   238,   239,   240,   707,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,     0,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   266,     0,     0,
     269,     0,   271,   272,   273,   274,   275,   276,     0,     0,
     277,     0,   279,     0,     0,   281,   282,   283,   284,   285,
     286,   287,   288,   508,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,     0,   310,   311,   312,   313,   314,     0,
     315,   316,     0,   318,     0,   319,   320,   321,   322,   323,
     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,
       0,   330,   331,     0,   333,     0,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,
       0,   346,   347,   348,     0,   350,   351,   352,   353,   354,
     355,     0,   356,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,     0,   383,   384,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
       0,     0,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,     0,   412,   413,   414,   415,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     509,   429,   430,   431,     0,   432,   433,     0,   434,     0,
     436,   437,   438,   439,   440,     0,   441,   442,     0,     0,
     443,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,     0,   470,     0,   472,   473,   474,   475,   476,
       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   506,     0,   532,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,   120,   121,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   123,   124,     0,   125,
     126,   127,     0,   129,   130,   131,   132,   133,     0,   135,
     136,     0,   137,   138,   139,   140,   141,   142,     0,     0,
     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,
     152,     0,     0,     0,   154,   155,   156,   157,   158,   159,
       0,   161,   162,   163,     0,   164,   165,   166,   167,   168,
     169,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,     0,     0,   196,   197,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
       0,   219,   220,   221,   222,     0,   223,     0,   224,     0,
       0,     0,   227,   228,   507,     0,   231,     0,   232,     0,
     233,   234,   235,     0,   236,   237,   238,   239,   240,   710,
     242,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,     0,   257,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   266,     0,
       0,   269,     0,   271,   272,   273,   274,   275,   276,     0,
       0,   277,     0,   279,     0,     0,   281,   282,   283,   284,
     285,   286,   287,   288,   508,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,     0,   310,   311,   312,   313,   314,
       0,   315,   316,     0,   318,     0,   319,   320,   321,   322,
     323,   324,     0,   325,   326,     0,     0,   327,   328,   329,
       0,     0,   330,   331,     0,   333,     0,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
       0,     0,   346,   347,   348,     0,   350,   351,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,     0,
     362,   363,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,     0,     0,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,     0,   412,   413,   414,   415,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   509,   429,   430,   431,     0,   432,   433,     0,   434,
       0,   436,   437,   438,   439,   440,     0,   441,   442,     0,
       0,   443,   444,   445,   446,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,     0,     0,   456,   457,   458,
       0,   459,   460,   461,   462,     0,   463,   464,   465,   466,
     467,   468,   469,     0,   470,     0,   472,   473,   474,   475,
     476,     0,     0,   477,     0,     0,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   506,     0,   532,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   123,   124,     0,
     125,   126,   127,     0,   129,   130,   131,   132,   133,     0,
     135,   136,     0,   137,   138,   139,   140,   141,   142,     0,
       0,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,   152,     0,     0,     0,   154,   155,   156,   157,   158,
     159,     0,   161,   162,   163,     0,   164,   165,   166,   167,
     168,   169,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,     0,     0,   196,   197,   198,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,     0,
     218,     0,   219,   220,   221,   222,     0,   223,     0,   224,
       0,     0,     0,   227,   228,   507,     0,   231,     0,   232,
       0,   233,   234,   235,     0,   236,   237,   238,   239,   240,
     714,   242,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,     0,   257,   258,
     259,   260,   261,   262,   263,   264,     0,   265,     0,   266,
       0,     0,   269,     0,   271,   272,   273,   274,   275,   276,
       0,     0,   277,     0,   279,     0,     0,   281,   282,   283,
     284,   285,   286,   287,   288,   508,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,     0,   310,   311,   312,   313,
     314,     0,   315,   316,     0,   318,     0,   319,   320,   321,
     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,
     329,     0,     0,   330,   331,     0,   333,     0,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,     0,     0,   346,   347,   348,     0,   350,   351,   352,
     353,   354,   355,     0,   356,   357,   358,   359,   360,   361,
       0,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,     0,   383,   384,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,     0,     0,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,     0,   412,   413,   414,   415,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   509,   429,   430,   431,     0,   432,   433,     0,
     434,     0,   436,   437,   438,   439,   440,     0,   441,   442,
       0,     0,   443,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,     0,     0,   456,   457,
     458,     0,   459,   460,   461,   462,     0,   463,   464,   465,
     466,   467,   468,   469,     0,   470,     0,   472,   473,   474,
     475,   476,     0,     0,   477,     0,     0,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   506,     0,
     532,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   123,   124,
       0,   125,   126,   127,     0,   129,   130,   131,   132,   133,
       0,   135,   136,     0,   137,   138,   139,   140,   141,   142,
       0,     0,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   152,     0,     0,     0,   154,   155,   156,   157,
     158,   159,     0,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,
     224,     0,     0,     0,   227,   228,   507,     0,   231,     0,
     232,     0,   233,   234,   235,     0,   236,   237,   238,   239,
     240,   724,   242,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,     0,   257,
     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,
     266,     0,     0,   269,     0,   271,   272,   273,   274,   275,
     276,     0,     0,   277,     0,   279,     0,     0,   281,   282,
     283,   284,   285,   286,   287,   288,   508,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,     0,   310,   311,   312,
     313,   314,     0,   315,   316,     0,   318,     0,   319,   320,
     321,   322,   323,   324,     0,   325,   326,     0,     0,   327,
     328,   329,     0,     0,   330,   331,     0,   333,     0,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,     0,     0,   346,   347,   348,     0,   350,   351,
     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,
     361,     0,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,     0,     0,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,     0,   412,   413,   414,   415,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   509,   429,   430,   431,     0,   432,   433,
       0,   434,     0,   436,   437,   438,   439,   440,     0,   441,
     442,     0,     0,   443,   444,   445,   446,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,     0,     0,   456,
     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,
     465,   466,   467,   468,   469,     0,   470,     0,   472,   473,
     474,   475,   476,     0,     0,   477,     0,     0,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   506,
       0,   532,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   123,
     124,     0,   125,   126,   127,     0,   129,   130,   131,   132,
     133,     0,   135,   136,     0,   137,   138,   139,   140,   141,
     142,     0,     0,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   152,     0,     0,     0,   154,   155,   156,
     157,   158,   159,     0,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,     0,   219,   220,   221,   222,     0,   223,
       0,   224,     0,     0,     0,   227,   228,   507,     0,   231,
       0,   232,     0,   233,   234,   235,     0,   236,   237,   238,
     239,   240,   731,   242,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   266,     0,     0,   269,     0,   271,   272,   273,   274,
     275,   276,     0,     0,   277,     0,   279,     0,     0,   281,
     282,   283,   284,   285,   286,   287,   288,   508,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,     0,   310,   311,
     312,   313,   314,     0,   315,   316,     0,   318,     0,   319,
     320,   321,   322,   323,   324,     0,   325,   326,     0,     0,
     327,   328,   329,     0,     0,   330,   331,     0,   333,     0,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   348,     0,   350,
     351,   352,   353,   354,   355,     0,   356,   357,   358,   359,
     360,   361,     0,   362,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,     0,     0,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,     0,   412,   413,   414,
     415,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   509,   429,   430,   431,     0,   432,
     433,     0,   434,     0,   436,   437,   438,   439,   440,     0,
     441,   442,     0,     0,   443,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,     0,     0,
     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,   468,   469,     0,   470,     0,   472,
     473,   474,   475,   476,     0,     0,   477,     0,     0,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     506,     0,   532,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   507,     0,
     231,     0,   232,     0,   233,   234,   235,     0,   236,   237,
     238,   239,   240,   832,   242,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
       0,   257,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   266,     0,     0,   269,     0,   271,   272,   273,
     274,   275,   276,     0,     0,   277,     0,   279,     0,     0,
     281,   282,   283,   284,   285,   286,   287,   288,   508,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,     0,   310,
     311,   312,   313,   314,     0,   315,   316,     0,   318,     0,
     319,   320,   321,   322,   323,   324,     0,   325,   326,     0,
       0,   327,   328,   329,     0,     0,   330,   331,     0,   333,
       0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,     0,     0,   346,   347,   348,     0,
     350,   351,   352,   353,   354,   355,     0,   356,   357,   358,
     359,   360,   361,     0,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,     0,     0,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,     0,   412,   413,
     414,   415,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   509,   429,   430,   431,     0,
     432,   433,     0,   434,     0,   436,   437,   438,   439,   440,
       0,   441,   442,     0,     0,   443,   444,   445,   446,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,     0,
       0,   456,   457,   458,     0,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,     0,   470,     0,
     472,   473,   474,   475,   476,     0,     0,   477,     0,     0,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   506,     0,   532,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,
     120,   121,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   123,   124,     0,   125,   126,   127,     0,   129,   130,
     131,   132,   133,     0,   135,   136,     0,   137,   138,   139,
     140,   141,   142,     0,     0,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   152,     0,     0,     0,   154,
     155,   156,   157,   158,   159,     0,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     198,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,     0,   218,     0,   219,   220,   221,   222,
       0,   223,     0,   224,     0,     0,     0,   227,   228,   507,
       0,   231,     0,   232,     0,   233,   234,   235,     0,   236,
     237,   238,   239,   240,   835,   242,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,     0,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   266,     0,     0,   269,     0,   271,   272,
     273,   274,   275,   276,     0,     0,   277,     0,   279,     0,
       0,   281,   282,   283,   284,   285,   286,   287,   288,   508,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,     0,
     310,   311,   312,   313,   314,     0,   315,   316,     0,   318,
       0,   319,   320,   321,   322,   323,   324,     0,   325,   326,
       0,     0,   327,   328,   329,     0,     0,   330,   331,     0,
     333,     0,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,     0,     0,   346,   347,   348,
       0,   350,   351,   352,   353,   354,   355,     0,   356,   357,
     358,   359,   360,   361,     0,   362,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,     0,     0,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,     0,   412,
     413,   414,   415,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   509,   429,   430,   431,
       0,   432,   433,     0,   434,     0,   436,   437,   438,   439,
     440,     0,   441,   442,     0,     0,   443,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,   468,   469,     0,   470,
       0,   472,   473,   474,   475,   476,     0,     0,   477,     0,
       0,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   506,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,   120,   121,     0,     0,     0,     0,     0,     0,   955,
       0,     0,   123,   124,     0,   125,   126,   127,     0,   129,
     130,   131,   132,   133,     0,   135,   136,     0,   137,   138,
     139,   140,   141,   142,     0,     0,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,   152,     0,     0,     0,
     154,   155,   156,   157,   158,   159,     0,   161,   162,   163,
       0,   164,   165,   166,   167,   168,   169,     0,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,     0,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,     0,   219,   220,   221,
     222,     0,   223,     0,   224,     0,     0,     0,   227,   228,
     507,     0,   231,     0,   232,     0,   233,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,     0,   257,   258,   259,   260,   261,   262,   263,
     264,     0,   265,     0,   266,     0,     0,   269,     0,   271,
     272,   273,   274,   275,   276,     0,     0,   277,     0,   279,
       0,     0,   281,   282,   283,   284,   285,   286,   287,   288,
     508,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
       0,   310,   311,   312,   313,   314,     0,   315,   316,     0,
     318,     0,   319,   320,   321,   322,   323,   324,     0,   325,
     326,     0,     0,   327,   328,   329,     0,     0,   330,   331,
       0,   333,     0,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,     0,     0,   346,   347,
     348,     0,   350,   351,   352,   353,   354,   355,     0,   356,
     357,   358,   359,   360,   361,     0,   362,   363,   364,   365,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,     0,     0,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,     0,
     412,   413,   414,   415,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   509,   429,   430,
     431,     0,   432,   433,     0,   434,     0,   436,   437,   438,
     439,   440,     0,   441,   442,     0,     0,   443,   444,   445,
     446,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,     0,     0,   456,   457,   458,     0,   459,   460,   461,
     462,     0,   463,   464,   465,   466,   467,   468,   469,     0,
     470,     0,   472,   473,   474,   475,   476,     0,     0,   477,
       0,     0,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   506,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,     0,     0,     0,     0,     0,     0,
     978,     0,     0,   123,   124,     0,   125,   126,   127,     0,
     129,   130,   131,   132,   133,     0,   135,   136,     0,   137,
     138,   139,   140,   141,   142,     0,     0,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,   152,     0,     0,
       0,   154,   155,   156,   157,   158,   159,     0,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,     0,   218,     0,   219,   220,
     221,   222,     0,   223,     0,   224,     0,     0,     0,   227,
     228,   507,     0,   231,     0,   232,     0,   233,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,     0,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,     0,   266,     0,     0,   269,     0,
     271,   272,   273,   274,   275,   276,     0,     0,   277,     0,
     279,     0,     0,   281,   282,   283,   284,   285,   286,   287,
     288,   508,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,     0,   310,   311,   312,   313,   314,     0,   315,   316,
       0,   318,     0,   319,   320,   321,   322,   323,   324,     0,
     325,   326,     0,     0,   327,   328,   329,     0,     0,   330,
     331,     0,   333,     0,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   348,     0,   350,   351,   352,   353,   354,   355,     0,
     356,   357,   358,   359,   360,   361,     0,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,     0,
     383,   384,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,     0,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
       0,   412,   413,   414,   415,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   509,   429,
     430,   431,     0,   432,   433,     0,   434,     0,   436,   437,
     438,   439,   440,     0,   441,   442,     0,     0,   443,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,   468,   469,
       0,   470,     0,   472,   473,   474,   475,   476,     0,     0,
     477,     0,     0,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   506,     0,   532,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   123,   124,     0,   125,   126,   127,
       0,   129,   130,   131,   132,   133,     0,   135,   136,     0,
     137,   138,   139,   140,   141,   142,     0,     0,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   152,     0,
       0,     0,   154,   155,   156,   157,   158,   159,     0,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,     0,   219,
     220,   221,   222,     0,   223,     0,   224,     0,     0,     0,
     227,   228,   507,     0,   231,     0,   232,     0,   233,   234,
     235,     0,   236,   237,   238,   239,   240,  1322,   242,     0,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,     0,   257,   258,   259,   260,   261,
     262,   263,   264,     0,   265,     0,   266,     0,     0,   269,
       0,   271,   272,   273,   274,   275,   276,     0,     0,   277,
       0,   279,     0,     0,   281,   282,   283,   284,   285,   286,
     287,   288,   508,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,     0,   310,   311,   312,   313,   314,     0,   315,
     316,     0,   318,     0,   319,   320,   321,   322,   323,   324,
       0,   325,   326,     0,     0,   327,   328,   329,     0,     0,
     330,   331,     0,   333,     0,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,     0,     0,
     346,   347,   348,     0,   350,   351,   352,   353,   354,   355,
       0,   356,   357,   358,   359,   360,   361,     0,   362,   363,
     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,     0,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,     0,
       0,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,     0,   412,   413,   414,   415,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   509,
     429,   430,   431,     0,   432,   433,     0,   434,     0,   436,
     437,   438,   439,   440,     0,   441,   442,     0,     0,   443,
     444,   445,   446,   447,     0,   448,   449,   450,   451,   452,
     453,   454,   455,     0,     0,   456,   457,   458,     0,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,
     469,     0,   470,     0,   472,   473,   474,   475,   476,     0,
       0,   477,     0,     0,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   506,     0,   532,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   507,     0,   231,     0,   232,     0,   233,
     234,   235,     0,   236,   237,   238,   239,   240,  1324,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,     0,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   266,     0,     0,
     269,     0,   271,   272,   273,   274,   275,   276,     0,     0,
     277,     0,   279,     0,     0,   281,   282,   283,   284,   285,
     286,   287,   288,   508,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,     0,   310,   311,   312,   313,   314,     0,
     315,   316,     0,   318,     0,   319,   320,   321,   322,   323,
     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,
       0,   330,   331,     0,   333,     0,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,
       0,   346,   347,   348,     0,   350,   351,   352,   353,   354,
     355,     0,   356,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,     0,   383,   384,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
       0,     0,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,     0,   412,   413,   414,   415,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     509,   429,   430,   431,     0,   432,   433,     0,   434,     0,
     436,   437,   438,   439,   440,     0,   441,   442,     0,     0,
     443,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,     0,   470,     0,   472,   473,   474,   475,   476,
       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   506,     0,   532,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,   120,   121,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   123,   124,     0,   125,
     126,   127,     0,   129,   130,   131,   132,   133,     0,   135,
     136,     0,   137,   138,   139,   140,   141,   142,     0,     0,
     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,
     152,     0,     0,     0,   154,   155,   156,   157,   158,   159,
       0,   161,   162,   163,     0,   164,   165,   166,   167,   168,
     169,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,     0,     0,   196,   197,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
       0,   219,   220,   221,   222,     0,   223,     0,   224,     0,
       0,     0,   227,   228,   507,     0,   231,     0,   232,     0,
     233,   234,   235,     0,   236,   237,   238,   239,   240,  1327,
     242,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,     0,   257,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   266,     0,
       0,   269,     0,   271,   272,   273,   274,   275,   276,     0,
       0,   277,     0,   279,     0,     0,   281,   282,   283,   284,
     285,   286,   287,   288,   508,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,     0,   310,   311,   312,   313,   314,
       0,   315,   316,     0,   318,     0,   319,   320,   321,   322,
     323,   324,     0,   325,   326,     0,     0,   327,   328,   329,
       0,     0,   330,   331,     0,   333,     0,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
       0,     0,   346,   347,   348,     0,   350,   351,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,     0,
     362,   363,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,     0,     0,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,     0,   412,   413,   414,   415,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   509,   429,   430,   431,     0,   432,   433,     0,   434,
       0,   436,   437,   438,   439,   440,     0,   441,   442,     0,
       0,   443,   444,   445,   446,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,     0,     0,   456,   457,   458,
       0,   459,   460,   461,   462,     0,   463,   464,   465,   466,
     467,   468,   469,     0,   470,     0,   472,   473,   474,   475,
     476,     0,     0,   477,     0,     0,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   506,     0,   532,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   123,   124,     0,
     125,   126,   127,     0,   129,   130,   131,   132,   133,     0,
     135,   136,     0,   137,   138,   139,   140,   141,   142,     0,
       0,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,   152,     0,     0,     0,   154,   155,   156,   157,   158,
     159,     0,   161,   162,   163,     0,   164,   165,   166,   167,
     168,   169,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,     0,     0,   196,   197,   198,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,     0,
     218,     0,   219,   220,   221,   222,     0,   223,     0,   224,
       0,     0,     0,   227,   228,   507,     0,   231,     0,   232,
       0,   233,   234,   235,     0,   236,   237,   238,   239,   240,
    1329,   242,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,     0,   257,   258,
     259,   260,   261,   262,   263,   264,     0,   265,     0,   266,
       0,     0,   269,     0,   271,   272,   273,   274,   275,   276,
       0,     0,   277,     0,   279,     0,     0,   281,   282,   283,
     284,   285,   286,   287,   288,   508,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,     0,   310,   311,   312,   313,
     314,     0,   315,   316,     0,   318,     0,   319,   320,   321,
     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,
     329,     0,     0,   330,   331,     0,   333,     0,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,     0,     0,   346,   347,   348,     0,   350,   351,   352,
     353,   354,   355,     0,   356,   357,   358,   359,   360,   361,
       0,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,     0,   383,   384,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,     0,     0,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,     0,   412,   413,   414,   415,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   509,   429,   430,   431,     0,   432,   433,     0,
     434,     0,   436,   437,   438,   439,   440,     0,   441,   442,
       0,     0,   443,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,     0,     0,   456,   457,
     458,     0,   459,   460,   461,   462,     0,   463,   464,   465,
     466,   467,   468,   469,     0,   470,     0,   472,   473,   474,
     475,   476,     0,     0,   477,     0,     0,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   506,     0,
     532,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   123,   124,
       0,   125,   126,   127,     0,   129,   130,   131,   132,   133,
       0,   135,   136,     0,   137,   138,   139,   140,   141,   142,
       0,     0,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   152,     0,     0,     0,   154,   155,   156,   157,
     158,   159,     0,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,
     224,     0,     0,     0,   227,   228,   507,     0,   231,     0,
     232,     0,   233,   234,   235,     0,   236,   237,   238,   239,
     240,  2158,   242,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,     0,   257,
     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,
     266,     0,     0,   269,     0,   271,   272,   273,   274,   275,
     276,     0,     0,   277,     0,   279,     0,     0,   281,   282,
     283,   284,   285,   286,   287,   288,   508,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,     0,   310,   311,   312,
     313,   314,     0,   315,   316,     0,   318,     0,   319,   320,
     321,   322,   323,   324,     0,   325,   326,     0,     0,   327,
     328,   329,     0,     0,   330,   331,     0,   333,     0,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,     0,     0,   346,   347,   348,     0,   350,   351,
     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,
     361,     0,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,     0,     0,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,     0,   412,   413,   414,   415,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   509,   429,   430,   431,     0,   432,   433,
       0,   434,     0,   436,   437,   438,   439,   440,     0,   441,
     442,     0,     0,   443,   444,   445,   446,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,     0,     0,   456,
     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,
     465,   466,   467,   468,   469,     0,   470,     0,   472,   473,
     474,   475,   476,     0,     0,   477,     0,     0,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   754,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,   755,     0,     0,  -750,     0,   756,   123,
     124,     0,   125,   126,   127,   757,   129,   130,   131,     0,
     758,   759,   760,   761,     0,   137,   138,   139,   140,   141,
     142,     0,     0,   143,   144,   762,   763,   147,     0,   148,
     149,   150,   151,     0,     0,   764,     0,   765,   155,   156,
     157,   158,   159,   766,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   767,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   768,   769,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   770,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,     0,   212,   213,   214,   215,   216,
       0,     0,   218,     0,   219,   220,   771,   222,     0,   223,
       0,   224,   772,     0,   773,   227,   228,  -750,   774,   231,
       0,   232,     0,     0,     0,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   776,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   777,
       0,   258,   259,   260,   261,   262,   778,   779,     0,   780,
       0,   266,   781,   782,   269,   783,   271,   272,   273,   274,
     275,   276,     0,     0,   277,   784,   279,   785,     0,   281,
     282,   283,   284,   285,   286,   287,   288,   786,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   787,   788,   789,   311,
     312,   313,     0,     0,   315,   316,   790,   318,     0,     0,
     320,   791,   322,   323,   324,     0,   325,   326,     0,     0,
     327,   328,   329,     0,     0,   330,     0,   792,   333,   793,
       0,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,     0,     0,   346,   347,     0,   794,   350,
     351,     0,   353,   354,   355,     0,   356,   357,   358,   359,
     360,   361,     0,   362,   363,   364,   795,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   796,   386,
     387,   388,   797,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,     0,   798,   401,   402,   403,   404,
     405,   406,   799,   408,   409,   410,   800,   412,   413,   801,
     415,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   802,   429,     0,   431,     0,   432,
     433,     0,   434,   803,   436,   437,   438,   439,   440,     0,
     804,   805,     0,     0,   443,   444,     0,   446,     0,     0,
     448,   449,   806,   451,   452,   453,   454,   455,   807,     0,
     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,     0,   808,     0,   470,   809,   472,
     473,   474,   475,   476,     0,     0,   477,     0,     0,   478,
     479,   480,   481,   482,   483,   506,     0,   532,     0,     0,
       0,     0,     0,     0,     0,     0,   495,   496,   497,   498,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   507,     0,   231,     0,   232,     0,   233,
     234,   235,     0,   236,   237,   238,   239,   240,  2864,   242,
       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,
     252,   253,   254,     0,   255,     0,   257,   258,   259,   260,
     261,   262,   263,   264,     0,   265,     0,   266,     0,     0,
     269,     0,   271,   272,   273,   274,   275,   276,     0,     0,
     277,     0,   279,     0,     0,   281,   282,   283,   284,   285,
     286,   287,   288,   508,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,     0,   310,   311,   312,   313,   314,     0,
     315,   316,     0,   318,     0,   319,   320,   321,   322,   323,
     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,
       0,   330,   331,     0,   333,     0,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,
       0,   346,   347,   348,     0,   350,   351,   352,   353,   354,
     355,     0,   356,   357,   358,   359,   360,   361,     0,   362,
     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,     0,   383,   384,     0,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
       0,     0,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,     0,   412,   413,   414,   415,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     509,   429,   430,   431,     0,   432,   433,     0,   434,     0,
     436,   437,   438,   439,   440,     0,   441,   442,     0,     0,
     443,   444,   445,   446,   447,     0,   448,   449,   450,   451,
     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,
     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,
     468,   469,     0,   470,     0,   472,   473,   474,   475,   476,
       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   506,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,   120,   121,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   123,   124,     0,   125,
     126,   127,     0,   129,   130,   131,   132,   133,     0,   135,
     136,     0,   137,   138,   139,   140,   141,   142,     0,     0,
     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,
     152,     0,     0,     0,   154,   155,   156,   157,   158,   159,
       0,   161,   162,   163,     0,   164,   165,   166,   167,   168,
     169,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,     0,     0,   196,   197,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
       0,   219,   220,   221,   222,     0,   223,     0,   224,     0,
       0,     0,   227,   228,   507,     0,   231,     0,   232,     0,
     233,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,     0,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,     0,   257,   258,   259,
     260,   261,   262,   263,   264,     0,   265,     0,   266,     0,
       0,   269,     0,   271,   272,   273,   274,   275,   276,     0,
       0,   277,     0,   279,     0,     0,   281,   282,   283,   284,
     285,   286,   287,   288,   508,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,     0,   310,   311,   312,   313,   314,
       0,   315,   316,     0,   318,     0,   319,   320,   321,   322,
     323,   324,     0,   325,   326,     0,     0,   327,   328,   329,
       0,     0,   330,   331,     0,   333,     0,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
       0,     0,   346,   347,   348,     0,   350,   351,   352,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,     0,
     362,   363,   364,   365,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,     0,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,     0,     0,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,     0,   412,   413,   414,   415,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   509,   429,   430,   431,     0,   432,   433,     0,   434,
       0,   436,   437,   438,   439,   440,     0,   441,   442,     0,
       0,   443,   444,   445,   446,   447,     0,   448,   449,   450,
     451,   452,   453,   454,   455,     0,     0,   456,   457,   458,
       0,   459,   460,   461,   462,     0,   463,   464,   465,   466,
     467,   468,   469,     0,   470,     0,   472,   473,   474,   475,
     476,     0,     0,   477,     0,     0,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   506,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   123,   124,     0,
     125,   126,   127,     0,   129,   130,   131,   132,   133,     0,
     135,   136,     0,   137,   138,   139,   140,   141,   142,     0,
       0,   143,   144,   145,   146,   147,     0,   148,   149,   150,
     151,   152,     0,     0,     0,   154,   155,   156,   157,   158,
     159,     0,   161,   162,   163,     0,   164,   165,   166,   167,
     168,   169,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,     0,     0,   196,   197,   198,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,     0,
     218,     0,   219,   220,   221,   222,     0,   223,     0,   224,
       0,     0,     0,   227,   228,   507,     0,   654,     0,   232,
       0,   233,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,     0,   244,   245,   246,   247,     0,   248,   249,
     250,   251,   252,   253,   254,     0,   255,     0,   257,   258,
     259,   260,   261,   262,   263,   264,     0,   265,     0,   266,
       0,     0,   269,     0,   271,   272,   273,   274,   275,   276,
       0,     0,   277,     0,   279,     0,     0,   281,   282,   655,
     284,   285,   286,   287,   288,   508,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,     0,   310,   311,   312,   313,
     314,     0,   315,   316,     0,   318,     0,   319,   320,   321,
     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,
     329,     0,     0,   330,   331,     0,   333,     0,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,
       0,     0,     0,   346,   347,   348,     0,   350,   351,   352,
     353,   354,   355,     0,   356,   357,   358,   359,   360,   361,
       0,   362,   363,   364,   365,   366,   367,   368,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,     0,   383,   384,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   656,   395,   396,   397,   398,
     399,   400,     0,     0,   401,   402,   403,   404,   657,   406,
     407,   408,   409,   410,     0,   412,   413,   414,   415,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   509,   429,   430,   431,     0,   432,   433,     0,
     434,     0,   436,   437,   438,   439,   440,     0,   658,   442,
       0,     0,   443,   444,   445,   446,   447,     0,   448,   449,
     450,   451,   452,   453,   454,   455,     0,     0,   456,   457,
     458,     0,   459,   460,   461,   462,     0,   463,   464,   465,
     466,   467,   468,   469,     0,   470,     0,   472,   473,   474,
     475,   476,     0,     0,   477,     0,     0,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   506,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   123,   124,
       0,   125,   126,   127,     0,   129,   130,   131,   132,   133,
       0,   135,   136,     0,   137,   138,   139,   140,   141,   142,
       0,     0,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   152,     0,     0,     0,   154,   155,   156,   157,
     158,   159,     0,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,
     224,     0,     0,     0,   227,   228,   507,     0,   231,     0,
     232,     0,   233,   234,   235,     0,   236,   237,   238,   239,
     240,   828,   242,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,     0,   257,
     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,
     266,     0,     0,   269,     0,   271,   272,   273,   274,   275,
     276,     0,     0,   277,     0,   279,     0,     0,   281,   282,
     283,   284,   285,   286,   287,   288,   508,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,     0,   310,   311,   312,
     313,   314,     0,   315,   316,     0,   318,     0,   319,   320,
     321,   322,   323,   324,     0,   325,   326,     0,     0,   327,
     328,   329,     0,     0,   330,   331,     0,   333,     0,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
       0,     0,     0,     0,   346,   347,   348,     0,   350,   351,
     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,
     361,     0,   362,   363,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,     0,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,     0,     0,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,     0,   412,   413,   414,   415,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   509,   429,   430,   431,     0,   432,   433,
       0,   434,     0,   436,   437,   438,   439,   440,     0,   441,
     442,     0,     0,   443,   444,   445,   446,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,     0,     0,   456,
     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,
     465,   466,   467,   468,   469,     0,   470,     0,   472,   473,
     474,   475,   476,     0,     0,   477,     0,     0,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   506,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   123,
     124,     0,   125,   126,   127,     0,   129,   130,   131,   132,
     133,     0,   135,   136,     0,   137,   138,   139,   140,   141,
     142,     0,     0,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   152,     0,     0,     0,   154,   155,   156,
     157,   158,   159,     0,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,     0,   219,   220,   221,   222,     0,   223,
       0,   224,     0,     0,     0,   227,   228,   507,     0,   231,
       0,   232,     0,   233,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,     0,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,     0,
     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,
       0,   266,     0,     0,   269,     0,   271,   272,   273,   274,
     275,   276,     0,     0,   277,     0,   279,     0,     0,   281,
     282,   283,   284,   285,   286,   287,   288,   508,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,     0,   310,   311,
     312,   313,   314,     0,   315,   316,     0,   318,     0,   319,
     320,   321,   322,   323,   324,     0,   325,   326,     0,     0,
     327,   328,   329,     0,     0,   330,   331,     0,   333,     0,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,     0,     0,   346,   347,   348,     0,   350,
     351,   352,   353,   354,   355,     0,   356,   357,   358,   359,
     360,   361,     0,   362,   363,   364,   365,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,     0,   383,   384,     0,   386,
     387,   388,   389,   390,   391,   392,   393,   656,   395,   396,
     397,   398,   399,   400,     0,     0,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,     0,   412,   413,   414,
     415,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   509,   429,   430,   431,     0,   432,
     433,     0,   434,     0,   436,   437,   438,   439,   440,     0,
     658,   442,     0,     0,   443,   444,   445,   446,   447,     0,
     448,   449,   450,   451,   452,   453,   454,   455,     0,     0,
     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,   468,   469,     0,   470,     0,   472,
     473,   474,   475,   476,     0,     0,   477,     0,     0,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     506,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,  1623,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   507,     0,
     231,     0,   232,     0,   233,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,     0,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
       0,   257,   258,   259,   260,   261,   262,   263,   264,     0,
     265,     0,   266,     0,     0,   269,     0,   271,   272,   273,
     274,   275,   276,     0,     0,   277,     0,   279,     0,     0,
     281,   282,   283,   284,   285,   286,   287,   288,   508,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,     0,   310,
     311,   312,   313,   314,     0,   315,   316,     0,   318,     0,
     319,   320,   321,   322,   323,   324,     0,   325,   326,     0,
       0,   327,   328,   329,     0,     0,   330,   331,     0,   333,
       0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,     0,     0,   346,   347,   348,     0,
     350,   351,   352,   353,   354,   355,     0,   356,   357,   358,
     359,   360,   361,     0,   362,   363,   364,   365,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,     0,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,     0,     0,   401,   402,   403,
     404,   405,     0,   407,   408,   409,   410,     0,   412,   413,
     414,   415,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   509,   429,   430,   431,     0,
     432,   433,     0,   434,     0,   436,   437,   438,   439,   440,
       0,   441,   442,     0,     0,   443,   444,   445,   446,   447,
       0,   448,   449,   450,   451,   452,   453,   454,   455,     0,
       0,   456,   457,   458,     0,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,   468,   469,     0,   470,     0,
     472,   473,   474,   475,   476,     0,     0,   477,     0,     0,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   506,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,
     120,   121,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   123,   124,     0,   125,   126,   127,     0,   129,   130,
     131,   132,   133,     0,   135,   136,     0,   137,   138,   139,
     140,   141,   142,     0,     0,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   152,     0,     0,     0,   154,
     155,   156,   157,   158,   159,     0,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     198,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,     0,   218,     0,   219,   220,   221,   222,
       0,   223,     0,   224,     0,     0,     0,   227,   228,   507,
       0,   231,     0,   232,     0,   233,   234,   235,     0,   236,
     237,   238,   239,   240,  1793,   242,     0,   244,   245,   246,
     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,
     255,     0,   257,   258,   259,   260,   261,   262,   263,   264,
       0,   265,     0,   266,     0,     0,   269,     0,   271,   272,
     273,   274,   275,   276,     0,     0,   277,     0,   279,     0,
       0,   281,   282,   283,   284,   285,   286,   287,   288,   508,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,     0,
     310,   311,   312,   313,   314,     0,   315,   316,     0,   318,
       0,   319,   320,   321,   322,   323,   324,     0,   325,   326,
       0,     0,   327,   328,   329,     0,     0,   330,   331,     0,
     333,     0,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,     0,     0,     0,     0,   346,   347,   348,
       0,   350,   351,   352,   353,   354,   355,     0,   356,   357,
     358,   359,   360,   361,     0,   362,   363,   364,   365,   366,
     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,
       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,     0,     0,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,     0,   412,
     413,   414,   415,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   509,   429,   430,   431,
       0,   432,   433,     0,   434,     0,   436,   437,   438,   439,
     440,     0,   441,   442,     0,     0,   443,   444,   445,   446,
     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,
       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,
       0,   463,   464,   465,   466,   467,   468,   469,     0,   470,
       0,   472,   473,   474,   475,   476,     0,     0,   477,     0,
       0,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   506,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,   120,   121,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   123,   124,     0,   125,   126,   127,     0,   129,
     130,   131,   132,   133,     0,   135,   136,     0,   137,   138,
     139,   140,   141,   142,     0,     0,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,   152,     0,     0,     0,
     154,   155,   156,   157,   158,   159,     0,   161,   162,   163,
       0,   164,   165,   166,   167,   168,   169,     0,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,     0,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,     0,   219,   220,   221,
     222,     0,   223,     0,   224,     0,     0,     0,   227,   228,
     507,     0,   231,     0,   232,     0,   233,   234,   235,     0,
     236,   237,   238,   239,   240,  2145,   242,     0,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,     0,   257,   258,   259,   260,   261,   262,   263,
     264,     0,   265,     0,   266,     0,     0,   269,     0,   271,
     272,   273,   274,   275,   276,     0,     0,   277,     0,   279,
       0,     0,   281,   282,   283,   284,   285,   286,   287,   288,
     508,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
       0,   310,   311,   312,   313,   314,     0,   315,   316,     0,
     318,     0,   319,   320,   321,   322,   323,   324,     0,   325,
     326,     0,     0,   327,   328,   329,     0,     0,   330,   331,
       0,   333,     0,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,     0,     0,   346,   347,
     348,     0,   350,   351,   352,   353,   354,   355,     0,   356,
     357,   358,   359,   360,   361,     0,   362,   363,   364,   365,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,     0,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,     0,     0,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,     0,
     412,   413,   414,   415,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   509,   429,   430,
     431,     0,   432,   433,     0,   434,     0,   436,   437,   438,
     439,   440,     0,   441,   442,     0,     0,   443,   444,   445,
     446,   447,     0,   448,   449,   450,   451,   452,   453,   454,
     455,     0,     0,   456,   457,   458,     0,   459,   460,   461,
     462,     0,   463,   464,   465,   466,   467,   468,   469,     0,
     470,     0,   472,   473,   474,   475,   476,     0,     0,   477,
       0,     0,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   506,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   123,   124,     0,   125,   126,   127,     0,
     129,   130,   131,   132,   133,     0,   135,   136,     0,   137,
     138,   139,   140,   141,   142,     0,     0,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,   152,     0,     0,
       0,   154,   155,   156,   157,   158,   159,     0,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,     0,   218,     0,   219,   220,
     221,   222,     0,   223,     0,   224,     0,     0,     0,   227,
     228,   507,     0,   231,     0,   232,     0,   233,   234,   235,
       0,   236,   237,   238,   239,   240,  2160,   242,     0,   244,
     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,
     254,     0,   255,     0,   257,   258,   259,   260,   261,   262,
     263,   264,     0,   265,     0,   266,     0,     0,   269,     0,
     271,   272,   273,   274,   275,   276,     0,     0,   277,     0,
     279,     0,     0,   281,   282,   283,   284,   285,   286,   287,
     288,   508,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,     0,   310,   311,   312,   313,   314,     0,   315,   316,
       0,   318,     0,   319,   320,   321,   322,   323,   324,     0,
     325,   326,     0,     0,   327,   328,   329,     0,     0,   330,
     331,     0,   333,     0,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,     0,     0,     0,     0,   346,
     347,   348,     0,   350,   351,   352,   353,   354,   355,     0,
     356,   357,   358,   359,   360,   361,     0,   362,   363,   364,
     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,     0,
     383,   384,     0,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,     0,     0,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
       0,   412,   413,   414,   415,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   509,   429,
     430,   431,     0,   432,   433,     0,   434,     0,   436,   437,
     438,   439,   440,     0,   441,   442,     0,     0,   443,   444,
     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,
     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,
     461,   462,     0,   463,   464,   465,   466,   467,   468,   469,
       0,   470,     0,   472,   473,   474,   475,   476,     0,     0,
     477,     0,     0,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   754,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,   755,     0,
       0,     0,     0,   756,   123,   124,     0,   125,   126,   127,
     757,   129,   130,   131,     0,   758,   759,   760,   761,     0,
     137,   138,   139,   140,   141,   142,     0,     0,   143,   144,
     762,   763,   147,     0,   148,   149,   150,   151,     0,     0,
     764,     0,   765,   155,   156,   157,   158,   159,   766,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     767,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   768,   769,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   770,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,     0,
     212,   213,   214,   215,   216,     0,     0,   218,     0,   219,
     220,   771,   222,     0,   223,     0,   224,   772,     0,   773,
     227,   228,     0,   774,   231,     0,   232,     0,     0,     0,
     235,     0,   236,   237,   238,   239,   240,   775,   242,   776,
     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,
     253,   254,     0,   255,   777,     0,   258,   259,   260,   261,
     262,   778,   779,     0,   780,     0,   266,   781,   782,   269,
     783,   271,   272,   273,   274,   275,   276,     0,     0,   277,
     784,   279,   785,     0,   281,   282,   283,   284,   285,   286,
     287,   288,   786,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   787,   788,   789,   311,   312,   313,     0,     0,   315,
     316,   790,   318,     0,     0,   320,   791,   322,   323,   324,
       0,   325,   326,     0,     0,   327,   328,   329,     0,     0,
     330,     0,   792,   333,   793,     0,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,     0,     0,     0,     0,
     346,   347,     0,   794,   350,   351,     0,   353,   354,   355,
       0,   356,   357,   358,   359,   360,   361,     0,   362,   363,
     364,   795,   366,   367,   368,   369,     0,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
       0,   383,   384,   796,   386,   387,   388,   797,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,     0,
     798,   401,   402,   403,   404,   405,   406,   799,   408,   409,
     410,   800,   412,   413,   801,   415,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   802,
     429,     0,   431,     0,   432,   433,     0,   434,   803,   436,
     437,   438,   439,   440,     0,   804,   805,     0,     0,   443,
     444,     0,   446,     0,     0,   448,   449,   806,   451,   452,
     453,   454,   455,   807,     0,   456,   457,   458,     0,   459,
     460,   461,   462,     0,   463,   464,   465,   466,   467,     0,
     808,     0,   470,   809,   472,   473,   474,   475,   476,     0,
       0,   477,     0,     0,   478,   479,   480,   481,   482,   483,
     754,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   495,   496,   497,   498,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,   755,     0,     0,     0,     0,   756,
     123,   124,     0,   125,   126,   127,   757,   129,   130,   131,
       0,   758,   759,   760,   761,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   762,   763,   147,     0,
     148,   149,   150,   151,     0,     0,   764,     0,   765,   155,
     156,   157,   158,   159,   766,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   767,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   768,   769,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   770,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,     0,   212,   213,   214,   215,
     216,     0,     0,   218,     0,   219,   220,   771,   222,     0,
     223,     0,   224,   772,     0,   773,   227,   228,     0,   774,
     231,     0,   232,     0,     0,     0,   235,     0,   236,   237,
     238,   239,   240,   241,   242,   776,   244,   245,   246,   247,
       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,
     777,     0,   258,   259,   260,   261,   262,   778,   779,     0,
     780,     0,   266,   781,   782,   269,   783,   271,   272,   273,
     274,   275,   276,     0,     0,   277,   784,   279,   785,     0,
     281,   282,   283,   284,   285,   286,   287,   288,   786,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   787,   788,   789,
     311,   312,   313,     0,     0,   315,   316,   790,   318,     0,
       0,   320,   791,   322,   323,   324,     0,   325,   326,     0,
       0,   327,   328,   329,     0,     0,   330,     0,   792,   333,
     793,     0,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,     0,     0,     0,     0,   346,   347,     0,   794,
     350,   351,     0,   353,   354,   355,     0,   356,   357,   358,
     359,   360,   361,     0,   362,   363,   364,   795,   366,   367,
     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,     0,   383,   384,   796,
     386,   387,   388,   797,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,     0,   798,   401,   402,   403,
     404,   405,   406,   799,   408,   409,   410,   800,   412,   413,
     801,   415,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   802,   429,     0,   431,     0,
     432,   433,     0,   434,   803,   436,   437,   438,   439,   440,
       0,   804,   805,     0,     0,   443,   444,     0,   446,     0,
       0,   448,   449,   806,   451,   452,   453,   454,   455,   807,
       0,   456,   457,   458,     0,   459,   460,   461,   462,     0,
     463,   464,   465,   466,   467,     0,   808,     0,   470,   809,
     472,   473,   474,   475,   476,     0,     0,   477,     0,     0,
     478,   479,   480,   481,   482,   483,   754,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   495,   496,   497,
     498,     0,     0,     0,     0,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,   120,   121,     0,     0,     0,
     755,     0,     0,     0,     0,   756,   123,   124,     0,   125,
     126,   127,   757,   129,   130,   131,     0,   758,   759,   760,
     761,     0,   137,   138,   139,   140,   141,   142,     0,     0,
     143,   144,   762,   763,   147,     0,   148,   149,   150,   151,
       0,     0,   764,     0,   765,   155,   156,   157,   158,   159,
     766,   161,   162,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   767,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   768,   769,   183,     0,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,     0,     0,   196,   197,   770,   199,   200,     0,   201,
     202,   203,     0,  1778,   205,   206,     0,   207,   208,   209,
     210,     0,   212,   213,   214,   215,   216,     0,     0,   218,
       0,   219,   220,   771,   222,     0,   223,     0,   224,   772,
       0,   773,   227,   228,     0,   774,   231,     0,   232,     0,
       0,     0,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   776,   244,   245,   246,   247,     0,   248,   249,   250,
     251,   252,   253,   254,     0,   255,   777,     0,   258,   259,
     260,   261,   262,   778,   779,     0,   780,     0,   266,   781,
     782,   269,   783,   271,   272,   273,   274,   275,   276,     0,
       0,   277,   784,   279,   785,     0,   281,   282,   283,   284,
     285,   286,   287,   288,   786,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   787,   788,   789,   311,   312,   313,     0,
       0,   315,   316,   790,   318,     0,     0,   320,   791,   322,
     323,   324,     0,   325,   326,     0,     0,   327,   328,   329,
       0,     0,   330,     0,   792,   333,   793,     0,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,
       0,     0,   346,   347,     0,   794,   350,   351,     0,   353,
     354,   355,     0,   356,   357,   358,   359,   360,   361,     0,
     362,   363,   364,   795,   366,   367,   368,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,     0,   383,   384,   796,   386,   387,   388,   797,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,     0,   798,   401,   402,   403,   404,   405,   406,   799,
     408,   409,   410,   800,   412,   413,   801,   415,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   802,   429,     0,   431,     0,   432,   433,     0,   434,
     803,   436,   437,   438,   439,   440,     0,   804,   805,     0,
       0,   443,   444,     0,   446,     0,     0,   448,   449,   806,
     451,   452,   453,   454,   455,   807,     0,   456,   457,   458,
       0,   459,   460,   461,   462,     0,   463,   464,   465,   466,
     467,     0,   808,     0,   470,   809,   472,   473,   474,   475,
     476,     0,     0,   477,     0,     0,   478,   479,   480,   481,
     482,   483,  2792,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   495,   496,   497,   498,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,   120,   121,     0,     0,     0,  2793,     0,     0,     0,
       0,  2794,   123,   124,     0,   125,   126,   127,  2795,   129,
     130,   131,     0,   758,  2796,   760,   761,     0,   137,   138,
     139,   140,   141,   142,     0,     0,   143,   144,   762,   763,
     147,     0,   148,   149,   150,   151,     0,     0,  2797,     0,
    2798,   155,   156,   157,   158,   159,  2799,   161,   162,   163,
       0,   164,   165,   166,   167,   168,   169,     0,  2800,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   768,
     769,   183,     0,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,
     197,   770,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,     0,   212,   213,
     214,   215,   216,     0,     0,   218,     0,   219,   220,   771,
     222,     0,   223,     0,   224,  2801,     0,  2802,   227,   228,
    2803,  2804,   231,     0,   232,     0,     0,     0,   235,     0,
     236,   237,   238,   239,   240,   241,   242,  2805,   244,   245,
     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,
       0,   255,  2806,     0,   258,   259,   260,   261,   262,   778,
     779,     0,   780,     0,   266,  2807,  2808,   269,  2809,   271,
     272,   273,   274,   275,   276,     0,     0,   277,  2810,   279,
    2811,     0,   281,   282,   283,   284,   285,   286,   287,   288,
    3026,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   787,
    2813,   789,   311,   312,   313,     0,     0,   315,   316,  2815,
     318,     0,     0,   320,   791,   322,   323,   324,     0,   325,
     326,     0,     0,   327,   328,   329,     0,     0,   330,     0,
    2817,   333,  2818,     0,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,     0,     0,     0,     0,   346,   347,
       0,  2819,   350,   351,     0,   353,   354,   355,     0,   356,
     357,   358,   359,   360,   361,     0,   362,   363,   364,   795,
     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,
     384,  2820,   386,   387,   388,     0,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,     0,  2821,   401,
     402,   403,   404,   405,   406,     0,   408,   409,   410,  2823,
     412,   413,   801,   415,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,  3027,   429,     0,
     431,     0,   432,   433,     0,   434,  2825,   436,   437,   438,
     439,   440,     0,   804,   805,     0,     0,   443,   444,     0,
     446,     0,     0,   448,   449,  2826,   451,   452,   453,   454,
     455,     0,     0,   456,   457,   458,     0,   459,   460,   461,
     462,     0,   463,   464,   465,   466,   467,     0,   808,     0,
     470,  2828,   472,   473,   474,   475,   476,     0,     0,   477,
       0,     0,   478,   479,   480,   481,   482,   483,   506,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   495,
     496,   497,   498,     0,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   123,   124,
       0,   125,   126,   127,     0,   129,   130,   131,   132,   133,
       0,   135,   136,     0,   137,   138,   139,   140,   141,   142,
       0,     0,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   152,     0,     0,     0,   154,   155,   156,   157,
     158,   159,     0,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,
     224,     0,     0,     0,   227,   228,   507,     0,   231,     0,
     232,     0,   233,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,     0,   244,   245,   246,   247,     0,   248,
     249,   250,   251,   252,   253,   254,     0,   255,     0,   257,
     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,
     266,     0,     0,   269,     0,   271,   272,   273,   274,   275,
     276,     0,     0,   277,     0,   279,     0,     0,   281,   282,
     283,   284,   285,   286,   287,   288,   508,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,     0,   310,   311,   312,
     313,   314,     0,   315,   316,     0,   318,     0,   319,   320,
     321,   322,   323,   324,     0,   325,   326,     0,     0,   327,
     328,   329,     0,     0,   330,   331,     0,   333,     0,   335,
     336,   337,   338,   339,   340,   341,     0,   343,   344,   345,
       0,     0,     0,     0,   346,   347,   348,     0,   350,   351,
     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,
     361,     0,   362,     0,   364,   365,   366,   367,   368,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,     0,   383,   384,     0,   386,   387,
     388,   389,     0,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,     0,     0,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,     0,   412,   413,   414,   415,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   509,   429,   430,   431,     0,   432,   433,
       0,   434,     0,   436,   437,   438,   439,   440,     0,   441,
     442,     0,     0,   443,   444,   445,   446,   447,     0,   448,
     449,   450,   451,   452,   453,   454,   455,     0,     0,   456,
     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,
     465,   466,   467,   468,   469,     0,   470,     0,   472,   473,
     474,   475,   476,     0,     0,   477,     0,     0,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   754,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,   755,     0,     0,     0,     0,   756,   123,
     124,     0,   125,   126,   127,   757,   129,   130,   131,     0,
     758,   759,   760,   761,     0,   137,   138,   139,   140,   141,
     142,     0,     0,   143,   144,   762,   763,   147,     0,   148,
     149,   150,   151,     0,     0,   764,     0,   765,   155,   156,
     157,   158,   159,   766,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,   767,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   768,   769,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   770,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,     0,   212,   213,   214,   215,   216,
       0,     0,   218,     0,   219,   220,   771,   222,     0,   223,
       0,   224,   772,     0,   773,   227,   228,     0,   774,   231,
       0,   232,     0,     0,     0,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   776,   244,   245,   246,   247,     0,
     248,   249,   250,   251,   252,   253,   254,     0,   255,   777,
       0,   258,   259,   260,   261,   262,   778,   779,     0,   780,
       0,   266,   781,   782,   269,   783,   271,   272,   273,   274,
     275,   276,     0,     0,   277,   784,   279,   785,     0,   281,
     282,   283,   284,   285,   286,   287,   288,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   787,   788,   789,   311,
     312,   313,     0,     0,   315,   316,   790,   318,     0,     0,
     320,   791,   322,   323,   324,     0,   325,   326,     0,     0,
     327,   328,   329,     0,     0,   330,     0,   792,   333,   793,
       0,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,     0,     0,     0,     0,   346,   347,     0,   794,   350,
     351,     0,   353,   354,   355,     0,   356,   357,   358,   359,
     360,   361,     0,   362,   363,   364,   795,   366,   367,   368,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,     0,   383,   384,   796,   386,
     387,   388,     0,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,     0,   798,   401,   402,   403,   404,
     405,   406,     0,   408,   409,   410,   800,   412,   413,   801,
     415,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   429,     0,   431,     0,   432,
     433,     0,   434,   803,   436,   437,   438,   439,   440,     0,
     804,   805,     0,     0,   443,   444,     0,   446,     0,     0,
     448,   449,   806,   451,   452,   453,   454,   455,     0,     0,
     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,
     464,   465,   466,   467,     0,   808,     0,   470,   809,   472,
     473,   474,   475,   476,     0,     1,   477,     0,     0,   478,
     479,   480,   481,   482,   483,     2,     0,     3,     4,     0,
       0,     0,     1,     0,     0,     0,   495,   496,   497,   498,
       0,     0,     2,     0,     0,     6,     0,     0,     0,     0,
       0,     0,     0,     0,     7,     0,     0,     0,     0,     0,
       0,     0,     6,     0,     0,     0,     8,     0,     0,     0,
       0,     7,     0,     0,     0,     0,     0,     9,     0,     0,
       0,     0,     0,     8,     0,     0,     0,     0,     0,    10,
       0,   568,     0,     0,     9,     0,     0,     0,     0,     0,
       0,     0,    12,     0,     0,     0,    10,     0,   568,     0,
       0,     0,     0,     0,     0,     0,    13,     0,     0,    12,
       0,     0,     0,     0,     0,     0,    15,     0,     0,     0,
       0,     0,    16,    13,     0,     0,     0,     0,     0,     0,
      17,     0,     0,    15,     0,     0,     0,     0,     0,    16,
       0,     0,     0,     0,     0,     0,    20,    17,     0,     0,
      21,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    20,     0,     0,     0,    21,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    23,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    23,     0,
       0,     0,     0,     0,     0,     0,     0,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    25,    26,
      27,     0,     0,     0,     0,     0,    28,     0,     0,    29,
       0,     0,     0,     0,     0,    25,    26,    27,     0,     0,
       0,     0,     0,    28,     0,     0,    29,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,     0,     0,     0,     0,     0,    31,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,    32,     0,     0,    31,     0,     0,     0,    33,     0,
       0,     0,    34,     0,     0,     0,     0,     0,    32,     0,
       0,     0,    35,     0,     0,    33,     0,     0,     0,    34,
       0,     0,     0,     0,    36,     0,     0,     0,    37,    35,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    36,     0,     0,     0,    37,     0,    38,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      39,     0,     0,     0,    38,     0,    41,     0,     0,     0,
       0,    42,     0,     0,     0,   569,     0,    39,     0,     0,
       0,     0,     0,    41,     0,    43,     0,     0,    42,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,     0,     0,     0,     0,     0,     0,    44,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   570,     0,     0,    44,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      45
};

static const yytype_int16 yycheck[] =
{
       7,   501,    70,   652,     0,   711,   627,     0,     0,   561,
       0,     0,   697,  1171,    21,    45,   947,  1182,     0,   799,
       0,   723,  1530,     0,  1105,   988,  1169,   563,    37,   721,
       0,   675,   561,   927,   730,  1144,    18,   805,  1460,  1602,
     927,    74,   829,    18,  2101,    74,   833,  1350,  1644,  2156,
    1149,  1509,  1146,  1217,    21,  1138,  1755,   570,  1355,  2070,
     569,  2095,   938,  2074,   570,    72,    73,   938,   564,  2152,
     938,  1427,  1555,  1556,   711,   938,   713,  2558,   715,     0,
    1174,   623,  2200,  2201,  2202,  2036,   628,  2560,  1070,  1401,
       0,    44,  2528,     0,  2528,  1077,   105,     0,     0,     0,
       0,     0,  2573,     0,     0,    72,    73,     0,  1039,  2090,
       0,     0,     0,  2402,     0,     0,     7,     0,     0,     0,
       0,     0,  2215,  1609,  2580,     9,   593,     0,     5,     5,
      21,  1768,    55,   633,     9,    13,    14,    24,     5,   762,
     763,     5,     5,   692,     5,     5,     9,     0,     5,    13,
      14,  2234,    13,    14,     5,    36,     0,  2482,     9,  1662,
      78,  2486,  1664,     5,  2860,   692,   789,     5,   668,     5,
       5,    63,     5,     5,     5,    13,    14,    13,    14,     5,
    2876,    72,    73,    13,    14,     5,     7,    13,    14,  1765,
       5,     5,     5,   837,    11,     5,  1083,   687,     5,    16,
      21,     5,    72,    73,  2228,  2224,  2873,  1893,   120,   168,
      26,    59,  1568,   167,    95,   135,    63,   115,     4,  2302,
    2303,  1184,  2305,     9,   118,  2375,  1926,  1927,     3,    21,
    1193,    11,     3,     4,     5,   280,    16,  1937,     9,   169,
       0,  1941,    11,   185,    72,    98,    15,    16,   239,    37,
     118,    72,    73,  2766,    98,   105,    45,     4,    18,    34,
      35,    21,     9,  1031,    45,   282,    46,    63,    63,  3030,
     799,  1158,  2720,   288,  1161,  1162,    36,    46,   288,    88,
      72,    73,   239,   239,  1343,    45,    11,  2837,    11,   283,
      15,    16,   936,   985,   268,   356,   115,   221,    78,   161,
      23,    24,    72,   168,   176,  3181,   105,   377,   113,    78,
     240,   368,    72,    73,    74,   221,   125,   133,   939,   167,
    1919,  1920,  1921,   271,  2496,   118,    30,  2445,   304,  2444,
     167,   304,  2447,   187,    38,    95,   164,    13,    14,   207,
     133,   265,   113,   113,   187,    30,  2357,    80,    30,  3255,
     128,  1707,    11,  1709,  3212,  3051,    38,    11,    91,   265,
    2059,    15,    16,    64,   116,    80,  2700,   143,   159,  2703,
      12,    72,   104,    40,   157,    17,    91,  1157,   113,    40,
     168,   357,   144,  1006,  1007,   108,  2822,    29,  2495,  2870,
      30,   166,    46,   168,  1038,  2868,  1088,  1478,   940,  1022,
      41,    43,    44,   333,   361,   361,  2879,    73,   395,  2492,
     952,  2494,   106,  2470,   927,   203,    26,    30,  2590,    78,
    1863,   930,    32,   329,    78,    38,   106,  3303,  1509,   282,
     500,   219,   194,  3339,   382,   300,   212,   189,   282,   500,
     370,   229,   213,   128,  3302,   436,   464,   504,  2399,   232,
     185,  1894,   314,   272,   378,   500,   348,   305,   306,   307,
     989,   103,   416,  1522,   235,   439,   265,   272,   486,   456,
     286,   159,   378,   264,   987,   405,  2989,   106,  3028,   436,
     436,   122,  3149,   500,  1133,  1134,   162,  1945,   128,   504,
     299,   319,   346,  1137,   504,  3008,   349,   267,  2648,   277,
     343,   348,   272,    11,   171,   349,   500,    15,    16,   500,
     171,   442,   288,   245,  1826,   439,   381,  2632,  3279,   495,
     368,   253,   495,   133,   454,   318,  2609,  2975,  2036,   345,
     442,   347,   267,   439,   235,   489,  1221,   225,   458,    63,
     570,   500,   208,   500,   500,   439,   444,  3243,   502,   319,
    2569,    37,   348,   348,   561,   405,   489,   405,   500,   375,
     392,   393,  2586,   570,   352,   335,  2900,   500,  3039,   500,
     442,   439,  1085,  1086,   451,  3242,  1076,   500,   405,   416,
     498,   369,   328,  1692,   502,  1749,  1135,   569,   464,   437,
    2771,   621,  2100,  2076,  3030,   570,  3030,   464,  2779,  2236,
     448,   410,   106,   610,  2107,   433,  2108,  2093,  1135,   462,
     486,   357,   504,   402,   621,   499,   491,   492,   462,   486,
    1110,   402,   500,   500,   500,  1783,  1328,  2313,  1157,   697,
    2737,   664,  1099,   500,   515,   664,   500,   500,   498,   500,
     500,  1604,   502,   500,   508,   652,   653,  2936,   501,   500,
     503,  2744,   500,  2229,   621,  2980,   432,   501,   500,   503,
    2985,   670,   500,   433,   500,   500,   508,   500,   675,   500,
     500,  2371,   442,     0,   500,  3148,   286,   452,   687,   496,
     500,   385,   168,   416,  3155,   500,   500,   500,   684,  1854,
     500,   684,   684,   500,   684,   684,   500,   239,   673,  1343,
    3156,   416,   684,   385,   684,   491,   492,   684,   504,   504,
     717,   718,   719,  1409,   684,   462,   496,   203,   605,   610,
     491,   492,   442,   676,   493,   494,   495,   496,  1351,  1352,
     621,   341,  3150,   219,   500,   345,  2854,  2718,  2962,   486,
    2964,   265,   116,   229,   491,   492,    26,   128,  2060,   503,
      33,   621,    32,   251,   252,   515,     5,   157,  3239,  2358,
    2359,  2360,  2361,   684,   258,   375,   145,  1319,   493,   494,
     495,   496,   385,  2724,   684,  2858,    59,   684,  3251,   452,
     500,   684,   684,   684,   684,   684,  1950,   684,   684,   610,
    1319,   684,   799,   504,   684,   684,   684,  1349,   684,   684,
     621,   684,   684,   684,   684,   684,  2162,  2163,  2164,   569,
     570,   684,   173,  1365,  3295,   189,   195,   311,   610,   361,
    1349,  1350,  1466,  3241,   348,  1906,  3244,     5,  1791,   621,
     837,  1480,   232,   173,  1721,   445,  1365,   491,   492,   493,
     494,   495,   496,  3279,  1731,  3279,   343,  1734,  1497,  3343,
     610,   375,  3076,   133,    80,   267,   500,   239,    11,  1551,
     272,   621,  1398,  1399,  1945,    91,   352,   365,   366,  3205,
    3206,  1407,   106,   404,   235,   464,     5,  1521,  1522,   279,
     603,   197,   605,   369,  2991,  3379,   267,  1531,    80,  3362,
     106,  2399,   534,    46,   436,   235,   277,   486,  1411,    91,
    3109,  1410,  3111,   128,   664,  1411,     3,  1403,  1552,  1990,
     441,   500,   635,  2335,  1606,   327,  1608,   418,   167,  3337,
     927,  3257,   115,   565,   684,    78,   186,  2410,   935,   936,
     155,  1473,  1914,   656,   941,  2291,   462,   944,   945,  2973,
     947,   948,   949,   950,  1820,  1821,  1840,   959,   930,  1820,
    1821,  1822,  1820,  1840,   961,   495,  1819,   173,   500,  1459,
     486,   968,   502,   239,   465,   977,  2263,   495,   980,   464,
     421,   347,  2269,    53,   502,  2272,  3185,   106,   239,   361,
     987,   988,   989,   491,   492,   493,   494,   495,   496,    30,
      26,   486,  2691,   246,   961,  2078,    32,  2080,  1005,   375,
     361,   968,   409,   405,   411,   500,   286,  1559,   201,  1039,
     489,  1717,   964,   454,  1801,    26,  1023,  3124,   970,   235,
    2528,    32,  2180,   502,   409,   500,   411,  1034,  1035,  1036,
    1559,  1038,  1039,   769,   676,  1571,  1823,   500,   197,  2203,
    1827,     4,    83,  1830,   173,   333,     9,   272,   409,  2130,
     411,    92,   277,  1690,   436,   791,   305,   306,   307,  1066,
    1845,  1746,  1747,  1748,  1849,   345,   333,  1852,   197,   409,
     961,   411,   265,   114,   267,   436,  1772,   968,  1085,  1086,
    1717,  3199,   370,  1116,  1117,   361,  1119,  1116,  1117,   825,
    1119,   961,   172,   143,  2188,   375,   436,   133,   968,  1736,
     361,  1110,   501,   370,  1741,   504,   235,   157,   188,     4,
     128,  1118,   162,   193,     9,  1122,  1123,   405,   500,   368,
    2423,   501,   133,    26,   504,  1132,  1133,  1134,     4,    32,
    1137,   157,   364,     9,     4,  2066,   162,   155,   405,     9,
     961,   498,   500,   500,   185,   361,  2245,   968,   157,  1701,
    1157,   231,  2251,   162,  1798,   162,   405,   198,   287,   498,
     436,   500,   212,   502,  1173,   445,   454,  2523,  2626,   961,
     930,  2527,  1701,  2529,   498,   436,   968,  1184,   502,   500,
     498,   498,   232,    26,   502,   502,  1193,   454,   437,    32,
     969,  1727,   500,   409,   973,   411,  1732,     6,   423,   448,
       9,   961,   361,   173,   927,   500,   232,    16,   968,   434,
    1217,   370,   167,   462,   501,   938,  2724,   504,   654,   655,
     436,   657,    31,   232,   500,   500,    35,   197,   500,   279,
     133,   167,   361,  1465,   500,  1467,  1468,   486,   288,   500,
     486,  1001,   501,    69,    70,   504,   405,  3354,   500,   267,
     286,   500,  1012,   279,   272,   462,   500,   464,  1902,   277,
    1812,    13,    14,   501,   987,   235,   504,   409,   501,   411,
     279,   504,   183,   184,  1010,   286,    13,    14,   501,  1039,
     409,   504,   411,  1812,  3341,  3342,  2492,   493,  2494,  1025,
     133,    26,  2373,  3304,   483,   454,  2377,    32,   427,   501,
     380,   500,   504,  1855,   433,   341,   409,   436,   411,   345,
     501,  3322,  1319,   504,   218,  1867,   501,   287,   502,   504,
    2623,  3378,  1318,  1046,   166,  1318,  1855,  1840,  1318,  1318,
     341,  2162,  1055,  2164,   345,   689,  1343,   691,  1867,   375,
     251,   252,  1349,  1350,   501,  1897,   483,   504,   282,  1072,
     391,  2509,  1904,   394,    13,    14,  1116,  1117,  1365,  1119,
    1083,  3372,  1085,  1086,   375,  2508,  3377,   502,  1897,   305,
     306,   307,  2159,   504,  2161,  1904,  2679,   501,   501,   500,
    2024,   504,   432,   286,  2493,   501,  2071,   501,   504,   501,
     504,   361,  1944,   561,  1401,  1947,    13,    14,   133,  2293,
    1952,    13,    14,   501,  1411,   423,   504,  2550,  2507,   445,
    2509,   169,   167,    96,   501,  1944,   434,   504,  1947,   501,
    1427,   287,   504,  1952,   501,    59,  1433,   504,  1410,   406,
     501,   500,   368,   504,   445,  1948,  1411,   501,   341,   409,
     504,   411,   345,   286,   501,  1452,  1453,   504,   498,   483,
    1457,   501,   502,  1460,   365,   366,   218,   427,  1465,  1466,
    1467,  1468,  1104,   433,   501,    40,   436,   504,   148,   405,
     341,  2402,   375,  1480,  1481,   148,    40,   148,  1485,   148,
    1487,   501,   240,  1490,   167,   500,  2135,   267,  1495,   501,
    1497,  1498,   504,  1500,    13,    14,    60,  1504,   341,  2267,
    2268,   437,   345,   501,   501,   501,   504,   504,   504,   167,
     501,   267,   448,   504,  1521,  1522,    13,    14,  1485,  1526,
    1487,  1528,  3030,  1490,  1531,  2227,  1518,   501,  1495,    40,
     504,  1498,   375,  1500,    13,    14,  1518,  1504,  1518,    87,
     104,  1518,   445,   501,   454,  1552,   504,  1554,  1518,  3112,
     148,   286,  1559,  1560,  1561,  1562,  1563,  1564,  1565,  1566,
    1567,  1568,    13,    14,   500,  1572,  1573,   466,   501,  1460,
    1577,   504,   451,   501,  1581,   333,   504,  1584,  1585,  1586,
    1587,  1588,  1589,  1590,  1591,  1592,   501,   500,  1595,   504,
    1313,  2894,    13,    14,  1485,  1602,  1487,  1604,   315,  1490,
    1607,   148,   445,   500,  1495,    39,   341,  1498,   500,  1500,
     345,   561,   370,  1504,  1647,  1485,   500,  1487,  1647,   500,
    1490,  1628,   305,   306,   307,  1495,   500,  2785,  1498,  2738,
    1500,   799,   196,   148,  1504,    13,    14,  1518,   147,  1460,
     375,  2528,   502,  1650,   148,  3067,   148,   405,    13,    14,
    1410,  1626,    13,    14,  1661,  1662,    13,    14,   167,    13,
      14,    13,    14,   282,  1485,   343,  1487,   500,  1460,  1490,
      13,    14,    13,    14,  1495,    13,    14,  1498,   416,  1500,
     500,   245,   500,  1504,   501,   368,    13,    14,   407,   253,
    2855,   214,  2244,  1485,  1701,  1487,   454,   173,  1490,   500,
    1707,   265,  1709,  1495,    13,    14,  1498,  1430,  1500,   219,
     445,  3307,  1504,  3309,   291,  2244,    13,    14,    13,    14,
     219,   197,   405,    13,    14,  1485,   500,  1487,   219,  2692,
    1490,   500,   296,    13,    14,  1495,   356,   357,  1498,   289,
    1500,   424,  1749,   230,  1504,  1752,  1753,    40,  1755,   356,
     357,   500,  2288,     5,   437,   255,   256,     5,  1518,   235,
     365,   366,  1404,     5,  1406,   448,   500,  3363,   500,  3125,
     500,  3279,  2464,   356,   357,   356,   357,   447,   448,   462,
    2293,     5,    40,   347,  1791,  1085,  1086,   500,   500,     5,
    3212,  1798,   500,     5,   144,     9,   305,   306,   307,     3,
     500,   463,    60,   486,   293,  1812,   370,   504,   102,   504,
     501,   287,    40,   214,  1574,  2602,   375,   500,   162,  1826,
     279,   989,   162,   277,   147,   389,    59,   230,   500,   416,
    3252,    91,   500,  1840,   416,  2484,    59,   504,    59,   258,
     416,   462,   416,   416,   167,   510,   104,   148,  1855,   799,
     148,    98,  1859,  1860,   267,  1862,   267,   500,  2543,   368,
    1867,  1868,  1869,  1870,  1871,  1872,  1873,  2563,    40,  1876,
    1877,  1878,  1879,  1880,  1881,  1882,  1883,  1884,  1885,   267,
    3302,  2583,   267,     3,  1891,  1892,   500,  1647,  1895,  2776,
    1897,  1614,   500,  3036,  2423,  1902,   405,  1904,     9,   143,
      39,   414,   414,   498,   498,   502,  1787,   500,   416,   416,
     416,   143,   501,   157,   167,  1083,   501,  1924,   162,   459,
     416,  1928,  3278,  1930,    37,   157,   504,  1934,   437,    42,
     162,   501,   501,   409,   501,   411,   501,  1944,   196,   448,
    1947,  1948,   219,  1950,   501,  1952,   501,   219,   274,   274,
     504,   500,    11,   462,  1961,   500,   343,   433,   499,   510,
     436,  1928,   504,   458,   414,   504,  2929,  1934,   212,   500,
     272,   509,   500,   416,   176,   158,  2528,   486,  2909,   167,
     212,  3146,   305,   306,   307,  1992,    99,   245,   232,  1157,
    1997,   500,   212,  2000,  2024,   253,  2890,   442,   501,  2528,
     232,  2788,  2789,   504,   258,   378,   500,   265,   221,   283,
    3091,   504,  2019,  2020,   504,   304,   304,  2024,  1778,   504,
     176,   214,   221,   501,   267,   500,   221,  1787,   324,   288,
     280,  2038,   167,   500,  2041,   279,  2043,  1928,   296,   989,
     454,   148,  2822,  1934,   288,   368,  2598,   279,   500,   148,
     148,  1693,  2059,  2060,   462,   168,   288,   148,  1928,  2066,
      40,  1703,  2069,  1705,  1934,   282,  1708,   267,   501,  2598,
     501,   498,  1714,   483,  1716,   501,   483,   501,   501,  2086,
      40,   501,   405,    59,   282,   167,  1728,    11,    40,   347,
     203,  1733,  2099,  2085,  2623,  1737,  1738,  1739,  1740,   162,
    1742,  1743,  2069,  2085,   501,  2085,   219,  1928,  2085,  2116,
    2117,   501,   370,  1934,   437,  2085,   229,  1840,  2654,  2086,
     501,  1844,  3280,   500,   500,   448,  2133,   501,  2135,   176,
     500,   389,   162,   501,   509,   499,  1928,  2144,   504,   462,
     502,   501,  1934,  3030,   483,   501,   501,   167,   261,   500,
    2679,  1319,   416,   500,   500,  2162,  2163,  2164,   500,   151,
     459,    59,    40,   486,   485,   489,   283,    72,  1928,   282,
     504,   283,   439,    78,  1934,   504,   238,   500,  2069,    59,
      59,  1349,  1350,   258,   267,   416,    91,   500,   432,   148,
     197,   148,   305,    55,   148,  2086,  2203,  1365,   416,   312,
     432,   416,  2232,   274,  2085,   167,   416,  1157,   113,   416,
     115,   107,   108,   274,   501,   500,   499,   167,    40,   343,
     501,  2757,   504,   280,   282,  1948,  2222,   462,    40,  2222,
     148,   501,  2222,  2222,   499,  2787,   499,  2244,   100,   352,
     272,   167,    59,   501,   501,   500,   180,   162,  2069,  2256,
     501,   500,    78,   139,   193,   501,   369,   119,  2787,   167,
     501,   501,   501,   500,  2024,  2086,   498,   501,   292,   349,
     502,   500,   510,   500,   504,   137,   501,  2069,   283,   141,
     148,   176,  2042,   171,  2291,   504,  2293,   183,   184,   427,
     501,    40,   501,  2822,  2086,   501,   201,   500,  2058,   504,
     501,   163,    40,   500,   166,   501,   500,  3009,    84,  2069,
       8,   501,   167,    11,   501,   442,   167,    15,    16,   181,
     499,    19,    20,    21,   437,  2085,  2086,   504,  2335,   442,
     500,   461,   501,   295,   501,   193,   501,  3268,   504,   501,
     501,   501,   448,   305,   306,   307,   282,   489,    59,   501,
     501,   247,   248,   249,   250,   251,   252,   501,   501,   255,
     256,   462,   267,   199,    40,  2894,   113,   272,  2375,  1319,
    2438,   500,  2402,   221,    86,   186,   502,  2890,   272,   272,
     502,   502,   416,   502,  2391,   416,   502,   502,  2395,  2396,
      40,  1559,  3279,   502,   502,  2402,   489,   502,   502,  1349,
    1350,   267,   502,  2433,  2411,   502,   368,  2414,  3093,  2416,
     272,   105,   502,   502,   319,  1365,  2423,  2424,   280,   500,
    2427,  2428,    40,   502,  3116,  2432,  2433,   462,   502,   502,
     335,   501,  2439,  3077,   502,  3079,   502,   502,   502,   301,
    3089,  2083,   502,   405,  2335,  2168,   502,  2454,   502,   502,
     305,   306,   307,   502,  2484,   282,  2463,   502,   502,   502,
     502,   502,   502,   500,     9,   327,   342,   500,   504,   365,
     366,  3092,  2232,   500,  3095,   437,   326,  2484,  3030,   504,
     501,    59,   501,   193,  2375,   186,   448,   499,   504,     8,
    2213,   447,    11,    89,   335,   193,    15,    16,  2221,   501,
     462,  3030,   500,    40,   148,   501,   120,   148,    40,  2232,
     561,   501,  3214,   368,  2335,   357,  2523,  3223,   216,  3204,
    2527,  2528,  2529,   357,   486,    40,   501,    46,   433,   500,
     500,     7,     8,  1701,    53,   504,    12,   442,   500,    40,
     442,    17,   500,  2335,   301,    21,   272,    23,    24,   500,
     405,  3200,    28,    29,    30,   243,   185,    33,   442,    78,
      36,    37,   427,   500,    40,    72,  2562,    43,    44,  2562,
    2293,   285,  2562,  2562,    72,  2298,  2457,  2300,    78,     9,
     501,  2304,   437,  2306,   480,   481,   284,   501,   500,   359,
     501,  2598,    59,   448,    91,   129,    72,    73,   489,   265,
     282,    40,   427,   500,   500,   927,  2248,   462,   285,  1559,
     285,   500,   447,  2620,   501,  2645,  2623,   199,   501,    95,
     501,   282,   141,   282,   501,   375,   102,   103,   104,   105,
     106,   486,   501,  2640,  2641,   118,   439,   356,  2645,    25,
      36,  2648,  2402,  1715,  1812,   500,   684,  2157,  3252,  2523,
    2657,  2510,  3115,   172,  3208,  2461,  3353,  2781,  3229,  3332,
    3002,   945,  2669,  3281,  3290,   987,  2673,  2674,  3325,   188,
    1144,  2678,  2679,  2433,   193,  3053,  2683,  2150,  2559,  2686,
    2687,  3181,  2163,  2713,  2691,  2692,  3278,  1855,  2695,  3288,
    2502,  2147,  2699,  2527,  3276,  1398,  1349,  2457,  1316,  1867,
    2707,  2219,  2890,     8,  2585,  2574,    11,  2588,  2291,  2133,
      15,    16,   231,  2553,    19,    20,    21,  3253,  1104,  1686,
    1126,  2099,  2355,  1125,  2484,  3263,  2116,  3279,  1650,  1897,
    3187,    36,  2699,  1055,     8,  3081,  1904,    11,   960,  1685,
      21,    15,    16,  2086,  2751,    19,    20,    21,   799,  1128,
    3279,  1701,  2759,  2648,  1940,  2933,   940,  2648,   621,  2335,
    2334,  1083,  2382,  1085,  1086,   284,   610,  3023,   960,  3190,
     938,  2778,  3191,  3318,   938,  1367,  1944,  1998,  2396,  1947,
    2787,   938,  1962,   938,  1952,  2100,  2042,  1481,  2039,   487,
     488,   489,  2707,   491,   492,   493,   494,   495,   496,  2559,
    2073,    40,  3176,  2446,  2085,  2528,   604,  1411,  2699,  1948,
    1626,  2462,  1627,    14,    30,  2822,    95,    -1,    -1,    -1,
      -1,    60,    -1,    -1,    -1,  2585,    -1,    -1,  2588,  2699,
    2553,  2554,    -1,    -1,    -1,    -1,  1158,    -1,    -1,  1161,
    1162,    -1,    -1,    -1,    -1,  2487,  2488,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2862,    -1,    -1,    -1,    -1,
      -1,   380,  1812,     8,    -1,   104,    11,    -1,    -1,    -1,
      15,    16,    -1,  2515,    19,    20,    21,    -1,  2699,  2909,
      -1,    -1,    -1,  2890,    -1,  2645,  2893,  2894,  2530,  2531,
    2532,  2533,  2534,  2535,  2536,  2537,  2538,  2539,    -1,    -1,
      -1,    -1,  2909,    -1,    -1,  1855,    -1,  2699,    -1,    -1,
      -1,   216,    -1,    -1,    -1,    -1,    -1,  1867,    -1,   193,
      -1,    -1,  2929,    -1,    -1,    -1,    -1,  2650,    -1,  2936,
      -1,    -1,   171,    -1,    -1,    -1,    -1,    -1,   989,  2699,
    2947,  2948,   216,    -1,  2951,    -1,    -1,  1897,    -1,    -1,
      -1,    -1,    -1,  2713,  1904,    -1,    -1,   196,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,    -1,  2976,
      -1,    -1,   491,   492,   493,   494,   495,   496,    -1,   284,
      -1,  2704,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2871,    -1,    -1,  3000,  1944,    -1,    -1,  1947,    -1,    -1,
      -1,    -1,  1952,    -1,    -1,    -1,   245,    -1,    -1,    -1,
     284,    -1,    -1,    -1,   253,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3030,    -1,  1347,   265,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1358,    -1,  1360,    -1,
     516,    -1,   518,    -1,    -1,    -1,   522,    -1,  1370,   525,
      -1,    -1,    -1,    -1,    -1,    -1,  3063,   296,   534,    -1,
    3067,    -1,    -1,    -1,    -1,  1387,    -1,    -1,    -1,    -1,
    3077,   216,  3079,    -1,  3081,    -1,  2244,    -1,  3085,    -1,
    3087,    -1,  3089,    -1,    -1,    -1,    -1,   563,   564,   565,
      -1,    -1,  3099,    -1,  1416,  1417,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3112,  1157,    -1,   347,    -1,
      -1,  2871,    -1,    -1,    -1,    -1,  2758,    -1,  3125,    -1,
      -1,    -1,    -1,  3130,    -1,    -1,    -1,   603,   604,   605,
      -1,   370,    -1,    -1,   610,    -1,   612,   561,    -1,   284,
      -1,    -1,    -1,    -1,  2867,   621,   622,   623,    -1,  2909,
     389,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3041,  3042,    -1,    -1,    -1,    -1,    -1,  2890,  1452,  1453,
    3177,    -1,    -1,  1457,    -1,    -1,  3067,    -1,   654,   655,
    3187,   657,   487,   488,   489,    -1,   491,   492,   493,   494,
     495,   496,    -1,  3200,   670,    -1,    -1,    -1,    -1,    -1,
     676,     3,    -1,     5,    -1,  3212,    -1,    -1,    -1,    -1,
      -1,   687,    -1,   487,   488,   489,    -1,   491,   492,   493,
     494,   495,   496,  3230,    -1,   701,    -1,    -1,    -1,    -1,
      -1,    -1,  3113,  3114,    -1,    -1,     8,    -1,    -1,    11,
    2963,    -1,    -1,    15,    16,  3252,  3067,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,  2423,    -1,    -1,   734,    -1,
      -1,  3268,   738,   739,   740,   741,    -1,    -1,  1319,    -1,
      -1,  3278,  3279,  3154,    -1,  3067,    -1,    -1,    -1,    -1,
      -1,  3041,  3042,    -1,    -1,    -1,    -1,    -1,    -1,  3170,
      -1,    -1,    -1,  3174,  2244,  3302,    -1,    -1,  1349,  1350,
      -1,    -1,    -1,    -1,    -1,   107,   108,  3030,    -1,    -1,
    3317,  3318,    -1,    -1,  1365,    -1,    -1,    -1,    -1,    -1,
      -1,  3212,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3343,    -1,    -1,  1661,
    1662,    -1,   487,   488,   489,    -1,   491,   492,   493,   494,
     495,   496,    -1,  3113,  3114,    -1,    -1,    -1,    -1,    -1,
    2528,  3252,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3011,
      -1,    -1,  3379,    -1,    -1,   799,    -1,    -1,    -1,    -1,
      -1,   183,   184,    -1,    -1,    -1,    -1,    -1,    -1,  3031,
    3032,  3212,    -1,    -1,  3154,     8,    -1,    -1,    11,  1721,
      -1,    -1,    15,    16,    -1,    -1,    -1,    -1,  3050,  1731,
    3170,  3302,  1734,  3294,  3174,    -1,    -1,    -1,    -1,    -1,
    3212,    -1,    -1,    -1,  3147,    -1,    -1,    -1,    -1,    -1,
    2598,  3252,    -1,    46,    -1,    -1,    -1,    -1,    -1,  3320,
      53,    -1,    -1,    -1,   216,   247,   248,   249,   250,   251,
     252,    -1,    -1,   255,   256,  2623,    -1,    -1,    -1,    -1,
    3252,    -1,    -1,   939,   940,    78,   942,    -1,    -1,   945,
      -1,    -1,    -1,  2423,    -1,   951,   952,    -1,    -1,   955,
      -1,  3302,    -1,    -1,    -1,   961,    -1,    -1,    -1,    40,
      -1,    -1,   968,  1815,  1816,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   978,    -1,    37,    -1,    -1,    -1,  1559,    42,
    3302,  2679,   284,    -1,    -1,    -1,    -1,   993,  1840,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   141,    -1,
      -1,    -1,    -1,    -1,  3294,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   102,    -1,   104,    -1,   106,  3279,    -1,    -1,   172,
    3320,    -1,    -1,   365,   366,   989,    99,  1043,    -1,    -1,
      -1,    -1,    -1,   561,    -1,   188,    -1,    -1,  2528,    -1,
     193,    -1,    -1,    -1,  1868,  1869,  1870,  1871,  1872,  1873,
      -1,  3314,  1876,  1877,  1878,  1879,  1880,  1881,  1882,  1883,
    1884,  1885,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1087,    -1,  1089,    -1,    -1,    -1,    -1,   231,  2787,
      -1,   113,    -1,    -1,    -1,    -1,  1948,    -1,  1104,  1105,
     945,  3273,    -1,    -1,  1110,   168,    -1,    -1,     8,    -1,
      -1,    11,    -1,   176,    -1,    15,    16,    -1,  2598,    -1,
    1701,    -1,    -1,    -1,  2822,    -1,  1132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1143,  1144,    -1,
     203,   284,    -1,  2623,    -1,   167,    46,    -1,   480,   481,
    1156,    -1,    -1,    53,    -1,    -1,   219,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,   229,  1173,    -1,    -1,
      -1,  1177,    -1,    -1,    -1,  1181,    -1,    -1,    78,    -1,
      -1,    -1,    -1,    60,    -1,   487,   488,   489,    -1,   491,
     492,   493,   494,   495,   496,    -1,  2894,    -1,   261,  2679,
      -1,    -1,    -1,  1157,    -1,  2019,  2020,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,
      -1,    -1,    -1,  2075,    -1,    -1,    -1,   104,   105,    -1,
      12,  1812,    -1,    -1,    -1,    17,   113,   380,    37,    -1,
      -1,   141,   305,    42,    -1,    -1,    -1,    29,    -1,   312,
      -1,    -1,    -1,    -1,  2106,  2107,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   172,   295,  1855,    -1,    -1,    -1,  1123,    -1,
      -1,   799,    -1,   305,   306,   307,  1867,  1132,   188,   352,
      -1,    -1,    -1,   193,   171,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    -1,  1310,    -1,   369,  2787,  1314,  1315,
      -1,    -1,    -1,    -1,    -1,  1321,  1897,    -1,    -1,   196,
      -1,   103,    -1,  1904,    -1,    -1,  1332,    -1,    -1,    -1,
      -1,   231,  3030,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   484,  2822,    -1,    -1,    -1,   368,    -1,   491,   492,
     493,   494,   495,   496,     0,    -1,  1362,    -1,    -1,    -1,
      -1,  1367,    -1,  1944,    -1,  1319,  1947,    -1,   245,   168,
      -1,  1952,    -1,    -1,   437,    -1,   253,    -1,    -1,   442,
      -1,    -1,    -1,   405,   284,    -1,    -1,    -1,   265,    -1,
     267,    -1,  1398,  1399,    -1,  1349,  1350,  1403,  1404,    -1,
    1406,  1407,    -1,    -1,   203,    -1,    -1,    -1,    -1,    -1,
      -1,  1365,  2264,    -1,  2894,   437,    -1,    -1,    -1,   296,
     219,    -1,    -1,    -1,    -1,    -1,   448,    -1,    -1,    -1,
     229,    -1,    -1,    -1,    -1,   516,    -1,   518,    -1,    -1,
     462,   522,    -1,    -1,   525,    -1,  1452,  1453,    -1,    -1,
      -1,  1457,    98,    -1,  1460,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   261,    -1,   486,    -1,    -1,  1473,   561,  1475,
     347,   989,  1478,    -1,    -1,    -1,    -1,  1483,   500,  1485,
     380,  1487,    -1,   282,  1490,    -1,    -1,    -1,    -1,  1495,
      -1,    -1,  1498,   370,  1500,    -1,    -1,   143,  1504,    -1,
    1506,    -1,    -1,  1509,    -1,    -1,   305,    -1,    -1,    -1,
      -1,   157,   389,   312,   391,    -1,   162,   394,    -1,    -1,
      -1,   167,    -1,    -1,  1530,    -1,    -1,    -1,    -1,  1535,
     176,   612,    -1,    -1,   180,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3030,    -1,    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1571,   212,    -1,    -1,    -1,
     369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3279,    -1,    -1,   484,    -1,   232,    -1,    -1,    -1,
      -1,   491,   492,   493,   494,   495,   496,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1559,    -1,  1452,  1453,    -1,
      -1,     0,  1457,  2427,  2428,    -1,    -1,  1623,    -1,  1625,
     701,  1627,    -1,   500,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1637,  1638,   279,    -1,    -1,   282,    -1,   437,  1157,
      -1,    -1,   288,    -1,  1650,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   734,    -1,    -1,    -1,   738,   739,   740,
     741,    -1,    -1,  2244,    -1,    -1,    -1,    37,    -1,  1675,
       8,  1677,    42,    11,    -1,    -1,  2528,    15,    16,    -1,
     326,    19,    20,    21,    -1,    -1,  1692,  1693,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1703,  1704,  1705,
    1706,    -1,  1708,   349,     8,    -1,   799,    11,  1714,    98,
    1716,    15,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1727,  1728,    -1,    -1,    -1,  1732,  1733,    -1,    99,
      -1,  1737,  1738,  1739,  1740,    -1,  1742,  1743,    -1,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    -1,  1701,    -1,    53,
      -1,    -1,   534,    -1,   143,    -1,  1762,    -1,    -1,   405,
      -1,  1767,  1768,  1769,  1770,  1771,    -1,    -1,   157,    -1,
      -1,    -1,    -1,   162,    78,    -1,    -1,    -1,   167,  1785,
      -1,    -1,   564,   565,    -1,    -1,   432,   176,    -1,    -1,
      -1,   180,    -1,    -1,    -1,    -1,   442,    -1,   168,  3279,
      -1,  1319,    -1,    -1,    -1,  1650,  2620,    -1,    -1,    -1,
      -1,    -1,    -1,   459,    -1,   461,   462,    -1,    -1,    -1,
      -1,    -1,    -1,   212,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1349,  1350,   203,    -1,    -1,    -1,   141,    -1,    -1,
      -1,    -1,  2423,   232,    -1,    -1,    -1,  1365,    -1,   219,
      -1,    -1,   498,    -1,    -1,   501,   502,   503,  1812,   229,
      -1,   942,  1868,  1869,  1870,  1871,  1872,  1873,   172,    -1,
    1876,  1877,  1878,  1879,  1880,  1881,  1882,  1883,  1884,  1885,
      -1,    -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,   193,
     279,   261,    -1,   282,   676,    -1,   989,    -1,    -1,   288,
    1906,  1855,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1918,  1867,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1928,    -1,  2776,    -1,    -1,   231,  1934,  2781,
      -1,    -1,    -1,    -1,  1940,   305,    -1,   326,    -1,  1945,
      -1,    -1,   312,  1897,    -1,  2759,   284,  2528,    -1,    -1,
    1904,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
     349,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,
      19,    20,    21,    -1,    -1,    -1,    -1,  2829,  2830,    -1,
     284,    -1,   352,    -1,  1990,    -1,    -1,    -1,  1994,    -1,
    1944,    -1,  1998,  1947,    -1,    -1,    -1,    46,  1952,   369,
      -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2019,  2020,    -1,   405,  2598,    -1,    -1,
      -1,    -1,    -1,  1868,  1869,  1870,  1871,  1872,  1873,    78,
    2036,  1876,  1877,  1878,  1879,  1880,  1881,  1882,  1883,  1884,
    1885,  1559,  2623,   432,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   442,    -1,    -1,    -1,    -1,    -1,   107,
     108,    -1,  1143,  2069,  1157,    -1,    -1,   437,    -1,    -1,
     459,    -1,   461,   462,    -1,  1156,   380,  2083,    -1,  2893,
    2086,    -1,    -1,    -1,  2090,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,  1177,    -1,  2679,    15,
      16,    -1,    -1,    19,    20,    21,    -1,    -1,    -1,   498,
      -1,    -1,   501,   502,   503,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    -1,   172,  2130,    -1,    -1,  2133,    -1,    -1,
    2136,    -1,    -1,    -1,    -1,   183,   184,    -1,    -1,   188,
      -1,    -1,    -1,    -1,   193,    -1,  2152,    -1,    -1,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,   496,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3019,  3020,    -1,
      -1,    -1,    -1,   955,  2019,  2020,    -1,    -1,  3030,    -1,
     484,    -1,   231,  1701,    -1,    -1,    -1,   491,   492,   493,
     494,   495,   496,    -1,    -1,    -1,   978,    -1,    -1,   247,
     248,   249,   250,   251,   252,    -1,  2787,   255,   256,  2215,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2223,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1319,    -1,  2234,  2235,
    2236,  2237,    -1,  1314,  1315,   284,    -1,    -1,    -1,    -1,
    1321,  2822,  2248,    -1,  2250,    -1,    -1,  2253,    -1,    -1,
      -1,    -1,  2258,    -1,    -1,    -1,  1349,  1350,    -1,    -1,
      -1,  1043,     8,    -1,  2270,    -1,    -1,    -1,    -1,    15,
      16,    -1,  1365,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,  2288,    -1,    -1,    -1,    -1,   945,  2133,    -1,
    2244,    -1,    -1,    -1,  1812,    -1,  2302,  2303,    -1,  2305,
     216,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2894,    -1,    -1,    -1,   365,   366,    -1,
      -1,    -1,  1104,  1105,    -1,    -1,    -1,    -1,    -1,  2335,
      -1,   380,    -1,     8,    -1,    -1,    11,  1855,    -1,    -1,
      15,    16,    -1,    -1,    19,    20,    21,    -1,  2354,  1867,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2363,  2364,  2365,
      -1,    36,    -1,    -1,    -1,    -1,    -1,  2373,   284,  2375,
      -1,  2377,    -1,    -1,    -1,    -1,  2382,    -1,    -1,  1897,
      -1,    -1,    -1,    -1,    -1,    -1,  1904,    -1,    -1,    -1,
      -1,    -1,    -1,  2399,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,  1483,    15,    16,    -1,    -1,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2427,  2428,    -1,    36,    -1,  1944,  3279,    -1,  1947,
      -1,    -1,   480,   481,  1952,   484,    -1,    -1,   487,   488,
     489,    -1,   491,   492,   493,   494,   495,   496,    -1,  3030,
      -1,    -1,  2458,    -1,    -1,  2461,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1559,    -1,    -1,  2423,
      -1,    -1,  2478,    -1,  1132,    -1,  2482,    -1,    -1,    -1,
    2486,  2487,  2488,    -1,    -1,    -1,  2492,  2493,  2494,    -1,
    2496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2515,
      -1,  2517,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2530,  2531,  2532,  2533,  2534,  2535,
    2536,  2537,  2538,  2539,    -1,    -1,    -1,    -1,   284,    -1,
      -1,   216,    -1,    -1,  1625,    -1,  1627,    -1,    -1,    -1,
      -1,    -1,  2558,    -1,    -1,    -1,  1637,    -1,  2564,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2574,    -1,
      -1,   487,   488,   489,  2528,   491,   492,   493,   494,   495,
     496,    -1,  2427,  2428,  2590,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1675,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2609,   216,    -1,    -1,    -1,  1701,   284,
      -1,    -1,    -1,    -1,  2620,    -1,    -1,    -1,    -1,    -1,
    2626,  1403,  1404,    -1,  1406,    -1,    26,  2633,  2634,  2635,
    2636,    -1,    32,    -1,    -1,    -1,    -1,    -1,    -1,  2645,
      40,    -1,  2648,    -1,  2598,    -1,  2652,    -1,  2654,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      60,    -1,  2668,    -1,    -1,    -1,    -1,    -1,    -1,  2623,
      -1,    -1,   284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1762,    -1,    -1,    -1,    -1,  1767,  1768,  1769,  1770,
    1771,  2697,    -1,  2699,    -1,    -1,  1478,    -1,  3279,    -1,
      -1,    -1,    -1,    -1,   104,    -1,    -1,  2713,    -1,    -1,
      -1,    -1,  2718,    -1,    -1,    -1,    -1,    -1,  2724,  1812,
      -1,    -1,    -1,    -1,  1506,  2679,  2244,  1509,    -1,    -1,
      -1,    -1,  2738,   133,    -1,    -1,    -1,    -1,  2744,    -1,
      -1,   487,   488,   489,    -1,   491,   492,   493,   494,   495,
     496,  2757,  2758,  2759,    -1,    -1,    -1,    -1,    -1,  2765,
      -1,    -1,  1855,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1867,  2620,  2782,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1452,  1453,   196,    -1,    -1,  1457,
    2645,    -1,    -1,    -1,  1897,    -1,    -1,    -1,    -1,    -1,
      -1,  1904,   487,   488,   489,    -1,   491,   492,   493,   494,
     495,   496,    -1,    -1,  2669,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2787,    -1,    -1,    -1,  1918,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   245,    -1,    -1,    -1,    -1,
      -1,  1944,  2858,   253,  1947,    -1,    -1,    -1,    -1,  1952,
      -1,    -1,    -1,    -1,  2870,   265,    -1,    -1,  2822,    -1,
      -1,    -1,    -1,    -1,    -1,   487,   488,   489,  2884,   491,
     492,   493,   494,   495,   496,    -1,   286,  2893,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1677,   296,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,  2423,    15,    16,    -1,    -1,
      -1,  1693,    -1,  2919,  2759,    -1,    -1,    -1,    -1,  2925,
      -1,  1703,    -1,  1705,    -1,    -1,  1708,  2933,    -1,    -1,
      -1,    -1,  1714,    -1,  1716,    -1,    -1,    46,    -1,    -1,
    2894,   341,  1600,    -1,    53,   345,  1728,   347,    -1,    -1,
      -1,  1733,    -1,  2959,    -1,  1737,  1738,  1739,  1740,    -1,
    1742,  1743,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,
     370,    -1,    -1,    -1,  2980,   375,    -1,    -1,    -1,  2985,
      -1,   652,   653,    -1,    -1,    -1,    -1,    -1,    -1,   389,
      -1,    -1,  1650,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3011,    -1,    -1,    -1,    -1,
    2528,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     0,    -1,  3031,  3032,    -1,    -1,    -1,
      -1,    -1,   141,    -1,    -1,    -1,    -1,    -1,  3044,    -1,
    3046,    -1,    -1,    -1,  3050,   445,   717,   718,  2893,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3064,    -1,
      -1,  3067,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3030,    -1,    -1,   188,
    2598,  3087,    -1,    -1,   193,  3091,  3092,    -1,    -1,  3095,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    -1,  2623,    -1,    -1,    -1,  3115,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3123,    -1,    -1,
      -1,    98,   231,    -1,  1906,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,
      53,    -1,  2223,    -1,    -1,    -1,    -1,  3153,    -1,    -1,
      -1,  2244,    -1,    -1,  2235,  2236,  2237,    -1,  1940,    -1,
      -1,  2679,    -1,  1945,    -1,    78,   143,    -1,    -1,  2250,
      -1,    -1,  2253,    -1,    -1,   284,    -1,  2258,    -1,    -1,
     157,    -1,    -1,    -1,  3190,   162,    -1,    -1,    -1,    -1,
     167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   176,
      -1,    -1,    -1,   180,    -1,    -1,  3212,    -1,  1990,    -1,
    1868,  1869,  1870,  1871,  1872,  1873,  1998,    -1,  1876,  1877,
    1878,  1879,  1880,  1881,  1882,  1883,  1884,  1885,   141,    -1,
      -1,    -1,    -1,  3239,    -1,   212,    -1,    -1,    -1,    -1,
      -1,    -1,  3087,    -1,    -1,    -1,  3252,  3253,  3254,  3255,
      -1,    -1,    -1,    -1,    -1,   232,    -1,  3263,    -1,   172,
      -1,    -1,    -1,    -1,   935,    -1,    -1,  3273,    -1,  2787,
     941,   380,    -1,   944,    -1,   188,   947,   948,   949,   950,
     193,    -1,  2363,  2364,  2365,    -1,    -1,    -1,    -1,  3295,
      -1,    -1,    -1,    -1,    -1,    -1,  3302,    -1,    24,    -1,
      -1,  2083,   279,    -1,  2822,   282,    -1,    -1,    -1,    -1,
      -1,   288,    -1,    -1,    -1,    -1,    -1,   988,   231,    -1,
      -1,    -1,    -1,    -1,    -1,  3279,    -1,    -1,    -1,    -1,
    2423,    -1,    -1,  3339,  1005,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3353,  2130,   326,
      -1,    -1,  1023,    79,  2136,    -1,    -1,    -1,    -1,    -1,
      -1,  2019,  2020,  1034,  1035,  1036,    -1,  1038,  1039,    95,
      -1,   284,   349,    -1,    -1,   484,  2894,    -1,    -1,    -1,
     106,    -1,   491,   492,   493,   494,   495,   496,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1066,    -1,  2478,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   142,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,   405,    -1,
      -1,    -1,    -1,    -1,    -1,  2528,    -1,    -1,   164,    -1,
      -1,    -1,    -1,   169,    -1,    -1,    -1,  1118,    -1,    -1,
      -1,  1122,  1123,    -1,    -1,   432,    -1,    -1,    -1,    -1,
      -1,    -1,  1133,  1134,    -1,   442,  2248,   380,    -1,    -1,
      -1,   197,    -1,    -1,    -1,  2133,    -1,    -1,    -1,    -1,
      -1,    -1,   459,  2564,   461,   462,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2598,    -1,    -1,    -1,    -1,
      -1,    -1,  3030,  1184,   240,    -1,    -1,    -1,   244,    -1,
      -1,   498,  1193,    -1,   501,   502,   503,    -1,    -1,    -1,
    2623,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1217,    -1,    -1,    -1,
      -1,    -1,  2633,  2634,  2635,  2636,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,
      -1,   484,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,
     493,   494,   495,   496,   310,    -1,  2679,    -1,    -1,    -1,
      -1,  2373,    -1,    -1,    -1,  2377,    -1,    -1,    46,   325,
    2382,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,
      -1,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      78,    -1,   358,    -1,    -1,   361,    -1,    26,    36,    -1,
      -1,    -1,    -1,    32,   370,    -1,    -1,   373,    46,    -1,
      -1,    40,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   391,    -1,    -1,    -1,    -1,
      -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,
      78,    -1,    -1,    -1,  2765,    -1,   412,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2787,   421,    -1,    -1,    -1,    -1,
    2482,   427,    -1,    -1,  2486,  2487,  2488,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,   454,  2822,
      -1,    -1,    -1,  2515,    -1,    -1,    -1,    -1,    -1,    -1,
     188,    -1,    -1,    -1,   133,   193,    -1,    -1,  2530,  2531,
    2532,  2533,  2534,  2535,  2536,  2537,  2538,  2539,    -1,    -1,
      -1,  3279,  1433,    -1,    -1,    -1,    -1,    -1,    -1,  2427,
    2428,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,
     188,    -1,    -1,    -1,  1465,   193,  1467,  1468,    -1,    -1,
      -1,  2894,    -1,    -1,    -1,    -1,    -1,   196,    -1,  1480,
    1481,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,   217,
      -1,    -1,    -1,    -1,    -1,    -1,  1497,    -1,    -1,    -1,
      -1,    -1,    -1,   231,    -1,    -1,   284,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2626,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1526,   245,  1528,    -1,    -1,
      -1,    -1,    -1,    -1,   253,    -1,    -1,    -1,    -1,   267,
    2652,    -1,   270,    -1,    -1,    -1,   265,    -1,    -1,    -1,
      -1,    -1,    -1,  1554,    -1,    -1,   284,    -1,    -1,  1560,
    1561,  1562,  1563,  1564,  1565,  1566,  1567,   286,    -1,    -1,
      -1,  1572,  1573,    -1,    -1,    -1,  1577,   296,    -1,    -1,
    1581,    -1,    -1,  1584,  1585,  1586,  1587,  1588,  1589,  1590,
    1591,  1592,    -1,    -1,  1595,    -1,    -1,    -1,    -1,    -1,
      -1,  1602,   380,  1604,    -1,    -1,    -1,  3030,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   341,    -1,    -1,    -1,   345,  1628,   347,    -1,
      -1,    -1,  2620,  3044,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2758,    -1,    -1,     0,
      -1,   370,   380,  3064,    -1,    -1,   375,  2645,    -1,    -1,
    1661,  1662,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     389,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    32,    -1,    34,    35,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,    -1,    -1,
      -1,    52,    -1,    -1,    -1,    -1,   484,    -1,    -1,    -1,
      61,    -1,  3123,   491,   492,   493,   494,   495,   496,    -1,
      -1,    -1,    73,    -1,    -1,    -1,   445,    -1,    -1,    -1,
      -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3153,    -1,    -1,    96,    -1,    98,  1749,    -1,
      -1,  1752,  1753,    -1,  1755,    -1,   484,    -1,   109,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,   496,    -1,
      -1,  2759,   123,   124,    -1,    -1,    -1,   945,    -1,    -1,
      -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,   139,    -1,
    1791,    -1,    -1,    -1,    -1,    -1,   147,    -1,   149,   150,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   163,  2925,    -1,    -1,   167,    -1,    -1,    -1,
      -1,  2933,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,   192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,  3279,   208,  1859,  1860,
      -1,  1862,    -1,    -1,    46,    -1,    -1,    -1,  2980,    -1,
      -1,    53,    -1,  2985,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   234,    -1,    -1,    -1,    -1,  1056,    -1,
    1891,  1892,    -1,    -1,  1895,    -1,    78,    -1,    -1,  3011,
      -1,    -1,    -1,    -1,    -1,  2893,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3031,
    3032,    -1,    -1,  1924,    -1,    -1,    -1,    -1,    -1,  1930,
      -1,    -1,  1100,    -1,    -1,    -1,    -1,    -1,  3050,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1950,
      -1,    -1,    -1,    -1,   305,   306,   307,    -1,    -1,    -1,
    1961,    -1,   313,    -1,  1132,   316,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3091,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     172,  1992,    -1,    -1,   345,    -1,  1997,    -1,    -1,  2000,
      -1,    -1,    -1,   354,    -1,    -1,   188,    -1,    -1,    -1,
      -1,   193,    -1,    -1,    -1,    -1,    -1,   368,    -1,    -1,
      -1,    -1,    -1,    -1,   375,    -1,    -1,    -1,   379,    -1,
      -1,    -1,    -1,    -1,   216,   217,    -1,  2038,   389,    -1,
    2041,    -1,  2043,    -1,    -1,    -1,    -1,    -1,    -1,   231,
     401,    -1,  1220,    -1,   405,    -1,    -1,    -1,  2059,  1227,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,   424,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,   267,   437,    -1,   270,   440,
      -1,    -1,   443,    -1,    -1,    -1,    36,   448,  2099,  3087,
      -1,    -1,   284,    -1,    -1,   287,    46,    -1,    -1,    -1,
      -1,   462,    -1,    53,    -1,  2116,  2117,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2135,   486,    -1,    -1,    78,    -1,
      -1,    -1,    -1,  2144,    -1,    -1,    -1,    -1,    -1,   500,
      -1,    -1,   503,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3273,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    -1,    -1,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,
      -1,    -1,  2203,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,   188,    -1,
      -1,    -1,    -1,   193,    -1,  2256,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1431,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   216,   217,    -1,    -1,
    1448,    -1,  1450,    -1,  1452,  1453,  1454,    -1,    -1,  1457,
      -1,   231,    -1,  1461,    -1,    -1,  1464,    -1,    -1,    -1,
      -1,  1469,   484,    -1,  1472,   487,   488,   489,    -1,   491,
     492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,   510,    -1,
     270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,
      -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,
      -1,    -1,    -1,    -1,   188,    -1,  1524,    -1,    -1,   193,
      -1,  1529,    -1,    -1,  1532,  1533,  1534,    -1,    -1,    -1,
    1538,    -1,    -1,    -1,  1542,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,
    2391,    -1,    -1,    -1,  2395,  2396,    -1,   231,    -1,    -1,
      -1,  2402,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2411,    -1,    -1,  2414,    -1,  2416,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2424,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2432,  2433,  1601,    -1,    -1,   270,    -1,  2439,    -1,
     380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     284,    -1,    -1,  2454,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2463,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1644,    -1,    -1,    -1,
      -1,    -1,    -1,  2484,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1660,    -1,    -1,    -1,    -1,  1665,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1682,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   484,    -1,   380,   487,   488,   489,
      -1,   491,   492,   493,   494,   495,   496,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   504,    -1,     3,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2640,
    2641,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     484,    -1,    -1,   487,   488,   489,  2657,   491,   492,   493,
     494,   495,   496,    -1,    -1,    -1,    -1,    -1,  2669,    -1,
      -1,    -1,  2673,  2674,    -1,    -1,    -1,  2678,    -1,    -1,
      -1,    -1,  2683,    -1,    -1,  2686,  2687,    -1,    -1,  1857,
    2691,  2692,    -1,    -1,  2695,    -1,    -1,  1865,  1866,    -1,
    1868,  1869,  1870,  1871,  1872,  1873,  2707,    -1,  1876,  1877,
    1878,  1879,  1880,  1881,  1882,  1883,  1884,  1885,  1886,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,   172,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
    2751,   188,    -1,    -1,    -1,    -1,   193,    -1,    36,    -1,
      -1,    -1,    40,    -1,    -1,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    -1,  2778,    -1,   216,
     217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   231,    -1,  1964,  1965,    -1,    -1,
      78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     267,    -1,    -1,   270,  2002,    -1,    -1,    -1,  2006,  2007,
    2008,  2009,  2010,  2011,  2012,  2013,    -1,   284,    -1,    -1,
     287,  2019,  2020,    -1,  2022,  2023,    -1,    -1,    -1,    -1,
      -1,  2862,    -1,    -1,    -1,    -1,  2034,    -1,    -1,  2037,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2045,  2046,  2047,
    2048,  2049,  2050,  2051,  2052,  2053,  2054,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2909,    -1,
     188,    -1,    -1,    -1,  2082,   193,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2929,    -1,
      -1,    -1,    -1,    -1,    -1,  2936,    -1,    -1,   216,   217,
      -1,    -1,    -1,   380,    -1,    -1,  2947,  2948,    -1,    -1,
    2951,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2133,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2976,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,
      -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,  3000,
      -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2208,  2209,  2210,    -1,    -1,    -1,    -1,   484,    -1,    -1,
     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,
      -1,     8,  3063,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
    3081,    -1,    -1,    -1,  3085,    -1,    -1,    -1,  3089,    36,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3099,    46,
      -1,    -1,   380,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,  3112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3130,
      -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2310,  2311,  2312,    -1,    -1,  2315,  2316,  2317,
    2318,  2319,  2320,    -1,    -1,    -1,  2324,  2325,  2326,  2327,
    2328,  2329,  2330,  2331,  2332,  2333,    -1,    -1,    -1,    -1,
    2338,  2339,    -1,    -1,    -1,    -1,  3177,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3187,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2366,  3200,
      -1,    -1,    -1,    -1,  2372,    -1,   484,    -1,    -1,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,   496,    -1,
      -1,    -1,  2390,   501,    -1,   172,    -1,    -1,    -1,  3230,
      -1,    -1,    -1,    -1,    -1,  2403,    -1,    -1,  2406,    -1,
    2408,   188,    -1,    -1,  2412,  2413,   193,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2426,  2427,
    2428,  2429,    -1,  2431,    -1,    -1,    -1,  2435,    -1,   216,
     217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3317,  3318,    -1,    -1,
     267,  2489,    -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,
     287,    -1,  3343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3379,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,     8,
      -1,  2589,    11,    -1,    53,    -1,    15,    16,    17,    18,
      19,    20,    21,   380,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    78,
      -1,    -1,  2620,    -1,    -1,    -1,    -1,    46,    -1,    -1,
       8,    -1,    -1,    11,    53,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    78,
    2658,    -1,  2660,    -1,    -1,    -1,  2664,    -1,    46,    -1,
      -1,    -1,    -1,    -1,  2672,    53,    -1,  2675,    -1,  2677,
      -1,    -1,    -1,  2681,    -1,    -1,  2684,  2685,    -1,    -1,
    2688,  2689,    -1,    -1,    -1,    -1,    -1,    -1,  2696,    -1,
      78,    -1,    -1,    -1,    -1,    -1,    -1,   484,  2706,    -1,
     487,   488,   489,   172,   491,   492,   493,   494,   495,   496,
      -1,    -1,    -1,  2721,   501,    -1,    -1,    -1,    -1,   188,
      -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   172,    -1,    -1,    -1,   216,   217,    -1,
      -1,  2759,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,
      -1,    -1,   231,    -1,   193,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   172,    -1,    -1,   216,   217,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,    -1,
     188,   270,   231,    -1,    -1,   193,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,   217,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,    -1,
      -1,   270,    -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,
      -1,    -1,   270,    -1,  2892,  2893,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2917,
    2918,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2935,    -1,    -1,
      -1,  2939,    -1,  2941,  2942,  2943,    -1,    -1,  2946,    -1,
      -1,  2949,  2950,    -1,    -1,    -1,    -1,    -1,    -1,  2957,
      -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2997,
      -1,    -1,   380,    -1,    -1,  3003,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3016,    -1,
      -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,   487,   488,
     489,    -1,   491,   492,   493,   494,   495,   496,    -1,    -1,
      -1,    -1,   501,    -1,    -1,  3043,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,   487,   488,
     489,  3069,   491,   492,   493,   494,   495,   496,    -1,    -1,
      -1,    -1,   501,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3101,  3102,  3103,   484,    -1,    -1,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,   496,    -1,
      -1,  3119,    -1,   501,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3131,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3175,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3192,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3202,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3225,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3250,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,  3292,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,  3346,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,   167,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,    -1,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,    -1,    -1,   228,   229,   230,   231,    -1,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
      -1,   284,   285,   286,    -1,    -1,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,   437,   438,   439,   440,   441,    -1,
     443,   444,   445,   446,   447,   448,   449,    -1,   451,   452,
     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,    -1,   486,    -1,    -1,    -1,    -1,   491,   492,
     493,    -1,    -1,    -1,    -1,   498,    -1,   500,   501,    -1,
      -1,    -1,   505,   506,   507,   508,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
     167,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,    -1,
      -1,   228,   229,   230,   231,    -1,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,    -1,   284,   285,   286,
      -1,    -1,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
     437,   438,   439,   440,   441,    -1,   443,   444,   445,   446,
     447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,    -1,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,   486,
      -1,    -1,    -1,    -1,   491,   492,   493,    -1,    -1,    -1,
      -1,   498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,
     507,   508,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    -1,    -1,    -1,    37,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,   128,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,    -1,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,
     231,    -1,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,    -1,   438,   439,   440,
     441,    -1,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,    -1,    -1,    -1,    -1,    -1,    -1,
     491,   492,   493,    -1,    -1,    -1,    -1,   498,    -1,   500,
     501,    -1,    -1,    -1,   505,   506,   507,   508,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,    -1,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,    -1,   227,   228,   229,   230,   231,    -1,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,    -1,   284,
     285,   286,    -1,    -1,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
      -1,    -1,    -1,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,
     435,   436,    -1,   438,   439,   440,   441,    -1,   443,   444,
     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,
     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,    -1,    -1,    -1,    -1,    -1,   491,   492,   493,    -1,
      -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,    -1,
     505,   506,   507,   508,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
     229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,    -1,    -1,   434,   435,   436,    -1,   438,
     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,    -1,
      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,    -1,    -1,    -1,    -1,
      -1,    -1,   491,   492,   493,    -1,    -1,    -1,    -1,   498,
      -1,   500,    -1,    -1,    -1,    -1,   505,   506,   507,   508,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    37,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,    -1,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,    -1,    -1,   228,   229,   230,   231,    -1,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
      -1,   284,   285,   286,    -1,    -1,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,    -1,   438,   439,   440,   441,    -1,
     443,   444,   445,   446,   447,   448,   449,    -1,   451,   452,
     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,
     493,    -1,    -1,    -1,    -1,   498,    -1,   500,   501,    -1,
      -1,    -1,   505,   506,   507,   508,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    -1,    -1,    -1,
      -1,    38,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,    -1,
      -1,   228,   229,   230,   231,    -1,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,    -1,   284,   285,   286,
      -1,    -1,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,    -1,    -1,
      -1,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
      -1,   438,   439,   440,   441,    -1,   443,   444,   445,   446,
     447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,    -1,
      -1,    -1,    -1,    -1,   491,   492,   493,    -1,    -1,    -1,
      -1,   498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,
     507,   508,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    37,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,    -1,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,
     231,    -1,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,    -1,   438,   439,   440,
     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,
     451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,    -1,    -1,    -1,    -1,    -1,    -1,
     491,   492,   493,    -1,    -1,    -1,    -1,   498,    -1,   500,
     501,    -1,    -1,    -1,   505,   506,   507,   508,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    37,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,    -1,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,    -1,    -1,   228,   229,   230,   231,    -1,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,    -1,   284,
     285,   286,    -1,    -1,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
      -1,    -1,    -1,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,
     435,   436,    -1,   438,   439,   440,   441,    -1,   443,   444,
     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,
     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,    -1,    -1,    -1,    -1,    -1,   491,   492,   493,    -1,
      -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,    -1,
     505,   506,   507,   508,     3,     4,     5,     6,     7,    -1,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,   167,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
     229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,    -1,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,    -1,    -1,   434,   435,   436,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,
      -1,   460,    -1,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,    -1,    -1,   486,    -1,    -1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,   498,
      -1,   500,    -1,    -1,    -1,    -1,   505,   506,   507,   508,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,
      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,    -1,    -1,    -1,    -1,    -1,   491,
     492,   493,    -1,    -1,    -1,    -1,   498,    -1,   500,    -1,
      -1,    -1,    -1,   505,   506,   507,   508,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,    -1,    -1,   284,   285,
     286,    -1,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,    -1,
      -1,    -1,    -1,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,
     436,    -1,   438,   439,   440,   441,    -1,   443,   444,   445,
     446,   447,   448,   449,    -1,   451,   452,   453,   454,   455,
     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,    -1,
      -1,    -1,    -1,    -1,    -1,   491,   492,   493,    -1,    -1,
      -1,    -1,   498,    -1,   500,    -1,    -1,    -1,    -1,   505,
     506,   507,   508,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,   167,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
      -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,    -1,    -1,   228,   229,
     230,   231,    -1,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,    -1,   406,   407,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,    -1,   438,   439,
     440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,
      -1,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,
     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,    -1,    -1,    -1,    -1,
      -1,   491,   492,   493,    -1,    -1,    -1,    -1,   498,    -1,
     500,    -1,    -1,    -1,    -1,   505,   506,   507,   508,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,    -1,   228,   229,   230,   231,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,
     284,   285,   286,    -1,    -1,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,    -1,    -1,    -1,    -1,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,
     444,   445,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,   493,
      -1,    -1,    -1,    -1,   498,    -1,   500,   501,    -1,    -1,
      -1,   505,   506,   507,   508,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,    -1,    -1,
     228,   229,   230,   231,    -1,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,
      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,    -1,    -1,    -1,
      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,
     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,
     448,   449,    -1,   451,   452,   453,   454,   455,   456,   457,
      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,    -1,    -1,
      -1,    -1,    -1,   491,   492,   493,    -1,    -1,    -1,    -1,
     498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,   507,
     508,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,
      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,
     452,   453,   454,   455,   456,   457,    -1,   459,   460,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,    -1,    -1,    -1,    -1,    -1,   491,
     492,   493,    -1,    -1,    -1,    -1,   498,    -1,   500,    -1,
      -1,    -1,    -1,   505,   506,   507,   508,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,    -1,    -1,   284,   285,
     286,    -1,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,    -1,
      -1,    -1,    -1,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,
     436,    -1,   438,   439,   440,   441,    -1,   443,   444,   445,
     446,   447,   448,   449,    -1,   451,   452,   453,   454,   455,
     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,    -1,
      -1,    -1,    -1,    -1,    -1,   491,   492,   493,    -1,    -1,
      -1,    -1,   498,    -1,   500,    -1,    -1,    -1,    -1,   505,
     506,   507,   508,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
      -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,    -1,    -1,   228,   229,
     230,   231,    -1,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,    -1,   438,   439,
     440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,
      -1,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,
     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,    -1,    -1,    -1,    -1,
      -1,   491,   492,   493,    -1,    -1,    -1,    -1,   498,    -1,
     500,    -1,    -1,    -1,    -1,   505,   506,   507,   508,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,    -1,   228,   229,   230,   231,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,
     284,   285,   286,    -1,    -1,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,    -1,    -1,    -1,    -1,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,
     444,   445,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,   493,
      -1,    -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,
      -1,   505,   506,   507,   508,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,    -1,    -1,
     228,   229,   230,   231,    -1,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,
      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,    -1,    -1,    -1,
      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,    -1,   406,   407,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,
     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,
     448,   449,    -1,   451,   452,   453,   454,   455,   456,   457,
      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,    -1,    -1,
      -1,    -1,    -1,   491,   492,   493,    -1,    -1,    -1,    -1,
     498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,   507,
     508,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,
      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,    -1,    -1,    -1,    -1,    -1,   491,
     492,   493,    -1,    -1,    -1,    -1,   498,    -1,   500,    -1,
      -1,    -1,    -1,   505,   506,   507,   508,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,    -1,    -1,   284,   285,
     286,    -1,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,    -1,
      -1,    -1,    -1,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,
     436,    -1,   438,   439,   440,   441,    -1,   443,   444,   445,
     446,   447,   448,   449,    -1,   451,   452,   453,   454,   455,
     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,    -1,
      -1,    -1,    -1,    -1,    -1,   491,   492,   493,    -1,    -1,
      -1,    -1,   498,    -1,   500,    -1,    -1,    -1,    -1,   505,
     506,   507,   508,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
      -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,    -1,    -1,   228,   229,
     230,   231,    -1,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,    -1,   406,   407,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,    -1,   438,   439,
     440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,
      -1,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,
     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,    -1,    -1,    -1,    -1,
      -1,   491,   492,   493,    -1,    -1,    -1,    -1,   498,    -1,
     500,    -1,    -1,    -1,    -1,   505,   506,   507,   508,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,    -1,   228,   229,   230,   231,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,
     284,   285,   286,    -1,    -1,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,    -1,    -1,    -1,    -1,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,
     444,   445,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,   493,
      -1,    -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,
      -1,   505,   506,   507,   508,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,    -1,    -1,
     228,   229,   230,   231,    -1,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,
      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,    -1,    -1,    -1,
      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,    -1,   406,   407,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,
     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,
     448,   449,    -1,   451,   452,   453,   454,   455,   456,   457,
      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,    -1,    -1,
      -1,    -1,    -1,   491,   492,   493,    -1,    -1,    -1,    -1,
     498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,   507,
     508,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,
      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,    -1,    -1,    -1,    -1,    -1,   491,
     492,   493,    -1,    -1,    -1,    -1,   498,    -1,   500,    -1,
      -1,    -1,    -1,   505,   506,   507,   508,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,    -1,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,    -1,    -1,   284,   285,
     286,    -1,    -1,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,    -1,
      -1,    -1,    -1,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,
     436,    -1,   438,   439,   440,   441,    -1,   443,   444,   445,
     446,   447,   448,   449,    -1,   451,   452,   453,   454,   455,
     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   491,   492,    -1,    -1,    -1,
      -1,    -1,   498,    -1,   500,    -1,    -1,    -1,    -1,   505,
     506,   507,   508,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
      -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,    -1,    -1,   228,   229,
     230,   231,    -1,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,    -1,   268,   269,
      -1,   271,   272,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,    -1,   406,   407,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,    -1,   438,   439,
     440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,
      -1,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,
     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,    -1,    -1,    -1,    -1,
      -1,   491,   492,   493,    -1,    -1,    -1,    -1,   498,    -1,
     500,    -1,    -1,    -1,    -1,   505,   506,   507,   508,     3,
       4,     5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,    -1,   228,   229,   230,   231,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,    -1,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,
     284,   285,   286,    -1,    -1,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,    -1,    -1,    -1,    -1,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,
     444,   445,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,    -1,
      -1,    -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,
      -1,   505,   506,   507,   508,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,    -1,   217,
     218,   219,   220,   221,   222,   223,   224,   225,    -1,    -1,
     228,   229,   230,   231,    -1,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,    -1,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,
      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,    -1,    -1,    -1,
      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,    -1,   406,   407,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,
     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,
     448,   449,    -1,   451,   452,   453,   454,   455,   456,   457,
      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   491,   492,    -1,    -1,    -1,    -1,    -1,
     498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,   507,
     508,     3,     4,     5,     6,     7,    -1,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,    -1,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,
      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,   498,    -1,   500,    -1,
      -1,    -1,    -1,   505,   506,   507,   508,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,    -1,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,    -1,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,    -1,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,    -1,   268,   269,    -1,   271,   272,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,    -1,   284,
     285,   286,    -1,    -1,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
      -1,    -1,    -1,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,
     435,   436,    -1,   438,   439,   440,   441,    -1,   443,   444,
     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,
     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   491,   492,   493,    -1,
      -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,    -1,
     505,   506,   507,   508,     3,     4,     5,     6,     7,    -1,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,   176,   177,   178,
     179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
     229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,    -1,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,    -1,    -1,   434,   435,   436,    -1,   438,
     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,
      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,    -1,    -1,    -1,    -1,     3,
       4,     5,     6,     7,    -1,     9,    -1,    -1,    -1,   498,
      -1,   500,    -1,    -1,    -1,    -1,   505,   506,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,    -1,   228,   229,   230,   231,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,    -1,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,
     284,   285,   286,    -1,    -1,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,    -1,    -1,    -1,    -1,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,
     444,   445,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
      -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,
      -1,   505,   506,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,   157,   158,
     159,   160,   161,   162,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,    -1,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
      -1,   230,    -1,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,   266,    -1,   268,
     269,    -1,   271,    -1,   273,   274,   275,   276,   277,   278,
     279,   280,   281,    -1,    -1,   284,   285,   286,    -1,   288,
     289,   290,    -1,   292,    -1,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,    -1,   406,    -1,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,    -1,   424,   425,   426,   427,   428,
     429,   430,   431,   432,    -1,   434,   435,   436,    -1,   438,
     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,
     449,    -1,   451,    -1,   453,   454,   455,   456,   457,    -1,
      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   501,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,
     218,    -1,   220,   221,   222,   223,   224,   225,    -1,    -1,
     228,    -1,   230,    -1,    -1,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,    -1,   262,   263,   264,   265,   266,    -1,
     268,   269,    -1,   271,    -1,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,
      -1,   289,   290,    -1,   292,    -1,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,    -1,    -1,    -1,
      -1,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,    -1,   406,    -1,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,
     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,
     448,   449,    -1,   451,    -1,   453,   454,   455,   456,   457,
      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   500,   501,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    34,    35,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
     167,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,    -1,
      -1,   228,   229,   230,   231,    -1,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
      -1,   268,   269,   270,   271,    -1,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,    -1,   284,   285,   286,
      -1,    -1,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
     437,   438,   439,   440,   441,    -1,   443,   444,   445,   446,
     447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,    -1,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,    -1,     3,   486,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   500,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,    -1,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,   228,   229,   230,   231,    -1,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,    -1,   268,   269,   270,   271,    -1,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,   283,   284,
     285,   286,    -1,    -1,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,
     435,   436,   437,   438,   439,   440,   441,    -1,   443,   444,
     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,
     455,   456,   457,    -1,    -1,   460,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,
      -1,   486,     3,     4,     5,    -1,    -1,    -1,     9,    -1,
      -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,    -1,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,
     231,    -1,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,    -1,   268,   269,   270,
     271,    -1,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,   282,    -1,   284,   285,   286,    -1,    -1,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,    -1,   438,   439,   440,
     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,
     451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,     3,    -1,     5,    -1,    -1,    -1,    -1,
     491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
      -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,   228,   229,
     230,   231,    -1,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,    -1,   268,   269,
     270,   271,    -1,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,    -1,   283,   284,   285,   286,    -1,    -1,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,    -1,   406,   407,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,    -1,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,    -1,   438,   439,
     440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,
      -1,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,
     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     500,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
     229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,    -1,   268,
     269,   270,   271,    -1,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,    -1,   424,   425,   426,   427,   428,
     429,   430,   431,    -1,    -1,   434,   435,   436,    -1,   438,
     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,
      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   500,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,    -1,    -1,
     228,   229,   230,   231,    -1,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,    -1,
     268,   269,   270,   271,    -1,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,
      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,    -1,    -1,    -1,
      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,    -1,   406,   407,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,
     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,
     448,   449,    -1,   451,   452,   453,   454,   455,   456,   457,
      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   500,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
     167,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,    -1,   204,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,    -1,
      -1,   218,    -1,   220,   221,   222,   223,   224,   225,    -1,
      -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,    -1,   262,   263,   264,   265,   266,
      -1,   268,   269,    -1,   271,    -1,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,    -1,   284,   285,   286,
      -1,    -1,   289,   290,    -1,   292,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,   405,   406,
      -1,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
     437,   438,   439,   440,   441,    -1,   443,   444,   445,   446,
     447,   448,   449,    -1,   451,    -1,   453,   454,   455,   456,
     457,    -1,    -1,   460,    -1,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,     3,    -1,   486,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   500,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,   167,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,   225,
      -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,
     266,    -1,   268,   269,    -1,   271,    -1,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,    -1,    -1,   284,   285,
     286,    -1,    -1,   289,   290,    -1,   292,    -1,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,   405,
     406,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,
     436,   437,   438,   439,   440,   441,    -1,   443,   444,   445,
     446,   447,   448,   449,    -1,   451,    -1,   453,   454,   455,
     456,   457,    -1,    -1,   460,    -1,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,    -1,     3,
     486,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   500,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,   266,    -1,   268,   269,    -1,   271,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,
     284,   285,   286,    -1,    -1,   289,   290,    -1,   292,    -1,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,    -1,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,
     444,   445,   446,   447,   448,   449,    -1,   451,    -1,   453,
     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,    -1,   181,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,
     223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,    -1,   262,
     263,   264,   265,   266,    -1,   268,   269,    -1,   271,    -1,
     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
      -1,   284,   285,   286,    -1,    -1,   289,   290,    -1,   292,
      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,    -1,   406,    -1,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,    -1,   438,   439,   440,   441,    -1,
     443,   444,   445,   446,   447,   448,   449,    -1,   451,    -1,
     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,
     182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,    -1,
     262,   263,   264,   265,   266,    -1,   268,   269,    -1,   271,
      -1,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,    -1,
     292,    -1,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,    -1,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,
      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,
      -1,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,    -1,
     181,   182,   183,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
      -1,    -1,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,   262,   263,   264,   265,   266,    -1,   268,   269,    -1,
     271,    -1,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,
      -1,   292,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,
     311,    -1,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,    -1,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,    -1,   438,   439,   440,
     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,
     451,    -1,   453,   454,   455,   456,   457,    -1,    -1,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
      -1,   181,   182,   183,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,
     220,   221,   222,   223,   224,   225,    -1,    -1,   228,    -1,
     230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,    -1,   262,   263,   264,   265,   266,    -1,   268,   269,
      -1,   271,    -1,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,
     290,    -1,   292,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,    -1,   406,    -1,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,    -1,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,    -1,   438,   439,
     440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,
      -1,   451,    -1,   453,   454,   455,   456,   457,    -1,    -1,
     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     500,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,    -1,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
      -1,   230,    -1,    -1,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,   266,    -1,   268,
     269,    -1,   271,    -1,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,
     289,   290,    -1,   292,    -1,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,    -1,   406,    -1,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,    -1,   424,   425,   426,   427,   428,
     429,   430,   431,    -1,    -1,   434,   435,   436,    -1,   438,
     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,
     449,    -1,   451,    -1,   453,   454,   455,   456,   457,    -1,
      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   500,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,
     218,    -1,   220,   221,   222,   223,   224,   225,    -1,    -1,
     228,    -1,   230,    -1,    -1,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,    -1,   262,   263,   264,   265,   266,    -1,
     268,   269,    -1,   271,    -1,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,
      -1,   289,   290,    -1,   292,    -1,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,    -1,    -1,    -1,
      -1,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,    -1,   406,    -1,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,
     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,
     448,   449,    -1,   451,    -1,   453,   454,   455,   456,   457,
      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   500,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,    -1,   204,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,    -1,
      -1,   218,    -1,   220,   221,   222,   223,   224,   225,    -1,
      -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,    -1,   262,   263,   264,   265,   266,
      -1,   268,   269,    -1,   271,    -1,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,    -1,   284,   285,   286,
      -1,    -1,   289,   290,    -1,   292,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,    -1,    -1,
      -1,    -1,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,
      -1,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
      -1,   438,   439,   440,   441,    -1,   443,   444,   445,   446,
     447,   448,   449,    -1,   451,    -1,   453,   454,   455,   456,
     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   500,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,   225,
      -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,
     266,    -1,   268,   269,    -1,   271,    -1,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,    -1,    -1,   284,   285,
     286,    -1,    -1,   289,   290,    -1,   292,    -1,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,    -1,
      -1,    -1,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
     406,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,
     436,    -1,   438,   439,   440,   441,    -1,   443,   444,   445,
     446,   447,   448,   449,    -1,   451,    -1,   453,   454,   455,
     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,    -1,     3,
       4,     5,    -1,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    15,    16,    -1,   500,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
      -1,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,    -1,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,    -1,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,    -1,   291,   292,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,    -1,   312,   313,
     314,    -1,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,    -1,   421,    -1,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   480,   481,   482,   483,
      -1,     3,    -1,   487,   488,   489,     8,   491,   492,   493,
     494,   495,   496,    15,    16,    -1,    -1,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,
     182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,    -1,
     262,   263,   264,   265,   266,    -1,   268,   269,    -1,   271,
      -1,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,    -1,
     292,    -1,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,    -1,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,
      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,
      -1,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    -1,    -1,    -1,   487,   488,   489,    -1,   491,
     492,   493,   494,   495,   496,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    36,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,     8,    78,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    78,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,   172,
      -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,
     193,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,
      -1,    -1,   193,   216,   217,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,
      -1,    -1,    -1,    -1,    -1,   216,   217,    -1,   172,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     231,    -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,   193,
      -1,    -1,    -1,    -1,   267,    -1,    -1,   270,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   284,   216,   217,   287,    -1,   267,    -1,    -1,   270,
      -1,    -1,    -1,   172,    -1,    -1,    -1,   231,    -1,    -1,
      -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,   188,
      -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,   267,    -1,    -1,   270,   216,   217,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
     284,    -1,   231,   287,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,    78,
      -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
      -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   484,    -1,   172,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,   496,    -1,    -1,    -1,    -1,   501,   188,
      -1,   380,    -1,   484,   193,    -1,   487,   488,   489,    -1,
     491,   492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,
     501,    -1,    -1,    -1,    -1,    -1,    -1,   216,   217,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     484,    -1,    -1,   487,   488,   489,    -1,   491,   492,   493,
     494,   495,   496,    -1,    -1,    -1,    -1,   501,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,    -1,
      -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,
      -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,   487,   488,
     489,    -1,   491,   492,   493,   494,   495,   496,    -1,    -1,
      -1,    -1,   501,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    36,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    46,    -1,    -1,    -1,
      -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
      -1,   380,    -1,    -1,    -1,    53,    -1,     8,    78,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      78,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      46,    -1,   172,    -1,    -1,   484,    -1,    53,   487,   488,
     489,    -1,   491,   492,   493,   494,   495,   496,   188,    -1,
      -1,    -1,   501,   193,   172,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     188,    -1,    -1,    -1,    -1,   193,   216,   217,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,   216,   217,
      -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   231,    -1,    -1,    -1,   188,    -1,    -1,
      -1,    -1,   193,    -1,    -1,    -1,    -1,   267,    -1,    -1,
     270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   284,   216,   217,   287,    -1,   267,
      -1,    -1,   270,    -1,    -1,    -1,   172,    -1,    -1,    -1,
     231,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,
      -1,    -1,   188,    -1,    -1,    -1,    -1,   193,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,   267,    -1,    -1,   270,
     216,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    -1,   284,    -1,   231,   287,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   267,    78,    -1,   270,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,   284,    -1,
      -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   484,    -1,   172,   487,   488,   489,
      -1,   491,   492,   493,   494,   495,   496,    -1,    -1,    -1,
      -1,   501,   188,    -1,   380,    -1,   484,   193,    -1,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,   496,    -1,
      -1,    -1,    -1,   501,    -1,    -1,    -1,    -1,    -1,    -1,
     216,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,
     491,   492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,
     501,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   267,    -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,
      -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,
      -1,   487,   488,   489,    -1,   491,   492,   493,   494,   495,
     496,    -1,    -1,    -1,    -1,   501,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    36,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    46,    -1,    -1,   380,    -1,    -1,    -1,    53,    -1,
       8,    78,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,   172,    -1,    -1,   484,    -1,
      53,   487,   488,   489,    -1,   491,   492,   493,   494,   495,
     496,   188,    -1,    -1,    -1,   501,   193,   172,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,   193,   216,
     217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,
      -1,   216,   217,    -1,   172,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,
     188,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,
     267,    -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,   216,   217,
     287,    -1,   267,    -1,    -1,   270,    -1,    -1,    -1,   172,
      -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,   284,
      -1,    -1,   287,    -1,    -1,   188,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,
      -1,    -1,   270,   216,   217,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,   231,   287,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   267,    -1,    -1,   270,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,
      -1,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,
     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,
      -1,    -1,   499,    -1,    -1,    -1,    -1,   380,    -1,   484,
      -1,    -1,   487,   488,   489,    -1,   491,   492,   493,   494,
     495,   496,    -1,    -1,   499,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,   496,    -1,
      -1,   499,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
      -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,   496,    -1,    -1,   499,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   493,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,   266,    -1,   268,   269,    -1,   271,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,
     284,   285,   286,    -1,    -1,   289,   290,    -1,   292,    -1,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,    -1,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,
     444,   445,   446,   447,   448,   449,    -1,   451,    -1,   453,
     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   493,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,    -1,   181,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,
     223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,    -1,   262,
     263,   264,   265,   266,    -1,   268,   269,    -1,   271,    -1,
     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
      -1,   284,   285,   286,    -1,    -1,   289,   290,    -1,   292,
      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,    -1,   406,    -1,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,    -1,   438,   439,   440,   441,    -1,
     443,   444,   445,   446,   447,   448,   449,    -1,   451,    -1,
     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,     3,     4,     5,    -1,    -1,    -1,     9,    -1,    -1,
     493,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,    -1,   268,   269,   270,   271,
      -1,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
     282,    -1,   284,   285,   286,    -1,    -1,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,
      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,     3,     4,     5,    -1,    -1,    -1,     9,   491,
     492,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,    -1,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,
     231,    -1,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,    -1,   268,   269,   270,
     271,    -1,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,   282,    -1,   284,   285,   286,    -1,    -1,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,    -1,   438,   439,   440,
     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,
     451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,     3,     4,     5,    -1,    -1,    -1,     9,
     491,   492,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
      -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,    -1,    -1,   228,   229,
     230,   231,    -1,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,    -1,   268,   269,
     270,   271,    -1,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,   282,    -1,   284,   285,   286,    -1,    -1,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,    -1,   406,   407,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,    -1,   438,   439,
     440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,
      -1,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,
     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,    -1,    -1,     8,    -1,    -1,    11,
      -1,   491,   492,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    41,
      -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,
      -1,    53,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    78,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,
      -1,    53,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    78,    -1,    -1,    -1,
     122,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,
      -1,    53,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    78,    -1,    40,    -1,
      -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,
     172,    53,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,    -1,
      -1,   193,    -1,    -1,    36,    -1,    78,    -1,    -1,    -1,
     162,    -1,    -1,    -1,    46,   167,    -1,    -1,    -1,    -1,
     172,    53,    -1,    -1,   216,   217,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,   231,
      -1,   193,    -1,    -1,    -1,    -1,    78,    -1,    -1,   161,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     172,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   267,   188,    -1,   270,   231,
      -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,
     172,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   267,   188,    -1,   270,   231,
      -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,
     172,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   267,   188,    -1,   270,   231,
      -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   216,   217,    -1,    -1,   380,    -1,
      -1,    -1,    -1,    -1,    -1,   267,    -1,    -1,   270,   231,
      -1,    -1,   314,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,
      -1,    -1,    -1,    -1,    -1,   267,    -1,    -1,   270,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     442,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   308,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,
     492,   493,   494,   495,   496,    -1,    -1,    -1,   380,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,
     492,   493,   494,   495,   496,    36,    -1,    -1,   380,    40,
      -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,
      11,    -1,    53,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,
     492,   493,   494,   495,   496,    36,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,
      11,    -1,    53,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,
     492,   493,   494,   495,   496,    36,    -1,    78,    -1,    40,
      -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,
      11,    -1,    53,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,
     492,   493,   494,   495,   496,    36,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,   172,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,
      -1,    -1,   193,    -1,    -1,    -1,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   167,    -1,    -1,    -1,
      -1,   172,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,
     231,    -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   172,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   267,   188,    -1,   270,
     231,    -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   162,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,
      -1,   172,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   267,   188,    -1,   270,
     231,    -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   267,    -1,    -1,   270,
     231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
      -1,    -1,    -1,    -1,    -1,    -1,   267,    -1,    -1,   270,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,   380,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    36,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,   380,
      53,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,   484,    -1,    78,   487,   488,   489,    -1,
     491,   492,   493,   494,   495,   496,    -1,    -1,    -1,   380,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,
     491,   492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,
     491,   492,   493,   494,   495,   496,    -1,    -1,    -1,   172,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,   188,    -1,    -1,    -1,    -1,
     193,   172,    -1,   484,    -1,    -1,   487,   488,   489,    36,
     491,   492,   493,   494,   495,   496,    -1,   188,    -1,    46,
      -1,    -1,   193,   216,   217,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,
      -1,    -1,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
      -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   267,    -1,    -1,   270,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   284,    -1,    -1,   287,    -1,   267,    -1,    -1,   270,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   172,     8,    -1,    -1,    11,
      -1,    -1,    36,    15,    16,    -1,    -1,    19,    20,    21,
      -1,   188,    46,    -1,    -1,     8,   193,    -1,    11,    53,
      -1,    -1,    15,    16,    36,    -1,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    46,    -1,    -1,   380,    -1,   216,
     217,    53,    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,   231,    -1,    -1,    -1,    -1,   380,
      53,    -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,
     413,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,
     267,    -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,
     287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,
      -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,   496,   188,    -1,    -1,    -1,    -1,   193,
     172,    -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,
     491,   492,   493,   494,   495,   496,   188,    -1,    -1,   172,
      -1,   193,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   188,    -1,   231,    -1,    -1,
     193,    -1,    -1,   380,   216,   217,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,
      -1,    -1,    -1,   216,   217,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   267,    -1,    -1,   270,    -1,   231,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     284,    -1,    -1,   287,    -1,   267,    -1,    -1,   270,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   284,    -1,   267,   287,    -1,   270,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,
     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     484,    -1,    -1,   487,   488,   489,    -1,   491,   492,   493,
     494,   495,   496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,
     492,   493,   494,   495,   496,     3,    -1,     5,    -1,    -1,
      -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,   496,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,    -1,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,    -1,    -1,   228,   229,   230,   231,    -1,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,    -1,   268,   269,   270,   271,    -1,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,   282,    -1,   284,
     285,   286,    -1,    -1,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
      -1,    -1,    -1,    -1,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,
     435,   436,    -1,   438,   439,   440,   441,    -1,   443,   444,
     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,
     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      34,    35,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,    -1,   228,   229,   230,   231,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,    -1,   268,   269,   270,   271,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,
     284,   285,   286,    -1,    -1,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,    -1,    -1,    -1,    -1,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,
     444,   445,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,    -1,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,    -1,    -1,   228,   229,   230,   231,    -1,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,    -1,   268,   269,   270,   271,    -1,
     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
      -1,   284,   285,   286,    -1,    -1,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,    -1,   438,   439,   440,   441,    -1,
     443,   444,   445,   446,   447,   448,   449,    -1,   451,   452,
     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,    -1,   268,   269,   270,   271,
      -1,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,    -1,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,
      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    -1,    -1,    80,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,   164,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,    -1,
     181,   182,   183,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
      -1,    -1,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,   262,   263,   264,   265,   266,    -1,   268,   269,    -1,
     271,    -1,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,
      -1,   292,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,    -1,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,   433,   434,   435,   436,    -1,   438,   439,   440,
     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,
     451,    -1,   453,   454,   455,   456,   457,    -1,    -1,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,   164,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
      -1,   181,   182,   183,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,
     220,   221,   222,   223,   224,   225,    -1,    -1,   228,    -1,
     230,   231,    -1,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,    -1,   262,   263,   264,   265,   266,    -1,   268,   269,
      -1,   271,    -1,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,
     290,    -1,   292,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,    -1,   406,    -1,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,    -1,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,   433,   434,   435,   436,    -1,   438,   439,
     440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,
      -1,   451,    -1,   453,   454,   455,   456,   457,    -1,    -1,
     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    34,    35,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,    -1,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
      -1,   230,    -1,    -1,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,   266,    -1,   268,
     269,    -1,   271,    -1,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,
     289,   290,    -1,   292,    -1,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,    -1,   406,    -1,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,    -1,   424,   425,   426,   427,   428,
     429,   430,   431,    -1,    -1,   434,   435,   436,    -1,   438,
     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,
     449,    -1,   451,    -1,   453,   454,   455,   456,   457,    -1,
      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,
     218,    -1,   220,   221,   222,   223,   224,   225,    -1,    -1,
     228,    -1,   230,    -1,    -1,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,    -1,   262,   263,   264,   265,   266,    -1,
     268,   269,    -1,   271,    -1,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,
      -1,   289,   290,    -1,   292,    -1,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,    -1,    -1,    -1,
      -1,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,    -1,   406,    -1,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,
     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,
     448,   449,    -1,   451,    -1,   453,   454,   455,   456,   457,
      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,    -1,   204,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,    -1,
      -1,   218,    -1,   220,   221,   222,   223,   224,   225,    -1,
      -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,    -1,   262,   263,   264,   265,   266,
      -1,   268,   269,    -1,   271,    -1,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,   283,   284,   285,   286,
      -1,    -1,   289,   290,    -1,   292,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,    -1,    -1,
      -1,    -1,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,
      -1,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
      -1,   438,   439,   440,   441,    -1,   443,   444,   445,   446,
     447,   448,   449,    -1,   451,    -1,   453,   454,   455,   456,
     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,   225,
      -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,
     266,    -1,   268,   269,    -1,   271,    -1,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,    -1,   283,   284,   285,
     286,    -1,    -1,   289,   290,    -1,   292,    -1,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,    -1,
      -1,    -1,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
     406,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,
     436,    -1,   438,   439,   440,   441,    -1,   443,   444,   445,
     446,   447,   448,   449,    -1,   451,    -1,   453,   454,   455,
     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,    -1,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,    -1,    -1,   218,    -1,   220,   221,   222,   223,   224,
     225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,    -1,   262,   263,   264,
     265,   266,    -1,   268,   269,    -1,   271,    -1,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,    -1,   284,
     285,   286,    -1,    -1,   289,   290,    -1,   292,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
      -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,    -1,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,
     435,   436,    -1,   438,   439,   440,   441,    -1,   443,   444,
     445,   446,   447,   448,   449,    -1,   451,    -1,   453,   454,
     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,     3,
       4,    -1,    -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,   266,    -1,   268,   269,    -1,   271,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,
     284,   285,   286,    -1,    -1,   289,   290,    -1,   292,    -1,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,    -1,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,
     444,   445,   446,   447,   448,   449,    -1,   451,    -1,   453,
     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,    -1,   181,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,
     223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,    -1,   262,
     263,   264,   265,   266,    -1,   268,   269,    -1,   271,    -1,
     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
      -1,   284,   285,   286,    -1,    -1,   289,   290,    -1,   292,
      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,   405,   406,    -1,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,    -1,   438,   439,   440,   441,    -1,
     443,   444,   445,   446,   447,   448,   449,    -1,   451,    -1,
     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,
     182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,    -1,
     262,   263,   264,   265,   266,    -1,   268,   269,    -1,   271,
      -1,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,    -1,
     292,    -1,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,    -1,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,
      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,
      -1,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,    -1,
     181,   182,   183,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
      -1,    -1,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,   262,   263,   264,   265,   266,    -1,   268,   269,    -1,
     271,    -1,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,
      -1,   292,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,
     311,    -1,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,    -1,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,    -1,   438,   439,   440,
     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,
     451,    -1,   453,   454,   455,   456,   457,    -1,    -1,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
      -1,   181,   182,   183,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,
     220,   221,   222,   223,   224,   225,    -1,    -1,   228,    -1,
     230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,    -1,   262,   263,   264,   265,   266,    -1,   268,   269,
      -1,   271,    -1,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,
     290,    -1,   292,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,    -1,   406,    -1,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,    -1,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,    -1,   438,   439,
     440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,
      -1,   451,    -1,   453,   454,   455,   456,   457,    -1,    -1,
     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,    -1,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
      -1,   230,    -1,    -1,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,   266,    -1,   268,
     269,    -1,   271,    -1,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,
     289,   290,    -1,   292,    -1,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,    -1,   406,    -1,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,    -1,   424,   425,   426,   427,   428,
     429,   430,   431,    -1,    -1,   434,   435,   436,    -1,   438,
     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,
     449,    -1,   451,    -1,   453,   454,   455,   456,   457,    -1,
      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,
     218,    -1,   220,   221,   222,   223,   224,   225,    -1,    -1,
     228,    -1,   230,    -1,    -1,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,    -1,   262,   263,   264,   265,   266,    -1,
     268,   269,    -1,   271,    -1,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,
      -1,   289,   290,    -1,   292,    -1,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,    -1,    -1,    -1,
      -1,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,    -1,   406,    -1,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,
     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,
     448,   449,    -1,   451,    -1,   453,   454,   455,   456,   457,
      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,    -1,   204,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,    -1,
      -1,   218,    -1,   220,   221,   222,   223,   224,   225,    -1,
      -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,    -1,   262,   263,   264,   265,   266,
      -1,   268,   269,    -1,   271,    -1,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,    -1,   284,   285,   286,
      -1,    -1,   289,   290,    -1,   292,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,    -1,    -1,
      -1,    -1,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,
      -1,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
      -1,   438,   439,   440,   441,    -1,   443,   444,   445,   446,
     447,   448,   449,    -1,   451,    -1,   453,   454,   455,   456,
     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,   225,
      -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,
     266,    -1,   268,   269,    -1,   271,    -1,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,    -1,    -1,   284,   285,
     286,    -1,    -1,   289,   290,    -1,   292,    -1,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,    -1,
      -1,    -1,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
     406,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,
     436,    -1,   438,   439,   440,   441,    -1,   443,   444,   445,
     446,   447,   448,   449,    -1,   451,    -1,   453,   454,   455,
     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,    -1,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,    -1,    -1,   218,    -1,   220,   221,   222,   223,   224,
     225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,    -1,   262,   263,   264,
     265,   266,    -1,   268,   269,    -1,   271,    -1,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,    -1,   284,
     285,   286,    -1,    -1,   289,   290,    -1,   292,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
      -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,    -1,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,
     435,   436,    -1,   438,   439,   440,   441,    -1,   443,   444,
     445,   446,   447,   448,   449,    -1,   451,    -1,   453,   454,
     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,   266,    -1,   268,   269,    -1,   271,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,
     284,   285,   286,    -1,    -1,   289,   290,    -1,   292,    -1,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,    -1,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,
     444,   445,   446,   447,   448,   449,    -1,   451,    -1,   453,
     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,    -1,   181,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,
     223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,    -1,   262,
     263,   264,   265,   266,    -1,   268,   269,    -1,   271,    -1,
     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
      -1,   284,   285,   286,    -1,    -1,   289,   290,    -1,   292,
      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,    -1,   406,    -1,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,    -1,   438,   439,   440,   441,    -1,
     443,   444,   445,   446,   447,   448,   449,    -1,   451,    -1,
     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,
     182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,    -1,
     262,   263,   264,   265,   266,    -1,   268,   269,    -1,   271,
      -1,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,    -1,
     292,    -1,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,    -1,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,
      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,
      -1,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,    -1,
     181,   182,   183,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
      -1,    -1,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,   262,   263,   264,   265,   266,    -1,   268,   269,    -1,
     271,    -1,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,
      -1,   292,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,
     311,    -1,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,    -1,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,    -1,   438,   439,   440,
     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,
     451,    -1,   453,   454,   455,   456,   457,    -1,    -1,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
      -1,   181,   182,   183,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,
     220,   221,   222,   223,   224,   225,    -1,    -1,   228,    -1,
     230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,    -1,   262,   263,   264,   265,   266,    -1,   268,   269,
      -1,   271,    -1,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,
     290,    -1,   292,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,    -1,   406,    -1,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,    -1,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,    -1,   438,   439,
     440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,
      -1,   451,    -1,   453,   454,   455,   456,   457,    -1,    -1,
     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,    -1,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,
      -1,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
      -1,   230,    -1,    -1,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,    -1,   262,   263,   264,   265,   266,    -1,   268,
     269,    -1,   271,    -1,   273,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,
     289,   290,    -1,   292,    -1,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,    -1,   406,    -1,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,    -1,   424,   425,   426,   427,   428,
     429,   430,   431,    -1,    -1,   434,   435,   436,    -1,   438,
     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,
     449,    -1,   451,    -1,   453,   454,   455,   456,   457,    -1,
      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,
     218,    -1,   220,   221,   222,   223,   224,   225,    -1,    -1,
     228,    -1,   230,    -1,    -1,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,    -1,   262,   263,   264,   265,   266,    -1,
     268,   269,    -1,   271,    -1,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,
      -1,   289,   290,    -1,   292,    -1,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,    -1,    -1,    -1,
      -1,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,    -1,   406,    -1,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,
     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,
     448,   449,    -1,   451,    -1,   453,   454,   455,   456,   457,
      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,    -1,   204,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,    -1,
      -1,   218,    -1,   220,   221,   222,   223,   224,   225,    -1,
      -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,    -1,   262,   263,   264,   265,   266,
      -1,   268,   269,    -1,   271,    -1,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,    -1,   284,   285,   286,
      -1,    -1,   289,   290,    -1,   292,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,    -1,    -1,
      -1,    -1,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,
      -1,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
      -1,   438,   439,   440,   441,    -1,   443,   444,   445,   446,
     447,   448,   449,    -1,   451,    -1,   453,   454,   455,   456,
     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,   225,
      -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,
     266,    -1,   268,   269,    -1,   271,    -1,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,    -1,    -1,   284,   285,
     286,    -1,    -1,   289,   290,    -1,   292,    -1,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,    -1,
      -1,    -1,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
     406,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,
     436,    -1,   438,   439,   440,   441,    -1,   443,   444,   445,
     446,   447,   448,   449,    -1,   451,    -1,   453,   454,   455,
     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,    -1,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,    -1,    -1,   218,    -1,   220,   221,   222,   223,   224,
     225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,    -1,   262,   263,   264,
     265,   266,    -1,   268,   269,    -1,   271,    -1,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,    -1,   284,
     285,   286,    -1,    -1,   289,   290,    -1,   292,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
      -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,    -1,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,
     435,   436,    -1,   438,   439,   440,   441,    -1,   443,   444,
     445,   446,   447,   448,   449,    -1,   451,    -1,   453,   454,
     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    37,    -1,    -1,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    -1,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,    -1,    -1,   179,    -1,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,    -1,   228,   229,   230,   231,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,    -1,   268,   269,   270,   271,    -1,    -1,
     274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,
     284,   285,   286,    -1,    -1,   289,    -1,   291,   292,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,    -1,    -1,    -1,    -1,   309,   310,    -1,   312,   313,
     314,    -1,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,    -1,   403,
     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,    -1,   421,    -1,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
     434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,
     444,   445,   446,   447,    -1,   449,    -1,   451,   452,   453,
     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,
     464,   465,   466,   467,   468,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   480,   481,   482,   483,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,   200,    -1,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,
     218,    -1,   220,   221,   222,   223,   224,   225,    -1,    -1,
     228,    -1,   230,    -1,    -1,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,    -1,   262,   263,   264,   265,   266,    -1,
     268,   269,    -1,   271,    -1,   273,   274,   275,   276,   277,
     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,
      -1,   289,   290,    -1,   292,    -1,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,    -1,    -1,    -1,
      -1,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,    -1,   406,    -1,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,
     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,
     448,   449,    -1,   451,    -1,   453,   454,   455,   456,   457,
      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,
     187,    -1,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,    -1,   204,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,    -1,
      -1,   218,    -1,   220,   221,   222,   223,   224,   225,    -1,
      -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,    -1,   262,   263,   264,   265,   266,
      -1,   268,   269,    -1,   271,    -1,   273,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,    -1,   284,   285,   286,
      -1,    -1,   289,   290,    -1,   292,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,    -1,    -1,
      -1,    -1,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,
      -1,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
      -1,   438,   439,   440,   441,    -1,   443,   444,   445,   446,
     447,   448,   449,    -1,   451,    -1,   453,   454,   455,   456,
     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
     186,   187,    -1,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,
      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,   225,
      -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,
     266,    -1,   268,   269,    -1,   271,    -1,   273,   274,   275,
     276,   277,   278,    -1,   280,   281,    -1,    -1,   284,   285,
     286,    -1,    -1,   289,   290,    -1,   292,    -1,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,    -1,
      -1,    -1,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
     406,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,
     436,    -1,   438,   439,   440,   441,    -1,   443,   444,   445,
     446,   447,   448,   449,    -1,   451,    -1,   453,   454,   455,
     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,    -1,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,    -1,    -1,   218,    -1,   220,   221,   222,   223,   224,
     225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,    -1,   262,   263,   264,
     265,   266,    -1,   268,   269,    -1,   271,    -1,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,    -1,   284,
     285,   286,    -1,    -1,   289,   290,    -1,   292,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
      -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,    -1,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,
     435,   436,    -1,   438,   439,   440,   441,    -1,   443,   444,
     445,   446,   447,   448,   449,    -1,   451,    -1,   453,   454,
     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,
     224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,
     264,   265,   266,    -1,   268,   269,    -1,   271,    -1,   273,
     274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,
     284,   285,   286,    -1,    -1,   289,   290,    -1,   292,    -1,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,    -1,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,
     444,   445,   446,   447,   448,   449,    -1,   451,    -1,   453,
     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,    -1,   181,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,
     223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,    -1,   262,
     263,   264,   265,   266,    -1,   268,   269,    -1,   271,    -1,
     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
      -1,   284,   285,   286,    -1,    -1,   289,   290,    -1,   292,
      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,    -1,   370,   371,   372,
     373,   374,    -1,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,    -1,   406,    -1,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,    -1,   438,   439,   440,   441,    -1,
     443,   444,   445,   446,   447,   448,   449,    -1,   451,    -1,
     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,
     182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,   211,
      -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,   221,
     222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,    -1,
     262,   263,   264,   265,   266,    -1,   268,   269,    -1,   271,
      -1,   273,   274,   275,   276,   277,   278,    -1,   280,   281,
      -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,    -1,
     292,    -1,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,    -1,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,
      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,
      -1,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,    -1,
     181,   182,   183,   184,   185,   186,   187,    -1,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,    -1,   204,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
      -1,    -1,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
      -1,   262,   263,   264,   265,   266,    -1,   268,   269,    -1,
     271,    -1,   273,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,
      -1,   292,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,
     311,    -1,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,    -1,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,    -1,   438,   439,   440,
     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,
     451,    -1,   453,   454,   455,   456,   457,    -1,    -1,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
      -1,   181,   182,   183,   184,   185,   186,   187,    -1,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
     200,    -1,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,
     220,   221,   222,   223,   224,   225,    -1,    -1,   228,    -1,
     230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,    -1,   262,   263,   264,   265,   266,    -1,   268,   269,
      -1,   271,    -1,   273,   274,   275,   276,   277,   278,    -1,
     280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,
     290,    -1,   292,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,    -1,   406,    -1,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,    -1,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,    -1,   438,   439,
     440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,
      -1,   451,    -1,   453,   454,   455,   456,   457,    -1,    -1,
     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    -1,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    -1,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,    -1,
     149,   150,   151,   152,   153,    -1,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,    -1,   172,   173,    -1,   175,    -1,    -1,    -1,
     179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
     199,   200,    -1,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
     229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,    -1,   268,
     269,   270,   271,    -1,    -1,   274,   275,   276,   277,   278,
      -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,
     289,    -1,   291,   292,   293,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,
     309,   310,    -1,   312,   313,   314,    -1,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,    -1,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,    -1,   421,    -1,    -1,   424,   425,   426,   427,   428,
     429,   430,   431,   432,    -1,   434,   435,   436,    -1,   438,
     439,   440,   441,    -1,   443,   444,   445,   446,   447,    -1,
     449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,
      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   480,   481,   482,   483,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    -1,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,    -1,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,    -1,   172,
     173,    -1,   175,    -1,    -1,    -1,   179,    -1,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,    -1,
     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,    -1,    -1,   228,   229,   230,   231,    -1,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,    -1,   268,   269,   270,   271,    -1,
      -1,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,
      -1,   284,   285,   286,    -1,    -1,   289,    -1,   291,   292,
     293,    -1,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,    -1,    -1,    -1,    -1,   309,   310,    -1,   312,
     313,   314,    -1,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,    -1,   401,    -1,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,    -1,   421,    -1,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,   434,   435,   436,    -1,   438,   439,   440,   441,    -1,
     443,   444,   445,   446,   447,    -1,   449,    -1,   451,   452,
     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,
     463,   464,   465,   466,   467,   468,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,   482,
     483,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      -1,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,    -1,   172,   173,    -1,   175,    -1,
      -1,    -1,   179,    -1,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,
     197,   198,   199,   200,    -1,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,    -1,
      -1,   228,   229,   230,   231,    -1,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
      -1,   268,   269,   270,   271,    -1,    -1,   274,   275,   276,
     277,   278,    -1,   280,   281,    -1,    -1,   284,   285,   286,
      -1,    -1,   289,    -1,   291,   292,   293,    -1,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,    -1,    -1,
      -1,    -1,   309,   310,    -1,   312,   313,   314,    -1,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,    -1,   401,    -1,   403,   404,    -1,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,    -1,   421,    -1,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,   434,   435,   436,
      -1,   438,   439,   440,   441,    -1,   443,   444,   445,   446,
     447,    -1,   449,    -1,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,
     467,   468,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   480,   481,   482,   483,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    -1,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,    -1,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,    -1,    -1,   179,    -1,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,
      -1,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,
     231,    -1,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,    -1,   268,   269,   270,
     271,    -1,    -1,   274,   275,   276,   277,   278,    -1,   280,
     281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,    -1,
     291,   292,   293,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,
      -1,   312,   313,   314,    -1,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,
     351,   352,   353,   354,   355,    -1,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,    -1,
     401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,    -1,
     421,    -1,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,    -1,   438,   439,   440,
     441,    -1,   443,   444,   445,   446,   447,    -1,   449,    -1,
     451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   480,
     481,   482,   483,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,
     185,   186,   187,    -1,   189,   190,   191,   192,    -1,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,
     215,    -1,    -1,   218,    -1,   220,   221,   222,   223,   224,
     225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,    -1,   262,   263,   264,
     265,   266,    -1,   268,   269,    -1,   271,    -1,   273,   274,
     275,   276,   277,   278,    -1,   280,   281,    -1,    -1,   284,
     285,   286,    -1,    -1,   289,   290,    -1,   292,    -1,   294,
     295,   296,   297,   298,   299,   300,    -1,   302,   303,   304,
      -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,    -1,   327,    -1,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,   350,   351,    -1,   353,   354,
     355,   356,    -1,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,    -1,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,
     435,   436,    -1,   438,   439,   440,   441,    -1,   443,   444,
     445,   446,   447,   448,   449,    -1,   451,    -1,   453,   454,
     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    -1,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,    -1,   172,   173,
      -1,   175,    -1,    -1,    -1,   179,    -1,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,    -1,   213,
      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,    -1,   228,   229,   230,   231,    -1,   233,
     234,   235,   236,   237,   238,   239,   240,    -1,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,    -1,   268,   269,   270,   271,    -1,    -1,
     274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,
     284,   285,   286,    -1,    -1,   289,    -1,   291,   292,   293,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,    -1,    -1,    -1,    -1,   309,   310,    -1,   312,   313,
     314,    -1,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,    -1,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
     374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,    -1,   399,    -1,   401,    -1,   403,
     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,    -1,   421,    -1,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,
     444,   445,   446,   447,    -1,   449,    -1,   451,   452,   453,
     454,   455,   456,   457,    -1,    22,   460,    -1,    -1,   463,
     464,   465,   466,   467,   468,    32,    -1,    34,    35,    -1,
      -1,    -1,    22,    -1,    -1,    -1,   480,   481,   482,   483,
      -1,    -1,    32,    -1,    -1,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    52,    -1,    -1,    -1,    73,    -1,    -1,    -1,
      -1,    61,    -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,
      -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    96,
      -1,    98,    -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,    -1,    -1,    -1,    96,    -1,    98,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,   109,
      -1,    -1,    -1,    -1,    -1,    -1,   133,    -1,    -1,    -1,
      -1,    -1,   139,   123,    -1,    -1,    -1,    -1,    -1,    -1,
     147,    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,   139,
      -1,    -1,    -1,    -1,    -1,    -1,   163,   147,    -1,    -1,
     167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   163,    -1,    -1,    -1,   167,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   208,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   208,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   305,   306,
     307,    -1,    -1,    -1,    -1,    -1,   313,    -1,    -1,   316,
      -1,    -1,    -1,    -1,    -1,   305,   306,   307,    -1,    -1,
      -1,    -1,    -1,   313,    -1,    -1,   316,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   345,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   354,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   345,    -1,    -1,    -1,    -1,
      -1,   368,    -1,    -1,   354,    -1,    -1,    -1,   375,    -1,
      -1,    -1,   379,    -1,    -1,    -1,    -1,    -1,   368,    -1,
      -1,    -1,   389,    -1,    -1,   375,    -1,    -1,    -1,   379,
      -1,    -1,    -1,    -1,   401,    -1,    -1,    -1,   405,   389,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   401,    -1,    -1,    -1,   405,    -1,   424,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     437,    -1,    -1,    -1,   424,    -1,   443,    -1,    -1,    -1,
      -1,   448,    -1,    -1,    -1,   452,    -1,   437,    -1,    -1,
      -1,    -1,    -1,   443,    -1,   462,    -1,    -1,   448,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   462,    -1,    -1,    -1,    -1,    -1,    -1,   486,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   500,    -1,    -1,   486,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     500
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    22,    32,    34,    35,    47,    52,    61,    73,    84,
      96,    98,   109,   123,   124,   133,   139,   147,   149,   150,
     163,   167,   192,   208,   234,   305,   306,   307,   313,   316,
     345,   354,   368,   375,   379,   389,   401,   405,   424,   437,
     440,   443,   448,   462,   486,   500,   512,   513,   514,   515,
     526,   527,   529,   534,   550,   553,   554,   556,   558,   560,
     567,   569,   570,   618,   625,   628,   629,   646,   647,   648,
     649,   651,   653,   654,   658,   710,   711,   879,   882,   885,
     892,   893,   895,   896,   897,   904,   908,   914,   916,   921,
     925,   926,   927,   930,   933,   934,   938,   939,   941,   418,
     465,   568,   197,   361,   370,   405,   454,   106,   928,   568,
       3,    22,    23,    24,    25,    26,    27,    28,    29,    31,
      32,    33,    42,    43,    44,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    59,    60,    61,
      62,    63,    64,    67,    68,    69,    70,    71,    73,    74,
      75,    76,    77,    79,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    92,    93,    94,    95,    96,    97,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   114,   116,   117,   118,   119,   120,
     121,   123,   124,   125,   126,   127,   130,   131,   132,   133,
     134,   136,   137,   138,   140,   141,   142,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   156,   158,
     159,   160,   161,   163,   165,   166,   168,   169,   170,   171,
     172,   173,   175,   177,   178,   179,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   194,   195,
     196,   197,   198,   199,   200,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   213,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   228,   229,   230,
     231,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   268,   269,   270,   271,   273,
     274,   275,   276,   277,   278,   280,   281,   284,   285,   286,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   320,   321,   322,   323,
     324,   325,   327,   328,   329,   330,   331,   332,   333,   334,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   403,   404,   406,   407,   408,   409,   410,   411,
     412,   414,   415,   418,   419,   420,   421,   422,   424,   425,
     426,   427,   428,   429,   430,   431,   434,   435,   436,   438,
     439,   440,   441,   443,   444,   445,   446,   447,   448,   449,
     451,   452,   453,   454,   455,   456,   457,   460,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   780,
     863,   867,   870,   944,   945,   946,     3,   171,   241,   398,
     867,   894,   944,   568,    55,   500,   641,     5,   106,   173,
     235,   287,   361,   409,   411,   427,   433,   436,   555,   616,
     866,   891,     5,    30,   316,   861,   867,   868,   106,   928,
      24,    79,    95,   106,   142,   152,   164,   169,   197,   240,
     244,   310,   325,   358,   361,   370,   373,   391,   405,   412,
     421,   427,   454,   619,   620,   623,   568,   861,    98,   452,
     500,   515,   526,   527,   529,   550,   553,   556,   558,   560,
     567,   570,   618,   625,   628,   629,   646,   879,   882,   885,
     892,   893,   900,   904,   908,   914,   916,   921,   930,   933,
     938,   939,   941,   106,    73,   208,    66,    77,    79,   154,
     226,   273,   283,   294,   311,   357,   400,   420,   422,   426,
     448,   500,   647,   711,   713,   715,   725,   732,   733,   780,
     782,   783,   857,   867,   868,   106,   866,   867,   915,   915,
     867,   861,    30,   414,   418,   867,   931,   932,   936,   568,
      30,   128,   666,   667,   173,   235,   361,   374,   414,   909,
     910,   936,   568,   646,   658,   867,   937,   732,   867,   405,
     663,   857,   168,   500,   918,   500,   333,   659,   660,   861,
     659,   647,   648,     0,   503,   118,   207,   439,   143,   212,
     288,   432,   669,   670,   715,   715,   647,   649,   651,   504,
     452,   898,    30,   414,   418,   646,   937,   186,   857,   861,
     186,   857,   186,   732,   186,   857,   866,   500,   498,   502,
     838,   840,   646,   857,   186,   857,   409,   411,   409,   411,
     343,   186,   857,   857,   106,   169,   240,   333,   370,   405,
     454,   626,   197,    30,   861,   186,     3,   246,   421,   105,
     405,   405,   454,   364,     3,    37,    42,    49,    54,    55,
      56,    57,    69,    70,    79,    81,    87,    99,   110,   111,
     132,   160,   166,   168,   172,   186,   188,   203,   210,   211,
     213,   216,   217,   219,   229,   231,   241,   260,   261,   262,
     270,   275,   291,   293,   312,   330,   352,   356,   369,   376,
     380,   383,   398,   407,   414,   415,   426,   432,   449,   452,
     624,   743,   745,   747,   749,   751,   753,   755,   756,   757,
     759,   760,   761,   763,   764,   871,   944,   947,   186,   621,
     867,   872,   186,   858,   861,   186,   861,   500,   559,   287,
     900,     3,    37,    42,    49,    53,    54,    55,    56,    57,
      69,    70,    77,    79,    81,    87,    99,   110,   111,   148,
     154,   160,   166,   168,   171,   172,   177,   178,   188,   203,
     204,   210,   211,   213,   216,   217,   219,   229,   231,   241,
     260,   261,   262,   266,   270,   273,   275,   290,   291,   293,
     294,   311,   312,   315,   330,   352,   356,   369,   376,   380,
     383,   398,   400,   407,   414,   415,   420,   422,   426,   448,
     449,   452,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   901,   903,   904,   906,   907,   944,   948,
     898,   866,   867,   894,   915,   500,   500,   162,   500,   647,
     733,   500,   500,   857,   500,   500,   167,   500,   500,   500,
     500,   647,   711,   715,   725,    40,   726,   727,   867,   726,
     368,   504,   650,    37,    42,    99,   168,   203,   219,   229,
     261,   305,   312,   352,   369,   437,   729,   727,    40,   726,
     728,   867,   486,   737,   493,   840,   866,   489,   500,   500,
     880,   483,   218,   502,   282,     4,     6,     7,     8,     9,
      10,    39,    54,    56,    57,    65,    69,    70,    81,   110,
     111,   113,   148,   155,   160,   177,   178,   210,   211,   213,
     241,   260,   262,   267,   272,   275,   284,   330,   356,   383,
     414,   415,   423,   449,   484,   491,   492,   493,   498,   500,
     505,   506,   507,   508,   647,   700,   748,   751,   754,   755,
     756,   758,   759,   760,   763,   764,   775,   777,   778,   779,
     780,   781,   783,   784,   798,   799,   810,   832,   837,   847,
     848,   849,   863,   864,   865,   866,   867,   846,   848,   909,
     909,   866,   909,   483,   167,   416,   489,   502,   840,   732,
     922,     3,   166,   168,   452,   904,   917,   919,   166,   920,
     775,   816,   817,   659,   504,   500,   874,   501,   501,   514,
     167,   287,   537,   922,    30,   128,   664,   664,    59,   664,
     157,   162,   232,   279,   675,   677,   678,   703,   705,   706,
     707,   176,   282,   442,   282,   669,   670,   500,   857,   406,
     935,   483,   218,   148,    26,    32,   133,   286,   341,   345,
     375,   445,   520,   523,   524,   341,   148,    40,    60,   104,
     196,   245,   253,   265,   296,   341,   347,   370,   375,   389,
     523,   561,   564,   148,   341,   375,   523,   148,   341,   375,
     523,    40,   929,     3,    30,    37,    42,    49,    55,    79,
      81,    87,    99,   128,   166,   168,   171,   172,   188,   203,
     216,   217,   219,   229,   231,   241,   261,   270,   291,   293,
     312,   352,   369,   380,   398,   407,   426,   450,   452,   501,
     775,   819,   820,   869,   875,   944,   949,   775,   839,     3,
      30,    34,    35,    36,    38,    39,    40,    41,    45,    58,
      65,    66,    72,    78,    80,    91,    98,   113,   115,   122,
     128,   129,   135,   139,   143,   155,   157,   162,   164,   167,
     174,   176,   180,   193,   201,   212,   214,   226,   227,   232,
     267,   272,   279,   282,   283,   287,   288,   305,   306,   307,
     308,   319,   326,   335,   349,   368,   385,   402,   405,   413,
     416,   417,   423,   432,   433,   437,   442,   448,   450,   458,
     459,   461,   462,   862,   876,   944,   948,   950,   838,   501,
     500,   605,   267,   167,   106,   361,   616,   267,   883,    40,
     857,   454,   186,   857,   186,   857,   943,   186,   857,   186,
     857,    87,   888,   148,   466,    88,   125,   299,   410,   451,
     762,   762,   762,   500,   750,   750,   315,   500,   752,   148,
     500,    69,    70,   762,   750,   747,   464,   486,   500,   765,
     500,   765,   500,    63,   348,   504,   622,   500,    39,   746,
     500,   107,   108,   183,   184,   247,   248,   249,   250,   251,
     252,   255,   256,   365,   366,   480,   481,   500,   766,   767,
     768,   769,   770,   771,   772,   773,   774,   750,   148,   504,
     622,   502,   873,   148,   504,   622,   148,   282,   817,   343,
     501,   504,     4,   155,   282,   423,   491,   492,   563,   566,
     865,   866,   899,   901,   902,   905,   900,   500,   636,   640,
     416,   775,   817,   500,     3,   766,   767,   768,   769,   770,
     771,   772,   773,   822,   823,   866,   727,   728,   775,   857,
     775,   824,   491,   492,   776,   777,   799,   810,   826,   867,
     500,   775,   816,   827,   775,    58,   167,   227,   417,   775,
     817,   830,   775,   501,   868,   407,   683,   684,   500,   684,
     666,   667,   715,   214,   661,   219,    37,   219,   369,   729,
     219,   291,   730,   715,   730,   219,   729,   500,   219,   730,
     219,   144,   194,   717,   219,   684,   500,   868,   684,   500,
     289,   563,   905,   911,   913,   819,   745,   821,    40,   230,
     867,   500,   498,   647,   775,   836,   500,   647,   508,   775,
     500,   500,   775,   775,   775,   144,   850,   851,   775,   817,
     818,   647,   775,   816,     9,     3,   878,   800,   801,   802,
     868,   840,   500,   866,   500,   865,   866,     3,     8,    11,
      15,    16,    17,    18,    19,    20,    21,    36,    40,    46,
      53,    78,   172,   188,   193,   216,   217,   231,   267,   270,
     284,   287,   380,   484,   487,   488,   489,   491,   492,   493,
     494,   495,   496,   808,   809,   810,   812,   844,   463,   785,
     293,   775,   504,   661,   500,   866,   841,   502,   840,   661,
       3,   113,   235,   563,   764,   866,   912,   102,   113,   913,
     113,   913,   867,    40,   867,   501,   504,   898,   504,   501,
     660,   858,   859,    40,   922,   187,   343,   214,   375,   649,
     649,    30,   671,   672,   775,    59,   649,   665,   159,   264,
     691,   221,   265,   329,   378,   439,     4,     9,    30,   686,
     775,   491,   492,   687,   688,   775,   777,   703,   704,   678,
     677,   675,   676,   162,   706,   277,   708,    59,   655,   656,
     657,   718,   776,   848,   848,   675,   703,   817,   874,   230,
     857,    72,    80,    91,   164,   186,   319,   433,   587,   597,
     612,   867,    80,    91,   528,    91,   528,   500,   416,   500,
     585,   239,   436,   585,    91,   504,   416,   857,   747,   563,
      59,   565,   563,   563,   104,   245,   253,    59,   416,   462,
     486,   562,   258,   361,   562,   564,   732,    91,   416,   528,
     361,   857,   416,   361,   867,   636,   819,   819,   820,   504,
     669,   670,    13,    14,   499,   510,   416,   604,   609,   867,
     462,   639,   148,   866,   857,   857,   333,   370,   405,   454,
     626,   148,    98,   556,   570,   884,   885,   939,   140,   745,
     857,   267,   557,   561,   267,   500,   605,    40,   267,   605,
     267,   500,   627,   186,   599,   867,   889,     3,   500,   818,
     865,   624,   821,   762,   762,    39,   746,   414,   414,   865,
     865,   742,   867,   745,   742,   498,   498,   865,   865,   416,
     416,   416,   416,   621,   872,   862,   502,   858,   861,   861,
     872,   501,   900,   906,     4,   865,     4,   865,   638,   645,
     876,    55,   100,   119,   137,   141,   163,   166,   181,   272,
     280,   301,   327,   642,   866,    40,   501,   775,   501,   167,
     504,   501,   308,   825,   501,   776,   776,    11,    15,    16,
      19,    20,    21,   193,   216,   284,   487,   488,   489,   491,
     492,   493,   494,   495,   496,   810,   776,   501,   734,   735,
     782,   162,   167,   828,   829,   504,   501,    40,   830,   817,
     830,   830,   167,   501,    40,   726,   500,     4,     9,   679,
     681,   682,   867,   859,   848,   846,   173,   235,   405,   409,
     411,   436,   662,   857,   459,   738,   715,   715,   219,   715,
     282,   442,   731,   715,   219,   848,   715,   715,   274,   274,
     500,   715,   739,   740,   868,   500,   739,   868,   504,   501,
     504,   501,   504,   529,   628,   629,   646,   881,   921,   817,
     818,   458,   833,   834,   775,   775,   803,   804,   805,   806,
       8,    15,    16,    19,    20,    21,   487,   488,   489,   491,
     492,   493,   494,   495,   496,   808,   813,   867,   501,   817,
     500,   867,   343,   855,   162,   499,   501,   504,   504,   509,
     510,   817,   775,   774,   774,   745,   775,   775,   775,   775,
     775,   775,   775,   775,     5,   876,   877,   414,    45,   402,
     845,   872,   775,   775,   500,   647,   831,   128,   155,   267,
     272,   277,   423,   434,   775,   272,   500,   775,   416,    53,
     172,   188,   193,   231,   380,   775,   775,   775,   775,   775,
     775,   775,   775,   775,   775,    30,    38,   385,   807,   498,
     502,   843,   176,   158,   786,   356,   500,   799,   849,   167,
     712,   819,   838,   493,   712,   500,   866,   867,   857,   917,
     857,   925,   775,   504,   501,   500,   442,   924,   531,   857,
     500,   536,   546,   547,   549,   867,    41,   122,   673,   504,
     442,   673,   258,   649,   356,   357,   491,   492,   688,   690,
     777,   378,   221,   283,   304,   304,   504,   495,     4,   689,
     865,   689,   356,   357,   690,   856,   857,   271,   382,   709,
     500,   859,   860,   504,   176,   442,   193,   176,   214,   704,
     676,   501,   341,   523,   500,   186,   597,   861,   221,   267,
     221,   442,   500,   590,   744,   745,   861,   867,   186,   861,
     186,   867,    26,   133,   375,   519,   522,   581,   595,   876,
     861,   589,   608,   876,   861,   520,   861,   341,   375,   523,
     561,   563,   872,   861,   563,   872,   861,   563,   341,   375,
     523,   861,   861,   861,   861,   341,   375,   523,   861,   861,
     669,   669,   669,   450,   820,   187,   346,   668,   775,   775,
     775,   839,   324,   635,   501,   504,   280,   167,   416,   630,
     857,   167,   883,   454,   857,   857,   943,   857,   857,   857,
     287,   616,   500,   647,   500,   148,   148,   231,   587,   597,
     600,   603,   613,   615,   867,   462,   464,   592,   147,   646,
     148,   462,   890,   148,   501,   819,    40,   267,   282,   817,
     501,   501,   622,   501,   498,   483,   483,   501,   501,   501,
     504,   745,   501,   865,   499,   865,   501,   501,   767,   769,
     770,   771,   770,   771,   771,   622,   862,   622,   282,   622,
     501,   504,   493,   500,   563,   637,   905,    40,   634,   866,
     634,   267,   272,   327,   634,    59,   634,   636,   745,   501,
     775,   775,   775,   828,   745,   776,   776,   776,   776,   776,
     776,   128,   267,   277,   776,   776,   776,   776,   776,   776,
     776,   776,   776,   776,   501,   504,    40,   736,   775,   775,
     829,   828,   745,   501,   501,   501,   817,   745,   859,   304,
     495,   304,   357,   495,   500,   500,   501,   661,   409,   411,
     409,   411,   857,   663,   663,   663,   775,   176,   692,   731,
     731,   715,   775,   500,   715,   162,   731,   500,   722,   868,
     731,   501,   504,   745,   739,   501,   911,   745,   501,   499,
     775,   135,   834,   835,   501,   510,   504,   509,   501,   502,
     501,   859,   500,   775,   852,   867,   775,   800,   775,   501,
     501,   483,   776,   776,   141,   817,   167,   128,   155,   272,
     277,   423,   434,   500,   141,   813,   775,   402,   845,   775,
     831,   775,   416,   500,   647,   775,   839,   862,   500,   500,
     151,   787,   713,   714,   738,   669,   851,   738,   865,   774,
     874,   874,   881,   714,   459,   923,    59,   532,    40,   542,
     549,   504,   712,   489,   841,   485,   674,   672,   284,   808,
     811,   674,     4,   865,   690,   283,   439,   687,   504,   238,
     859,   655,    59,   848,   500,   868,    59,   258,   416,   775,
     267,   612,   500,   148,   500,   590,   197,   609,   610,   571,
      40,   171,   580,   606,   571,    26,   133,   345,   347,   375,
     516,   517,   518,   524,   525,   148,   622,   148,   622,   581,
     595,   581,   501,   504,   574,   866,   501,   504,   489,   502,
     416,   361,    91,   416,   528,   361,   416,   416,   416,   361,
     668,   668,   668,   820,   274,   274,   501,   499,   392,   393,
     644,   866,   604,   635,   167,   866,   857,   557,   500,    40,
     605,   627,   883,   343,   405,   551,   552,   866,   609,   857,
     857,   943,   857,   501,   504,   280,   585,   280,   282,   584,
     861,   462,   942,   857,   585,    40,   857,   501,   405,   775,
     148,   857,   501,   746,   865,   765,   765,   746,   867,   746,
     499,   499,   872,   638,   632,   643,   905,   866,   866,   272,
     609,   493,   609,   866,   493,   609,   866,   501,   501,   829,
     167,   128,   277,   500,   737,   734,   500,   501,   501,   501,
     867,   679,   738,   663,   663,   663,   663,   857,   857,   857,
      59,   180,   701,   731,   859,   500,   719,   720,   721,   778,
     863,   859,   162,   740,    78,   741,   501,   413,   775,   139,
     775,   803,   813,   501,   775,   852,   853,   854,    40,   193,
     501,   774,   775,    36,    36,   775,   501,   775,   167,   500,
     821,   775,   501,   141,   776,   776,   141,   141,   775,   775,
     499,   510,   500,   842,   670,   459,   775,   292,   791,   504,
     692,   668,   855,   692,   501,   501,   775,   349,   540,   258,
     311,   113,   295,   500,   530,   646,   867,   501,   504,   536,
     923,   775,   159,   225,   500,   674,   283,   857,   501,   860,
     176,   647,   648,   848,   860,   861,   861,   501,   148,   610,
     597,   610,   571,   599,   504,   501,   115,   201,   265,   267,
     596,   500,    33,    59,   617,   606,    72,    78,    91,   113,
     115,   201,   267,   272,   319,   335,   433,   442,   576,   577,
     591,   171,   113,   185,   267,   585,   562,   105,   113,   171,
     267,   391,   394,   564,   585,   375,   518,   427,   861,   867,
     522,   608,     3,    37,    42,    49,    55,    79,    81,    87,
      99,   166,   168,   171,   172,   188,   203,   216,   217,   219,
     229,   231,   241,   261,   266,   270,   284,   291,   293,   312,
     352,   369,   376,   380,   398,   407,   426,   432,   452,   491,
     492,   563,   572,   611,   745,   811,   866,   869,   944,   950,
     876,   861,   861,   861,   861,   861,   861,   861,   861,   861,
     861,   501,   501,   501,   669,   562,   644,   866,   500,   603,
     646,   890,    40,   616,   186,   857,   501,   504,   501,   557,
     500,    40,   594,   592,   600,    84,   559,   105,   265,   605,
     646,   627,   646,   599,   442,   887,   499,   745,   622,   501,
     504,   609,   776,   167,   500,   821,   739,   501,   504,   501,
     692,   857,   857,   857,   857,    30,   101,   177,   355,   500,
     693,   694,   695,   696,   697,   698,   699,   775,   775,   461,
     788,   501,   777,   814,   815,   193,   176,   716,   720,   500,
     501,   722,   723,   724,   872,   775,   504,   501,   867,   775,
     777,   775,   775,   775,   821,   501,   775,    36,    36,   775,
     775,   141,   501,   839,   501,   819,   501,   775,   501,   500,
     792,   867,   701,   501,   701,   866,   847,   448,   404,   441,
     541,   535,   545,   867,   282,   538,   489,   549,   540,   813,
      59,   501,   501,   447,   448,   652,   571,   597,   501,   501,
     462,   602,   116,   189,   199,   115,   444,   775,   113,    40,
     500,   872,   861,   776,   116,   189,   115,   272,   221,   857,
     602,    86,   617,   186,   272,   563,   775,   617,   272,   491,
     492,   566,   867,   745,   622,   622,   241,   398,   869,   873,
     489,   416,   416,   668,   636,   442,   631,   633,   609,   501,
     942,    40,   405,   775,   405,   267,   500,   866,   890,   603,
     147,   646,   145,   195,   584,   118,   133,   318,   942,   105,
     890,   462,   940,    40,   282,   867,   886,   500,   643,   776,
     821,   501,   501,     9,   342,   685,   701,   500,   377,   500,
     501,   504,   789,   790,   867,   326,   702,   504,   501,   500,
     868,    59,   501,   819,   193,   501,   723,   852,   499,   186,
     501,   775,   775,   775,   499,   501,   501,   793,   867,   788,
     866,   788,   504,   447,   501,   504,   841,    89,   540,   775,
     501,   860,   860,   335,   602,   500,   593,   571,   501,   185,
     500,   775,   267,   577,   602,   605,   861,    40,   148,   741,
     873,   495,   572,   861,   861,   501,   562,   120,   501,   592,
     646,   646,   857,   148,    40,   501,   861,   942,    30,    83,
      92,   114,   185,   198,   391,   394,   588,   588,   357,   357,
      40,    64,    72,   235,   405,   775,   857,   500,   539,   548,
     782,   867,   501,   501,   500,   788,   817,   500,   817,   695,
     504,    40,   775,   442,   680,   777,   848,   859,   727,   669,
     500,   727,   775,   301,   794,   702,   702,   646,   295,   646,
     535,   282,   500,   533,   857,   571,   598,   601,   876,   395,
     456,   578,   579,   500,   573,   775,   501,   243,   614,   185,
     442,   521,   495,   427,   636,   866,   890,   584,   940,   500,
     857,   646,   592,   559,   646,    72,   285,    72,   646,   887,
     775,   501,   504,    78,   543,   543,     9,   702,   501,   694,
     501,   790,   792,   359,   501,   668,   848,   499,    59,   669,
     680,   680,   541,    91,   548,   129,   605,   501,   504,   489,
     561,   501,   265,   586,   168,   300,   381,   282,   582,   583,
     607,   573,   775,   427,    40,   500,   940,   584,   942,   940,
     285,   285,   500,   501,   890,   539,   872,   544,   872,   544,
     501,   680,   501,   682,   501,   501,   816,   328,   357,   795,
     447,   861,   501,   268,   439,   614,   601,   572,   501,   579,
     199,   118,   439,   282,   607,   282,   582,   646,   548,   543,
     738,   673,   673,    53,   102,   429,   775,   796,   797,   796,
     501,   646,   738,   375,   583,    63,   265,   348,   375,   575,
     575,   940,   501,   544,   674,   674,   797,   356,   161,   314,
     161,   314,   547,   571,    25,   113,   272,   890,   673,    36,
     738,   738,   674,   797
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, &yylloc, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, &yylloc, yyscanner)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, yyscanner)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
    core_yyscan_t yyscanner;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
  YYUSE (yyscanner);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp, yyscanner)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
    core_yyscan_t yyscanner;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
#else
static void
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, core_yyscan_t yyscanner)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule, yyscanner)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
    core_yyscan_t yyscanner;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      fprintf (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       , yyscanner);
      fprintf (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule, yyscanner); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp, yyscanner)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
    core_yyscan_t yyscanner;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  YYUSE (yyscanner);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (core_yyscan_t yyscanner);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */






/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (core_yyscan_t yyscanner)
#else
int
yyparse (yyscanner)
    core_yyscan_t yyscanner;
#endif
#endif
{
  /* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;
/* Location data for the look-ahead symbol.  */
YYLTYPE yylloc;

  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;

  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[2];

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0; (void)yynerrs;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
  yylsp = yyls;
#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  /* Initialize the default location before parsing starts.  */
  yylloc.first_line   = yylloc.last_line   = 1;
  yylloc.first_column = yylloc.last_column = 0;
#endif

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
	YYSTACK_RELOCATE (yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     look-ahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to look-ahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 491 "third_party/libpg_query/grammar/grammar.y"
    {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[(1) - (1)].list);
			;}
    break;

  case 3:
#line 507 "third_party/libpg_query/grammar/grammar.y"
    {
					if ((yyvsp[(1) - (3)].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[(1) - (3)].list)), (yylsp[(2) - (3)]));
					}
					if ((yyvsp[(3) - (3)].node) != NULL)
						(yyval.list) = lappend((yyvsp[(1) - (3)].list), makeRawStmt((yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]) + 1));
					else
						(yyval.list) = (yyvsp[(1) - (3)].list);
				;}
    break;

  case 4:
#line 519 "third_party/libpg_query/grammar/grammar.y"
    {
					if ((yyvsp[(1) - (1)].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[(1) - (1)].node), 0));
					else
						(yyval.list) = NIL;
				;}
    break;

  case 43:
#line 566 "third_party/libpg_query/grammar/grammar.y"
    { (yyval.node) = NULL; ;}
    break;

  case 44:
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[(3) - (4)].range);
					n->cmds = (yyvsp[(4) - (4)].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 45:
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[(5) - (6)].range);
					n->cmds = (yyvsp[(6) - (6)].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 46:
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[(3) - (4)].range);
					n->cmds = (yyvsp[(4) - (4)].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 47:
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[(5) - (6)].range);
					n->cmds = (yyvsp[(6) - (6)].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 48:
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[(3) - (4)].range);
					n->cmds = (yyvsp[(4) - (4)].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 49:
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[(5) - (6)].range);
					n->cmds = (yyvsp[(6) - (6)].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 50:
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[(3) - (4)].range);
					n->cmds = (yyvsp[(4) - (4)].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 51:
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[(5) - (6)].range);
					n->cmds = (yyvsp[(6) - (6)].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 52:
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}
    break;

  case 53:
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
    { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].defelt)); ;}
    break;

  case 54:
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
    { (yyval.node) = (yyvsp[(3) - (3)].node); ;}
    break;

  case 55:
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
    { (yyval.node) = NULL; ;}
    break;

  case 56:
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[(1) - (1)]));
				;}
    break;

  case 57:
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));
				;}
    break;

  case 58:
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					if (strcmp((yyvsp[(2) - (2)].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[(2) - (2)].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[(2) - (2)].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[(2) - (2)].defelt)->defname),
								 parser_errposition((yylsp[(2) - (2)]))));
					(yyval.defelt) = (yyvsp[(2) - (2)].defelt);
				;}
    break;

  case 59:
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[(3) - (3)].ival)), (yylsp[(1) - (3)]));
				;}
    break;

  case 60:
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));
				;}
    break;

  case 61:
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));
				;}
    break;

  case 62:
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[(2) - (2)].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 63:
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[(5) - (5)].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 64:
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[(3) - (3)].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 65:
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[(6) - (6)].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 66:
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[(3) - (4)].str);
					n->def = (yyvsp[(4) - (4)].node);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 67:
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[(3) - (6)].str);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 68:
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[(3) - (6)].str);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 69:
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[(3) - (6)].str);
					n->def = (PGNode *) makeInteger((yyvsp[(6) - (6)].ival));
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 70:
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[(3) - (5)].str);
					n->def = (PGNode *) (yyvsp[(5) - (5)].list);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 71:
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[(3) - (5)].str);
					n->def = (PGNode *) (yyvsp[(5) - (5)].list);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 72:
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[(3) - (6)].str);
					n->def = (PGNode *) makeString((yyvsp[(6) - (6)].str));
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 73:
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[(6) - (9)].ival);
					c->options = (yyvsp[(9) - (9)].list);
					c->location = (yylsp[(5) - (9)]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[(3) - (9)].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 74:
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[(3) - (4)].str);
					n->def = (PGNode *) (yyvsp[(4) - (4)].list);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 75:
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[(3) - (5)].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 76:
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[(3) - (7)].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 77:
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[(5) - (6)].str);
					n->behavior = (yyvsp[(6) - (6)].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 78:
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[(3) - (4)].str);
					n->behavior = (yyvsp[(4) - (4)].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 79:
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[(3) - (8)].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[(6) - (8)].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[(7) - (8)].node);
					def->raw_default = (yyvsp[(8) - (8)].node);
					def->location = (yylsp[(3) - (8)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 80:
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[(3) - (4)].str);
					n->def = (PGNode *) (yyvsp[(4) - (4)].list);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 81:
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[(2) - (2)].node);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 82:
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[(3) - (4)].str);
					processCASbits((yyvsp[(4) - (4)].ival), (yylsp[(4) - (4)]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 83:
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[(3) - (3)].str);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 84:
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[(5) - (6)].str);
					n->behavior = (yyvsp[(6) - (6)].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 85:
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[(3) - (4)].str);
					n->behavior = (yyvsp[(4) - (4)].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 86:
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 87:
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 88:
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[(2) - (2)].list);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 89:
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[(2) - (2)].list);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 90:
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[(1) - (1)].list);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 91:
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
    break;

  case 92:
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
    { (yyval.node) = NULL; ;}
    break;

  case 93:
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					(yyval.defelt) = (yyvsp[(1) - (1)].defelt);
				;}
    break;

  case 94:
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					(yyval.defelt) = (yyvsp[(2) - (2)].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				;}
    break;

  case 95:
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					(yyval.defelt) = (yyvsp[(2) - (2)].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				;}
    break;

  case 96:
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
    {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[(2) - (2)].str), NULL, DEFELEM_DROP, (yylsp[(2) - (2)]));
				;}
    break;

  case 97:
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
    break;

  case 98:
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
    break;

  case 99:
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
    { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
    break;

  case 100:
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
    { (yyval.ival) = 1; ;}
    break;

  case 101:
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
    { (yyval.ival) = 0; ;}
    break;

  case 102:
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
    { (yyval.ival) = 0; ;}
    break;

  case 103:
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
    {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[(2) - (2)].str);
						(yyval.node) = (PGNode *) n;
					;}
    break;

  case 104:
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
    {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[(3) - (3)].str);
						(yyval.node) = (PGNode *) n;
					;}
    break;

  case 105:
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
    {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					;}
    break;

  case 106:
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
    {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					;}
    break;

  case 107:
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[(3) - (6)].str);
					n->newname = (yyvsp[(6) - (6)].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 108:
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[(3) - (6)].range);
					n->subname = NULL;
					n->newname = (yyvsp[(6) - (6)].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 109:
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[(5) - (8)].range);
					n->subname = NULL;
					n->newname = (yyvsp[(8) - (8)].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 110:
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[(3) - (6)].range);
					n->subname = NULL;
					n->newname = (yyvsp[(6) - (6)].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 111:
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[(5) - (8)].range);
					n->subname = NULL;
					n->newname = (yyvsp[(8) - (8)].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 112:
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[(3) - (6)].range);
					n->subname = NULL;
					n->newname = (yyvsp[(6) - (6)].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 113:
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[(5) - (8)].range);
					n->subname = NULL;
					n->newname = (yyvsp[(8) - (8)].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 114:
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[(3) - (6)].range);
					n->subname = NULL;
					n->newname = (yyvsp[(6) - (6)].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 115:
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[(5) - (8)].range);
					n->subname = NULL;
					n->newname = (yyvsp[(8) - (8)].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 116:
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[(3) - (8)].range);
					n->subname = (yyvsp[(6) - (8)].str);
					n->newname = (yyvsp[(8) - (8)].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 117:
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[(5) - (10)].range);
					n->subname = (yyvsp[(8) - (10)].str);
					n->newname = (yyvsp[(10) - (10)].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 118:
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[(3) - (8)].range);
					n->subname = (yyvsp[(6) - (8)].str);
					n->newname = (yyvsp[(8) - (8)].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 119:
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[(5) - (10)].range);
					n->subname = (yyvsp[(8) - (10)].str);
					n->newname = (yyvsp[(10) - (10)].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 120:
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
    { (yyval.ival) = COLUMN; ;}
    break;

  case 121:
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
    { (yyval.ival) = 0; ;}
    break;

  case 122:
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyvsp[(7) - (9)].istmt)->relation = (yyvsp[(5) - (9)].range);
					(yyvsp[(7) - (9)].istmt)->onConflictAlias = (yyvsp[(3) - (9)].onconflictshorthand);
					(yyvsp[(7) - (9)].istmt)->onConflictClause = (yyvsp[(8) - (9)].onconflict);
					(yyvsp[(7) - (9)].istmt)->returningList = (yyvsp[(9) - (9)].list);
					(yyvsp[(7) - (9)].istmt)->withClause = (yyvsp[(1) - (9)].with);
					(yyvsp[(7) - (9)].istmt)->insert_column_order = (yyvsp[(6) - (9)].bynameorposition);
					(yyval.node) = (PGNode *) (yyvsp[(7) - (9)].istmt);
				;}
    break;

  case 123:
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[(1) - (1)].node);
				;}
    break;

  case 124:
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[(2) - (4)].override);
					(yyval.istmt)->selectStmt = (yyvsp[(4) - (4)].node);
				;}
    break;

  case 125:
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[(2) - (4)].list);
					(yyval.istmt)->selectStmt = (yyvsp[(4) - (4)].node);
				;}
    break;

  case 126:
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[(2) - (7)].list);
					(yyval.istmt)->override = (yyvsp[(5) - (7)].override);
					(yyval.istmt)->selectStmt = (yyvsp[(7) - (7)].node);
				;}
    break;

  case 127:
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				;}
    break;

  case 128:
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.range) = (yyvsp[(1) - (1)].range);
				;}
    break;

  case 129:
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyvsp[(1) - (3)].range)->alias = makeAlias((yyvsp[(3) - (3)].str), NIL);
					(yyval.range) = (yyvsp[(1) - (3)].range);
				;}
    break;

  case 130:
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.bynameorposition) = PG_INSERT_BY_NAME; ;}
    break;

  case 131:
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; ;}
    break;

  case 132:
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; ;}
    break;

  case 133:
#line 78 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[(2) - (4)].list);
					(yyval.infer)->whereClause = (yyvsp[(4) - (4)].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[(1) - (4)]);
				;}
    break;

  case 134:
#line 87 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[(3) - (3)].str);
					(yyval.infer)->location = (yylsp[(1) - (3)]);
				;}
    break;

  case 135:
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.infer) = NULL;
				;}
    break;

  case 136:
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.with) = (yyvsp[(1) - (1)].with); ;}
    break;

  case 137:
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.with) = NULL; ;}
    break;

  case 138:
#line 109 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[(1) - (2)].str);
					(yyval.target)->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[(1) - (2)]);
				;}
    break;

  case 139:
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyvsp[(1) - (3)].target)->val = (PGNode *) (yyvsp[(3) - (3)].node);
					(yyval.list) = list_make1((yyvsp[(1) - (3)].target));
				;}
    break;

  case 140:
#line 126 "third_party/libpg_query/grammar/statements/insert.y"
    {
					int ncolumns = list_length((yyvsp[(2) - (5)].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[(2) - (5)].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[(5) - (5)].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[(2) - (5)].list);
				;}
    break;

  case 141:
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				;}
    break;

  case 142:
#line 156 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				;}
    break;

  case 143:
#line 160 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				;}
    break;

  case 144:
#line 167 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[(3) - (8)].infer);
					(yyval.onconflict)->targetList = (yyvsp[(7) - (8)].list);
					(yyval.onconflict)->whereClause = (yyvsp[(8) - (8)].node);
					(yyval.onconflict)->location = (yylsp[(1) - (8)]);
				;}
    break;

  case 145:
#line 177 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[(3) - (5)].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[(1) - (5)]);
				;}
    break;

  case 146:
#line 186 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.onconflict) = NULL;
				;}
    break;

  case 147:
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[(1) - (5)].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[(2) - (5)].list);
					(yyval.ielem)->opclass = (yyvsp[(3) - (5)].list);
					(yyval.ielem)->ordering = (yyvsp[(4) - (5)].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[(5) - (5)].nullorder);
				;}
    break;

  case 148:
#line 204 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[(1) - (5)].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[(2) - (5)].list);
					(yyval.ielem)->opclass = (yyvsp[(3) - (5)].list);
					(yyval.ielem)->ordering = (yyvsp[(4) - (5)].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[(5) - (5)].nullorder);
				;}
    break;

  case 149:
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[(2) - (7)].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[(4) - (7)].list);
					(yyval.ielem)->opclass = (yyvsp[(5) - (7)].list);
					(yyval.ielem)->ordering = (yyvsp[(6) - (7)].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[(7) - (7)].nullorder);
				;}
    break;

  case 150:
#line 229 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
    break;

  case 151:
#line 230 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = NIL; ;}
    break;

  case 152:
#line 236 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.override) = PG_OVERRIDING_USER_VALUE; ;}
    break;

  case 153:
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.override) = OVERRIDING_SYSTEM_VALUE; ;}
    break;

  case 154:
#line 242 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].target)); ;}
    break;

  case 155:
#line 243 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list),(yyvsp[(3) - (3)].target)); ;}
    break;

  case 156:
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
    break;

  case 157:
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = NIL; ;}
    break;

  case 158:
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 159:
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = NIL; ;}
    break;

  case 160:
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].target)); ;}
    break;

  case 161:
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].target)); ;}
    break;

  case 162:
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 163:
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = list_concat((yyvsp[(1) - (3)].list),(yyvsp[(3) - (3)].list)); ;}
    break;

  case 164:
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 165:
#line 274 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 166:
#line 277 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].ielem)); ;}
    break;

  case 167:
#line 278 "third_party/libpg_query/grammar/statements/insert.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].ielem)); ;}
    break;

  case 168:
#line 284 "third_party/libpg_query/grammar/statements/insert.y"
    {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[(1) - (2)].str);
					(yyval.target)->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[(1) - (2)]);
				;}
    break;

  case 169:
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
    {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[(3) - (6)].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[(6) - (6)].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 170:
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
    {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[(3) - (8)].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[(7) - (8)].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 171:
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
    {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[(3) - (5)].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[(5) - (5)].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[(5) - (5)].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[(5) - (5)].typnam);
					}
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 172:
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list);;}
    break;

  case 173:
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
    {(yyval.list) = NIL;;}
    break;

  case 174:
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
    {
					(yyval.list) = list_make1(makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)])));
				;}
    break;

  case 175:
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
    {
					(yyval.list) = lappend((yyvsp[(1) - (3)].list), makeStringConst((yyvsp[(3) - (3)].str), (yylsp[(3) - (3)])));
				;}
    break;

  case 176:
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
    {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[(2) - (2)].str);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 177:
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
    {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[(2) - (4)].str);
					n->args = (yyvsp[(4) - (4)].list);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 178:
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
    {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[(2) - (5)].str);
					n->args = (yyvsp[(4) - (5)].list);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 179:
#line 10 "third_party/libpg_query/grammar/statements/create_database.y"
    {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[(3) - (3)].range);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 180:
#line 16 "third_party/libpg_query/grammar/statements/create_database.y"
    {
				    PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
				    n->extension = (yyvsp[(2) - (4)].str);
                    n->name = (yyvsp[(4) - (4)].range);
                    (yyval.node) = (PGNode *)n;
				;}
    break;

  case 181:
#line 23 "third_party/libpg_query/grammar/statements/create_database.y"
    {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[(6) - (6)].range);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 182:
#line 29 "third_party/libpg_query/grammar/statements/create_database.y"
    {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[(5) - (5)].range);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 183:
#line 35 "third_party/libpg_query/grammar/statements/create_database.y"
    {
                    PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
                    n->name = (yyvsp[(3) - (5)].range);
                    n->path = (yyvsp[(5) - (5)].str);
                    (yyval.node) = (PGNode *)n;
                ;}
    break;

  case 184:
#line 42 "third_party/libpg_query/grammar/statements/create_database.y"
    {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[(6) - (8)].range);
					n->path = (yyvsp[(8) - (8)].str);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 185:
#line 49 "third_party/libpg_query/grammar/statements/create_database.y"
    {
					PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);
					n->name = (yyvsp[(5) - (7)].range);
					n->path = (yyvsp[(7) - (7)].str);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 186:
#line 59 "third_party/libpg_query/grammar/statements/create_database.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 187:
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
    {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[(4) - (5)].range)->relpersistence = (yyvsp[(2) - (5)].ival);
					n->sequence = (yyvsp[(4) - (5)].range);
					n->options = (yyvsp[(5) - (5)].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 188:
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
    {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[(7) - (8)].range)->relpersistence = (yyvsp[(2) - (8)].ival);
					n->sequence = (yyvsp[(7) - (8)].range);
					n->options = (yyvsp[(8) - (8)].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 189:
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
    {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[(6) - (7)].range)->relpersistence = (yyvsp[(4) - (7)].ival);
					n->sequence = (yyvsp[(6) - (7)].range);
					n->options = (yyvsp[(7) - (7)].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 190:
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 191:
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
    { (yyval.list) = NIL; ;}
    break;

  case 192:
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
    {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[(2) - (3)].str);
					n->params = (yyvsp[(3) - (3)].list);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 193:
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
    {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[(7) - (9)].str);
					n->params = (yyvsp[(8) - (9)].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[(4) - (9)].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[(4) - (9)].into)->rel->relpersistence = (yyvsp[(2) - (9)].ival);
					(yyvsp[(4) - (9)].into)->skipData = !((yyvsp[(9) - (9)].boolean));
					(yyval.node) = (PGNode *) ctas;
				;}
    break;

  case 194:
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
    {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[(10) - (12)].str);
					n->params = (yyvsp[(11) - (12)].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[(7) - (12)].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[(7) - (12)].into)->rel->relpersistence = (yyvsp[(2) - (12)].ival);
					(yyvsp[(7) - (12)].into)->skipData = !((yyvsp[(12) - (12)].boolean));
					(yyval.node) = (PGNode *) ctas;
				;}
    break;

  case 195:
#line 51 "third_party/libpg_query/grammar/statements/execute.y"
    { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
    break;

  case 196:
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
    { (yyval.list) = NIL; ;}
    break;

  case 197:
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[(3) - (4)].range);
					n->options = (yyvsp[(4) - (4)].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 198:
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[(5) - (6)].range);
					n->options = (yyvsp[(6) - (6)].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 199:
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}
    break;

  case 200:
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].defelt)); ;}
    break;

  case 201:
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {;}
    break;

  case 202:
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {;}
    break;

  case 203:
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {;}
    break;

  case 204:
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    { (yyval.value) = makeFloat((yyvsp[(1) - (1)].str)); ;}
    break;

  case 205:
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    { (yyval.value) = makeFloat((yyvsp[(2) - (2)].str)); ;}
    break;

  case 206:
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.value) = makeFloat((yyvsp[(2) - (2)].str));
					doNegateFloat((yyval.value));
				;}
    break;

  case 207:
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    { (yyval.value) = makeInteger((yyvsp[(1) - (1)].ival)); ;}
    break;

  case 208:
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[(2) - (2)].typnam), (yylsp[(1) - (2)]));
				;}
    break;

  case 209:
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[(2) - (2)].value), (yylsp[(1) - (2)]));
				;}
    break;

  case 210:
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));
				;}
    break;

  case 211:
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[(1) - (2)]));
				;}
    break;

  case 212:
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));
				;}
    break;

  case 213:
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[(2) - (2)].value), (yylsp[(1) - (2)]));
				;}
    break;

  case 214:
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[(2) - (2)].value), (yylsp[(1) - (2)]));
				;}
    break;

  case 215:
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[(1) - (2)]));
				;}
    break;

  case 216:
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[(1) - (2)]));
				;}
    break;

  case 217:
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));
				;}
    break;

  case 218:
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));
				;}
    break;

  case 219:
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));
				;}
    break;

  case 220:
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[(1) - (1)]));
				;}
    break;

  case 221:
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));
				;}
    break;

  case 222:
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {;}
    break;

  case 223:
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    {;}
    break;

  case 224:
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    { (yyval.ival) = (yyvsp[(1) - (1)].ival); ;}
    break;

  case 225:
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    { (yyval.ival) = + (yyvsp[(2) - (2)].ival); ;}
    break;

  case 226:
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
    { (yyval.ival) = - (yyvsp[(2) - (2)].ival); ;}
    break;

  case 227:
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 228:
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 229:
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 230:
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 231:
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 232:
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 233:
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
    {;}
    break;

  case 234:
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
    {;}
    break;

  case 235:
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
    {;}
    break;

  case 236:
#line 3 "third_party/libpg_query/grammar/statements/use.y"
    {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[(2) - (2)].range);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 237:
#line 9 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[(4) - (9)].range)->relpersistence = (yyvsp[(2) - (9)].ival);
					n->relation = (yyvsp[(4) - (9)].range);
					n->tableElts = (yyvsp[(6) - (9)].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[(8) - (9)].list);
					n->oncommit = (yyvsp[(9) - (9)].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 238:
#line 24 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[(7) - (12)].range)->relpersistence = (yyvsp[(2) - (12)].ival);
					n->relation = (yyvsp[(7) - (12)].range);
					n->tableElts = (yyvsp[(9) - (12)].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[(11) - (12)].list);
					n->oncommit = (yyvsp[(12) - (12)].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 239:
#line 39 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[(6) - (11)].range)->relpersistence = (yyvsp[(4) - (11)].ival);
					n->relation = (yyvsp[(6) - (11)].range);
					n->tableElts = (yyvsp[(8) - (11)].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[(10) - (11)].list);
					n->oncommit = (yyvsp[(11) - (11)].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 240:
#line 56 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = 0; ;}
    break;

  case 241:
#line 58 "third_party/libpg_query/grammar/statements/create.y"
    {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[(1) - (2)].ival) | (yyvsp[(2) - (2)].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[(2) - (2)]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[(2) - (2)]))));
					(yyval.ival) = newspec;
				;}
    break;

  case 242:
#line 84 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (PGNode *)(yyvsp[(1) - (1)].typnam); ;}
    break;

  case 243:
#line 85 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[(1) - (1)].keyword))); ;}
    break;

  case 244:
#line 86 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (PGNode *)(yyvsp[(1) - (1)].list); ;}
    break;

  case 245:
#line 87 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (PGNode *)(yyvsp[(1) - (1)].value); ;}
    break;

  case 246:
#line 88 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (PGNode *)makeString((yyvsp[(1) - (1)].str)); ;}
    break;

  case 247:
#line 89 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[(1) - (1)].keyword))); ;}
    break;

  case 248:
#line 93 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
    break;

  case 249:
#line 94 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = NIL; ;}
    break;

  case 250:
#line 99 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}
    break;

  case 251:
#line 104 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; ;}
    break;

  case 252:
#line 105 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; ;}
    break;

  case 253:
#line 106 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; ;}
    break;

  case 254:
#line 107 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; ;}
    break;

  case 255:
#line 108 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; ;}
    break;

  case 256:
#line 114 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[(3) - (3)].node));
					n->conname = (yyvsp[(2) - (3)].str);
					n->location = (yylsp[(1) - (3)]);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 257:
#line 120 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 258:
#line 121 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 259:
#line 123 "third_party/libpg_query/grammar/statements/create.y"
    {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[(2) - (2)].list);
					n->location = (yylsp[(1) - (2)]);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 260:
#line 140 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[(1) - (2)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 261:
#line 147 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[(1) - (1)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 262:
#line 154 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[(1) - (2)]);
					n->keys = NULL;
					n->options = (yyvsp[(2) - (2)].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 263:
#line 164 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[(1) - (3)]);
					n->keys = NULL;
					n->options = (yyvsp[(3) - (3)].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 264:
#line 174 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[(1) - (5)]);
					n->is_no_inherit = (yyvsp[(5) - (5)].boolean);
					n->raw_expr = (yyvsp[(3) - (5)].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 265:
#line 186 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[(1) - (3)]);
					n->compression_name = (yyvsp[(3) - (3)].str);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 266:
#line 194 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[(1) - (2)]);
					n->raw_expr = (yyvsp[(2) - (2)].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 267:
#line 203 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[(1) - (5)]);
					n->pktable			= (yyvsp[(2) - (5)].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[(3) - (5)].list);
					n->fk_matchtype		= (yyvsp[(4) - (5)].ival);
					n->fk_upd_action	= (char) ((yyvsp[(5) - (5)].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[(5) - (5)].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 268:
#line 220 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; ;}
    break;

  case 269:
#line 221 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.constr) = PG_CONSTR_GENERATED_STORED; ;}
    break;

  case 270:
#line 225 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.constr) = (yyvsp[(1) - (1)].constr); ;}
    break;

  case 271:
#line 226 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; ;}
    break;

  case 272:
#line 231 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[(2) - (5)].ival);
					n->options = (yyvsp[(5) - (5)].list);
					n->location = (yylsp[(1) - (5)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 273:
#line 240 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[(7) - (7)].constr);
					n->generated_when = (yyvsp[(2) - (7)].ival);
					n->raw_expr = (yyvsp[(5) - (7)].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[(1) - (7)]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[(2) - (7)].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[(2) - (7)]))));

					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 274:
#line 263 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[(5) - (5)].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[(3) - (5)].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[(1) - (5)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 275:
#line 277 "third_party/libpg_query/grammar/statements/create.y"
    {
					(yyval.defelt) = makeDefElem((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)]));
				;}
    break;

  case 276:
#line 283 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = (yyvsp[(3) - (3)].ival); ;}
    break;

  case 277:
#line 289 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = ((yyvsp[(1) - (1)].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); ;}
    break;

  case 278:
#line 291 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[(1) - (1)].ival) & 0xFF); ;}
    break;

  case 279:
#line 293 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = ((yyvsp[(1) - (2)].ival) << 8) | ((yyvsp[(2) - (2)].ival) & 0xFF); ;}
    break;

  case 280:
#line 295 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = ((yyvsp[(2) - (2)].ival) << 8) | ((yyvsp[(1) - (2)].ival) & 0xFF); ;}
    break;

  case 281:
#line 297 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); ;}
    break;

  case 282:
#line 300 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.oncommit) = ONCOMMIT_DROP; ;}
    break;

  case 283:
#line 301 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; ;}
    break;

  case 284:
#line 302 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; ;}
    break;

  case 285:
#line 303 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.oncommit) = PG_ONCOMMIT_NOOP; ;}
    break;

  case 286:
#line 308 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
    break;

  case 287:
#line 312 "third_party/libpg_query/grammar/statements/create.y"
    {  (yyval.boolean) = true; ;}
    break;

  case 288:
#line 313 "third_party/libpg_query/grammar/statements/create.y"
    {  (yyval.boolean) = false; ;}
    break;

  case 289:
#line 319 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[(3) - (3)].node));
					n->conname = (yyvsp[(2) - (3)].str);
					n->location = (yylsp[(1) - (3)]);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 290:
#line 325 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 291:
#line 330 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; ;}
    break;

  case 292:
#line 331 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; ;}
    break;

  case 293:
#line 332 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; ;}
    break;

  case 294:
#line 333 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; ;}
    break;

  case 295:
#line 334 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; ;}
    break;

  case 296:
#line 335 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; ;}
    break;

  case 297:
#line 336 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; ;}
    break;

  case 298:
#line 337 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; ;}
    break;

  case 299:
#line 343 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}
    break;

  case 300:
#line 344 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt)); ;}
    break;

  case 301:
#line 348 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.str) = (yyvsp[(3) - (3)].str); ;}
    break;

  case 302:
#line 354 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[(1) - (1)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 303:
#line 361 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[(1) - (2)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 304:
#line 368 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[(1) - (2)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 305:
#line 375 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[(1) - (2)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 306:
#line 386 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
    break;

  case 307:
#line 387 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[(1) - (2)]))); ;}
    break;

  case 308:
#line 388 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[(1) - (2)]))); ;}
    break;

  case 309:
#line 389 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = NIL; ;}
    break;

  case 310:
#line 393 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
    break;

  case 311:
#line 398 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = (yyvsp[(1) - (3)].ival) | (yyvsp[(3) - (3)].ival); ;}
    break;

  case 312:
#line 399 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = (yyvsp[(1) - (3)].ival) & ~(yyvsp[(3) - (3)].ival); ;}
    break;

  case 313:
#line 400 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = 0; ;}
    break;

  case 314:
#line 405 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 315:
#line 410 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = CAS_NOT_DEFERRABLE; ;}
    break;

  case 316:
#line 411 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = CAS_DEFERRABLE; ;}
    break;

  case 317:
#line 412 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; ;}
    break;

  case 318:
#line 413 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = CAS_INITIALLY_DEFERRED; ;}
    break;

  case 319:
#line 414 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = CAS_NOT_VALID; ;}
    break;

  case 320:
#line 415 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = CAS_NO_INHERIT; ;}
    break;

  case 321:
#line 421 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[(1) - (3)].str);
					n->typeName = (yyvsp[(2) - (3)].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[(3) - (3)].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[(1) - (3)]);
					(yyval.node) = (PGNode *)n;
			;}
    break;

  case 322:
#line 441 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[(1) - (4)].str);
					n->typeName = (yyvsp[(2) - (4)].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[(4) - (4)].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[(3) - (4)].node));
					} else {
					    constraints = list_make1((yyvsp[(3) - (4)].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[(1) - (4)]);
					(yyval.node) = (PGNode *)n;
			;}
    break;

  case 323:
#line 469 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}
    break;

  case 324:
#line 470 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt)); ;}
    break;

  case 325:
#line 474 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 326:
#line 478 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 327:
#line 479 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 328:
#line 480 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 329:
#line 485 "third_party/libpg_query/grammar/statements/create.y"
    {
					(yyval.defelt) = makeDefElem((yyvsp[(1) - (3)].str), (PGNode *) (yyvsp[(3) - (3)].node), (yylsp[(1) - (3)]));
				;}
    break;

  case 330:
#line 489 "third_party/libpg_query/grammar/statements/create.y"
    {
					(yyval.defelt) = makeDefElem((yyvsp[(1) - (1)].str), NULL, (yylsp[(1) - (1)]));
				;}
    break;

  case 331:
#line 496 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
    break;

  case 332:
#line 497 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = NIL; ;}
    break;

  case 333:
#line 502 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 334:
#line 503 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 335:
#line 504 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = NIL; ;}
    break;

  case 336:
#line 509 "third_party/libpg_query/grammar/statements/create.y"
    {
					(yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str));
				;}
    break;

  case 337:
#line 516 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
    break;

  case 338:
#line 517 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = NIL; ;}
    break;

  case 339:
#line 522 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
    break;

  case 340:
#line 523 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = NIL; ;}
    break;

  case 341:
#line 527 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = (yyvsp[(3) - (3)].ival); ;}
    break;

  case 342:
#line 533 "third_party/libpg_query/grammar/statements/create.y"
    {
					(yyval.defelt) = makeDefElem((yyvsp[(1) - (3)].str), (PGNode *) (yyvsp[(3) - (3)].node), (yylsp[(1) - (3)]));
				;}
    break;

  case 343:
#line 537 "third_party/libpg_query/grammar/statements/create.y"
    {
					(yyval.defelt) = makeDefElem((yyvsp[(1) - (1)].str), NULL, (yylsp[(1) - (1)]));
				;}
    break;

  case 344:
#line 541 "third_party/libpg_query/grammar/statements/create.y"
    {
					(yyval.defelt) = makeDefElemExtended((yyvsp[(1) - (5)].str), (yyvsp[(3) - (5)].str), (PGNode *) (yyvsp[(5) - (5)].node),
											 PG_DEFELEM_UNSPEC, (yylsp[(1) - (5)]));
				;}
    break;

  case 345:
#line 546 "third_party/libpg_query/grammar/statements/create.y"
    {
					(yyval.defelt) = makeDefElemExtended((yyvsp[(1) - (3)].str), (yyvsp[(3) - (3)].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[(1) - (3)]));
				;}
    break;

  case 346:
#line 553 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
    break;

  case 347:
#line 554 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
    break;

  case 348:
#line 558 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 349:
#line 559 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 350:
#line 563 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
    break;

  case 351:
#line 565 "third_party/libpg_query/grammar/statements/create.y"
    {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[(1) - (4)].str)), (yyvsp[(2) - (4)].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[(1) - (4)]);
				;}
    break;

  case 352:
#line 571 "third_party/libpg_query/grammar/statements/create.y"
    {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[(2) - (5)].str)), (yyvsp[(3) - (5)].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[(2) - (5)]);
				;}
    break;

  case 353:
#line 582 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[(1) - (5)]);
					n->raw_expr = (yyvsp[(3) - (5)].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[(5) - (5)].ival), (yylsp[(5) - (5)]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 354:
#line 596 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[(1) - (6)]);
					n->keys = (yyvsp[(3) - (6)].list);
					n->options = (yyvsp[(5) - (6)].list);
					n->indexname = NULL;
					processCASbits((yyvsp[(6) - (6)].ival), (yylsp[(6) - (6)]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 355:
#line 609 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[(1) - (3)]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[(2) - (3)].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[(3) - (3)].ival), (yylsp[(3) - (3)]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 356:
#line 624 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[(1) - (7)]);
					n->keys = (yyvsp[(4) - (7)].list);
					n->options = (yyvsp[(6) - (7)].list);
					n->indexname = NULL;
					processCASbits((yyvsp[(7) - (7)].ival), (yylsp[(7) - (7)]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 357:
#line 637 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[(1) - (4)]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[(3) - (4)].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[(4) - (4)].ival), (yylsp[(4) - (4)]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 358:
#line 652 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[(1) - (11)]);
					n->pktable			= (yyvsp[(7) - (11)].range);
					n->fk_attrs			= (yyvsp[(4) - (11)].list);
					n->pk_attrs			= (yyvsp[(8) - (11)].list);
					n->fk_matchtype		= (yyvsp[(9) - (11)].ival);
					n->fk_upd_action	= (char) ((yyvsp[(10) - (11)].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[(10) - (11)].ival) & 0xFF);
					processCASbits((yyvsp[(11) - (11)].ival), (yylsp[(11) - (11)]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 359:
#line 674 "third_party/libpg_query/grammar/statements/create.y"
    {
					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
				;}
    break;

  case 360:
#line 678 "third_party/libpg_query/grammar/statements/create.y"
    {
					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
				;}
    break;

  case 361:
#line 685 "third_party/libpg_query/grammar/statements/create.y"
    {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			;}
    break;

  case 362:
#line 689 "third_party/libpg_query/grammar/statements/create.y"
    {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[(1) - (2)]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			;}
    break;

  case 363:
#line 697 "third_party/libpg_query/grammar/statements/create.y"
    {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			;}
    break;

  case 364:
#line 701 "third_party/libpg_query/grammar/statements/create.y"
    {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			;}
    break;

  case 365:
#line 709 "third_party/libpg_query/grammar/statements/create.y"
    {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[(2) - (3)].range);
					n->options = (yyvsp[(3) - (3)].ival);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 366:
#line 718 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}
    break;

  case 367:
#line 719 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}
    break;

  case 368:
#line 720 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}
    break;

  case 369:
#line 721 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}
    break;

  case 370:
#line 723 "third_party/libpg_query/grammar/statements/create.y"
    {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[(1) - (2)]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				;}
    break;

  case 371:
#line 730 "third_party/libpg_query/grammar/statements/create.y"
    {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[(1) - (2)]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				;}
    break;

  case 372:
#line 736 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; ;}
    break;

  case 373:
#line 737 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = RELPERSISTENCE_PERMANENT; ;}
    break;

  case 374:
#line 742 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; ;}
    break;

  case 375:
#line 743 "third_party/libpg_query/grammar/statements/create.y"
    { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; ;}
    break;

  case 376:
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[(2) - (6)].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[(5) - (6)].list);
					n->behavior = (yyvsp[(6) - (6)].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 377:
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[(2) - (4)].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[(3) - (4)].list);
					n->behavior = (yyvsp[(4) - (4)].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 378:
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[(2) - (6)].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[(5) - (6)].list);
					n->behavior = (yyvsp[(6) - (6)].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 379:
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[(2) - (4)].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[(3) - (4)].list);
					n->behavior = (yyvsp[(4) - (4)].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 380:
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[(2) - (6)].objtype);
					n->objects = list_make1(lappend((yyvsp[(5) - (6)].list), makeString((yyvsp[(3) - (6)].str))));
					n->behavior = (yyvsp[(6) - (6)].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 381:
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[(2) - (8)].objtype);
					n->objects = list_make1(lappend((yyvsp[(7) - (8)].list), makeString((yyvsp[(5) - (8)].str))));
					n->behavior = (yyvsp[(8) - (8)].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 382:
#line 70 "third_party/libpg_query/grammar/statements/drop.y"
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = false;
					n->objects = (yyvsp[(3) - (4)].list);
					n->behavior = (yyvsp[(4) - (4)].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 383:
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = true;
					n->objects = (yyvsp[(5) - (6)].list);
					n->behavior = (yyvsp[(6) - (6)].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 384:
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_TABLE; ;}
    break;

  case 385:
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_DATABASE; ;}
    break;

  case 386:
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_SEQUENCE; ;}
    break;

  case 387:
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_FUNCTION; ;}
    break;

  case 388:
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_FUNCTION; ;}
    break;

  case 389:
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; ;}
    break;

  case 390:
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_VIEW; ;}
    break;

  case 391:
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_MATVIEW; ;}
    break;

  case 392:
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_INDEX; ;}
    break;

  case 393:
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; ;}
    break;

  case 394:
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_COLLATION; ;}
    break;

  case 395:
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_CONVERSION; ;}
    break;

  case 396:
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_SCHEMA; ;}
    break;

  case 397:
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; ;}
    break;

  case 398:
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_TSPARSER; ;}
    break;

  case 399:
#line 108 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; ;}
    break;

  case 400:
#line 109 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; ;}
    break;

  case 401:
#line 110 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; ;}
    break;

  case 402:
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; ;}
    break;

  case 403:
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; ;}
    break;

  case 404:
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_EXTENSION; ;}
    break;

  case 405:
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_FDW; ;}
    break;

  case 406:
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_PUBLICATION; ;}
    break;

  case 407:
#line 120 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; ;}
    break;

  case 408:
#line 125 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].list)); ;}
    break;

  case 409:
#line 126 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)); ;}
    break;

  case 410:
#line 131 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.dbehavior) = PG_DROP_CASCADE; ;}
    break;

  case 411:
#line 132 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.dbehavior) = PG_DROP_RESTRICT; ;}
    break;

  case 412:
#line 133 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ ;}
    break;

  case 413:
#line 138 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_POLICY; ;}
    break;

  case 414:
#line 139 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_RULE; ;}
    break;

  case 415:
#line 140 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.objtype) = PG_OBJECT_TRIGGER; ;}
    break;

  case 416:
#line 143 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].typnam)); ;}
    break;

  case 417:
#line 144 "third_party/libpg_query/grammar/statements/drop.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typnam)); ;}
    break;

  case 418:
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
    {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[(4) - (8)].range)->relpersistence = (yyvsp[(2) - (8)].ival);
				n->name = (yyvsp[(4) - (8)].range);
				n->params = (yyvsp[(5) - (8)].list);
				n->function = NULL;
				n->query = (yyvsp[(8) - (8)].node);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			;}
    break;

  case 419:
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
    {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[(7) - (11)].range)->relpersistence = (yyvsp[(2) - (11)].ival);
				n->name = (yyvsp[(7) - (11)].range);
				n->params = (yyvsp[(8) - (11)].list);
				n->function = NULL;
				n->query = (yyvsp[(11) - (11)].node);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			;}
    break;

  case 420:
#line 34 "third_party/libpg_query/grammar/statements/create_function.y"
    {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[(6) - (10)].range)->relpersistence = (yyvsp[(4) - (10)].ival);
				n->name = (yyvsp[(6) - (10)].range);
				n->params = (yyvsp[(7) - (10)].list);
				n->function = NULL;
				n->query = (yyvsp[(10) - (10)].node);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			;}
    break;

  case 421:
#line 47 "third_party/libpg_query/grammar/statements/create_function.y"
    {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[(4) - (7)].range)->relpersistence = (yyvsp[(2) - (7)].ival);
				n->name = (yyvsp[(4) - (7)].range);
				n->params = (yyvsp[(5) - (7)].list);
				n->function = (yyvsp[(7) - (7)].node);
				n->query = NULL;
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
                         ;}
    break;

  case 422:
#line 59 "third_party/libpg_query/grammar/statements/create_function.y"
    {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[(7) - (10)].range)->relpersistence = (yyvsp[(2) - (10)].ival);
				n->name = (yyvsp[(7) - (10)].range);
				n->params = (yyvsp[(8) - (10)].list);
				n->function = (yyvsp[(10) - (10)].node);
				n->query = NULL;
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 ;}
    break;

  case 423:
#line 71 "third_party/libpg_query/grammar/statements/create_function.y"
    {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[(6) - (9)].range)->relpersistence = (yyvsp[(4) - (9)].ival);
				n->name = (yyvsp[(6) - (9)].range);
				n->params = (yyvsp[(7) - (9)].list);
				n->function = (yyvsp[(9) - (9)].node);
				n->query = NULL;
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 ;}
    break;

  case 426:
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
    {
				(yyval.list) = NIL;
			;}
    break;

  case 427:
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
    {
				(yyval.list) = (yyvsp[(2) - (3)].list);
			;}
    break;

  case 428:
#line 12 "third_party/libpg_query/grammar/statements/update.y"
    {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[(3) - (8)].range);
					n->targetList = (yyvsp[(5) - (8)].list);
					n->fromClause = (yyvsp[(6) - (8)].list);
					n->whereClause = (yyvsp[(7) - (8)].node);
					n->returningList = (yyvsp[(8) - (8)].list);
					n->withClause = (yyvsp[(1) - (8)].with);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 429:
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
    {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[(3) - (11)].range);
					n->query = NULL;
					n->attlist = (yyvsp[(4) - (11)].list);
					n->is_from = (yyvsp[(6) - (11)].boolean);
					n->is_program = (yyvsp[(7) - (11)].boolean);
					n->filename = (yyvsp[(8) - (11)].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[(8) - (11)]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[(2) - (11)].defelt))
						n->options = lappend(n->options, (yyvsp[(2) - (11)].defelt));
					if ((yyvsp[(5) - (11)].defelt))
						n->options = lappend(n->options, (yyvsp[(5) - (11)].defelt));
					if ((yyvsp[(9) - (11)].defelt))
						n->options = lappend(n->options, (yyvsp[(9) - (11)].defelt));
					if ((yyvsp[(11) - (11)].list))
						n->options = list_concat(n->options, (yyvsp[(11) - (11)].list));
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 430:
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
    {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[(3) - (9)].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[(6) - (9)].boolean);
					n->filename = (yyvsp[(7) - (9)].str);
					n->options = (yyvsp[(9) - (9)].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[(5) - (9)]))));

					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 431:
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.boolean) = true; ;}
    break;

  case 432:
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.boolean) = false; ;}
    break;

  case 433:
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(2) - (3)]));
				;}
    break;

  case 434:
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.defelt) = NULL; ;}
    break;

  case 435:
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
				;}
    break;

  case 436:
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
				;}
    break;

  case 437:
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
    {;}
    break;

  case 438:
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
    {;}
    break;

  case 439:
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
    {;}
    break;

  case 440:
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
    {;}
    break;

  case 441:
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.boolean) = true; ;}
    break;

  case 442:
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.boolean) = false; ;}
    break;

  case 443:
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 444:
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
    break;

  case 445:
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}
    break;

  case 446:
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.node) = (PGNode *) (yyvsp[(1) - (1)].value); ;}
    break;

  case 447:
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.node) = (PGNode *) makeNode(PGAStar); ;}
    break;

  case 448:
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.node) = (PGNode *) (yyvsp[(2) - (3)].list); ;}
    break;

  case 449:
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.node) = NULL; ;}
    break;

  case 450:
#line 112 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)]));
				;}
    break;

  case 451:
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[(1) - (2)]));
				;}
    break;

  case 452:
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.defelt) = NULL; ;}
    break;

  case 453:
#line 128 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].defelt)); ;}
    break;

  case 454:
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.list) = NIL; ;}
    break;

  case 455:
#line 135 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[(1) - (1)]));
				;}
    break;

  case 456:
#line 138 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.defelt) = NULL; ;}
    break;

  case 457:
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[(1) - (1)]));
				;}
    break;

  case 458:
#line 148 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));
				;}
    break;

  case 459:
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));
				;}
    break;

  case 460:
#line 156 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));
				;}
    break;

  case 461:
#line 160 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));
				;}
    break;

  case 462:
#line 164 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[(1) - (1)]));
				;}
    break;

  case 463:
#line 168 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));
				;}
    break;

  case 464:
#line 172 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));
				;}
    break;

  case 465:
#line 176 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));
				;}
    break;

  case 466:
#line 180 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));
				;}
    break;

  case 467:
#line 184 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[(1) - (3)]));
				;}
    break;

  case 468:
#line 188 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));
				;}
    break;

  case 469:
#line 192 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[(1) - (3)]));
				;}
    break;

  case 470:
#line 196 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[(4) - (4)].list), (yylsp[(1) - (4)]));
				;}
    break;

  case 471:
#line 200 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));
				;}
    break;

  case 472:
#line 204 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[(2) - (2)].str)), (yylsp[(1) - (2)]));
				;}
    break;

  case 473:
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}
    break;

  case 474:
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 475:
#line 218 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.str) = NULL; ;}
    break;

  case 476:
#line 219 "third_party/libpg_query/grammar/statements/copy.y"
    { (yyval.str) = NULL; ;}
    break;

  case 477:
#line 225 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));
				;}
    break;

  case 478:
#line 229 "third_party/libpg_query/grammar/statements/copy.y"
    {
					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));
				;}
    break;

  case 481:
#line 52 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (3)].node); ;}
    break;

  case 482:
#line 53 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (3)].node); ;}
    break;

  case 483:
#line 68 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 484:
#line 70 "third_party/libpg_query/grammar/statements/select.y"
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[(1) - (2)].node);
				;}
    break;

  case 485:
#line 77 "third_party/libpg_query/grammar/statements/select.y"
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[(1) - (4)].node), (yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].list),
										(PGNode*) list_nth((yyvsp[(4) - (4)].list), 0), (PGNode*) list_nth((yyvsp[(4) - (4)].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[(1) - (4)].node);
				;}
    break;

  case 486:
#line 85 "third_party/libpg_query/grammar/statements/select.y"
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[(1) - (4)].node), (yyvsp[(2) - (4)].list), (yyvsp[(4) - (4)].list),
										(PGNode*) list_nth((yyvsp[(3) - (4)].list), 0), (PGNode*) list_nth((yyvsp[(3) - (4)].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[(1) - (4)].node);
				;}
    break;

  case 487:
#line 93 "third_party/libpg_query/grammar/statements/select.y"
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (2)].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[(1) - (2)].with),
										yyscanner);
					(yyval.node) = (yyvsp[(2) - (2)].node);
				;}
    break;

  case 488:
#line 101 "third_party/libpg_query/grammar/statements/select.y"
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].list), NIL,
										NULL, NULL,
										(yyvsp[(1) - (3)].with),
										yyscanner);
					(yyval.node) = (yyvsp[(2) - (3)].node);
				;}
    break;

  case 489:
#line 109 "third_party/libpg_query/grammar/statements/select.y"
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (5)].node), (yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].list),
										(PGNode*) list_nth((yyvsp[(5) - (5)].list), 0), (PGNode*) list_nth((yyvsp[(5) - (5)].list), 1),
										(yyvsp[(1) - (5)].with),
										yyscanner);
					(yyval.node) = (yyvsp[(2) - (5)].node);
				;}
    break;

  case 490:
#line 117 "third_party/libpg_query/grammar/statements/select.y"
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (5)].node), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].list),
										(PGNode*) list_nth((yyvsp[(4) - (5)].list), 0), (PGNode*) list_nth((yyvsp[(4) - (5)].list), 1),
										(yyvsp[(1) - (5)].with),
										yyscanner);
					(yyval.node) = (yyvsp[(2) - (5)].node);
				;}
    break;

  case 491:
#line 127 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 492:
#line 128 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 493:
#line 156 "third_party/libpg_query/grammar/statements/select.y"
    {
				(yyval.list) = (yyvsp[(3) - (3)].list);
			;}
    break;

  case 494:
#line 160 "third_party/libpg_query/grammar/statements/select.y"
    {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			;}
    break;

  case 495:
#line 171 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[(3) - (11)].list);
					n->intoClause = (yyvsp[(4) - (11)].into);
					n->fromClause = (yyvsp[(5) - (11)].list);
					n->whereClause = (yyvsp[(6) - (11)].node);
					n->groupClause = (yyvsp[(7) - (11)].list);
					n->havingClause = (yyvsp[(8) - (11)].node);
					n->windowClause = (yyvsp[(9) - (11)].list);
					n->qualifyClause = (yyvsp[(10) - (11)].node);
					n->sampleOptions = (yyvsp[(11) - (11)].node);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 496:
#line 187 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[(2) - (11)].list);
					n->targetList = (yyvsp[(3) - (11)].list);
					n->intoClause = (yyvsp[(4) - (11)].into);
					n->fromClause = (yyvsp[(5) - (11)].list);
					n->whereClause = (yyvsp[(6) - (11)].node);
					n->groupClause = (yyvsp[(7) - (11)].list);
					n->havingClause = (yyvsp[(8) - (11)].node);
					n->windowClause = (yyvsp[(9) - (11)].list);
					n->qualifyClause = (yyvsp[(10) - (11)].node);
					n->sampleOptions = (yyvsp[(11) - (11)].node);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 497:
#line 204 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[(3) - (10)].list);
					n->fromClause = (yyvsp[(2) - (10)].list);
					n->intoClause = (yyvsp[(4) - (10)].into);
					n->whereClause = (yyvsp[(5) - (10)].node);
					n->groupClause = (yyvsp[(6) - (10)].list);
					n->havingClause = (yyvsp[(7) - (10)].node);
					n->windowClause = (yyvsp[(8) - (10)].list);
					n->qualifyClause = (yyvsp[(9) - (10)].node);
					n->sampleOptions = (yyvsp[(10) - (10)].node);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 498:
#line 221 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[(5) - (12)].list);
					n->distinctClause = (yyvsp[(4) - (12)].list);
					n->fromClause = (yyvsp[(2) - (12)].list);
					n->intoClause = (yyvsp[(6) - (12)].into);
					n->whereClause = (yyvsp[(7) - (12)].node);
					n->groupClause = (yyvsp[(8) - (12)].list);
					n->havingClause = (yyvsp[(9) - (12)].node);
					n->windowClause = (yyvsp[(10) - (12)].list);
					n->qualifyClause = (yyvsp[(11) - (12)].node);
					n->sampleOptions = (yyvsp[(12) - (12)].node);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 499:
#line 235 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 500:
#line 237 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[(2) - (2)].range));
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 501:
#line 256 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[(3) - (5)].boolean), (yyvsp[(1) - (5)].node), (yyvsp[(5) - (5)].node));
				;}
    break;

  case 502:
#line 260 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[(3) - (4)].boolean), (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node));
				;}
    break;

  case 503:
#line 264 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[(3) - (4)].boolean), (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node));
				;}
    break;

  case 504:
#line 268 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[(3) - (4)].boolean), (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node));
				;}
    break;

  case 505:
#line 272 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[(2) - (4)].node);
					n->aggrs = (yyvsp[(4) - (4)].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				;}
    break;

  case 506:
#line 281 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[(2) - (7)].node);
					n->aggrs = (yyvsp[(4) - (7)].list);
					n->groups = (yyvsp[(7) - (7)].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				;}
    break;

  case 507:
#line 291 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[(2) - (5)].node);
					n->groups = (yyvsp[(5) - (5)].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				;}
    break;

  case 508:
#line 300 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[(2) - (4)].node);
					n->columns = (yyvsp[(4) - (4)].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				;}
    break;

  case 509:
#line 309 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[(2) - (7)].node);
					n->columns = (yyvsp[(4) - (7)].list);
					n->groups = (yyvsp[(7) - (7)].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				;}
    break;

  case 510:
#line 319 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[(2) - (6)].node);
					n->columns = (yyvsp[(4) - (6)].list);
					n->aggrs = (yyvsp[(6) - (6)].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				;}
    break;

  case 511:
#line 329 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[(2) - (9)].node);
					n->columns = (yyvsp[(4) - (9)].list);
					n->aggrs = (yyvsp[(6) - (9)].list);
					n->groups = (yyvsp[(9) - (9)].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				;}
    break;

  case 512:
#line 340 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[(2) - (9)].node);
					n->unpivots = (yyvsp[(9) - (9)].list);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[(7) - (9)].str)));
					piv->pivot_value = (yyvsp[(4) - (9)].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				;}
    break;

  case 513:
#line 354 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[(2) - (4)].node);
					n->unpivots = list_make1(makeString("value"));
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[(4) - (4)].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				;}
    break;

  case 520:
#line 383 "third_party/libpg_query/grammar/statements/select.y"
    {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[(1) - (1)].node));
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 521:
#line 389 "third_party/libpg_query/grammar/statements/select.y"
    {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[(1) - (5)].node));
				n->subquery = (yyvsp[(4) - (5)].node);
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 522:
#line 395 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 523:
#line 399 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
    break;

  case 524:
#line 400 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
    break;

  case 525:
#line 404 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 526:
#line 405 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 527:
#line 420 "third_party/libpg_query/grammar/statements/select.y"
    {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[(2) - (2)].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[(1) - (2)]);
			;}
    break;

  case 528:
#line 427 "third_party/libpg_query/grammar/statements/select.y"
    {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[(2) - (2)].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[(1) - (2)]);
			;}
    break;

  case 529:
#line 434 "third_party/libpg_query/grammar/statements/select.y"
    {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[(3) - (3)].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[(1) - (3)]);
			;}
    break;

  case 530:
#line 443 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
    break;

  case 531:
#line 444 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
    break;

  case 532:
#line 448 "third_party/libpg_query/grammar/statements/select.y"
    {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[(1) - (6)].str);
				n->aliascolnames = (yyvsp[(2) - (6)].list);
				n->ctequery = (yyvsp[(5) - (6)].node);
				n->location = (yylsp[(1) - (6)]);
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 533:
#line 460 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[(2) - (2)].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				;}
    break;

  case 534:
#line 470 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.into) = NULL; ;}
    break;

  case 535:
#line 479 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.range) = (yyvsp[(3) - (3)].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				;}
    break;

  case 536:
#line 484 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.range) = (yyvsp[(3) - (3)].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				;}
    break;

  case 537:
#line 489 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.range) = (yyvsp[(4) - (4)].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				;}
    break;

  case 538:
#line 494 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.range) = (yyvsp[(4) - (4)].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				;}
    break;

  case 539:
#line 499 "third_party/libpg_query/grammar/statements/select.y"
    {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[(1) - (4)]))));
					(yyval.range) = (yyvsp[(4) - (4)].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				;}
    break;

  case 540:
#line 507 "third_party/libpg_query/grammar/statements/select.y"
    {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[(1) - (4)]))));
					(yyval.range) = (yyvsp[(4) - (4)].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				;}
    break;

  case 541:
#line 515 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.range) = (yyvsp[(3) - (3)].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				;}
    break;

  case 542:
#line 520 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.range) = (yyvsp[(2) - (2)].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				;}
    break;

  case 543:
#line 525 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.range) = (yyvsp[(1) - (1)].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				;}
    break;

  case 544:
#line 531 "third_party/libpg_query/grammar/statements/select.y"
    {;}
    break;

  case 545:
#line 532 "third_party/libpg_query/grammar/statements/select.y"
    {;}
    break;

  case 546:
#line 536 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = true; ;}
    break;

  case 547:
#line 537 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = false; ;}
    break;

  case 548:
#line 538 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = false; ;}
    break;

  case 549:
#line 542 "third_party/libpg_query/grammar/statements/select.y"
    { ;}
    break;

  case 550:
#line 549 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(NIL); ;}
    break;

  case 551:
#line 550 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(4) - (5)].list); ;}
    break;

  case 552:
#line 554 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL;;}
    break;

  case 553:
#line 555 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 554:
#line 559 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = true;;}
    break;

  case 555:
#line 560 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = false;;}
    break;

  case 556:
#line 561 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = false; ;}
    break;

  case 557:
#line 565 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list);;}
    break;

  case 558:
#line 566 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 559:
#line 570 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(3) - (3)].list); ;}
    break;

  case 560:
#line 572 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[(3) - (5)]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[(4) - (5)].sortorder);
					sort->sortby_nulls = (yyvsp[(5) - (5)].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				;}
    break;

  case 561:
#line 587 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].sortby)); ;}
    break;

  case 562:
#line 588 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].sortby)); ;}
    break;

  case 563:
#line 592 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[(1) - (4)].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[(4) - (4)].nullorder);
					(yyval.sortby)->useOp = (yyvsp[(3) - (4)].list);
					(yyval.sortby)->location = (yylsp[(3) - (4)]);
				;}
    break;

  case 564:
#line 601 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[(1) - (3)].node);
					(yyval.sortby)->sortby_dir = (yyvsp[(2) - (3)].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[(3) - (3)].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				;}
    break;

  case 565:
#line 611 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.sortorder) = PG_SORTBY_ASC; ;}
    break;

  case 566:
#line 612 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.sortorder) = PG_SORTBY_DESC; ;}
    break;

  case 567:
#line 613 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.sortorder) = PG_SORTBY_DEFAULT; ;}
    break;

  case 568:
#line 616 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; ;}
    break;

  case 569:
#line 617 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; ;}
    break;

  case 570:
#line 618 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; ;}
    break;

  case 571:
#line 622 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make2((yyvsp[(2) - (2)].node), (yyvsp[(1) - (2)].node)); ;}
    break;

  case 572:
#line 623 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make2((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node)); ;}
    break;

  case 573:
#line 624 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make2(NULL, (yyvsp[(1) - (1)].node)); ;}
    break;

  case 574:
#line 625 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make2((yyvsp[(1) - (1)].node), NULL); ;}
    break;

  case 575:
#line 629 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 576:
#line 630 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make2(NULL,NULL); ;}
    break;

  case 577:
#line 635 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
    break;

  case 578:
#line 637 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[(1) - (4)]))));
				;}
    break;

  case 579:
#line 653 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(3) - (5)].node); ;}
    break;

  case 580:
#line 655 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeIntConst(1, -1); ;}
    break;

  case 581:
#line 660 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
    break;

  case 582:
#line 663 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (3)].node); ;}
    break;

  case 583:
#line 671 "third_party/libpg_query/grammar/statements/select.y"
    {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[(1) - (2)].str)), true);
		;}
    break;

  case 584:
#line 675 "third_party/libpg_query/grammar/statements/select.y"
    {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (2)].ival)), true);
		;}
    break;

  case 585:
#line 679 "third_party/libpg_query/grammar/statements/select.y"
    {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[(1) - (2)].str)), true);
		;}
    break;

  case 586:
#line 683 "third_party/libpg_query/grammar/statements/select.y"
    {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (2)].ival)), true);
		;}
    break;

  case 587:
#line 687 "third_party/libpg_query/grammar/statements/select.y"
    {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (1)].ival)), false);
		;}
    break;

  case 588:
#line 691 "third_party/libpg_query/grammar/statements/select.y"
    {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (2)].ival)), false);
		;}
    break;

  case 589:
#line 698 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (yyvsp[(3) - (3)].node);
				;}
    break;

  case 590:
#line 702 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 591:
#line 709 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 592:
#line 710 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = NULL; ;}
    break;

  case 593:
#line 715 "third_party/libpg_query/grammar/statements/select.y"
    {
					int seed = (yyvsp[(5) - (5)].ival);
					(yyval.node) = makeSampleOptions((yyvsp[(3) - (5)].node), (yyvsp[(1) - (5)].str), &seed, (yylsp[(1) - (5)]));
				;}
    break;

  case 594:
#line 720 "third_party/libpg_query/grammar/statements/select.y"
    {
			(yyval.node) = makeSampleOptions((yyvsp[(1) - (1)].node), NULL, NULL, (yylsp[(1) - (1)]));
		;}
    break;

  case 595:
#line 724 "third_party/libpg_query/grammar/statements/select.y"
    {
			(yyval.node) = makeSampleOptions((yyvsp[(1) - (4)].node), (yyvsp[(3) - (4)].str), NULL, (yylsp[(1) - (4)]));
		;}
    break;

  case 596:
#line 728 "third_party/libpg_query/grammar/statements/select.y"
    {
			int seed = (yyvsp[(5) - (6)].ival);
			(yyval.node) = makeSampleOptions((yyvsp[(1) - (6)].node), (yyvsp[(3) - (6)].str), &seed, (yylsp[(1) - (6)]));
		;}
    break;

  case 597:
#line 736 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (yyvsp[(2) - (2)].node);
				;}
    break;

  case 598:
#line 742 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 599:
#line 743 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 600:
#line 748 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.ival) = (yyvsp[(3) - (4)].ival); ;}
    break;

  case 601:
#line 749 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.ival) = -1; ;}
    break;

  case 602:
#line 753 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 603:
#line 755 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[(1) - (1)]));
				;}
    break;

  case 604:
#line 760 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeLimitPercent((yyvsp[(1) - (2)].node)); ;}
    break;

  case 605:
#line 762 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[(1) - (2)].str),(yylsp[(1) - (2)]))); ;}
    break;

  case 606:
#line 764 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[(1) - (2)].ival),(yylsp[(1) - (2)]))); ;}
    break;

  case 607:
#line 768 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 608:
#line 788 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 609:
#line 790 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
    break;

  case 610:
#line 792 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = doNegate((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
    break;

  case 611:
#line 796 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeIntConst((yyvsp[(1) - (1)].ival),(yylsp[(1) - (1)])); ;}
    break;

  case 612:
#line 797 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeFloatConst((yyvsp[(1) - (1)].str),(yylsp[(1) - (1)])); ;}
    break;

  case 613:
#line 801 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.ival) = 0; ;}
    break;

  case 614:
#line 802 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.ival) = 0; ;}
    break;

  case 615:
#line 805 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.ival) = 0; ;}
    break;

  case 616:
#line 806 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.ival) = 0; ;}
    break;

  case 617:
#line 831 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(3) - (3)].list); ;}
    break;

  case 618:
#line 833 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[(3) - (3)]));
					(yyval.list) = list_make1(node);
				;}
    break;

  case 619:
#line 837 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 620:
#line 841 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
    break;

  case 621:
#line 842 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list),(yyvsp[(3) - (3)].node)); ;}
    break;

  case 622:
#line 846 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 623:
#line 847 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 624:
#line 851 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 625:
#line 852 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 626:
#line 853 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 627:
#line 854 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 628:
#line 855 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 629:
#line 860 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[(1) - (2)]));
				;}
    break;

  case 630:
#line 873 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
				;}
    break;

  case 631:
#line 880 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
				;}
    break;

  case 632:
#line 887 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));
				;}
    break;

  case 633:
#line 893 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 634:
#line 894 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 635:
#line 898 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
    break;

  case 636:
#line 899 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 637:
#line 903 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
    break;

  case 638:
#line 904 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 639:
#line 908 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 640:
#line 909 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 641:
#line 913 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 642:
#line 914 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 643:
#line 918 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
    break;

  case 644:
#line 919 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
    break;

  case 645:
#line 924 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[(2) - (3)].list);
					n->strength = (yyvsp[(1) - (3)].lockstrength);
					n->waitPolicy = (yyvsp[(3) - (3)].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 646:
#line 934 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.lockstrength) = LCS_FORUPDATE; ;}
    break;

  case 647:
#line 935 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; ;}
    break;

  case 648:
#line 936 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.lockstrength) = PG_LCS_FORSHARE; ;}
    break;

  case 649:
#line 937 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; ;}
    break;

  case 650:
#line 941 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
    break;

  case 651:
#line 942 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 652:
#line 947 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.lockwaitpolicy) = LockWaitError; ;}
    break;

  case 653:
#line 948 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.lockwaitpolicy) = PGLockWaitSkip; ;}
    break;

  case 654:
#line 949 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.lockwaitpolicy) = PGLockWaitBlock; ;}
    break;

  case 655:
#line 959 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[(3) - (4)].list));
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 656:
#line 965 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[(1) - (5)].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[(4) - (5)].list));
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 657:
#line 973 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 658:
#line 974 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (2)].node); ;}
    break;

  case 659:
#line 987 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
    break;

  case 660:
#line 988 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 661:
#line 992 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
    break;

  case 662:
#line 993 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
    break;

  case 663:
#line 997 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 664:
#line 998 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 665:
#line 1005 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyvsp[(1) - (3)].range)->alias = (yyvsp[(2) - (3)].alias);
					(yyvsp[(1) - (3)].range)->sample = (yyvsp[(3) - (3)].node);
					(yyval.node) = (PGNode *) (yyvsp[(1) - (3)].range);
				;}
    break;

  case 666:
#line 1011 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[(1) - (3)].node);
					n->alias = (PGAlias*) linitial((yyvsp[(2) - (3)].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[(2) - (3)].list));
					n->sample = (yyvsp[(3) - (3)].node);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 667:
#line 1019 "third_party/libpg_query/grammar/statements/select.y"
    {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[(1) - (3)].node);
				n->alias = (yyvsp[(2) - (3)].alias);
				n->sample = (yyvsp[(3) - (3)].node);
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 668:
#line 1028 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[(2) - (3)].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[(3) - (3)].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[(3) - (3)].list));
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 669:
#line 1036 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[(1) - (3)].node);
					n->alias = (yyvsp[(2) - (3)].alias);
					n->sample = (yyvsp[(3) - (3)].node);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 670:
#line 1045 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[(2) - (3)].node);
					n->alias = (yyvsp[(3) - (3)].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 671:
#line 1054 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) (yyvsp[(1) - (1)].jexpr);
				;}
    break;

  case 672:
#line 1058 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyvsp[(2) - (4)].jexpr)->alias = (yyvsp[(4) - (4)].alias);
					(yyval.node) = (PGNode *) (yyvsp[(2) - (4)].jexpr);
				;}
    break;

  case 673:
#line 1063 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[(1) - (9)].node);
					n->aggrs = (yyvsp[(4) - (9)].list);
					n->pivots = (yyvsp[(6) - (9)].list);
					n->groups = (yyvsp[(7) - (9)].list);
					n->alias = (yyvsp[(9) - (9)].alias);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 674:
#line 1073 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[(1) - (9)].node);
					n->include_nulls = (yyvsp[(3) - (9)].boolean);
					n->unpivots = (yyvsp[(5) - (9)].list);
					n->pivots = (yyvsp[(7) - (9)].list);
					n->alias = (yyvsp[(9) - (9)].alias);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 675:
#line 1085 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(3) - (3)].list); ;}
    break;

  case 676:
#line 1086 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NULL; ;}
    break;

  case 677:
#line 1089 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = true; ;}
    break;

  case 678:
#line 1090 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = false; ;}
    break;

  case 679:
#line 1091 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = false; ;}
    break;

  case 680:
#line 1095 "third_party/libpg_query/grammar/statements/select.y"
    {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[(1) - (5)].node));
			n->pivot_value = (yyvsp[(4) - (5)].list);
			(yyval.node) = (PGNode *) n;
		;}
    break;

  case 681:
#line 1103 "third_party/libpg_query/grammar/statements/select.y"
    {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[(1) - (3)].node));
			n->pivot_enum = (yyvsp[(3) - (3)].str);
			(yyval.node) = (PGNode *) n;
		;}
    break;

  case 682:
#line 1112 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
    break;

  case 683:
#line 1113 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
    break;

  case 684:
#line 1117 "third_party/libpg_query/grammar/statements/select.y"
    {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[(1) - (5)].list);
			n->pivot_value = (yyvsp[(4) - (5)].list);
			(yyval.node) = (PGNode *) n;
		;}
    break;

  case 685:
#line 1125 "third_party/libpg_query/grammar/statements/select.y"
    {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[(1) - (3)].list);
			n->pivot_enum = (yyvsp[(3) - (3)].str);
			(yyval.node) = (PGNode *) n;
		;}
    break;

  case 686:
#line 1134 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
				;}
    break;

  case 687:
#line 1138 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node));
				;}
    break;

  case 688:
#line 1144 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
    break;

  case 689:
#line 1145 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
    break;

  case 690:
#line 1150 "third_party/libpg_query/grammar/statements/select.y"
    {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[(1) - (5)].list);
			n->pivot_value = (yyvsp[(4) - (5)].list);
			(yyval.node) = (PGNode *) n;
		;}
    break;

  case 691:
#line 1159 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
				;}
    break;

  case 692:
#line 1163 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node));
				;}
    break;

  case 693:
#line 1188 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.jexpr) = (yyvsp[(2) - (3)].jexpr);
				;}
    break;

  case 694:
#line 1192 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[(1) - (4)].node);
					n->rarg = (yyvsp[(4) - (4)].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[(2) - (4)]);
					(yyval.jexpr) = n;
				;}
    break;

  case 695:
#line 1205 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[(2) - (5)].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[(1) - (5)].node);
					n->rarg = (yyvsp[(4) - (5)].node);
					if ((yyvsp[(5) - (5)].node) != NULL && IsA((yyvsp[(5) - (5)].node), PGList))
						n->usingClause = (PGList *) (yyvsp[(5) - (5)].node); /* USING clause */
					else
						n->quals = (yyvsp[(5) - (5)].node); /* ON clause */
					n->location = (yylsp[(2) - (5)]);
					(yyval.jexpr) = n;
				;}
    break;

  case 696:
#line 1219 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[(1) - (4)].node);
					n->rarg = (yyvsp[(3) - (4)].node);
					if ((yyvsp[(4) - (4)].node) != NULL && IsA((yyvsp[(4) - (4)].node), PGList))
						n->usingClause = (PGList *) (yyvsp[(4) - (4)].node); /* USING clause */
					else
						n->quals = (yyvsp[(4) - (4)].node); /* ON clause */
					n->location = (yylsp[(2) - (4)]);
					(yyval.jexpr) = n;
				;}
    break;

  case 697:
#line 1234 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[(3) - (5)].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[(1) - (5)].node);
					n->rarg = (yyvsp[(5) - (5)].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[(2) - (5)]);
					(yyval.jexpr) = n;
				;}
    break;

  case 698:
#line 1246 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[(1) - (4)].node);
					n->rarg = (yyvsp[(4) - (4)].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[(2) - (4)]);
					(yyval.jexpr) = n;
				;}
    break;

  case 699:
#line 1259 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[(3) - (6)].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[(1) - (6)].node);
					n->rarg = (yyvsp[(5) - (6)].node);
					if ((yyvsp[(6) - (6)].node) != NULL && IsA((yyvsp[(6) - (6)].node), PGList))
						n->usingClause = (PGList *) (yyvsp[(6) - (6)].node); /* USING clause */
					else
						n->quals = (yyvsp[(6) - (6)].node); /* ON clause */
					n->location = (yylsp[(2) - (6)]);
					(yyval.jexpr) = n;
				;}
    break;

  case 700:
#line 1273 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[(1) - (5)].node);
					n->rarg = (yyvsp[(4) - (5)].node);
					if ((yyvsp[(5) - (5)].node) != NULL && IsA((yyvsp[(5) - (5)].node), PGList))
						n->usingClause = (PGList *) (yyvsp[(5) - (5)].node); /* USING clause */
					else
						n->quals = (yyvsp[(5) - (5)].node); /* ON clause */
					n->location = (yylsp[(2) - (5)]);
					(yyval.jexpr) = n;
				;}
    break;

  case 701:
#line 1287 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[(1) - (4)].node);
					n->rarg = (yyvsp[(4) - (4)].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[(2) - (4)]);
					(yyval.jexpr) = n;
				;}
    break;

  case 702:
#line 1300 "third_party/libpg_query/grammar/statements/select.y"
    {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[(1) - (5)].node);
                    n->rarg = (yyvsp[(4) - (5)].node);
                    if ((yyvsp[(5) - (5)].node) != NULL && IsA((yyvsp[(5) - (5)].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[(5) - (5)].node); /* USING clause */
                    else
                        n->quals = (yyvsp[(5) - (5)].node); /* ON clause */
                    n->location = (yylsp[(2) - (5)]);
                    (yyval.jexpr) = n;
                ;}
    break;

  case 703:
#line 1315 "third_party/libpg_query/grammar/statements/select.y"
    {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[(1) - (5)].node);
                   n->rarg = (yyvsp[(4) - (5)].node);
                   if ((yyvsp[(5) - (5)].node) != NULL && IsA((yyvsp[(5) - (5)].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[(5) - (5)].node); /* USING clause */
                   else
                       n->quals = (yyvsp[(5) - (5)].node); /* ON clause */
                   n->location = (yylsp[(2) - (5)]);
                   n->location = (yylsp[(2) - (5)]);
                   (yyval.jexpr) = n;
               ;}
    break;

  case 704:
#line 1334 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[(2) - (5)].str);
					(yyval.alias)->colnames = (yyvsp[(4) - (5)].list);
				;}
    break;

  case 705:
#line 1340 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[(2) - (2)].str);
				;}
    break;

  case 706:
#line 1345 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[(1) - (4)].str);
					(yyval.alias)->colnames = (yyvsp[(3) - (4)].list);
				;}
    break;

  case 707:
#line 1351 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[(1) - (1)].str);
				;}
    break;

  case 708:
#line 1357 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.alias) = (yyvsp[(1) - (1)].alias); ;}
    break;

  case 709:
#line 1358 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.alias) = NULL; ;}
    break;

  case 710:
#line 1367 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make2((yyvsp[(1) - (1)].alias), NIL);
				;}
    break;

  case 711:
#line 1371 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make2(NULL, (yyvsp[(3) - (4)].list));
				;}
    break;

  case 712:
#line 1375 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[(2) - (5)].str);
					(yyval.list) = list_make2(a, (yyvsp[(4) - (5)].list));
				;}
    break;

  case 713:
#line 1381 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[(1) - (4)].str);
					(yyval.list) = list_make2(a, (yyvsp[(3) - (4)].list));
				;}
    break;

  case 714:
#line 1387 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make2(NULL, NIL);
				;}
    break;

  case 715:
#line 1392 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.jtype) = PG_JOIN_FULL; ;}
    break;

  case 716:
#line 1393 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.jtype) = PG_JOIN_LEFT; ;}
    break;

  case 717:
#line 1394 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.jtype) = PG_JOIN_RIGHT; ;}
    break;

  case 718:
#line 1395 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.jtype) = PG_JOIN_SEMI; ;}
    break;

  case 719:
#line 1396 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.jtype) = PG_JOIN_ANTI; ;}
    break;

  case 720:
#line 1397 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.jtype) = PG_JOIN_INNER; ;}
    break;

  case 721:
#line 1401 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 722:
#line 1402 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 723:
#line 1414 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) (yyvsp[(3) - (4)].list); ;}
    break;

  case 724:
#line 1415 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
    break;

  case 725:
#line 1421 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[(1) - (1)].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				;}
    break;

  case 726:
#line 1428 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[(1) - (2)].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				;}
    break;

  case 727:
#line 1435 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* no inheritance */
					(yyval.range) = (yyvsp[(2) - (2)].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				;}
    break;

  case 728:
#line 1442 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[(3) - (4)].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				;}
    break;

  case 729:
#line 1474 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[(2) - (2)].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[(1) - (2)].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 730:
#line 1485 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[(6) - (6)].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[(4) - (6)].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 731:
#line 1498 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make2((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 732:
#line 1502 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].list)); ;}
    break;

  case 733:
#line 1503 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)); ;}
    break;

  case 734:
#line 1506 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
    break;

  case 735:
#line 1507 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 736:
#line 1510 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = true; ;}
    break;

  case 737:
#line 1511 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = false; ;}
    break;

  case 738:
#line 1516 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
    break;

  case 739:
#line 1517 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 740:
#line 1523 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
				;}
    break;

  case 741:
#line 1527 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
				;}
    break;

  case 742:
#line 1533 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[(1) - (3)].str);
					n->typeName = (yyvsp[(2) - (3)].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[(3) - (3)].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[(1) - (3)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 743:
#line 1554 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[(2) - (2)].list);
					n->location = (yylsp[(1) - (2)]);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 744:
#line 1561 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 745:
#line 1574 "third_party/libpg_query/grammar/statements/select.y"
    {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].typnam)));
            ;}
    break;

  case 746:
#line 1577 "third_party/libpg_query/grammar/statements/select.y"
    {
             (yyval.list) = lappend((yyvsp[(1) - (4)].list), list_make2(makeString((yyvsp[(3) - (4)].str)), (yyvsp[(4) - (4)].typnam)));
            ;}
    break;

  case 749:
#line 1584 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
    break;

  case 750:
#line 1585 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.typnam) = NULL; ;}
    break;

  case 751:
#line 1588 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(1) - (2)].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[(2) - (2)].list);
				;}
    break;

  case 752:
#line 1593 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(2) - (3)].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[(3) - (3)].list);
					(yyval.typnam)->setof = true;
				;}
    break;

  case 753:
#line 1600 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(1) - (5)].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[(4) - (5)].ival)));
				;}
    break;

  case 754:
#line 1605 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(2) - (6)].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[(5) - (6)].ival)));
					(yyval.typnam)->setof = true;
				;}
    break;

  case 755:
#line 1611 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(1) - (2)].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				;}
    break;

  case 756:
#line 1616 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(2) - (3)].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				;}
    break;

  case 757:
#line 1621 "third_party/libpg_query/grammar/statements/select.y"
    {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[(5) - (5)].list);
               (yyval.typnam)->typmods = (yyvsp[(3) - (5)].list);
               (yyval.typnam)->location = (yylsp[(1) - (5)]);
               ;}
    break;

  case 758:
#line 1627 "third_party/libpg_query/grammar/statements/select.y"
    {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[(5) - (5)].list);
               (yyval.typnam)->typmods = (yyvsp[(3) - (5)].list);
               (yyval.typnam)->location = (yylsp[(1) - (5)]);
			;}
    break;

  case 759:
#line 1633 "third_party/libpg_query/grammar/statements/select.y"
    {
			   (yyval.typnam) = SystemTypeName("union");
			   (yyval.typnam)->arrayBounds = (yyvsp[(5) - (5)].list);
			   (yyval.typnam)->typmods = (yyvsp[(3) - (5)].list);
			   (yyval.typnam)->location = (yylsp[(1) - (5)]);
			;}
    break;

  case 760:
#line 1643 "third_party/libpg_query/grammar/statements/select.y"
    {  (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeInteger(-1)); ;}
    break;

  case 761:
#line 1645 "third_party/libpg_query/grammar/statements/select.y"
    {  (yyval.list) = lappend((yyvsp[(1) - (4)].list), makeInteger((yyvsp[(3) - (4)].ival))); ;}
    break;

  case 762:
#line 1647 "third_party/libpg_query/grammar/statements/select.y"
    {  (yyval.list) = NIL; ;}
    break;

  case 763:
#line 1651 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
    break;

  case 764:
#line 1652 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
    break;

  case 765:
#line 1653 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
    break;

  case 766:
#line 1654 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
    break;

  case 767:
#line 1655 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
    break;

  case 768:
#line 1657 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(1) - (2)].typnam);
					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
				;}
    break;

  case 769:
#line 1662 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(1) - (4)].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[(3) - (4)].ival), (yylsp[(3) - (4)])));
				;}
    break;

  case 770:
#line 1681 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
    break;

  case 771:
#line 1682 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
    break;

  case 772:
#line 1683 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
    break;

  case 773:
#line 1684 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
    break;

  case 774:
#line 1696 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = makeTypeName((yyvsp[(1) - (2)].str));
					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
					(yyval.typnam)->location = (yylsp[(1) - (2)]);
				;}
    break;

  case 775:
#line 1709 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
    break;

  case 776:
#line 1710 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 777:
#line 1717 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[(1) - (1)]);
				;}
    break;

  case 778:
#line 1722 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[(1) - (1)]);
				;}
    break;

  case 779:
#line 1727 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[(1) - (1)]);
				;}
    break;

  case 780:
#line 1732 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[(1) - (1)]);
				;}
    break;

  case 781:
#line 1737 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[(1) - (1)]);
				;}
    break;

  case 782:
#line 1742 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(2) - (2)].typnam);
					(yyval.typnam)->location = (yylsp[(1) - (2)]);
				;}
    break;

  case 783:
#line 1747 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[(1) - (2)]);
				;}
    break;

  case 784:
#line 1752 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
					(yyval.typnam)->location = (yylsp[(1) - (2)]);
				;}
    break;

  case 785:
#line 1758 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
					(yyval.typnam)->location = (yylsp[(1) - (2)]);
				;}
    break;

  case 786:
#line 1764 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
					(yyval.typnam)->location = (yylsp[(1) - (2)]);
				;}
    break;

  case 787:
#line 1770 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[(1) - (1)]);
				;}
    break;

  case 788:
#line 1777 "third_party/libpg_query/grammar/statements/select.y"
    {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[(2) - (3)].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[(2) - (3)]))));
					else if ((yyvsp[(2) - (3)].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[(2) - (3)].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[(2) - (3)]))));
				;}
    break;

  case 789:
#line 1798 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName("float4");
				;}
    break;

  case 790:
#line 1808 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
				;}
    break;

  case 791:
#line 1812 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
				;}
    break;

  case 792:
#line 1820 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
				;}
    break;

  case 793:
#line 1824 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
					(yyval.typnam)->typmods = NIL;
				;}
    break;

  case 794:
#line 1832 "third_party/libpg_query/grammar/statements/select.y"
    {
					const char *typname;

					typname = (yyvsp[(2) - (5)].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[(4) - (5)].list);
					(yyval.typnam)->location = (yylsp[(1) - (5)]);
				;}
    break;

  case 795:
#line 1844 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[(2) - (2)].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[(1) - (2)]);
				;}
    break;

  case 796:
#line 1865 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
				;}
    break;

  case 797:
#line 1869 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
				;}
    break;

  case 798:
#line 1875 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
				;}
    break;

  case 799:
#line 1879 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
					(yyval.typnam)->typmods = NIL;
				;}
    break;

  case 800:
#line 1892 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName((yyvsp[(1) - (4)].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[(3) - (4)].ival), (yylsp[(3) - (4)])));
					(yyval.typnam)->location = (yylsp[(1) - (4)]);
				;}
    break;

  case 801:
#line 1900 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName((yyvsp[(1) - (1)].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[(1) - (1)].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[(1) - (1)]);
				;}
    break;

  case 802:
#line 1910 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = (yyvsp[(2) - (2)].boolean) ? "varchar": "bpchar"; ;}
    break;

  case 803:
#line 1912 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = (yyvsp[(2) - (2)].boolean) ? "varchar": "bpchar"; ;}
    break;

  case 804:
#line 1914 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = "varchar"; ;}
    break;

  case 805:
#line 1916 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = (yyvsp[(3) - (3)].boolean) ? "varchar": "bpchar"; ;}
    break;

  case 806:
#line 1918 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = (yyvsp[(3) - (3)].boolean) ? "varchar": "bpchar"; ;}
    break;

  case 807:
#line 1920 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = (yyvsp[(2) - (2)].boolean) ? "varchar": "bpchar"; ;}
    break;

  case 808:
#line 1924 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = true; ;}
    break;

  case 809:
#line 1925 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = false; ;}
    break;

  case 810:
#line 1933 "third_party/libpg_query/grammar/statements/select.y"
    {
					if ((yyvsp[(5) - (5)].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[(3) - (5)].ival), (yylsp[(3) - (5)])));
					(yyval.typnam)->location = (yylsp[(1) - (5)]);
				;}
    break;

  case 811:
#line 1942 "third_party/libpg_query/grammar/statements/select.y"
    {
					if ((yyvsp[(2) - (2)].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[(1) - (2)]);
				;}
    break;

  case 812:
#line 1950 "third_party/libpg_query/grammar/statements/select.y"
    {
					if ((yyvsp[(5) - (5)].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[(3) - (5)].ival), (yylsp[(3) - (5)])));
					(yyval.typnam)->location = (yylsp[(1) - (5)]);
				;}
    break;

  case 813:
#line 1959 "third_party/libpg_query/grammar/statements/select.y"
    {
					if ((yyvsp[(2) - (2)].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[(1) - (2)]);
				;}
    break;

  case 814:
#line 1970 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[(1) - (1)]);
				;}
    break;

  case 815:
#line 1977 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = true; ;}
    break;

  case 816:
#line 1978 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = false; ;}
    break;

  case 817:
#line 1979 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = false; ;}
    break;

  case 834:
#line 2008 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[(1) - (1)]))); ;}
    break;

  case 835:
#line 2010 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[(1) - (1)]))); ;}
    break;

  case 836:
#line 2012 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[(1) - (1)]))); ;}
    break;

  case 837:
#line 2014 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[(1) - (1)]))); ;}
    break;

  case 838:
#line 2016 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[(1) - (1)]))); ;}
    break;

  case 839:
#line 2018 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[(1) - (1)]))); ;}
    break;

  case 840:
#line 2020 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[(1) - (1)]))); ;}
    break;

  case 841:
#line 2022 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[(1) - (1)]))); ;}
    break;

  case 842:
#line 2024 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[(1) - (3)])));
				;}
    break;

  case 843:
#line 2029 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[(1) - (3)])));
				;}
    break;

  case 844:
#line 2034 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[(1) - (3)])));
				;}
    break;

  case 845:
#line 2040 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[(1) - (3)])));
				;}
    break;

  case 846:
#line 2047 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[(1) - (3)])));
				;}
    break;

  case 847:
#line 2052 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[(1) - (3)])));
				;}
    break;

  case 848:
#line 2058 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[(1) - (3)])));
				;}
    break;

  case 849:
#line 2063 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 850:
#line 2094 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 851:
#line 2097 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeTypeCast((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].typnam), 0, (yylsp[(2) - (3)])); ;}
    break;

  case 852:
#line 2099 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[(1) - (3)].node);
					n->collname = (yyvsp[(3) - (3)].list);
					n->location = (yylsp[(2) - (3)]);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 853:
#line 2107 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[(5) - (5)].node), (yyvsp[(1) - (5)].node)),
											   (yylsp[(2) - (5)]));
				;}
    break;

  case 854:
#line 2122 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
    break;

  case 855:
#line 2124 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = doNegate((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
    break;

  case 856:
#line 2126 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 857:
#line 2128 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 858:
#line 2130 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 859:
#line 2132 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 860:
#line 2134 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 861:
#line 2136 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 862:
#line 2138 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 863:
#line 2140 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 864:
#line 2142 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 865:
#line 2144 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 866:
#line 2146 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 867:
#line 2148 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 868:
#line 2150 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 869:
#line 2152 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 870:
#line 2155 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (3)].list), (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 871:
#line 2157 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(1) - (2)].list), NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
    break;

  case 872:
#line 2159 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (2)].list), (yyvsp[(1) - (2)].node), NULL, (yylsp[(2) - (2)])); ;}
    break;

  case 873:
#line 2162 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeAndExpr((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 874:
#line 2164 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeOrExpr((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 875:
#line 2166 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeNotExpr((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
    break;

  case 876:
#line 2168 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeNotExpr((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
    break;

  case 877:
#line 2170 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));
				;}
    break;

  case 878:
#line 2175 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));
				;}
    break;

  case 879:
#line 2180 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[(1) - (5)].node), (yyvsp[(3) - (5)].node), (yyvsp[(5) - (5)].node)),
											   (yylsp[(2) - (5)]));
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 880:
#line 2187 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node), (yylsp[(2) - (4)]));
				;}
    break;

  case 881:
#line 2192 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[(1) - (6)].node), (yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
											   (yylsp[(2) - (6)]));
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 882:
#line 2199 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));
				;}
    break;

  case 883:
#line 2204 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[(1) - (5)].node), (yyvsp[(3) - (5)].node), (yyvsp[(5) - (5)].node)),
											   (yylsp[(2) - (5)]));
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 884:
#line 2211 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node), (yylsp[(2) - (4)]));
				;}
    break;

  case 885:
#line 2216 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[(1) - (6)].node), (yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
											   (yylsp[(2) - (6)]));
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 886:
#line 2224 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[(4) - (4)].node), makeNullAConst(-1)),
											   (yylsp[(2) - (4)]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[(1) - (4)].node), (PGNode *) n, (yylsp[(2) - (4)]));
				;}
    break;

  case 887:
#line 2232 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
											   (yylsp[(2) - (6)]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[(1) - (6)].node), (PGNode *) n, (yylsp[(2) - (6)]));
				;}
    break;

  case 888:
#line 2240 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[(5) - (5)].node), makeNullAConst(-1)),
											   (yylsp[(2) - (5)]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[(1) - (5)].node), (PGNode *) n, (yylsp[(2) - (5)]));
				;}
    break;

  case 889:
#line 2248 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[(5) - (7)].node), (yyvsp[(7) - (7)].node)),
											   (yylsp[(2) - (7)]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[(1) - (7)].node), (PGNode *) n, (yylsp[(2) - (7)]));
				;}
    break;

  case 890:
#line 2266 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[(2) - (3)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 891:
#line 2274 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[(1) - (2)].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[(2) - (2)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 892:
#line 2282 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[(1) - (4)].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[(2) - (4)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 893:
#line 2290 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[(2) - (3)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 894:
#line 2298 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[(1) - (2)].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[(2) - (2)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 895:
#line 2306 "third_party/libpg_query/grammar/statements/select.y"
    {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[(1) - (3)].node);
				n->rhs = (yyvsp[(3) - (3)].node);
				n->location = (yylsp[(2) - (3)]);
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 896:
#line 2314 "third_party/libpg_query/grammar/statements/select.y"
    {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));
			;}
    break;

  case 897:
#line 2318 "third_party/libpg_query/grammar/statements/select.y"
    {
					if (list_length((yyvsp[(1) - (3)].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[(1) - (3)]))));
					if (list_length((yyvsp[(3) - (3)].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[(3) - (3)]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)),
											   (yylsp[(2) - (3)]));
				;}
    break;

  case 898:
#line 2334 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[(2) - (3)]);
					(yyval.node) = (PGNode *)b;
				;}
    break;

  case 899:
#line 2342 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[(1) - (4)].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[(2) - (4)]);
					(yyval.node) = (PGNode *)b;
				;}
    break;

  case 900:
#line 2350 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[(2) - (3)]);
					(yyval.node) = (PGNode *)b;
				;}
    break;

  case 901:
#line 2358 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[(1) - (4)].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[(2) - (4)]);
					(yyval.node) = (PGNode *)b;
				;}
    break;

  case 902:
#line 2366 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[(2) - (3)]);
					(yyval.node) = (PGNode *)b;
				;}
    break;

  case 903:
#line 2374 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[(1) - (4)].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[(2) - (4)]);
					(yyval.node) = (PGNode *)b;
				;}
    break;

  case 904:
#line 2382 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[(1) - (5)].node), (yyvsp[(5) - (5)].node), (yylsp[(2) - (5)]));
				;}
    break;

  case 905:
#line 2386 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[(1) - (6)].node), (yyvsp[(6) - (6)].node), (yylsp[(2) - (6)]));
				;}
    break;

  case 906:
#line 2390 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[(1) - (6)].node), (PGNode *) (yyvsp[(5) - (6)].list), (yylsp[(2) - (6)]));
				;}
    break;

  case 907:
#line 2394 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[(1) - (7)].node), (PGNode *) (yyvsp[(6) - (7)].list), (yylsp[(2) - (7)]));
				;}
    break;

  case 908:
#line 2398 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[(1) - (6)].node),
												   (PGNode *) list_make2((yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
												   (yylsp[(2) - (6)]));
				;}
    break;

  case 909:
#line 2406 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[(1) - (7)].node),
												   (PGNode *) list_make2((yyvsp[(5) - (7)].node), (yyvsp[(7) - (7)].node)),
												   (yylsp[(2) - (7)]));
				;}
    break;

  case 910:
#line 2414 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[(1) - (6)].node),
												   (PGNode *) list_make2((yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
												   (yylsp[(2) - (6)]));
				;}
    break;

  case 911:
#line 2422 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[(1) - (7)].node),
												   (PGNode *) list_make2((yyvsp[(5) - (7)].node), (yyvsp[(7) - (7)].node)),
												   (yylsp[(2) - (7)]));
				;}
    break;

  case 912:
#line 2430 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[(3) - (3)].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[(3) - (3)].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[(1) - (3)].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[(2) - (3)]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));
					}
				;}
    break;

  case 913:
#line 2450 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[(4) - (4)].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[(4) - (4)].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[(1) - (4)].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[(2) - (4)]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[(2) - (4)]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node), (yylsp[(2) - (4)]));
					}
				;}
    break;

  case 914:
#line 2472 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[(3) - (4)].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[(1) - (4)].node);
					n->operName = (yyvsp[(2) - (4)].list);
					n->subselect = (yyvsp[(4) - (4)].node);
					n->location = (yylsp[(2) - (4)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 915:
#line 2483 "third_party/libpg_query/grammar/statements/select.y"
    {
					if ((yyvsp[(3) - (6)].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[(2) - (6)].list), (yyvsp[(1) - (6)].node), (yyvsp[(5) - (6)].node), (yylsp[(2) - (6)]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[(2) - (6)].list), (yyvsp[(1) - (6)].node), (yyvsp[(5) - (6)].node), (yylsp[(2) - (6)]));
				;}
    break;

  case 916:
#line 2490 "third_party/libpg_query/grammar/statements/select.y"
    {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[(1) - (1)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 917:
#line 2504 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[(3) - (4)].node);
					star->columns = true;
					star->location = (yylsp[(1) - (4)]);
					(yyval.node) = (PGNode *) star;
				;}
    break;

  case 918:
#line 2512 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[(2) - (3)].list);
					star->replace_list = (yyvsp[(3) - (3)].list);
					star->location = (yylsp[(1) - (3)]);
					(yyval.node) = (PGNode *) star;
				;}
    break;

  case 919:
#line 2520 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[(1) - (5)].str);
					star->except_list = (yyvsp[(4) - (5)].list);
					star->replace_list = (yyvsp[(5) - (5)].list);
					star->location = (yylsp[(1) - (5)]);
					(yyval.node) = (PGNode *) star;
				;}
    break;

  case 920:
#line 2540 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 921:
#line 2542 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeTypeCast((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].typnam), 0, (yylsp[(2) - (3)])); ;}
    break;

  case 922:
#line 2544 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
    break;

  case 923:
#line 2546 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = doNegate((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
    break;

  case 924:
#line 2548 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 925:
#line 2550 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 926:
#line 2552 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 927:
#line 2554 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 928:
#line 2556 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 929:
#line 2558 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 930:
#line 2560 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 931:
#line 2562 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 932:
#line 2564 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 933:
#line 2566 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 934:
#line 2568 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 935:
#line 2570 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 936:
#line 2572 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 937:
#line 2574 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 938:
#line 2576 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (3)].list), (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
    break;

  case 939:
#line 2578 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(1) - (2)].list), NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
    break;

  case 940:
#line 2580 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (2)].list), (yyvsp[(1) - (2)].node), NULL, (yylsp[(2) - (2)])); ;}
    break;

  case 941:
#line 2582 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[(1) - (5)].node), (yyvsp[(5) - (5)].node), (yylsp[(2) - (5)]));
				;}
    break;

  case 942:
#line 2586 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[(1) - (6)].node), (yyvsp[(6) - (6)].node), (yylsp[(2) - (6)]));
				;}
    break;

  case 943:
#line 2590 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[(1) - (6)].node), (PGNode *) (yyvsp[(5) - (6)].list), (yylsp[(2) - (6)]));
				;}
    break;

  case 944:
#line 2594 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[(1) - (7)].node), (PGNode *) (yyvsp[(6) - (7)].list), (yylsp[(2) - (7)]));
				;}
    break;

  case 946:
#line 2608 "third_party/libpg_query/grammar/statements/select.y"
    {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[(1) - (1)].list), (yylsp[(1) - (1)]));
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 947:
#line 2613 "third_party/libpg_query/grammar/statements/select.y"
    {
					if ((yyvsp[(2) - (2)].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[(1) - (2)].node);
						n->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[(1) - (2)].node);
				;}
    break;

  case 948:
#line 2626 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 949:
#line 2627 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 950:
#line 2629 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[(2) - (2)].ival);
					n->location = (yylsp[(1) - (2)]);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 951:
#line 2636 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeNamedParamRef((yyvsp[(2) - (2)].str), (yylsp[(1) - (2)]));
				;}
    break;

  case 952:
#line 2639 "third_party/libpg_query/grammar/statements/select.y"
    {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[(2) - (3)].list), (yylsp[(2) - (3)]));
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 953:
#line 2643 "third_party/libpg_query/grammar/statements/select.y"
    {
				(yyval.node) = (yyvsp[(1) - (1)].node);
			;}
    break;

  case 954:
#line 2647 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[(2) - (2)].node);
					n->location = (yylsp[(2) - (2)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 955:
#line 2657 "third_party/libpg_query/grammar/statements/select.y"
    {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 956:
#line 2663 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 957:
#line 2665 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[(1) - (1)].node);
					n->location = (yylsp[(1) - (1)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 958:
#line 2676 "third_party/libpg_query/grammar/statements/select.y"
    {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[(1) - (2)].node);
					n->location = (yylsp[(1) - (2)]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				;}
    break;

  case 959:
#line 2700 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[(2) - (2)].node);
					n->location = (yylsp[(1) - (2)]);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 960:
#line 2711 "third_party/libpg_query/grammar/statements/select.y"
    {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[(3) - (4)].list);
				  g->location = (yylsp[(1) - (4)]);
				  (yyval.node) = (PGNode *)g;
			  ;}
    break;

  case 961:
#line 2722 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeParamRef(0, (yylsp[(1) - (1)]));
				;}
    break;

  case 962:
#line 2726 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[(1) - (1)].ival);
					p->location = (yylsp[(1) - (1)]);
					(yyval.node) = (PGNode *) p;
				;}
    break;

  case 963:
#line 2733 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (yyvsp[(2) - (3)].node);
				;}
    break;

  case 964:
#line 2737 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[(2) - (3)].list), (yylsp[(2) - (3)]));
					(yyval.node) = (PGNode *) f;
				;}
    break;

  case 965:
#line 2742 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGList *key_list = NULL;
					PGList *value_list = NULL;
					PGListCell *lc;
					PGList *entry_list = (yyvsp[(3) - (4)].list);
					foreach(lc, entry_list)
					{
						PGList *l = (PGList *) lc->data.ptr_value;
						key_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);
						value_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);
					}
					PGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName("list_value"), key_list, (yylsp[(3) - (4)]));
					PGNode *values = (PGNode *) makeFuncCall(SystemFuncName("list_value"), value_list, (yylsp[(3) - (4)]));
					PGFuncCall *f = makeFuncCall(SystemFuncName("map"), list_make2(keys, values), (yylsp[(3) - (4)]));
					(yyval.node) = (PGNode *) f;
				;}
    break;

  case 966:
#line 2759 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (yyvsp[(1) - (1)].node);
				;}
    break;

  case 967:
#line 2765 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[(1) - (3)].list), NIL, (yylsp[(1) - (3)]));
				;}
    break;

  case 968:
#line 2769 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (6)].list), (yyvsp[(3) - (6)].list), (yylsp[(1) - (6)]));
					n->agg_order = (yyvsp[(4) - (6)].list);
					n->agg_ignore_nulls = (yyvsp[(5) - (6)].boolean);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 969:
#line 2776 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (7)].list), list_make1((yyvsp[(4) - (7)].node)), (yylsp[(1) - (7)]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[(5) - (7)].list);
					n->agg_ignore_nulls = (yyvsp[(6) - (7)].boolean);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 970:
#line 2784 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (9)].list), lappend((yyvsp[(3) - (9)].list), (yyvsp[(6) - (9)].node)), (yylsp[(1) - (9)]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[(7) - (9)].list);
					n->agg_ignore_nulls = (yyvsp[(8) - (9)].boolean);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 971:
#line 2792 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (7)].list), (yyvsp[(4) - (7)].list), (yylsp[(1) - (7)]));
					n->agg_order = (yyvsp[(5) - (7)].list);
					n->agg_ignore_nulls = (yyvsp[(6) - (7)].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 972:
#line 2803 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (7)].list), (yyvsp[(4) - (7)].list), (yylsp[(1) - (7)]));
					n->agg_order = (yyvsp[(5) - (7)].list);
					n->agg_ignore_nulls = (yyvsp[(6) - (7)].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 973:
#line 2823 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[(1) - (5)].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[(2) - (5)].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[(2) - (5)]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[(2) - (5)]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[(2) - (5)]))));
						n->agg_order = (yyvsp[(2) - (5)].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[(3) - (5)].node);
					n->export_state = (yyvsp[(4) - (5)].boolean);
					n->over = (yyvsp[(5) - (5)].windef);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 974:
#line 2859 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 975:
#line 2869 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 976:
#line 2870 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 977:
#line 2878 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[(4) - (5)].node)),
											   (yylsp[(1) - (5)]));
				;}
    break;

  case 978:
#line 2884 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeTypeCast((yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].typnam), 0, (yylsp[(1) - (6)])); ;}
    break;

  case 979:
#line 2886 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = makeTypeCast((yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].typnam), 1, (yylsp[(1) - (6)])); ;}
    break;

  case 980:
#line 2888 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
				;}
    break;

  case 981:
#line 2892 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
				;}
    break;

  case 982:
#line 2901 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
				;}
    break;

  case 983:
#line 2906 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
				;}
    break;

  case 984:
#line 2913 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[(5) - (6)].typnam)->names))->val.str),
												list_make1((yyvsp[(3) - (6)].node)),
												(yylsp[(1) - (6)]));
				;}
    break;

  case 985:
#line 2928 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));
				;}
    break;

  case 986:
#line 2935 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));
				;}
    break;

  case 987:
#line 2939 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));
				;}
    break;

  case 988:
#line 2943 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
				;}
    break;

  case 989:
#line 2947 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].node), (yylsp[(1) - (6)]));
				;}
    break;

  case 990:
#line 2951 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[(3) - (4)].list);
					c->location = (yylsp[(1) - (4)]);
					(yyval.node) = (PGNode *)c;
				;}
    break;

  case 991:
#line 2961 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[(4) - (7)].str), NIL, (yylsp[(4) - (7)]), yyscanner);
					lambda->rhs = (yyvsp[(2) - (7)].node);
					lambda->location = (yylsp[(1) - (7)]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[(6) - (7)].node), lambda), (yylsp[(1) - (7)]));
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 992:
#line 2970 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[(4) - (9)].str), NIL, (yylsp[(4) - (9)]), yyscanner);
					lambda->rhs = (yyvsp[(2) - (9)].node);
					lambda->location = (yylsp[(1) - (9)]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = makeColumnRef((yyvsp[(4) - (9)].str), NIL, (yylsp[(4) - (9)]), yyscanner);
					lambda_filter->rhs = (yyvsp[(8) - (9)].node);
					lambda_filter->location = (yylsp[(8) - (9)]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[(6) - (9)].node), lambda_filter), (yylsp[(1) - (9)]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[(1) - (9)]));
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 993:
#line 2991 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(4) - (5)].list); ;}
    break;

  case 994:
#line 2992 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 995:
#line 2996 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(4) - (5)].node); ;}
    break;

  case 996:
#line 2997 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(3) - (4)].node); ;}
    break;

  case 997:
#line 2998 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 998:
#line 3002 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = true; ;}
    break;

  case 999:
#line 3003 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.boolean) = false; ;}
    break;

  case 1000:
#line 3010 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
    break;

  case 1001:
#line 3011 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 1002:
#line 3015 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].windef)); ;}
    break;

  case 1003:
#line 3017 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].windef)); ;}
    break;

  case 1004:
#line 3022 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n = (yyvsp[(3) - (3)].windef);
					n->name = (yyvsp[(1) - (3)].str);
					(yyval.windef) = n;
				;}
    break;

  case 1005:
#line 3030 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.windef) = (yyvsp[(2) - (2)].windef); ;}
    break;

  case 1006:
#line 3032 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[(2) - (2)].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[(2) - (2)]);
					(yyval.windef) = n;
				;}
    break;

  case 1007:
#line 3045 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.windef) = NULL; ;}
    break;

  case 1008:
#line 3050 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[(2) - (6)].str);
					n->partitionClause = (yyvsp[(3) - (6)].list);
					n->orderClause = (yyvsp[(4) - (6)].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[(5) - (6)].windef)->frameOptions;
					n->startOffset = (yyvsp[(5) - (6)].windef)->startOffset;
					n->endOffset = (yyvsp[(5) - (6)].windef)->endOffset;
					n->location = (yylsp[(1) - (6)]);
					(yyval.windef) = n;
				;}
    break;

  case 1009:
#line 3075 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1010:
#line 3076 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = NULL; ;}
    break;

  case 1011:
#line 3079 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(3) - (3)].list); ;}
    break;

  case 1012:
#line 3080 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 1013:
#line 3092 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n = (yyvsp[(2) - (2)].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					(yyval.windef) = n;
				;}
    break;

  case 1014:
#line 3098 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n = (yyvsp[(2) - (2)].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				;}
    break;

  case 1015:
#line 3104 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				;}
    break;

  case 1016:
#line 3114 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n = (yyvsp[(1) - (1)].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[(1) - (1)]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[(1) - (1)]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				;}
    break;

  case 1017:
#line 3131 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n1 = (yyvsp[(2) - (4)].windef);
					PGWindowDef *n2 = (yyvsp[(4) - (4)].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[(2) - (4)]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[(4) - (4)]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[(4) - (4)]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[(4) - (4)]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				;}
    break;

  case 1018:
#line 3176 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				;}
    break;

  case 1019:
#line 3184 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				;}
    break;

  case 1020:
#line 3192 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				;}
    break;

  case 1021:
#line 3200 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[(1) - (2)].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				;}
    break;

  case 1022:
#line 3208 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[(1) - (2)].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				;}
    break;

  case 1023:
#line 3228 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
    break;

  case 1024:
#line 3229 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 1025:
#line 3232 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list);;}
    break;

  case 1026:
#line 3233 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(2) - (5)].list), (yyvsp[(4) - (5)].node)); ;}
    break;

  case 1027:
#line 3237 "third_party/libpg_query/grammar/statements/select.y"
    {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[(1) - (3)].str);
		na->arg = (PGExpr *) (yyvsp[(3) - (3)].node);
		na->argnumber = -1;
		na->location = (yylsp[(1) - (3)]);
		(yyval.node) = (PGNode *) na;
	;}
    break;

  case 1028:
#line 3247 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
    break;

  case 1029:
#line 3248 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
    break;

  case 1030:
#line 3252 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 1031:
#line 3253 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 1032:
#line 3258 "third_party/libpg_query/grammar/statements/select.y"
    {
				(yyval.list) = list_make2((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
			;}
    break;

  case 1033:
#line 3264 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].list)); ;}
    break;

  case 1034:
#line 3265 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)); ;}
    break;

  case 1035:
#line 3270 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 1036:
#line 3271 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 1037:
#line 3276 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 1038:
#line 3277 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NULL; ;}
    break;

  case 1039:
#line 3280 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.subquerytype) = PG_ANY_SUBLINK; ;}
    break;

  case 1040:
#line 3281 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.subquerytype) = PG_ANY_SUBLINK; ;}
    break;

  case 1041:
#line 3282 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.subquerytype) = PG_ALL_SUBLINK; ;}
    break;

  case 1042:
#line 3285 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1043:
#line 3286 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (char*) (yyvsp[(1) - (1)].conststr); ;}
    break;

  case 1044:
#line 3289 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = "+"; ;}
    break;

  case 1045:
#line 3290 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = "-"; ;}
    break;

  case 1046:
#line 3291 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = "*"; ;}
    break;

  case 1047:
#line 3292 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = "/"; ;}
    break;

  case 1048:
#line 3293 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = "//"; ;}
    break;

  case 1049:
#line 3294 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = "%"; ;}
    break;

  case 1050:
#line 3295 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = "^"; ;}
    break;

  case 1051:
#line 3296 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = "**"; ;}
    break;

  case 1052:
#line 3297 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = "<"; ;}
    break;

  case 1053:
#line 3298 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = ">"; ;}
    break;

  case 1054:
#line 3299 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = "="; ;}
    break;

  case 1055:
#line 3300 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = "<="; ;}
    break;

  case 1056:
#line 3301 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = ">="; ;}
    break;

  case 1057:
#line 3302 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.conststr) = "<>"; ;}
    break;

  case 1058:
#line 3306 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
    break;

  case 1059:
#line 3308 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
    break;

  case 1060:
#line 3313 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
    break;

  case 1061:
#line 3315 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
    break;

  case 1062:
#line 3320 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
    break;

  case 1063:
#line 3322 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
    break;

  case 1064:
#line 3324 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString("~~")); ;}
    break;

  case 1065:
#line 3326 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString("!~~")); ;}
    break;

  case 1066:
#line 3328 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString("~~~")); ;}
    break;

  case 1067:
#line 3330 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString("!~~~")); ;}
    break;

  case 1068:
#line 3332 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString("~~*")); ;}
    break;

  case 1069:
#line 3334 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString("!~~*")); ;}
    break;

  case 1070:
#line 3348 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
    break;

  case 1071:
#line 3350 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lcons(makeString((yyvsp[(1) - (3)].str)), (yyvsp[(3) - (3)].list)); ;}
    break;

  case 1072:
#line 3355 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
				;}
    break;

  case 1073:
#line 3359 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
				;}
    break;

  case 1074:
#line 3366 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = (yyvsp[(1) - (1)].list);
				;}
    break;

  case 1075:
#line 3371 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = (yyvsp[(1) - (2)].list);
				;}
    break;

  case 1076:
#line 3377 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
				;}
    break;

  case 1077:
#line 3381 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
				;}
    break;

  case 1078:
#line 3388 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = (yyvsp[(1) - (1)].list);
				;}
    break;

  case 1079:
#line 3393 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = (yyvsp[(1) - (2)].list);
				;}
    break;

  case 1080:
#line 3400 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = (yyvsp[(1) - (1)].list);
				;}
    break;

  case 1081:
#line 3404 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = NULL;
				;}
    break;

  case 1082:
#line 3413 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
				;}
    break;

  case 1083:
#line 3417 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
				;}
    break;

  case 1084:
#line 3423 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (yyvsp[(1) - (1)].node);
				;}
    break;

  case 1085:
#line 3427 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[(1) - (3)].str);
					na->arg = (PGExpr *) (yyvsp[(3) - (3)].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[(1) - (3)]);
					(yyval.node) = (PGNode *) na;
				;}
    break;

  case 1086:
#line 3436 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[(1) - (3)].str);
					na->arg = (PGExpr *) (yyvsp[(3) - (3)].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[(1) - (3)]);
					(yyval.node) = (PGNode *) na;
				;}
    break;

  case 1087:
#line 3446 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].typnam)); ;}
    break;

  case 1088:
#line 3447 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typnam)); ;}
    break;

  case 1089:
#line 3452 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make2(makeStringConst((yyvsp[(1) - (3)].str), (yylsp[(1) - (3)])), (yyvsp[(3) - (3)].node));
				;}
    break;

  case 1090:
#line 3455 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 1091:
#line 3462 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1092:
#line 3463 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (char*) "year"; ;}
    break;

  case 1093:
#line 3464 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (char*) "month"; ;}
    break;

  case 1094:
#line 3465 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (char*) "day"; ;}
    break;

  case 1095:
#line 3466 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (char*) "hour"; ;}
    break;

  case 1096:
#line 3467 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (char*) "minute"; ;}
    break;

  case 1097:
#line 3468 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (char*) "second"; ;}
    break;

  case 1098:
#line 3469 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (char*) "millisecond"; ;}
    break;

  case 1099:
#line 3470 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (char*) "microsecond"; ;}
    break;

  case 1100:
#line 3471 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1101:
#line 3482 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make4((yyvsp[(1) - (4)].node), (yyvsp[(2) - (4)].node), (yyvsp[(3) - (4)].node), (yyvsp[(4) - (4)].node));
				;}
    break;

  case 1102:
#line 3486 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make3((yyvsp[(1) - (3)].node), (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].node));
				;}
    break;

  case 1103:
#line 3493 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
    break;

  case 1104:
#line 3499 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make2((yyvsp[(3) - (3)].node), (yyvsp[(1) - (3)].node)); ;}
    break;

  case 1105:
#line 3500 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 1106:
#line 3517 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make3((yyvsp[(1) - (3)].node), (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].node));
				;}
    break;

  case 1107:
#line 3521 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyvsp[(2) - (3)].node));
				;}
    break;

  case 1108:
#line 3526 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = list_make2((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node));
				;}
    break;

  case 1109:
#line 3530 "third_party/libpg_query/grammar/statements/select.y"
    {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[(1) - (2)].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[(2) - (2)].node),
												 SystemTypeName("int4"), 0, -1));
				;}
    break;

  case 1110:
#line 3545 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.list) = (yyvsp[(1) - (1)].list);
				;}
    break;

  case 1111:
#line 3549 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 1112:
#line 3553 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
    break;

  case 1113:
#line 3556 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
    break;

  case 1114:
#line 3559 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(3) - (3)].list), (yyvsp[(1) - (3)].node)); ;}
    break;

  case 1115:
#line 3560 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
    break;

  case 1116:
#line 3561 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 1117:
#line 3565 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[(1) - (1)].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1118:
#line 3571 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (PGNode *)(yyvsp[(2) - (3)].list); ;}
    break;

  case 1119:
#line 3582 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[(2) - (5)].node);
					c->args = (yyvsp[(3) - (5)].list);
					c->defresult = (PGExpr *) (yyvsp[(4) - (5)].node);
					c->location = (yylsp[(1) - (5)]);
					(yyval.node) = (PGNode *)c;
				;}
    break;

  case 1120:
#line 3595 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
    break;

  case 1121:
#line 3596 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
    break;

  case 1122:
#line 3601 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[(2) - (4)].node);
					w->result = (PGExpr *) (yyvsp[(4) - (4)].node);
					w->location = (yylsp[(1) - (4)]);
					(yyval.node) = (PGNode *)w;
				;}
    break;

  case 1123:
#line 3611 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
    break;

  case 1124:
#line 3612 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 1125:
#line 3615 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 1126:
#line 3616 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 1127:
#line 3620 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeColumnRef((yyvsp[(1) - (1)].str), NIL, (yylsp[(1) - (1)]), yyscanner);
				;}
    break;

  case 1128:
#line 3624 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeColumnRef((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].list), (yylsp[(1) - (2)]), yyscanner);
				;}
    break;

  case 1129:
#line 3631 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = (PGNode *) makeString((yyvsp[(2) - (2)].str));
				;}
    break;

  case 1130:
#line 3635 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[(2) - (3)].node);
					(yyval.node) = (PGNode *) ai;
				;}
    break;

  case 1131:
#line 3643 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[(2) - (5)].node);
					ai->uidx = (yyvsp[(4) - (5)].node);
					(yyval.node) = (PGNode *) ai;
				;}
    break;

  case 1132:
#line 3653 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
    break;

  case 1133:
#line 3654 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.node) = NULL; ;}
    break;

  case 1134:
#line 3658 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
    break;

  case 1135:
#line 3659 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
    break;

  case 1136:
#line 3663 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 1137:
#line 3664 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
    break;

  case 1138:
#line 3668 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NULL; ;}
    break;

  case 1139:
#line 3669 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(NULL); ;}
    break;

  case 1140:
#line 3670 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
    break;

  case 1141:
#line 3675 "third_party/libpg_query/grammar/statements/select.y"
    {
					if ((yyvsp[(3) - (3)].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[(2) - (3)].str))), (yyvsp[(3) - (3)].list)->head->data.ptr_value ? (yyvsp[(3) - (3)].list) : NULL, (yylsp[(2) - (3)]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[(2) - (3)].str));
					}
				;}
    break;

  case 1142:
#line 3684 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[(2) - (3)].node);
					(yyval.node) = (PGNode *) ai;
				;}
    break;

  case 1143:
#line 3692 "third_party/libpg_query/grammar/statements/select.y"
    {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[(2) - (5)].node);
					ai->uidx = (yyvsp[(4) - (5)].node);
					(yyval.node) = (PGNode *) ai;
				;}
    break;

  case 1144:
#line 3707 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 1145:
#line 3708 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
    break;

  case 1148:
#line 3724 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 1149:
#line 3725 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 1150:
#line 3729 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].target)); ;}
    break;

  case 1151:
#line 3730 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].target)); ;}
    break;

  case 1152:
#line 3734 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 1153:
#line 3735 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 1154:
#line 3739 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[(3) - (3)].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[(1) - (3)].node);
					(yyval.target)->location = (yylsp[(1) - (3)]);
				;}
    break;

  case 1155:
#line 3755 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[(2) - (2)].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[(1) - (2)].node);
					(yyval.target)->location = (yylsp[(1) - (2)]);
				;}
    break;

  case 1156:
#line 3763 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[(1) - (1)].node);
					(yyval.target)->location = (yylsp[(1) - (1)]);
				;}
    break;

  case 1157:
#line 3772 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
    break;

  case 1158:
#line 3773 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString((yyvsp[(2) - (2)].str))); ;}
    break;

  case 1159:
#line 3776 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 1160:
#line 3777 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NULL; ;}
    break;

  case 1161:
#line 3780 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make2((yyvsp[(1) - (3)].node), makeString((yyvsp[(3) - (3)].str))); ;}
    break;

  case 1162:
#line 3784 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].list)); ;}
    break;

  case 1163:
#line 3785 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)); ;}
    break;

  case 1164:
#line 3789 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 1165:
#line 3790 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 1166:
#line 3793 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
    break;

  case 1167:
#line 3794 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(2) - (2)].list)); ;}
    break;

  case 1168:
#line 3795 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NULL; ;}
    break;

  case 1169:
#line 3805 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].range)); ;}
    break;

  case 1170:
#line 3806 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].range)); ;}
    break;

  case 1171:
#line 3818 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
				;}
    break;

  case 1172:
#line 3822 "third_party/libpg_query/grammar/statements/select.y"
    {
					check_qualified_name((yyvsp[(2) - (2)].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[(1) - (2)]));
					switch (list_length((yyvsp[(2) - (2)].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[(1) - (2)].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[(2) - (2)].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[(1) - (2)].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[(2) - (2)].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[(2) - (2)].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].list)))),
									 parser_errposition((yylsp[(1) - (2)]))));
							break;
					}
				;}
    break;

  case 1173:
#line 3850 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
    break;

  case 1174:
#line 3852 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeString((yyvsp[(3) - (3)].str))); ;}
    break;

  case 1175:
#line 3857 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 1176:
#line 3858 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 1177:
#line 3862 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
    break;

  case 1178:
#line 3863 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
    break;

  case 1179:
#line 3866 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1180:
#line 3868 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1181:
#line 3879 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
    break;

  case 1182:
#line 3882 "third_party/libpg_query/grammar/statements/select.y"
    {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].list)),
											 yyscanner);
					;}
    break;

  case 1183:
#line 3893 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeIntConst((yyvsp[(1) - (1)].ival), (yylsp[(1) - (1)]));
				;}
    break;

  case 1184:
#line 3897 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeFloatConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
				;}
    break;

  case 1185:
#line 3901 "third_party/libpg_query/grammar/statements/select.y"
    {
					if ((yyvsp[(2) - (2)].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[(1) - (2)].str), (yylsp[(1) - (2)]));
						n->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[(1) - (2)].str), (yylsp[(1) - (2)]));
				;}
    break;

  case 1186:
#line 3913 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeBitStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
				;}
    break;

  case 1187:
#line 3917 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
				;}
    break;

  case 1188:
#line 3926 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[(1) - (2)].list));
					t->location = (yylsp[(1) - (2)]);
					(yyval.node) = makeStringConstCast((yyvsp[(2) - (2)].str), (yylsp[(2) - (2)]), t);
				;}
    break;

  case 1189:
#line 3933 "third_party/libpg_query/grammar/statements/select.y"
    {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[(1) - (7)].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[(3) - (7)].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[(4) - (7)].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[(4) - (7)]))));
					if ((yyvsp[(5) - (7)].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[(5) - (7)]))));


					t->typmods = (yyvsp[(3) - (7)].list);
					t->location = (yylsp[(1) - (7)]);
					(yyval.node) = makeStringConstCast((yyvsp[(7) - (7)].str), (yylsp[(7) - (7)]), t);
				;}
    break;

  case 1190:
#line 3971 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeStringConstCast((yyvsp[(2) - (2)].str), (yylsp[(2) - (2)]), (yyvsp[(1) - (2)].typnam));
				;}
    break;

  case 1191:
#line 3975 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeIntervalNode((yyvsp[(3) - (5)].node), (yylsp[(3) - (5)]), (yyvsp[(5) - (5)].list));
				;}
    break;

  case 1192:
#line 3979 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeIntervalNode((yyvsp[(2) - (3)].ival), (yylsp[(2) - (3)]), (yyvsp[(3) - (3)].list));
				;}
    break;

  case 1193:
#line 3983 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeIntervalNode((yyvsp[(2) - (3)].str), (yylsp[(2) - (3)]), (yyvsp[(3) - (3)].list));
				;}
    break;

  case 1194:
#line 3987 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeBoolAConst(true, (yylsp[(1) - (1)]));
				;}
    break;

  case 1195:
#line 3991 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeBoolAConst(false, (yylsp[(1) - (1)]));
				;}
    break;

  case 1196:
#line 3995 "third_party/libpg_query/grammar/statements/select.y"
    {
					(yyval.node) = makeNullAConst((yylsp[(1) - (1)]));
				;}
    break;

  case 1197:
#line 4000 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.ival) = (yyvsp[(1) - (1)].ival); ;}
    break;

  case 1198:
#line 4001 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1199:
#line 4017 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1200:
#line 4018 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1201:
#line 4019 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1202:
#line 4022 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1203:
#line 4023 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1204:
#line 4029 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1205:
#line 4030 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1206:
#line 4031 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1207:
#line 4034 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1208:
#line 4035 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1209:
#line 4036 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1210:
#line 4039 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1211:
#line 4040 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1212:
#line 4041 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1213:
#line 4044 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
    break;

  case 1214:
#line 4045 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lcons(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1215:
#line 4049 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = list_make1(makeString((yyvsp[(2) - (2)].str))); ;}
    break;

  case 1216:
#line 4051 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeString((yyvsp[(3) - (3)].str))); ;}
    break;

  case 1217:
#line 4055 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
    break;

  case 1218:
#line 4056 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.list) = NIL; ;}
    break;

  case 1220:
#line 4067 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1221:
#line 4068 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1222:
#line 4069 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1223:
#line 4070 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1224:
#line 4073 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1225:
#line 4074 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1226:
#line 4077 "third_party/libpg_query/grammar/statements/select.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1227:
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
    {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[(2) - (5)].str);
					n->argtypes = (yyvsp[(3) - (5)].list);
					n->query = (yyvsp[(5) - (5)].node);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1228:
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
    { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
    break;

  case 1229:
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
    { (yyval.list) = NIL; ;}
    break;

  case 1235:
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
    {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[(3) - (4)].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[(3) - (4)]))));
					}
					if ((yyvsp[(3) - (4)].range)->schemaname) {
						n->catalogname = (yyvsp[(3) - (4)].range)->schemaname;
						n->schemaname = (yyvsp[(3) - (4)].range)->relname;
					} else {
						n->schemaname = (yyvsp[(3) - (4)].range)->relname;
					}
					n->schemaElts = (yyvsp[(4) - (4)].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1236:
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
    {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[(6) - (7)].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[(6) - (7)]))));
					}
					if ((yyvsp[(6) - (7)].range)->schemaname) {
						n->catalogname = (yyvsp[(6) - (7)].range)->schemaname;
						n->schemaname = (yyvsp[(6) - (7)].range)->relname;
					} else {
						n->schemaname = (yyvsp[(6) - (7)].range)->relname;
					}
					if ((yyvsp[(7) - (7)].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[(7) - (7)]))));
					n->schemaElts = (yyvsp[(7) - (7)].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1237:
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
    {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[(5) - (6)].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[(5) - (6)]))));
					}
					if ((yyvsp[(5) - (6)].range)->schemaname) {
						n->catalogname = (yyvsp[(5) - (6)].range)->schemaname;
						n->schemaname = (yyvsp[(5) - (6)].range)->relname;
					} else {
						n->schemaname = (yyvsp[(5) - (6)].range)->relname;
					}
					n->schemaElts = (yyvsp[(6) - (6)].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1238:
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
    {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[(2) - (2)]);
					(yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node));
				;}
    break;

  case 1239:
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
    { (yyval.list) = NIL; ;}
    break;

  case 1244:
#line 11 "third_party/libpg_query/grammar/statements/index.y"
    {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[(2) - (13)].boolean);
					n->concurrent = (yyvsp[(4) - (13)].boolean);
					n->idxname = (yyvsp[(5) - (13)].str);
					n->relation = (yyvsp[(7) - (13)].range);
					n->accessMethod = (yyvsp[(8) - (13)].str);
					n->indexParams = (yyvsp[(10) - (13)].list);
					n->options = (yyvsp[(12) - (13)].list);
					n->whereClause = (yyvsp[(13) - (13)].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1245:
#line 36 "third_party/libpg_query/grammar/statements/index.y"
    {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[(2) - (16)].boolean);
					n->concurrent = (yyvsp[(4) - (16)].boolean);
					n->idxname = (yyvsp[(8) - (16)].str);
					n->relation = (yyvsp[(10) - (16)].range);
					n->accessMethod = (yyvsp[(11) - (16)].str);
					n->indexParams = (yyvsp[(13) - (16)].list);
					n->options = (yyvsp[(15) - (16)].list);
					n->whereClause = (yyvsp[(16) - (16)].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1246:
#line 62 "third_party/libpg_query/grammar/statements/index.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1247:
#line 66 "third_party/libpg_query/grammar/statements/index.y"
    { (yyval.str) = (yyvsp[(2) - (2)].str); ;}
    break;

  case 1248:
#line 67 "third_party/libpg_query/grammar/statements/index.y"
    { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; ;}
    break;

  case 1249:
#line 72 "third_party/libpg_query/grammar/statements/index.y"
    { (yyval.boolean) = true; ;}
    break;

  case 1250:
#line 73 "third_party/libpg_query/grammar/statements/index.y"
    { (yyval.boolean) = false; ;}
    break;

  case 1251:
#line 78 "third_party/libpg_query/grammar/statements/index.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1252:
#line 79 "third_party/libpg_query/grammar/statements/index.y"
    { (yyval.str) = NULL; ;}
    break;

  case 1253:
#line 83 "third_party/libpg_query/grammar/statements/index.y"
    { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
    break;

  case 1254:
#line 84 "third_party/libpg_query/grammar/statements/index.y"
    { (yyval.list) = NIL; ;}
    break;

  case 1255:
#line 89 "third_party/libpg_query/grammar/statements/index.y"
    { (yyval.boolean) = true; ;}
    break;

  case 1256:
#line 90 "third_party/libpg_query/grammar/statements/index.y"
    { (yyval.boolean) = false; ;}
    break;

  case 1257:
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[(3) - (6)].range);
					n->newschema = (yyvsp[(6) - (6)].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1258:
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[(5) - (8)].range);
					n->newschema = (yyvsp[(8) - (8)].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1259:
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[(3) - (6)].range);
					n->newschema = (yyvsp[(6) - (6)].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1260:
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[(5) - (8)].range);
					n->newschema = (yyvsp[(8) - (8)].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1261:
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[(3) - (6)].range);
					n->newschema = (yyvsp[(6) - (6)].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1262:
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[(5) - (8)].range);
					n->newschema = (yyvsp[(8) - (8)].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1263:
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
    {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[(3) - (3)].str);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1264:
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
    {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[(2) - (2)].str);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1265:
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1266:
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
    { (yyval.str) = NULL; ;}
    break;

  case 1267:
#line 8 "third_party/libpg_query/grammar/statements/export.y"
    {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[(3) - (4)].str);
					n->options = NIL;
					if ((yyvsp[(4) - (4)].list)) {
						n->options = list_concat(n->options, (yyvsp[(4) - (4)].list));
					}
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1268:
#line 20 "third_party/libpg_query/grammar/statements/export.y"
    {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[(3) - (6)].str);
					n->filename = (yyvsp[(5) - (6)].str);
					n->options = NIL;
					if ((yyvsp[(6) - (6)].list)) {
						n->options = list_concat(n->options, (yyvsp[(6) - (6)].list));
					}
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1269:
#line 34 "third_party/libpg_query/grammar/statements/export.y"
    {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[(3) - (3)].str);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1270:
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
    {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[(2) - (2)].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1271:
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
    {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[(4) - (4)].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[(2) - (4)])));
					if ((yyvsp[(3) - (4)].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[(3) - (4)])));
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1272:
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
    {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[(3) - (3)].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[(2) - (3)])));
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1273:
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
    {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[(5) - (5)].node);
					n->options = (yyvsp[(3) - (5)].list);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1274:
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.boolean) = true; ;}
    break;

  case 1275:
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.boolean) = false; ;}
    break;

  case 1276:
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}
    break;

  case 1277:
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.node) = (PGNode *) (yyvsp[(1) - (1)].value); ;}
    break;

  case 1278:
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.node) = NULL; ;}
    break;

  case 1309:
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1310:
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1311:
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
    break;

  case 1312:
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1313:
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1314:
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
    {
					(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));
				;}
    break;

  case 1315:
#line 108 "third_party/libpg_query/grammar/statements/explain.y"
    {
					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));
				;}
    break;

  case 1316:
#line 115 "third_party/libpg_query/grammar/statements/explain.y"
    {;}
    break;

  case 1317:
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
    {;}
    break;

  case 1318:
#line 121 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.str) = (char*) "true"; ;}
    break;

  case 1319:
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.str) = (char*) "false"; ;}
    break;

  case 1320:
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.str) = (char*) "on"; ;}
    break;

  case 1321:
#line 129 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1322:
#line 135 "third_party/libpg_query/grammar/statements/explain.y"
    {
					(yyval.defelt) = makeDefElem((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)]));
				;}
    break;

  case 1323:
#line 142 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1324:
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
    { (yyval.str) = (char*) "analyze"; ;}
    break;

  case 1325:
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGVariableSetStmt *n = (yyvsp[(2) - (2)].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1326:
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGVariableSetStmt *n = (yyvsp[(3) - (3)].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1327:
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGVariableSetStmt *n = (yyvsp[(3) - (3)].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1328:
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGVariableSetStmt *n = (yyvsp[(3) - (3)].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1329:
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
    {(yyval.vsetstmt) = (yyvsp[(1) - (1)].vsetstmt);;}
    break;

  case 1330:
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[(1) - (3)].str);
					(yyval.vsetstmt) = n;
				;}
    break;

  case 1331:
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[(3) - (3)].node) != NULL)
						n->args = list_make1((yyvsp[(3) - (3)].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				;}
    break;

  case 1332:
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[(2) - (2)].str), (yylsp[(2) - (2)])));
					(yyval.vsetstmt) = n;
				;}
    break;

  case 1333:
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[(1) - (3)].str);
					n->args = (yyvsp[(3) - (3)].list);
					(yyval.vsetstmt) = n;
				;}
    break;

  case 1334:
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[(1) - (3)].str);
					n->args = (yyvsp[(3) - (3)].list);
					(yyval.vsetstmt) = n;
				;}
    break;

  case 1335:
#line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[(1) - (3)].str);
					(yyval.vsetstmt) = n;
				;}
    break;

  case 1336:
#line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[(1) - (3)].str);
					(yyval.vsetstmt) = n;
				;}
    break;

  case 1337:
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
    { (yyval.node) = makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)])); ;}
    break;

  case 1338:
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
    { (yyval.node) = makeAConst((yyvsp[(1) - (1)].value), (yylsp[(1) - (1)])); ;}
    break;

  case 1339:
#line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					(yyval.node) = makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
				;}
    break;

  case 1340:
#line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					(yyval.node) = makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
				;}
    break;

  case 1341:
#line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGTypeName *t = (yyvsp[(1) - (3)].typnam);
					if ((yyvsp[(3) - (3)].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[(3) - (3)].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[(3) - (3)]))));
					}
					t->typmods = (yyvsp[(3) - (3)].list);
					(yyval.node) = makeStringConstCast((yyvsp[(2) - (3)].str), (yylsp[(2) - (3)]), t);
				;}
    break;

  case 1342:
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
    {
					PGTypeName *t = (yyvsp[(1) - (5)].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[(3) - (5)].ival), (yylsp[(3) - (5)])));
					(yyval.node) = makeStringConstCast((yyvsp[(5) - (5)].str), (yylsp[(5) - (5)]), t);
				;}
    break;

  case 1343:
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
    { (yyval.node) = makeAConst((yyvsp[(1) - (1)].value), (yylsp[(1) - (1)])); ;}
    break;

  case 1344:
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
    { (yyval.node) = NULL; ;}
    break;

  case 1345:
#line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
    { (yyval.node) = NULL; ;}
    break;

  case 1346:
#line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
    { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
    break;

  case 1347:
#line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
    break;

  case 1348:
#line 8 "third_party/libpg_query/grammar/statements/load.y"
    {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[(2) - (2)].str);
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1349:
#line 14 "third_party/libpg_query/grammar/statements/load.y"
    {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[(2) - (2)].str);
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				;}
    break;

  case 1350:
#line 20 "third_party/libpg_query/grammar/statements/load.y"
    {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[(3) - (3)].str);
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                ;}
    break;

  case 1351:
#line 28 "third_party/libpg_query/grammar/statements/load.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1352:
#line 29 "third_party/libpg_query/grammar/statements/load.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1353:
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[(2) - (4)].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[(3) - (4)].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[(4) - (4)].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1354:
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[(2) - (6)].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[(3) - (6)].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[(4) - (6)].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[(5) - (6)].range);
					n->va_cols = (yyvsp[(6) - (6)].list);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1355:
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
    {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[(5) - (5)].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[(2) - (5)].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[(3) - (5)].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[(4) - (5)].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1356:
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[(3) - (4)].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1357:
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[(3) - (6)].ival);
					n->relation = (yyvsp[(5) - (6)].range);
					n->va_cols = (yyvsp[(6) - (6)].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1358:
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
    { (yyval.ival) = PG_VACOPT_ANALYZE; ;}
    break;

  case 1359:
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
    { (yyval.ival) = PG_VACOPT_VERBOSE; ;}
    break;

  case 1360:
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
    { (yyval.ival) = PG_VACOPT_FREEZE; ;}
    break;

  case 1361:
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
    { (yyval.ival) = PG_VACOPT_FULL; ;}
    break;

  case 1362:
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
    {
					if (strcmp((yyvsp[(1) - (1)].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[(1) - (1)].str)),
									 parser_errposition((yylsp[(1) - (1)]))));
				;}
    break;

  case 1363:
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
    { (yyval.boolean) = true; ;}
    break;

  case 1364:
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
    { (yyval.boolean) = false; ;}
    break;

  case 1365:
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
    { (yyval.ival) = (yyvsp[(1) - (1)].ival); ;}
    break;

  case 1366:
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
    { (yyval.ival) = (yyvsp[(1) - (3)].ival) | (yyvsp[(3) - (3)].ival); ;}
    break;

  case 1367:
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
    { (yyval.boolean) = true; ;}
    break;

  case 1368:
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
    { (yyval.boolean) = false; ;}
    break;

  case 1369:
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
    {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[(4) - (7)].range);
					n->usingClause = (yyvsp[(5) - (7)].list);
					n->whereClause = (yyvsp[(6) - (7)].node);
					n->returningList = (yyvsp[(7) - (7)].list);
					n->withClause = (yyvsp[(1) - (7)].with);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1370:
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
    {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[(3) - (3)].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    ;}
    break;

  case 1371:
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
    {
					(yyval.range) = (yyvsp[(1) - (1)].range);
				;}
    break;

  case 1372:
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
    {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[(2) - (2)].str);
					(yyvsp[(1) - (2)].range)->alias = alias;
					(yyval.range) = (yyvsp[(1) - (2)].range);
				;}
    break;

  case 1373:
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
    {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[(3) - (3)].str);
					(yyvsp[(1) - (3)].range)->alias = alias;
					(yyval.range) = (yyvsp[(1) - (3)].range);
				;}
    break;

  case 1374:
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
    break;

  case 1375:
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
    { (yyval.node) = NULL; ;}
    break;

  case 1376:
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
    { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
    break;

  case 1377:
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
    { (yyval.list) = NIL; ;}
    break;

  case 1378:
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[(2) - (2)].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1379:
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[(2) - (4)].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[(3) - (4)].range);
					n->va_cols = (yyvsp[(4) - (4)].list);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1380:
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
    {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[(3) - (5)].str);
					n->name = (yyvsp[(4) - (5)].str);
					n->options = (yyvsp[(5) - (5)].list);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1381:
#line 19 "third_party/libpg_query/grammar/statements/attach.y"
    {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[(3) - (3)].str);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1382:
#line 26 "third_party/libpg_query/grammar/statements/attach.y"
    {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[(5) - (5)].str);
					(yyval.node) = (PGNode *)n;
				;}
    break;

  case 1383:
#line 34 "third_party/libpg_query/grammar/statements/attach.y"
    {;}
    break;

  case 1384:
#line 35 "third_party/libpg_query/grammar/statements/attach.y"
    {;}
    break;

  case 1385:
#line 39 "third_party/libpg_query/grammar/statements/attach.y"
    { (yyval.str) = (yyvsp[(2) - (2)].str); ;}
    break;

  case 1386:
#line 40 "third_party/libpg_query/grammar/statements/attach.y"
    { (yyval.str) = NULL; ;}
    break;

  case 1387:
#line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
    { (yyval.node) = (PGNode *) (yyvsp[(2) - (2)].vsetstmt); ;}
    break;

  case 1388:
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->scope = VAR_SET_SCOPE_GLOBAL;
					n->name = (yyvsp[(1) - (1)].str);
					(yyval.vsetstmt) = n;
				;}
    break;

  case 1389:
#line 16 "third_party/libpg_query/grammar/statements/variable_reset.y"
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.vsetstmt) = n;
				;}
    break;

  case 1390:
#line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
    { (yyval.vsetstmt) = (yyvsp[(1) - (1)].vsetstmt); ;}
    break;

  case 1391:
#line 28 "third_party/libpg_query/grammar/statements/variable_reset.y"
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				;}
    break;

  case 1392:
#line 35 "third_party/libpg_query/grammar/statements/variable_reset.y"
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				;}
    break;

  case 1393:
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[(2) - (2)].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 1394:
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[(2) - (2)].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 1395:
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
    {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[(2) - (2)].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 1396:
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
    {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[(2) - (2)].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 1397:
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
    {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 1398:
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
    {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 1399:
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
    {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 1400:
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
    {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			;}
    break;

  case 1405:
#line 65 "third_party/libpg_query/grammar/statements/variable_show.y"
    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
    break;

  case 1406:
#line 67 "third_party/libpg_query/grammar/statements/variable_show.y"
    { (yyval.str) = psprintf("%s.%s", (yyvsp[(1) - (3)].str), (yyvsp[(3) - (3)].str)); ;}
    break;

  case 1407:
#line 70 "third_party/libpg_query/grammar/statements/variable_show.y"
    { (yyval.str) = psprintf("\"%s\"", (yyvsp[(1) - (1)].str)); ;}
    break;

  case 1408:
#line 72 "third_party/libpg_query/grammar/statements/variable_show.y"
    { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[(1) - (3)].str), (yyvsp[(3) - (3)].str)); ;}
    break;

  case 1409:
#line 7 "third_party/libpg_query/grammar/statements/call.y"
    {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[(2) - (2)].node);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1410:
#line 10 "third_party/libpg_query/grammar/statements/view.y"
    {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[(4) - (9)].range);
					n->view->relpersistence = (yyvsp[(2) - (9)].ival);
					n->aliases = (yyvsp[(5) - (9)].list);
					n->query = (yyvsp[(8) - (9)].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[(6) - (9)].list);
					n->withCheckOption = (yyvsp[(9) - (9)].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1411:
#line 23 "third_party/libpg_query/grammar/statements/view.y"
    {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[(7) - (12)].range);
					n->view->relpersistence = (yyvsp[(2) - (12)].ival);
					n->aliases = (yyvsp[(8) - (12)].list);
					n->query = (yyvsp[(11) - (12)].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[(9) - (12)].list);
					n->withCheckOption = (yyvsp[(12) - (12)].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1412:
#line 36 "third_party/libpg_query/grammar/statements/view.y"
    {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[(6) - (11)].range);
					n->view->relpersistence = (yyvsp[(4) - (11)].ival);
					n->aliases = (yyvsp[(7) - (11)].list);
					n->query = (yyvsp[(10) - (11)].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[(8) - (11)].list);
					n->withCheckOption = (yyvsp[(11) - (11)].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1413:
#line 49 "third_party/libpg_query/grammar/statements/view.y"
    {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[(5) - (12)].range);
					n->view->relpersistence = (yyvsp[(2) - (12)].ival);
					n->aliases = (yyvsp[(7) - (12)].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[(11) - (12)].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[(9) - (12)].list);
					n->withCheckOption = (yyvsp[(12) - (12)].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[(12) - (12)]))));
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1414:
#line 67 "third_party/libpg_query/grammar/statements/view.y"
    {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[(7) - (14)].range);
					n->view->relpersistence = (yyvsp[(4) - (14)].ival);
					n->aliases = (yyvsp[(9) - (14)].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[(13) - (14)].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[(11) - (14)].list);
					n->withCheckOption = (yyvsp[(14) - (14)].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[(14) - (14)]))));
					(yyval.node) = (PGNode *) n;
				;}
    break;

  case 1415:
#line 87 "third_party/libpg_query/grammar/statements/view.y"
    { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; ;}
    break;

  case 1416:
#line 88 "third_party/libpg_query/grammar/statements/view.y"
    { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; ;}
    break;

  case 1417:
#line 89 "third_party/libpg_query/grammar/statements/view.y"
    { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; ;}
    break;

  case 1418:
#line 90 "third_party/libpg_query/grammar/statements/view.y"
    { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; ;}
    break;

  case 1419:
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
    {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[(6) - (7)].node);
					ctas->into = (yyvsp[(4) - (7)].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[(4) - (7)].into)->rel->relpersistence = (yyvsp[(2) - (7)].ival);
					(yyvsp[(4) - (7)].into)->skipData = !((yyvsp[(7) - (7)].boolean));
					(yyval.node) = (PGNode *) ctas;
				;}
    break;

  case 1420:
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
    {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[(9) - (10)].node);
					ctas->into = (yyvsp[(7) - (10)].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[(7) - (10)].into)->rel->relpersistence = (yyvsp[(2) - (10)].ival);
					(yyvsp[(7) - (10)].into)->skipData = !((yyvsp[(10) - (10)].boolean));
					(yyval.node) = (PGNode *) ctas;
				;}
    break;

  case 1421:
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
    {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[(8) - (9)].node);
					ctas->into = (yyvsp[(6) - (9)].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[(6) - (9)].into)->rel->relpersistence = (yyvsp[(4) - (9)].ival);
					(yyvsp[(6) - (9)].into)->skipData = !((yyvsp[(9) - (9)].boolean));
					(yyval.node) = (PGNode *) ctas;
				;}
    break;

  case 1422:
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
    { (yyval.boolean) = true; ;}
    break;

  case 1423:
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
    { (yyval.boolean) = false; ;}
    break;

  case 1424:
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
    { (yyval.boolean) = true; ;}
    break;

  case 1425:
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
    {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[(1) - (4)].range);
					(yyval.into)->colNames = (yyvsp[(2) - (4)].list);
					(yyval.into)->options = (yyvsp[(3) - (4)].list);
					(yyval.into)->onCommit = (yyvsp[(4) - (4)].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				;}
    break;


/* Line 1267 of yacc.c.  */
#line 29046 "third_party/libpg_query/grammar/grammar_out.cpp"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (&yylloc, yyscanner, yymsg);
	  }
	else
	  {
	    yyerror (&yylloc, yyscanner, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }

  yyerror_range[0] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc, yyscanner);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[0] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[0] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;

  yyerror_range[1] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the look-ahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, (yyerror_range - 1), 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, &yylloc, yyscanner);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


#line 83 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery



// LICENSE_CHANGE_END


// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #14
// See the end of this file for a list

/*--------------------------------------------------------------------
 * Symbols referenced in this file:
 * - raw_parser
 * - base_yylex
 * - raw_parser
 *--------------------------------------------------------------------
 */

/*-------------------------------------------------------------------------
 *
 * parser.c
 *		Main entry point/driver for PostgreSQL grammar
 *
 * Note that the grammar is not allowed to perform any table access
 * (since we need to be able to do basic parsing even while inside an
 * aborted transaction).  Therefore, the data structures returned by
 * the grammar are "raw" parsetrees that still need to be analyzed by
 * analyze.c and related files.
 *
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/parser/parser.c
 *
 *-------------------------------------------------------------------------
 */







// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #14
// See the end of this file for a list


namespace duckdb_libpgquery {
#define PG_KEYWORD(a,b,c) {a,b,c},

const PGScanKeyword ScanKeywords[] = {
PG_KEYWORD("abort", ABORT_P, UNRESERVED_KEYWORD)
PG_KEYWORD("absolute", ABSOLUTE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("access", ACCESS, UNRESERVED_KEYWORD)
PG_KEYWORD("action", ACTION, UNRESERVED_KEYWORD)
PG_KEYWORD("add", ADD_P, UNRESERVED_KEYWORD)
PG_KEYWORD("admin", ADMIN, UNRESERVED_KEYWORD)
PG_KEYWORD("after", AFTER, UNRESERVED_KEYWORD)
PG_KEYWORD("aggregate", AGGREGATE, UNRESERVED_KEYWORD)
PG_KEYWORD("all", ALL, RESERVED_KEYWORD)
PG_KEYWORD("also", ALSO, UNRESERVED_KEYWORD)
PG_KEYWORD("alter", ALTER, UNRESERVED_KEYWORD)
PG_KEYWORD("always", ALWAYS, UNRESERVED_KEYWORD)
PG_KEYWORD("analyse", ANALYSE, RESERVED_KEYWORD)
PG_KEYWORD("analyze", ANALYZE, RESERVED_KEYWORD)
PG_KEYWORD("and", AND, RESERVED_KEYWORD)
PG_KEYWORD("anti", ANTI, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("any", ANY, RESERVED_KEYWORD)
PG_KEYWORD("array", ARRAY, RESERVED_KEYWORD)
PG_KEYWORD("as", AS, RESERVED_KEYWORD)
PG_KEYWORD("asc", ASC_P, RESERVED_KEYWORD)
PG_KEYWORD("asof", ASOF, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("assertion", ASSERTION, UNRESERVED_KEYWORD)
PG_KEYWORD("assignment", ASSIGNMENT, UNRESERVED_KEYWORD)
PG_KEYWORD("asymmetric", ASYMMETRIC, RESERVED_KEYWORD)
PG_KEYWORD("at", AT, UNRESERVED_KEYWORD)
PG_KEYWORD("attach", ATTACH, UNRESERVED_KEYWORD)
PG_KEYWORD("attribute", ATTRIBUTE, UNRESERVED_KEYWORD)
PG_KEYWORD("authorization", AUTHORIZATION, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("backward", BACKWARD, UNRESERVED_KEYWORD)
PG_KEYWORD("before", BEFORE, UNRESERVED_KEYWORD)
PG_KEYWORD("begin", BEGIN_P, UNRESERVED_KEYWORD)
PG_KEYWORD("between", BETWEEN, COL_NAME_KEYWORD)
PG_KEYWORD("bigint", BIGINT, COL_NAME_KEYWORD)
PG_KEYWORD("binary", BINARY, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("bit", BIT, COL_NAME_KEYWORD)
PG_KEYWORD("boolean", BOOLEAN_P, COL_NAME_KEYWORD)
PG_KEYWORD("both", BOTH, RESERVED_KEYWORD)
PG_KEYWORD("by", BY, UNRESERVED_KEYWORD)
PG_KEYWORD("cache", CACHE, UNRESERVED_KEYWORD)
PG_KEYWORD("call", CALL_P, UNRESERVED_KEYWORD)
PG_KEYWORD("called", CALLED, UNRESERVED_KEYWORD)
PG_KEYWORD("cascade", CASCADE, UNRESERVED_KEYWORD)
PG_KEYWORD("cascaded", CASCADED, UNRESERVED_KEYWORD)
PG_KEYWORD("case", CASE, RESERVED_KEYWORD)
PG_KEYWORD("cast", CAST, RESERVED_KEYWORD)
PG_KEYWORD("catalog", CATALOG_P, UNRESERVED_KEYWORD)
PG_KEYWORD("chain", CHAIN, UNRESERVED_KEYWORD)
PG_KEYWORD("char", CHAR_P, COL_NAME_KEYWORD)
PG_KEYWORD("character", CHARACTER, COL_NAME_KEYWORD)
PG_KEYWORD("characteristics", CHARACTERISTICS, UNRESERVED_KEYWORD)
PG_KEYWORD("check", CHECK_P, RESERVED_KEYWORD)
PG_KEYWORD("checkpoint", CHECKPOINT, UNRESERVED_KEYWORD)
PG_KEYWORD("class", CLASS, UNRESERVED_KEYWORD)
PG_KEYWORD("close", CLOSE, UNRESERVED_KEYWORD)
PG_KEYWORD("cluster", CLUSTER, UNRESERVED_KEYWORD)
PG_KEYWORD("coalesce", COALESCE, COL_NAME_KEYWORD)
PG_KEYWORD("collate", COLLATE, RESERVED_KEYWORD)
PG_KEYWORD("collation", COLLATION, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("column", COLUMN, RESERVED_KEYWORD)
PG_KEYWORD("columns", COLUMNS, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("comment", COMMENT, UNRESERVED_KEYWORD)
PG_KEYWORD("comments", COMMENTS, UNRESERVED_KEYWORD)
PG_KEYWORD("commit", COMMIT, UNRESERVED_KEYWORD)
PG_KEYWORD("committed", COMMITTED, UNRESERVED_KEYWORD)
PG_KEYWORD("compression", COMPRESSION, UNRESERVED_KEYWORD)
PG_KEYWORD("concurrently", CONCURRENTLY, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("configuration", CONFIGURATION, UNRESERVED_KEYWORD)
PG_KEYWORD("conflict", CONFLICT, UNRESERVED_KEYWORD)
PG_KEYWORD("connection", CONNECTION, UNRESERVED_KEYWORD)
PG_KEYWORD("constraint", CONSTRAINT, RESERVED_KEYWORD)
PG_KEYWORD("constraints", CONSTRAINTS, UNRESERVED_KEYWORD)
PG_KEYWORD("content", CONTENT_P, UNRESERVED_KEYWORD)
PG_KEYWORD("continue", CONTINUE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("conversion", CONVERSION_P, UNRESERVED_KEYWORD)
PG_KEYWORD("copy", COPY, UNRESERVED_KEYWORD)
PG_KEYWORD("cost", COST, UNRESERVED_KEYWORD)
PG_KEYWORD("create", CREATE_P, RESERVED_KEYWORD)
PG_KEYWORD("cross", CROSS, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("csv", CSV, UNRESERVED_KEYWORD)
PG_KEYWORD("cube", CUBE, UNRESERVED_KEYWORD)
PG_KEYWORD("current", CURRENT_P, UNRESERVED_KEYWORD)
PG_KEYWORD("cursor", CURSOR, UNRESERVED_KEYWORD)
PG_KEYWORD("cycle", CYCLE, UNRESERVED_KEYWORD)
PG_KEYWORD("data", DATA_P, UNRESERVED_KEYWORD)
PG_KEYWORD("database", DATABASE, UNRESERVED_KEYWORD)
PG_KEYWORD("day", DAY_P, UNRESERVED_KEYWORD)
PG_KEYWORD("days", DAYS_P, UNRESERVED_KEYWORD)
PG_KEYWORD("deallocate", DEALLOCATE, UNRESERVED_KEYWORD)
PG_KEYWORD("dec", DEC, COL_NAME_KEYWORD)
PG_KEYWORD("decimal", DECIMAL_P, COL_NAME_KEYWORD)
PG_KEYWORD("declare", DECLARE, UNRESERVED_KEYWORD)
PG_KEYWORD("default", DEFAULT, RESERVED_KEYWORD)
PG_KEYWORD("defaults", DEFAULTS, UNRESERVED_KEYWORD)
PG_KEYWORD("deferrable", DEFERRABLE, RESERVED_KEYWORD)
PG_KEYWORD("deferred", DEFERRED, UNRESERVED_KEYWORD)
PG_KEYWORD("definer", DEFINER, UNRESERVED_KEYWORD)
PG_KEYWORD("delete", DELETE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("delimiter", DELIMITER, UNRESERVED_KEYWORD)
PG_KEYWORD("delimiters", DELIMITERS, UNRESERVED_KEYWORD)
PG_KEYWORD("depends", DEPENDS, UNRESERVED_KEYWORD)
PG_KEYWORD("desc", DESC_P, RESERVED_KEYWORD)
PG_KEYWORD("describe", DESCRIBE, UNRESERVED_KEYWORD)
PG_KEYWORD("detach", DETACH, UNRESERVED_KEYWORD)
PG_KEYWORD("dictionary", DICTIONARY, UNRESERVED_KEYWORD)
PG_KEYWORD("disable", DISABLE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("discard", DISCARD, UNRESERVED_KEYWORD)
PG_KEYWORD("distinct", DISTINCT, RESERVED_KEYWORD)
PG_KEYWORD("do", DO, RESERVED_KEYWORD)
PG_KEYWORD("document", DOCUMENT_P, UNRESERVED_KEYWORD)
PG_KEYWORD("domain", DOMAIN_P, UNRESERVED_KEYWORD)
PG_KEYWORD("double", DOUBLE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("drop", DROP, UNRESERVED_KEYWORD)
PG_KEYWORD("each", EACH, UNRESERVED_KEYWORD)
PG_KEYWORD("else", ELSE, RESERVED_KEYWORD)
PG_KEYWORD("enable", ENABLE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("encoding", ENCODING, UNRESERVED_KEYWORD)
PG_KEYWORD("encrypted", ENCRYPTED, UNRESERVED_KEYWORD)
PG_KEYWORD("end", END_P, RESERVED_KEYWORD)
PG_KEYWORD("enum", ENUM_P, UNRESERVED_KEYWORD)
PG_KEYWORD("escape", ESCAPE, UNRESERVED_KEYWORD)
PG_KEYWORD("event", EVENT, UNRESERVED_KEYWORD)
PG_KEYWORD("except", EXCEPT, RESERVED_KEYWORD)
PG_KEYWORD("exclude", EXCLUDE, UNRESERVED_KEYWORD)
PG_KEYWORD("excluding", EXCLUDING, UNRESERVED_KEYWORD)
PG_KEYWORD("exclusive", EXCLUSIVE, UNRESERVED_KEYWORD)
PG_KEYWORD("execute", EXECUTE, UNRESERVED_KEYWORD)
PG_KEYWORD("exists", EXISTS, COL_NAME_KEYWORD)
PG_KEYWORD("explain", EXPLAIN, UNRESERVED_KEYWORD)
PG_KEYWORD("export", EXPORT_P, UNRESERVED_KEYWORD)
PG_KEYWORD("export_state", EXPORT_STATE, UNRESERVED_KEYWORD)
PG_KEYWORD("extension", EXTENSION, UNRESERVED_KEYWORD)
PG_KEYWORD("external", EXTERNAL, UNRESERVED_KEYWORD)
PG_KEYWORD("extract", EXTRACT, COL_NAME_KEYWORD)
PG_KEYWORD("false", FALSE_P, RESERVED_KEYWORD)
PG_KEYWORD("family", FAMILY, UNRESERVED_KEYWORD)
PG_KEYWORD("fetch", FETCH, RESERVED_KEYWORD)
PG_KEYWORD("filter", FILTER, UNRESERVED_KEYWORD)
PG_KEYWORD("first", FIRST_P, UNRESERVED_KEYWORD)
PG_KEYWORD("float", FLOAT_P, COL_NAME_KEYWORD)
PG_KEYWORD("following", FOLLOWING, UNRESERVED_KEYWORD)
PG_KEYWORD("for", FOR, RESERVED_KEYWORD)
PG_KEYWORD("force", FORCE, UNRESERVED_KEYWORD)
PG_KEYWORD("foreign", FOREIGN, RESERVED_KEYWORD)
PG_KEYWORD("forward", FORWARD, UNRESERVED_KEYWORD)
PG_KEYWORD("freeze", FREEZE, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("from", FROM, RESERVED_KEYWORD)
PG_KEYWORD("full", FULL, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("function", FUNCTION, UNRESERVED_KEYWORD)
PG_KEYWORD("functions", FUNCTIONS, UNRESERVED_KEYWORD)
PG_KEYWORD("generated", GENERATED, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("glob", GLOB, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("global", GLOBAL, UNRESERVED_KEYWORD)
PG_KEYWORD("grant", GRANT, RESERVED_KEYWORD)
PG_KEYWORD("granted", GRANTED, UNRESERVED_KEYWORD)
PG_KEYWORD("group", GROUP_P, RESERVED_KEYWORD)
PG_KEYWORD("grouping", GROUPING, COL_NAME_KEYWORD)
PG_KEYWORD("grouping_id", GROUPING_ID, COL_NAME_KEYWORD)
PG_KEYWORD("handler", HANDLER, UNRESERVED_KEYWORD)
PG_KEYWORD("having", HAVING, RESERVED_KEYWORD)
PG_KEYWORD("header", HEADER_P, UNRESERVED_KEYWORD)
PG_KEYWORD("hold", HOLD, UNRESERVED_KEYWORD)
PG_KEYWORD("hour", HOUR_P, UNRESERVED_KEYWORD)
PG_KEYWORD("hours", HOURS_P, UNRESERVED_KEYWORD)
PG_KEYWORD("identity", IDENTITY_P, UNRESERVED_KEYWORD)
PG_KEYWORD("if", IF_P, UNRESERVED_KEYWORD)
PG_KEYWORD("ignore", IGNORE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("ilike", ILIKE, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("immediate", IMMEDIATE, UNRESERVED_KEYWORD)
PG_KEYWORD("immutable", IMMUTABLE, UNRESERVED_KEYWORD)
PG_KEYWORD("implicit", IMPLICIT_P, UNRESERVED_KEYWORD)
PG_KEYWORD("import", IMPORT_P, UNRESERVED_KEYWORD)
PG_KEYWORD("in", IN_P, RESERVED_KEYWORD)
PG_KEYWORD("include", INCLUDE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("including", INCLUDING, UNRESERVED_KEYWORD)
PG_KEYWORD("increment", INCREMENT, UNRESERVED_KEYWORD)
PG_KEYWORD("index", INDEX, UNRESERVED_KEYWORD)
PG_KEYWORD("indexes", INDEXES, UNRESERVED_KEYWORD)
PG_KEYWORD("inherit", INHERIT, UNRESERVED_KEYWORD)
PG_KEYWORD("inherits", INHERITS, UNRESERVED_KEYWORD)
PG_KEYWORD("initially", INITIALLY, RESERVED_KEYWORD)
PG_KEYWORD("inline", INLINE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("inner", INNER_P, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("inout", INOUT, COL_NAME_KEYWORD)
PG_KEYWORD("input", INPUT_P, UNRESERVED_KEYWORD)
PG_KEYWORD("insensitive", INSENSITIVE, UNRESERVED_KEYWORD)
PG_KEYWORD("insert", INSERT, UNRESERVED_KEYWORD)
PG_KEYWORD("install", INSTALL, UNRESERVED_KEYWORD)
PG_KEYWORD("instead", INSTEAD, UNRESERVED_KEYWORD)
PG_KEYWORD("int", INT_P, COL_NAME_KEYWORD)
PG_KEYWORD("integer", INTEGER, COL_NAME_KEYWORD)
PG_KEYWORD("intersect", INTERSECT, RESERVED_KEYWORD)
PG_KEYWORD("interval", INTERVAL, COL_NAME_KEYWORD)
PG_KEYWORD("into", INTO, RESERVED_KEYWORD)
PG_KEYWORD("invoker", INVOKER, UNRESERVED_KEYWORD)
PG_KEYWORD("is", IS, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("isnull", ISNULL, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("isolation", ISOLATION, UNRESERVED_KEYWORD)
PG_KEYWORD("join", JOIN, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("json", JSON, UNRESERVED_KEYWORD)
PG_KEYWORD("key", KEY, UNRESERVED_KEYWORD)
PG_KEYWORD("label", LABEL, UNRESERVED_KEYWORD)
PG_KEYWORD("language", LANGUAGE, UNRESERVED_KEYWORD)
PG_KEYWORD("large", LARGE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("last", LAST_P, UNRESERVED_KEYWORD)
PG_KEYWORD("lateral", LATERAL_P, RESERVED_KEYWORD)
PG_KEYWORD("leading", LEADING, RESERVED_KEYWORD)
PG_KEYWORD("leakproof", LEAKPROOF, UNRESERVED_KEYWORD)
PG_KEYWORD("left", LEFT, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("level", LEVEL, UNRESERVED_KEYWORD)
PG_KEYWORD("like", LIKE, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("limit", LIMIT, RESERVED_KEYWORD)
PG_KEYWORD("listen", LISTEN, UNRESERVED_KEYWORD)
PG_KEYWORD("load", LOAD, UNRESERVED_KEYWORD)
PG_KEYWORD("local", LOCAL, UNRESERVED_KEYWORD)
PG_KEYWORD("location", LOCATION, UNRESERVED_KEYWORD)
PG_KEYWORD("lock", LOCK_P, UNRESERVED_KEYWORD)
PG_KEYWORD("locked", LOCKED, UNRESERVED_KEYWORD)
PG_KEYWORD("logged", LOGGED, UNRESERVED_KEYWORD)
PG_KEYWORD("macro", MACRO, UNRESERVED_KEYWORD)
PG_KEYWORD("map", MAP, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("mapping", MAPPING, UNRESERVED_KEYWORD)
PG_KEYWORD("match", MATCH, UNRESERVED_KEYWORD)
PG_KEYWORD("materialized", MATERIALIZED, UNRESERVED_KEYWORD)
PG_KEYWORD("maxvalue", MAXVALUE, UNRESERVED_KEYWORD)
PG_KEYWORD("method", METHOD, UNRESERVED_KEYWORD)
PG_KEYWORD("microsecond", MICROSECOND_P, UNRESERVED_KEYWORD)
PG_KEYWORD("microseconds", MICROSECONDS_P, UNRESERVED_KEYWORD)
PG_KEYWORD("millisecond", MILLISECOND_P, UNRESERVED_KEYWORD)
PG_KEYWORD("milliseconds", MILLISECONDS_P, UNRESERVED_KEYWORD)
PG_KEYWORD("minute", MINUTE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("minutes", MINUTES_P, UNRESERVED_KEYWORD)
PG_KEYWORD("minvalue", MINVALUE, UNRESERVED_KEYWORD)
PG_KEYWORD("mode", MODE, UNRESERVED_KEYWORD)
PG_KEYWORD("month", MONTH_P, UNRESERVED_KEYWORD)
PG_KEYWORD("months", MONTHS_P, UNRESERVED_KEYWORD)
PG_KEYWORD("move", MOVE, UNRESERVED_KEYWORD)
PG_KEYWORD("name", NAME_P, UNRESERVED_KEYWORD)
PG_KEYWORD("names", NAMES, UNRESERVED_KEYWORD)
PG_KEYWORD("national", NATIONAL, COL_NAME_KEYWORD)
PG_KEYWORD("natural", NATURAL, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("nchar", NCHAR, COL_NAME_KEYWORD)
PG_KEYWORD("new", NEW, UNRESERVED_KEYWORD)
PG_KEYWORD("next", NEXT, UNRESERVED_KEYWORD)
PG_KEYWORD("no", NO, UNRESERVED_KEYWORD)
PG_KEYWORD("none", NONE, COL_NAME_KEYWORD)
PG_KEYWORD("not", NOT, RESERVED_KEYWORD)
PG_KEYWORD("nothing", NOTHING, UNRESERVED_KEYWORD)
PG_KEYWORD("notify", NOTIFY, UNRESERVED_KEYWORD)
PG_KEYWORD("notnull", NOTNULL, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("nowait", NOWAIT, UNRESERVED_KEYWORD)
PG_KEYWORD("null", NULL_P, RESERVED_KEYWORD)
PG_KEYWORD("nullif", NULLIF, COL_NAME_KEYWORD)
PG_KEYWORD("nulls", NULLS_P, UNRESERVED_KEYWORD)
PG_KEYWORD("numeric", NUMERIC, COL_NAME_KEYWORD)
PG_KEYWORD("object", OBJECT_P, UNRESERVED_KEYWORD)
PG_KEYWORD("of", OF, UNRESERVED_KEYWORD)
PG_KEYWORD("off", OFF, UNRESERVED_KEYWORD)
PG_KEYWORD("offset", OFFSET, RESERVED_KEYWORD)
PG_KEYWORD("oids", OIDS, UNRESERVED_KEYWORD)
PG_KEYWORD("old", OLD, UNRESERVED_KEYWORD)
PG_KEYWORD("on", ON, RESERVED_KEYWORD)
PG_KEYWORD("only", ONLY, RESERVED_KEYWORD)
PG_KEYWORD("operator", OPERATOR, UNRESERVED_KEYWORD)
PG_KEYWORD("option", OPTION, UNRESERVED_KEYWORD)
PG_KEYWORD("options", OPTIONS, UNRESERVED_KEYWORD)
PG_KEYWORD("or", OR, RESERVED_KEYWORD)
PG_KEYWORD("order", ORDER, RESERVED_KEYWORD)
PG_KEYWORD("ordinality", ORDINALITY, UNRESERVED_KEYWORD)
PG_KEYWORD("out", OUT_P, COL_NAME_KEYWORD)
PG_KEYWORD("outer", OUTER_P, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("over", OVER, UNRESERVED_KEYWORD)
PG_KEYWORD("overlaps", OVERLAPS, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("overlay", OVERLAY, COL_NAME_KEYWORD)
PG_KEYWORD("overriding", OVERRIDING, UNRESERVED_KEYWORD)
PG_KEYWORD("owned", OWNED, UNRESERVED_KEYWORD)
PG_KEYWORD("owner", OWNER, UNRESERVED_KEYWORD)
PG_KEYWORD("parallel", PARALLEL, UNRESERVED_KEYWORD)
PG_KEYWORD("parser", PARSER, UNRESERVED_KEYWORD)
PG_KEYWORD("partial", PARTIAL, UNRESERVED_KEYWORD)
PG_KEYWORD("partition", PARTITION, UNRESERVED_KEYWORD)
PG_KEYWORD("passing", PASSING, UNRESERVED_KEYWORD)
PG_KEYWORD("password", PASSWORD, UNRESERVED_KEYWORD)
PG_KEYWORD("percent", PERCENT, UNRESERVED_KEYWORD)
PG_KEYWORD("pivot", PIVOT, RESERVED_KEYWORD)
PG_KEYWORD("pivot_longer", PIVOT_LONGER, RESERVED_KEYWORD)
PG_KEYWORD("pivot_wider", PIVOT_WIDER, RESERVED_KEYWORD)
PG_KEYWORD("placing", PLACING, RESERVED_KEYWORD)
PG_KEYWORD("plans", PLANS, UNRESERVED_KEYWORD)
PG_KEYWORD("policy", POLICY, UNRESERVED_KEYWORD)
PG_KEYWORD("position", POSITION, COL_NAME_KEYWORD)
PG_KEYWORD("positional", POSITIONAL, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("pragma", PRAGMA_P, UNRESERVED_KEYWORD)
PG_KEYWORD("preceding", PRECEDING, UNRESERVED_KEYWORD)
PG_KEYWORD("precision", PRECISION, COL_NAME_KEYWORD)
PG_KEYWORD("prepare", PREPARE, UNRESERVED_KEYWORD)
PG_KEYWORD("prepared", PREPARED, UNRESERVED_KEYWORD)
PG_KEYWORD("preserve", PRESERVE, UNRESERVED_KEYWORD)
PG_KEYWORD("primary", PRIMARY, RESERVED_KEYWORD)
PG_KEYWORD("prior", PRIOR, UNRESERVED_KEYWORD)
PG_KEYWORD("privileges", PRIVILEGES, UNRESERVED_KEYWORD)
PG_KEYWORD("procedural", PROCEDURAL, UNRESERVED_KEYWORD)
PG_KEYWORD("procedure", PROCEDURE, UNRESERVED_KEYWORD)
PG_KEYWORD("program", PROGRAM, UNRESERVED_KEYWORD)
PG_KEYWORD("publication", PUBLICATION, UNRESERVED_KEYWORD)
PG_KEYWORD("qualify", QUALIFY, RESERVED_KEYWORD)
PG_KEYWORD("quote", QUOTE, UNRESERVED_KEYWORD)
PG_KEYWORD("range", RANGE, UNRESERVED_KEYWORD)
PG_KEYWORD("read", READ_P, UNRESERVED_KEYWORD)
PG_KEYWORD("real", REAL, COL_NAME_KEYWORD)
PG_KEYWORD("reassign", REASSIGN, UNRESERVED_KEYWORD)
PG_KEYWORD("recheck", RECHECK, UNRESERVED_KEYWORD)
PG_KEYWORD("recursive", RECURSIVE, UNRESERVED_KEYWORD)
PG_KEYWORD("ref", REF, UNRESERVED_KEYWORD)
PG_KEYWORD("references", REFERENCES, RESERVED_KEYWORD)
PG_KEYWORD("referencing", REFERENCING, UNRESERVED_KEYWORD)
PG_KEYWORD("refresh", REFRESH, UNRESERVED_KEYWORD)
PG_KEYWORD("reindex", REINDEX, UNRESERVED_KEYWORD)
PG_KEYWORD("relative", RELATIVE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("release", RELEASE, UNRESERVED_KEYWORD)
PG_KEYWORD("rename", RENAME, UNRESERVED_KEYWORD)
PG_KEYWORD("repeatable", REPEATABLE, UNRESERVED_KEYWORD)
PG_KEYWORD("replace", REPLACE, UNRESERVED_KEYWORD)
PG_KEYWORD("replica", REPLICA, UNRESERVED_KEYWORD)
PG_KEYWORD("reset", RESET, UNRESERVED_KEYWORD)
PG_KEYWORD("respect", RESPECT_P, UNRESERVED_KEYWORD)
PG_KEYWORD("restart", RESTART, UNRESERVED_KEYWORD)
PG_KEYWORD("restrict", RESTRICT, UNRESERVED_KEYWORD)
PG_KEYWORD("returning", RETURNING, RESERVED_KEYWORD)
PG_KEYWORD("returns", RETURNS, UNRESERVED_KEYWORD)
PG_KEYWORD("revoke", REVOKE, UNRESERVED_KEYWORD)
PG_KEYWORD("right", RIGHT, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("role", ROLE, UNRESERVED_KEYWORD)
PG_KEYWORD("rollback", ROLLBACK, UNRESERVED_KEYWORD)
PG_KEYWORD("rollup", ROLLUP, UNRESERVED_KEYWORD)
PG_KEYWORD("row", ROW, COL_NAME_KEYWORD)
PG_KEYWORD("rows", ROWS, UNRESERVED_KEYWORD)
PG_KEYWORD("rule", RULE, UNRESERVED_KEYWORD)
PG_KEYWORD("sample", SAMPLE, UNRESERVED_KEYWORD)
PG_KEYWORD("savepoint", SAVEPOINT, UNRESERVED_KEYWORD)
PG_KEYWORD("schema", SCHEMA, UNRESERVED_KEYWORD)
PG_KEYWORD("schemas", SCHEMAS, UNRESERVED_KEYWORD)
PG_KEYWORD("scroll", SCROLL, UNRESERVED_KEYWORD)
PG_KEYWORD("search", SEARCH, UNRESERVED_KEYWORD)
PG_KEYWORD("second", SECOND_P, UNRESERVED_KEYWORD)
PG_KEYWORD("seconds", SECONDS_P, UNRESERVED_KEYWORD)
PG_KEYWORD("security", SECURITY, UNRESERVED_KEYWORD)
PG_KEYWORD("select", SELECT, RESERVED_KEYWORD)
PG_KEYWORD("semi", SEMI, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("sequence", SEQUENCE, UNRESERVED_KEYWORD)
PG_KEYWORD("sequences", SEQUENCES, UNRESERVED_KEYWORD)
PG_KEYWORD("serializable", SERIALIZABLE, UNRESERVED_KEYWORD)
PG_KEYWORD("server", SERVER, UNRESERVED_KEYWORD)
PG_KEYWORD("session", SESSION, UNRESERVED_KEYWORD)
PG_KEYWORD("set", SET, UNRESERVED_KEYWORD)
PG_KEYWORD("setof", SETOF, COL_NAME_KEYWORD)
PG_KEYWORD("sets", SETS, UNRESERVED_KEYWORD)
PG_KEYWORD("share", SHARE, UNRESERVED_KEYWORD)
PG_KEYWORD("show", SHOW, UNRESERVED_KEYWORD)
PG_KEYWORD("similar", SIMILAR, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("simple", SIMPLE, UNRESERVED_KEYWORD)
PG_KEYWORD("skip", SKIP, UNRESERVED_KEYWORD)
PG_KEYWORD("smallint", SMALLINT, COL_NAME_KEYWORD)
PG_KEYWORD("snapshot", SNAPSHOT, UNRESERVED_KEYWORD)
PG_KEYWORD("some", SOME, RESERVED_KEYWORD)
PG_KEYWORD("sql", SQL_P, UNRESERVED_KEYWORD)
PG_KEYWORD("stable", STABLE, UNRESERVED_KEYWORD)
PG_KEYWORD("standalone", STANDALONE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("start", START, UNRESERVED_KEYWORD)
PG_KEYWORD("statement", STATEMENT, UNRESERVED_KEYWORD)
PG_KEYWORD("statistics", STATISTICS, UNRESERVED_KEYWORD)
PG_KEYWORD("stdin", STDIN, UNRESERVED_KEYWORD)
PG_KEYWORD("stdout", STDOUT, UNRESERVED_KEYWORD)
PG_KEYWORD("storage", STORAGE, UNRESERVED_KEYWORD)
PG_KEYWORD("stored", STORED, UNRESERVED_KEYWORD)
PG_KEYWORD("strict", STRICT_P, UNRESERVED_KEYWORD)
PG_KEYWORD("strip", STRIP_P, UNRESERVED_KEYWORD)
PG_KEYWORD("struct", STRUCT, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("subscription", SUBSCRIPTION, UNRESERVED_KEYWORD)
PG_KEYWORD("substring", SUBSTRING, COL_NAME_KEYWORD)
PG_KEYWORD("summarize", SUMMARIZE, UNRESERVED_KEYWORD)
PG_KEYWORD("symmetric", SYMMETRIC, RESERVED_KEYWORD)
PG_KEYWORD("sysid", SYSID, UNRESERVED_KEYWORD)
PG_KEYWORD("system", SYSTEM_P, UNRESERVED_KEYWORD)
PG_KEYWORD("table", TABLE, RESERVED_KEYWORD)
PG_KEYWORD("tables", TABLES, UNRESERVED_KEYWORD)
PG_KEYWORD("tablesample", TABLESAMPLE, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("tablespace", TABLESPACE, UNRESERVED_KEYWORD)
PG_KEYWORD("temp", TEMP, UNRESERVED_KEYWORD)
PG_KEYWORD("template", TEMPLATE, UNRESERVED_KEYWORD)
PG_KEYWORD("temporary", TEMPORARY, UNRESERVED_KEYWORD)
PG_KEYWORD("text", TEXT_P, UNRESERVED_KEYWORD)
PG_KEYWORD("then", THEN, RESERVED_KEYWORD)
PG_KEYWORD("time", TIME, COL_NAME_KEYWORD)
PG_KEYWORD("timestamp", TIMESTAMP, COL_NAME_KEYWORD)
PG_KEYWORD("to", TO, RESERVED_KEYWORD)
PG_KEYWORD("trailing", TRAILING, RESERVED_KEYWORD)
PG_KEYWORD("transaction", TRANSACTION, UNRESERVED_KEYWORD)
PG_KEYWORD("transform", TRANSFORM, UNRESERVED_KEYWORD)
PG_KEYWORD("treat", TREAT, COL_NAME_KEYWORD)
PG_KEYWORD("trigger", TRIGGER, UNRESERVED_KEYWORD)
PG_KEYWORD("trim", TRIM, COL_NAME_KEYWORD)
PG_KEYWORD("true", TRUE_P, RESERVED_KEYWORD)
PG_KEYWORD("truncate", TRUNCATE, UNRESERVED_KEYWORD)
PG_KEYWORD("trusted", TRUSTED, UNRESERVED_KEYWORD)
PG_KEYWORD("try_cast", TRY_CAST, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("type", TYPE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("types", TYPES_P, UNRESERVED_KEYWORD)
PG_KEYWORD("unbounded", UNBOUNDED, UNRESERVED_KEYWORD)
PG_KEYWORD("uncommitted", UNCOMMITTED, UNRESERVED_KEYWORD)
PG_KEYWORD("unencrypted", UNENCRYPTED, UNRESERVED_KEYWORD)
PG_KEYWORD("union", UNION, RESERVED_KEYWORD)
PG_KEYWORD("unique", UNIQUE, RESERVED_KEYWORD)
PG_KEYWORD("unknown", UNKNOWN, UNRESERVED_KEYWORD)
PG_KEYWORD("unlisten", UNLISTEN, UNRESERVED_KEYWORD)
PG_KEYWORD("unlogged", UNLOGGED, UNRESERVED_KEYWORD)
PG_KEYWORD("unpivot", UNPIVOT, RESERVED_KEYWORD)
PG_KEYWORD("until", UNTIL, UNRESERVED_KEYWORD)
PG_KEYWORD("update", UPDATE, UNRESERVED_KEYWORD)
PG_KEYWORD("use", USE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("user", USER, UNRESERVED_KEYWORD)
PG_KEYWORD("using", USING, RESERVED_KEYWORD)
PG_KEYWORD("vacuum", VACUUM, UNRESERVED_KEYWORD)
PG_KEYWORD("valid", VALID, UNRESERVED_KEYWORD)
PG_KEYWORD("validate", VALIDATE, UNRESERVED_KEYWORD)
PG_KEYWORD("validator", VALIDATOR, UNRESERVED_KEYWORD)
PG_KEYWORD("value", VALUE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("values", VALUES, COL_NAME_KEYWORD)
PG_KEYWORD("varchar", VARCHAR, COL_NAME_KEYWORD)
PG_KEYWORD("variadic", VARIADIC, RESERVED_KEYWORD)
PG_KEYWORD("varying", VARYING, UNRESERVED_KEYWORD)
PG_KEYWORD("verbose", VERBOSE, TYPE_FUNC_NAME_KEYWORD)
PG_KEYWORD("version", VERSION_P, UNRESERVED_KEYWORD)
PG_KEYWORD("view", VIEW, UNRESERVED_KEYWORD)
PG_KEYWORD("views", VIEWS, UNRESERVED_KEYWORD)
PG_KEYWORD("virtual", VIRTUAL, UNRESERVED_KEYWORD)
PG_KEYWORD("volatile", VOLATILE, UNRESERVED_KEYWORD)
PG_KEYWORD("when", WHEN, RESERVED_KEYWORD)
PG_KEYWORD("where", WHERE, RESERVED_KEYWORD)
PG_KEYWORD("whitespace", WHITESPACE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("window", WINDOW, RESERVED_KEYWORD)
PG_KEYWORD("with", WITH, RESERVED_KEYWORD)
PG_KEYWORD("within", WITHIN, UNRESERVED_KEYWORD)
PG_KEYWORD("without", WITHOUT, UNRESERVED_KEYWORD)
PG_KEYWORD("work", WORK, UNRESERVED_KEYWORD)
PG_KEYWORD("wrapper", WRAPPER, UNRESERVED_KEYWORD)
PG_KEYWORD("write", WRITE_P, UNRESERVED_KEYWORD)
PG_KEYWORD("xml", XML_P, UNRESERVED_KEYWORD)
PG_KEYWORD("xmlattributes", XMLATTRIBUTES, COL_NAME_KEYWORD)
PG_KEYWORD("xmlconcat", XMLCONCAT, COL_NAME_KEYWORD)
PG_KEYWORD("xmlelement", XMLELEMENT, COL_NAME_KEYWORD)
PG_KEYWORD("xmlexists", XMLEXISTS, COL_NAME_KEYWORD)
PG_KEYWORD("xmlforest", XMLFOREST, COL_NAME_KEYWORD)
PG_KEYWORD("xmlnamespaces", XMLNAMESPACES, COL_NAME_KEYWORD)
PG_KEYWORD("xmlparse", XMLPARSE, COL_NAME_KEYWORD)
PG_KEYWORD("xmlpi", XMLPI, COL_NAME_KEYWORD)
PG_KEYWORD("xmlroot", XMLROOT, COL_NAME_KEYWORD)
PG_KEYWORD("xmlserialize", XMLSERIALIZE, COL_NAME_KEYWORD)
PG_KEYWORD("xmltable", XMLTABLE, COL_NAME_KEYWORD)
PG_KEYWORD("year", YEAR_P, UNRESERVED_KEYWORD)
PG_KEYWORD("years", YEARS_P, UNRESERVED_KEYWORD)
PG_KEYWORD("yes", YES_P, UNRESERVED_KEYWORD)
PG_KEYWORD("zone", ZONE, UNRESERVED_KEYWORD)

};

const int NumScanKeywords = lengthof(ScanKeywords);
} // namespace duckdb_libpgquery


// LICENSE_CHANGE_END


namespace duckdb_libpgquery {

/*
 * raw_parser
 *		Given a query in string form, do lexical and grammatical analysis.
 *
 * Returns a list of raw (un-analyzed) parse trees.  The immediate elements
 * of the list are always PGRawStmt nodes.
 */
PGList *raw_parser(const char *str) {
	core_yyscan_t yyscanner;
	base_yy_extra_type yyextra;
	int yyresult;

	/* initialize the flex scanner */
	yyscanner = scanner_init(str, &yyextra.core_yy_extra, ScanKeywords, NumScanKeywords);

	/* base_yylex() only needs this much initialization */
	yyextra.have_lookahead = false;

	/* initialize the bison parser */
	parser_init(&yyextra);

	/* Parse! */
	yyresult = base_yyparse(yyscanner);

	/* Clean up (release memory) */
	scanner_finish(yyscanner);

	if (yyresult) /* error */
		return NIL;

	return yyextra.parsetree;
}

bool is_keyword(const char *text) {
	return ScanKeywordLookup(text, ScanKeywords, NumScanKeywords) != NULL;
}

std::vector<PGKeyword> keyword_list() {
    std::vector<PGKeyword> result;
	for(size_t i = 0; i < NumScanKeywords; i++) {
		PGKeyword keyword;
		keyword.text = ScanKeywords[i].name;
		switch(ScanKeywords[i].category) {
		case UNRESERVED_KEYWORD:
			keyword.category = PGKeywordCategory::PG_KEYWORD_UNRESERVED;
			break;
		case RESERVED_KEYWORD:
			keyword.category = PGKeywordCategory::PG_KEYWORD_RESERVED;
			break;
		case TYPE_FUNC_NAME_KEYWORD:
			keyword.category = PGKeywordCategory::PG_KEYWORD_TYPE_FUNC;
			break;
		case COL_NAME_KEYWORD:
			keyword.category = PGKeywordCategory::PG_KEYWORD_COL_NAME;
			break;
		}
		result.push_back(keyword);
	}
	return result;
}

std::vector<PGSimplifiedToken> tokenize(const char *str) {
	core_yyscan_t yyscanner;
	base_yy_extra_type yyextra;

	std::vector<PGSimplifiedToken> result;
	yyscanner = scanner_init(str, &yyextra.core_yy_extra, ScanKeywords, NumScanKeywords);
	yyextra.have_lookahead = false;

	while(true) {
		YYSTYPE type;
		YYLTYPE loc;
		int token;
		try {
			token = base_yylex(&type, &loc, yyscanner);
		} catch(...) {
			token = 0;
		}
		if (token == 0) {
			break;
		}
		PGSimplifiedToken current_token;
		switch(token) {
		case IDENT:
			current_token.type = PGSimplifiedTokenType::PG_SIMPLIFIED_TOKEN_IDENTIFIER;
			break;
		case ICONST:
		case FCONST:
			current_token.type = PGSimplifiedTokenType::PG_SIMPLIFIED_TOKEN_NUMERIC_CONSTANT;
			break;
		case SCONST:
		case BCONST:
		case XCONST:
			current_token.type = PGSimplifiedTokenType::PG_SIMPLIFIED_TOKEN_STRING_CONSTANT;
			break;
		case Op:
		case PARAM:
		case COLON_EQUALS:
		case EQUALS_GREATER:
		case LESS_EQUALS:
		case GREATER_EQUALS:
		case NOT_EQUALS:
			current_token.type = PGSimplifiedTokenType::PG_SIMPLIFIED_TOKEN_OPERATOR;
			break;
		default:
			if (token >= 255) {
				// non-ascii value, probably a keyword
				current_token.type = PGSimplifiedTokenType::PG_SIMPLIFIED_TOKEN_KEYWORD;
			} else {
				// ascii value, probably an operator
				current_token.type = PGSimplifiedTokenType::PG_SIMPLIFIED_TOKEN_OPERATOR;
			}
			break;
		}
		current_token.start = loc;
		result.push_back(current_token);
	}

	scanner_finish(yyscanner);
	return result;
}



/*
 * Intermediate filter between parser and core lexer (core_yylex in scan.l).
 *
 * This filter is needed because in some cases the standard SQL grammar
 * requires more than one token lookahead.  We reduce these cases to one-token
 * lookahead by replacing tokens here, in order to keep the grammar LALR(1).
 *
 * Using a filter is simpler than trying to recognize multiword tokens
 * directly in scan.l, because we'd have to allow for comments between the
 * words.  Furthermore it's not clear how to do that without re-introducing
 * scanner backtrack, which would cost more performance than this filter
 * layer does.
 *
 * The filter also provides a convenient place to translate between
 * the core_YYSTYPE and YYSTYPE representations (which are really the
 * same thing anyway, but notationally they're different).
 */
int base_yylex(YYSTYPE *lvalp, YYLTYPE *llocp, core_yyscan_t yyscanner) {
	base_yy_extra_type *yyextra = pg_yyget_extra(yyscanner);
	int cur_token;
	int next_token;
	int cur_token_length;
	YYLTYPE cur_yylloc;

	/* Get next token --- we might already have it */
	if (yyextra->have_lookahead) {
		cur_token = yyextra->lookahead_token;
		lvalp->core_yystype = yyextra->lookahead_yylval;
		*llocp = yyextra->lookahead_yylloc;
		*(yyextra->lookahead_end) = yyextra->lookahead_hold_char;
		yyextra->have_lookahead = false;
	} else
		cur_token = core_yylex(&(lvalp->core_yystype), llocp, yyscanner);

	/*
	 * If this token isn't one that requires lookahead, just return it.  If it
	 * does, determine the token length.  (We could get that via strlen(), but
	 * since we have such a small set of possibilities, hardwiring seems
	 * feasible and more efficient.)
	 */
	switch (cur_token) {
	case NOT:
		cur_token_length = 3;
		break;
	case NULLS_P:
		cur_token_length = 5;
		break;
	case WITH:
		cur_token_length = 4;
		break;
	default:
		return cur_token;
	}

	/*
	 * Identify end+1 of current token.  core_yylex() has temporarily stored a
	 * '\0' here, and will undo that when we call it again.  We need to redo
	 * it to fully revert the lookahead call for error reporting purposes.
	 */
	yyextra->lookahead_end = yyextra->core_yy_extra.scanbuf + *llocp + cur_token_length;
	Assert(*(yyextra->lookahead_end) == '\0');

	/*
	 * Save and restore *llocp around the call.  It might look like we could
	 * avoid this by just passing &lookahead_yylloc to core_yylex(), but that
	 * does not work because flex actually holds onto the last-passed pointer
	 * internally, and will use that for error reporting.  We need any error
	 * reports to point to the current token, not the next one.
	 */
	cur_yylloc = *llocp;

	/* Get next token, saving outputs into lookahead variables */
	next_token = core_yylex(&(yyextra->lookahead_yylval), llocp, yyscanner);
	yyextra->lookahead_token = next_token;
	yyextra->lookahead_yylloc = *llocp;

	*llocp = cur_yylloc;

	/* Now revert the un-truncation of the current token */
	yyextra->lookahead_hold_char = *(yyextra->lookahead_end);
	*(yyextra->lookahead_end) = '\0';

	yyextra->have_lookahead = true;

	/* Replace cur_token if needed, based on lookahead */
	switch (cur_token) {
	case NOT:
		/* Replace NOT by NOT_LA if it's followed by BETWEEN, IN, etc */
		switch (next_token) {
		case BETWEEN:
		case IN_P:
		case LIKE:
		case ILIKE:
		case SIMILAR:
			cur_token = NOT_LA;
			break;
		}
		break;

	case NULLS_P:
		/* Replace NULLS_P by NULLS_LA if it's followed by FIRST or LAST */
		switch (next_token) {
		case FIRST_P:
		case LAST_P:
			cur_token = NULLS_LA;
			break;
		}
		break;

	case WITH:
		/* Replace WITH by WITH_LA if it's followed by TIME or ORDINALITY */
		switch (next_token) {
		case TIME:
		case ORDINALITY:
			cur_token = WITH_LA;
			break;
		}
		break;
	}

	return cur_token;
}

}

// LICENSE_CHANGE_END


// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #14
// See the end of this file for a list

#line 1 "third_party/libpg_query/src_backend_parser_scan.cpp"
/*-------------------------------------------------------------------------
 *
 * scan.l
 *	  lexical scanner for PostgreSQL
 *
 * NOTE NOTE NOTE:
 *
 * The rules in this file must be kept in sync with src/fe_utils/psqlscan.l!
 *
 * The rules are designed so that the scanner never has to backtrack,
 * in the sense that there is always a rule that can match the input
 * consumed so far (the rule action may internally throw back some input
 * with yyless(), however).  As explained in the flex manual, this makes
 * for a useful speed increase --- about a third faster than a plain -CF
 * lexer, in simple testing.  The extra complexity is mostly in the rules
 * for handling float numbers and continued string literals.  If you change
 * the lexical rules, verify that you haven't broken the no-backtrack '
 * property by running flex with the "-b" option and checking that the
 * resulting "lex.backup" file says that no backing up is needed.  (As of
 * Postgres 9.2, this check is made automatically by the Makefile.)
 *
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/parser/scan.l
 *
 *-------------------------------------------------------------------------
 */
#include <ctype.h>
//#include <unistd.h>



		/* only needed for GUC variables */



// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #14
// See the end of this file for a list

/*-------------------------------------------------------------------------
 *
 * pg_wchar.h
 *	  multibyte-character support
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/include/mb/pg_wchar.h
 *
 *	NOTES
 *		This is used both by the backend and by libpq, but should not be
 *		included by libpq client programs.  In particular, a libpq client
 *		should not assume that the encoding IDs used by the version of libpq
 *		it's linked to match up with the IDs declared here.
 *
 *-------------------------------------------------------------------------
 */


#include <cstdint>

/*
 * The pg_wchar type
 */
namespace duckdb_libpgquery {
typedef unsigned int pg_wchar;
}

// LICENSE_CHANGE_END


#include <stdexcept>

#line 43 "third_party/libpg_query/src_backend_parser_scan.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define core_yy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer core_yy_create_buffer
#endif

#ifdef yy_delete_buffer
#define core_yy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer core_yy_delete_buffer
#endif

#ifdef yy_scan_buffer
#define core_yy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer core_yy_scan_buffer
#endif

#ifdef yy_scan_string
#define core_yy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string core_yy_scan_string
#endif

#ifdef yy_scan_bytes
#define core_yy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes core_yy_scan_bytes
#endif

#ifdef yy_init_buffer
#define core_yy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer core_yy_init_buffer
#endif

#ifdef yy_flush_buffer
#define core_yy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer core_yy_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define core_yy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state core_yy_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define core_yy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer core_yy_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define core_yypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state core_yypush_buffer_state
#endif

#ifdef yypop_buffer_state
#define core_yypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state core_yypop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define core_yyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack core_yyensure_buffer_stack
#endif

#ifdef yylex
#define core_yylex_ALREADY_DEFINED
#else
#define yylex core_yylex
#endif

#ifdef yyrestart
#define core_yyrestart_ALREADY_DEFINED
#else
#define yyrestart core_yyrestart
#endif

#ifdef yylex_init
#define core_yylex_init_ALREADY_DEFINED
#else
#define yylex_init core_yylex_init
#endif

#ifdef yylex_init_extra
#define core_yylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra core_yylex_init_extra
#endif

#ifdef yylex_destroy
#define core_yylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy core_yylex_destroy
#endif

#ifdef yyget_debug
#define core_yyget_debug_ALREADY_DEFINED
#else
#define yyget_debug core_yyget_debug
#endif

#ifdef yyset_debug
#define core_yyset_debug_ALREADY_DEFINED
#else
#define yyset_debug core_yyset_debug
#endif

#ifdef yyget_extra
#define core_yyget_extra_ALREADY_DEFINED
#else
#define yyget_extra core_yyget_extra
#endif

#ifdef yyset_extra
#define core_yyset_extra_ALREADY_DEFINED
#else
#define yyset_extra core_yyset_extra
#endif

#ifdef yyget_in
#define core_yyget_in_ALREADY_DEFINED
#else
#define yyget_in core_yyget_in
#endif

#ifdef yyset_in
#define core_yyset_in_ALREADY_DEFINED
#else
#define yyset_in core_yyset_in
#endif

#ifdef yyget_out
#define core_yyget_out_ALREADY_DEFINED
#else
#define yyget_out core_yyget_out
#endif

#ifdef yyset_out
#define core_yyset_out_ALREADY_DEFINED
#else
#define yyset_out core_yyset_out
#endif

#ifdef yyget_leng
#define core_yyget_leng_ALREADY_DEFINED
#else
#define yyget_leng core_yyget_leng
#endif

#ifdef yyget_text
#define core_yyget_text_ALREADY_DEFINED
#else
#define yyget_text core_yyget_text
#endif

#ifdef yyget_lineno
#define core_yyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno core_yyget_lineno
#endif

#ifdef yyset_lineno
#define core_yyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno core_yyset_lineno
#endif

#ifdef yyget_column
#define core_yyget_column_ALREADY_DEFINED
#else
#define yyget_column core_yyget_column
#endif

#ifdef yyset_column
#define core_yyset_column_ALREADY_DEFINED
#else
#define yyset_column core_yyset_column
#endif

#ifdef yywrap
#define core_yywrap_ALREADY_DEFINED
#else
#define yywrap core_yywrap
#endif

#ifdef yyget_lval
#define core_yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval core_yyget_lval
#endif

#ifdef yyset_lval
#define core_yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval core_yyset_lval
#endif

#ifdef yyget_lloc
#define core_yyget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc core_yyget_lloc
#endif

#ifdef yyset_lloc
#define core_yyset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc core_yyset_lloc
#endif

#ifdef yyalloc
#define core_yyalloc_ALREADY_DEFINED
#else
#define yyalloc core_yyalloc
#endif

#ifdef yyrealloc
#define core_yyrealloc_ALREADY_DEFINED
#else
#define yyrealloc core_yyrealloc
#endif

#ifdef yyfree
#define core_yyfree_ALREADY_DEFINED
#else
#define yyfree core_yyfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H
namespace duckdb_libpgquery {

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, yy_size_t len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define core_yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 84
#define YY_END_OF_BUFFER 85
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[297] =
    {   0,
        0,    0,   12,   12,    0,    0,    0,    0,   11,   11,
        0,    0,    0,    0,    0,    0,    0,    0,   55,   55,
        0,    0,   28,   28,    0,    0,   85,   83,    1,    1,
       73,   49,   83,   72,   73,   19,   72,   72,   72,   72,
       72,   76,   72,   72,   72,   72,   83,   82,   82,   82,
       82,   82,   82,   12,    9,    5,    5,    6,    6,   58,
       51,   11,   16,   32,   32,   22,   42,   31,   22,   46,
       46,   48,   52,   54,   53,   53,   54,   54,   24,   27,
       26,   26,   27,   27,   35,   36,   35,    1,   73,   71,
       43,   74,   44,   65,    1,   63,   61,   77,    2,   66,

       77,   76,   80,   60,   62,   68,   70,   67,   69,   75,
       82,    8,   20,   18,   59,   15,   12,    9,    9,   10,
        5,    7,    4,    3,   58,   57,   11,   16,   16,   17,
       32,   22,   22,   30,   23,   38,   39,   37,   37,   38,
       31,   46,   45,   47,   53,   53,   55,   24,   24,   25,
       26,   26,   28,   37,   37,   44,    1,    1,   64,    2,
       78,   77,   81,   79,   50,   21,    9,   14,   10,    9,
        3,   16,   13,   17,   16,   22,   41,   23,   22,   39,
       37,   37,   40,   47,   53,   55,   24,   25,   24,   26,
       28,   37,   37,    9,    9,    9,    9,   16,   16,   16,

       16,   22,   22,   22,   22,   39,   37,   37,   40,   55,
       24,   24,   24,   24,   28,   37,   37,    9,    9,    9,
        9,    9,   16,   16,   16,   16,   16,   22,   22,   22,
       22,   22,   37,   37,   55,   24,   24,   24,   24,   24,
       28,   37,   37,    9,   16,   22,   37,   33,   55,   24,
       28,   37,   34,   37,   55,   28,   37,   37,   55,   55,
       55,   28,   28,   28,   37,   37,   55,   55,   28,   28,
       37,   56,   55,   55,   55,   55,   29,   28,   28,   28,
       28,   55,   55,   55,   55,   55,   28,   28,   28,   28,
       28,   55,   55,   28,   28,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    7,    8,    9,   10,   11,
       11,   12,   13,   11,   14,   15,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   18,   18,   19,   11,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   28,
       30,   30,   30,   30,   30,   30,   30,   31,   30,   32,
       30,   30,   33,   30,   34,   30,   30,   35,   30,   30,
       11,   36,   11,    8,   30,   24,   25,   26,   27,   28,

       29,   28,   30,   30,   30,   30,   30,   30,   30,   31,
       30,   32,   30,   30,   33,   30,   37,   30,   30,   38,
       30,   30,    1,   24,    1,   24,    1,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30
    } ;

static const YY_CHAR yy_meta[39] =
    {   0,
        1,    1,    2,    2,    3,    4,    5,    3,    3,    6,
        1,    7,    3,    3,    1,    7,    8,    8,    1,    3,
        3,    3,    1,    3,    9,    9,    9,    9,    9,   10,
       10,   10,   10,   10,   10,   11,   10,   10
    } ;

static const flex_int16_t yy_base[364] =
    {   0,
        0,    0,  415,  409,   34,   54,  412,  400,  395,  393,
       41,   50,  392,  380,   38,   54,  383,  378,   85,  121,
      373,  367,  157,  193,   37,   46,  376, 1215,   77,   81,
      343, 1215,   83,    0,    0, 1215, 1215,  351,   50,   76,
       53,   80,   83,   84,  339,  339,   90,    0,  338,  337,
      332,  332,  324,    0,  112,    0,    0,   80,  315,    0,
      315,    0,  125,    0,    0,  128,  103,    0,  142,    0,
        0,  312,  312, 1215,  108,  145,  297,  275,  160, 1215,
      163,  173,  283,  260, 1215, 1215,   84,  176,    0,    0,
     1215,  116,  278,    0,  226,  262, 1215,  155,    0,    0,

      170,  175,  188, 1215, 1215,    0,    0,    0,    0,  133,
        0, 1215, 1215, 1215,  107, 1215,    0,  206,  209,  267,
        0,  141, 1215,    0,    0, 1215,    0,  212,  241,  266,
        0,  250,  255, 1215,  259, 1215,  254,    0,    0,    0,
        0,    0, 1215,  263,  179,    0,  230,  258,  264,  242,
      273,    0,  216,    0,    0,  234,    0,  274,    0,    0,
     1215,  200,  151,  204, 1215, 1215,  289, 1215,  223,  298,
        0,  303, 1215,  222,  306,  312, 1215,  219,  321,  215,
        0,    0,    0,  221,    0,  198,  326,  210,  329,    0,
      176,    0,    0,  335,  342,  348,  351,  355,  364,  368,

      371,  377,  384,  390,  393, 1215,    0,    0, 1215,  175,
      397,  406,  410,  413,  173,    0,    0,  419,  426,  432,
      435,  441,  448,  454,  457,  461,  470,  474,  477,  483,
      492,  496,    0,    0,  157,  499,  505,  512,  521,  525,
      154,    0,    0,  528,  534,  541,    0, 1215,  125,  547,
      114,    0, 1215,    0,  550,  555,    0,    0,  564,    0,
      122,  569,    0,   89,    0,    0,   61,  578,   42,  583,
        0, 1215,  592,  597,  606,  611, 1215,  620,  625,  634,
      639,  648,  653,  662,  667,  676,  681,  690,  695,  704,
      709,  718,    0,  723,    0, 1215,  737,  748,  759,  770,

      781,  792,  803,  814,  825,  836,  845,  848,  854,  864,
      875,  886,  897,  908,  918,  929,  940,  947,  953,  963,
      972,  977,  977,  979,  981,  986,  996, 1007, 1011, 1013,
     1022, 1033, 1044, 1048, 1050, 1052, 1061, 1065, 1067, 1076,
     1087, 1098, 1102, 1104, 1113, 1117, 1119, 1121, 1123, 1125,
     1127, 1129, 1131, 1133, 1135, 1137, 1146, 1157, 1161, 1170,
     1181, 1192, 1203
    } ;

static const flex_int16_t yy_def[364] =
    {   0,
      296,    1,  297,  297,  298,  298,  299,  299,  300,  300,
      301,  301,  302,  302,  303,  303,  299,  299,  304,  304,
      302,  302,  305,  305,  306,  306,  296,  296,  296,  296,
      307,  296,  308,  307,  307,  296,  296,  307,  307,  296,
      307,  296,  296,  307,  307,  307,  296,  309,  309,  309,
      309,  309,  309,  310,  296,  311,  311,  296,  296,  312,
      296,  313,  296,  314,  314,  296,  315,  316,  296,  317,
      317,  318,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  307,  307,
      296,  296,  319,  307,  320,  307,  296,  296,  321,  307,

      296,  296,  296,  296,  296,  307,  307,  307,  307,  296,
      309,  296,  296,  296,  296,  296,  310,  296,  296,  296,
      311,  296,  296,  322,  312,  296,  313,  296,  296,  296,
      314,  296,  296,  296,  296,  296,  296,  323,  324,  325,
      316,  317,  296,  326,  296,  327,  296,  296,  296,  296,
      296,  328,  296,  329,  330,  319,  320,  320,  307,  321,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  331,
      322,  296,  296,  296,  332,  296,  296,  296,  333,  296,
      334,  335,  336,  326,  327,  296,  296,  296,  337,  328,
      296,  338,  339,  340,  331,  331,  331,  341,  332,  332,

      332,  342,  333,  333,  333,  296,  343,  344,  296,  296,
      345,  337,  337,  337,  296,  346,  347,  340,  340,  296,
      340,  331,  341,  341,  296,  341,  332,  342,  342,  296,
      342,  333,  348,  349,  296,  345,  345,  296,  345,  337,
      296,  350,  351,  340,  341,  342,  352,  296,  296,  345,
      296,  353,  296,  354,  296,  296,  355,  356,  296,  357,
      296,  296,  358,  296,  359,  349,  296,  360,  296,  361,
      351,  296,  360,  360,  362,  360,  296,  361,  361,  363,
      361,  360,  360,  296,  360,  360,  361,  361,  296,  361,
      361,  362,  357,  363,  358,    0,  296,  296,  296,  296,

      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296
    } ;

static const flex_int16_t yy_nxt[1254] =
    {   0,
       28,   29,   30,   29,   31,   32,   33,   34,   35,   36,
       37,   38,   34,   39,   40,   41,   42,   42,   43,   44,
       45,   46,   47,   35,   48,   49,   48,   48,   50,   48,
       51,   48,   48,   52,   53,   28,   52,   53,   57,   86,
       71,   57,   57,   65,   72,   58,   57,   57,   86,   59,
       66,  277,   65,   57,   57,   57,   71,   57,   57,   66,
       72,   57,   57,   95,   99,   58,   57,   57,  100,   59,
      272,   96,   87,   57,   57,   57,   67,   57,   88,   88,
       88,   87,   88,   88,   88,   67,   75,   76,   75,   91,
       97,  122,   98,   98,  101,  123,  102,  102,   77,   92,

       92,  104,  270,  105,  106,  107,  110,  110,  103,  145,
      145,  145,  165,  118,  119,  119,  166,  154,   78,  137,
      155,   78,   75,   76,   75,  120,  128,  129,  129,  132,
      133,  133,   92,   92,   77,  268,  138,  134,  130,  139,
      140,  135,  256,  132,  133,  133,  145,  145,  145,  110,
      110,  134,  122,  255,   78,  135,  123,   78,   81,   82,
       81,  148,  149,  149,  151,  151,  151,  164,  164,  134,
       83,   98,   98,  150,  151,  151,  151,   88,   88,   88,
      145,  145,  145,  103,  161,  251,  162,  162,  249,  101,
       84,  102,  102,   84,   81,   82,   81,  241,  103,  235,

      163,  163,  215,  103,  164,  164,   83,  118,  119,  119,
      167,  167,  167,  128,  129,  129,  162,  162,  168,  120,
      164,  164,  169,  211,  210,  130,   84,  143,  103,   84,
      158,  206,  202,  158,  158,  198,  194,  158,  158,  158,
       91,  158,  172,  172,  172,  158,  158,  158,  191,  158,
      173,  132,  133,  133,  174,  189,  176,  176,  176,  148,
      149,  149,  186,  135,  177,  187,  187,  187,  178,  143,
      180,  150,  179,  177,  151,  151,  151,  188,  158,  175,
      170,  158,  158,  159,   91,  158,  158,  158,  153,  158,
      167,  167,  167,  158,  158,  158,  152,  158,  168,  196,

      119,  119,  169,  147,  172,  172,  172,  200,  129,  129,
      146,  197,  173,  176,  176,  176,  174,  126,  143,  201,
      126,  177,  204,  133,  133,  178,  124,  187,  187,  187,
      213,  149,  149,  116,  205,  177,  219,  220,  220,  188,
      115,  114,  214,  196,  119,  119,  113,  112,  221,  196,
      119,  119,  196,  119,  119,  197,  224,  225,  225,  109,
      108,  197,   94,   90,  222,  200,  129,  129,  226,  200,
      129,  129,  200,  129,  129,  296,   79,  201,  229,  230,
      230,  201,   79,   73,  227,  204,  133,  133,   73,   69,
      231,  204,  133,  133,  204,  133,  133,  205,  237,  238,

      238,   69,   63,  205,   63,   61,  232,  213,  149,  149,
      239,  213,  149,  149,  213,  149,  149,   61,   55,  214,
      219,  220,  220,  214,   55,  296,  240,  219,  220,  220,
      296,  296,  221,  167,  167,  167,  219,  220,  220,  221,
      296,  168,  196,  119,  119,  169,  296,  296,  244,  224,
      225,  225,  296,  296,  222,  224,  225,  225,  172,  172,
      172,  226,  224,  225,  225,  296,  173,  226,  296,  296,
      174,  200,  129,  129,  245,  229,  230,  230,  229,  230,
      230,  296,  296,  227,  176,  176,  176,  231,  296,  296,
      231,  296,  177,  229,  230,  230,  178,  204,  133,  133,

      237,  238,  238,  296,  296,  246,  237,  238,  238,  232,
      296,  296,  239,  187,  187,  187,  296,  296,  239,  296,
      296,  177,  237,  238,  238,  188,  213,  149,  149,  219,
      220,  220,  296,  296,  250,  224,  225,  225,  240,  296,
      296,  244,  229,  230,  230,  296,  296,  245,  237,  238,
      238,  259,  259,  259,  246,  296,  262,  262,  262,  260,
      250,  296,  296,  261,  263,  259,  259,  259,  264,  296,
      262,  262,  262,  260,  296,  296,  296,  261,  263,  274,
      259,  259,  264,  296,  279,  262,  262,  275,  296,  296,
      296,  276,  280,  274,  259,  259,  281,  296,  274,  259,

      259,  275,  296,  296,  296,  276,  275,  283,  284,  284,
      276,  296,  274,  259,  259,  275,  296,  296,  296,  285,
      275,  279,  262,  262,  286,  296,  279,  262,  262,  280,
      296,  296,  296,  281,  280,  288,  289,  289,  281,  296,
      279,  262,  262,  280,  296,  296,  296,  290,  280,  274,
      259,  259,  291,  296,  274,  259,  259,  292,  296,  296,
      296,  276,  292,  259,  259,  259,  276,  296,  274,  259,
      259,  293,  296,  296,  296,  261,  292,  274,  259,  259,
      286,  296,  279,  262,  262,  275,  296,  296,  296,  286,
      294,  279,  262,  262,  281,  296,  262,  262,  262,  294,

      296,  296,  296,  281,  295,  279,  262,  262,  264,  296,
      279,  262,  262,  294,  296,  296,  296,  291,  280,  283,
      284,  284,  291,  296,  288,  289,  289,  275,  296,  296,
      296,  285,  280,  296,  296,  296,  290,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   89,  296,  296,
      296,   89,   93,  296,  296,   93,   93,   93,  111,  296,
      296,  111,  111,  111,  117,  117,  117,  117,  117,  296,
      117,  117,  117,  117,  117,  121,  121,  121,  121,  121,
      121,  296,  121,  121,  121,  121,  125,  125,  125,  296,
      125,  125,  125,  125,  125,  125,  125,  127,  127,  127,

      127,  127,  296,  127,  127,  127,  127,  127,  131,  131,
      131,  131,  131,  296,  131,  131,  131,  131,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  141,
      141,  141,  141,  141,  296,  141,  141,  141,  141,  141,
      142,  142,  142,  142,  296,  142,  142,  142,  142,  142,
      142,  144,  296,  296,  296,  144,  144,  156,  296,  296,
      156,  156,  156,  157,  296,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  160,  296,  296,  296,  160,  171,
      296,  296,  296,  171,  181,  181,  182,  182,  183,  183,
      184,  296,  296,  184,  184,  184,  185,  296,  185,  185,

      185,  185,  185,  185,  185,  185,  185,  190,  296,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  192,  192,
      193,  193,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  207,  207,  208,  208,  209,
      209,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  216,  216,  217,  217,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  233,
      233,  234,  234,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  242,  242,  243,  243,  247,  247,
      248,  248,  252,  252,  253,  253,  254,  254,  257,  257,
      258,  258,  265,  265,  266,  266,  267,  267,  267,  267,
      267,  296,  267,  267,  267,  267,  267,  269,  269,  269,
      269,  269,  296,  269,  269,  269,  269,  269,  271,  271,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  282,  282,  282,  282,  282,  282,  282,  282,

      282,  282,  282,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,   27,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296
    } ;

static const flex_int16_t yy_chk[1254] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,   25,
       15,    5,    5,   11,   15,    5,    5,    5,   26,    5,
       11,  269,   12,    5,    5,    5,   16,    5,    6,   12,
       16,    6,    6,   39,   41,    6,    6,    6,   41,    6,
      267,   39,   25,    6,    6,    6,   11,    6,   29,   29,
       29,   26,   30,   30,   30,   12,   19,   19,   19,   33,
       40,   58,   40,   40,   42,   58,   42,   42,   19,   33,

       33,   43,  264,   43,   44,   44,   47,   47,   42,   75,
       75,   75,  115,   55,   55,   55,  115,   87,   19,   67,
       87,   19,   20,   20,   20,   55,   63,   63,   63,   66,
       66,   66,   92,   92,   20,  261,   67,   66,   63,   67,
       67,   66,  251,   69,   69,   69,   76,   76,   76,  110,
      110,   69,  122,  249,   20,   69,  122,   20,   23,   23,
       23,   79,   79,   79,   81,   81,   81,  163,  163,   79,
       23,   98,   98,   79,   82,   82,   82,   88,   88,   88,
      145,  145,  145,   98,  101,  241,  101,  101,  235,  102,
       23,  102,  102,   23,   24,   24,   24,  215,  101,  210,

      103,  103,  191,  102,  103,  103,   24,  118,  118,  118,
      119,  119,  119,  128,  128,  128,  162,  162,  119,  118,
      164,  164,  119,  188,  186,  128,   24,  184,  162,   24,
       95,  180,  178,   95,   95,  174,  169,   95,   95,   95,
      156,   95,  129,  129,  129,   95,   95,   95,  153,   95,
      129,  132,  132,  132,  129,  150,  133,  133,  133,  148,
      148,  148,  147,  132,  133,  149,  149,  149,  133,  144,
      137,  148,  135,  149,  151,  151,  151,  149,  158,  130,
      120,  158,  158,   96,   93,  158,  158,  158,   84,  158,
      167,  167,  167,  158,  158,  158,   83,  158,  167,  170,

      170,  170,  167,   78,  172,  172,  172,  175,  175,  175,
       77,  170,  172,  176,  176,  176,  172,   73,   72,  175,
       61,  176,  179,  179,  179,  176,   59,  187,  187,  187,
      189,  189,  189,   53,  179,  187,  194,  194,  194,  187,
       52,   51,  189,  195,  195,  195,   50,   49,  194,  196,
      196,  196,  197,  197,  197,  195,  198,  198,  198,   46,
       45,  196,   38,   31,  197,  199,  199,  199,  198,  200,
      200,  200,  201,  201,  201,   27,   22,  199,  202,  202,
      202,  200,   21,   18,  201,  203,  203,  203,   17,   14,
      202,  204,  204,  204,  205,  205,  205,  203,  211,  211,

      211,   13,   10,  204,    9,    8,  205,  212,  212,  212,
      211,  213,  213,  213,  214,  214,  214,    7,    4,  212,
      218,  218,  218,  213,    3,    0,  214,  219,  219,  219,
        0,    0,  218,  220,  220,  220,  221,  221,  221,  219,
        0,  220,  222,  222,  222,  220,    0,    0,  221,  223,
      223,  223,    0,    0,  222,  224,  224,  224,  225,  225,
      225,  223,  226,  226,  226,    0,  225,  224,    0,    0,
      225,  227,  227,  227,  226,  228,  228,  228,  229,  229,
      229,    0,    0,  227,  230,  230,  230,  228,    0,    0,
      229,    0,  230,  231,  231,  231,  230,  232,  232,  232,

      236,  236,  236,    0,    0,  231,  237,  237,  237,  232,
        0,    0,  236,  238,  238,  238,    0,    0,  237,    0,
        0,  238,  239,  239,  239,  238,  240,  240,  240,  244,
      244,  244,    0,    0,  239,  245,  245,  245,  240,    0,
        0,  244,  246,  246,  246,    0,    0,  245,  250,  250,
      250,  255,  255,  255,  246,    0,  256,  256,  256,  255,
      250,    0,    0,  255,  256,  259,  259,  259,  256,    0,
      262,  262,  262,  259,    0,    0,    0,  259,  262,  268,
      268,  268,  262,    0,  270,  270,  270,  268,    0,    0,
        0,  268,  270,  273,  273,  273,  270,    0,  274,  274,

      274,  273,    0,    0,    0,  273,  274,  275,  275,  275,
      274,    0,  276,  276,  276,  275,    0,    0,    0,  275,
      276,  278,  278,  278,  276,    0,  279,  279,  279,  278,
        0,    0,    0,  278,  279,  280,  280,  280,  279,    0,
      281,  281,  281,  280,    0,    0,    0,  280,  281,  282,
      282,  282,  281,    0,  283,  283,  283,  282,    0,    0,
        0,  282,  283,  284,  284,  284,  283,    0,  285,  285,
      285,  284,    0,    0,    0,  284,  285,  286,  286,  286,
      285,    0,  287,  287,  287,  286,    0,    0,    0,  286,
      287,  288,  288,  288,  287,    0,  289,  289,  289,  288,

        0,    0,    0,  288,  289,  290,  290,  290,  289,    0,
      291,  291,  291,  290,    0,    0,    0,  290,  291,  292,
      292,  292,  291,    0,  294,  294,  294,  292,    0,    0,
        0,  292,  294,    0,    0,    0,  294,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  302,  302,  302,  302,  302,  302,  302,  302,

      302,  302,  302,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  307,    0,    0,
        0,  307,  308,    0,    0,  308,  308,  308,  309,    0,
        0,  309,  309,  309,  310,  310,  310,  310,  310,    0,
      310,  310,  310,  310,  310,  311,  311,  311,  311,  311,
      311,    0,  311,  311,  311,  311,  312,  312,  312,    0,
      312,  312,  312,  312,  312,  312,  312,  313,  313,  313,

      313,  313,    0,  313,  313,  313,  313,  313,  314,  314,
      314,  314,  314,    0,  314,  314,  314,  314,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  316,
      316,  316,  316,  316,    0,  316,  316,  316,  316,  316,
      317,  317,  317,  317,    0,  317,  317,  317,  317,  317,
      317,  318,    0,    0,    0,  318,  318,  319,    0,    0,
      319,  319,  319,  320,    0,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  321,    0,    0,    0,  321,  322,
        0,    0,    0,  322,  323,  323,  324,  324,  325,  325,
      326,    0,    0,  326,  326,  326,  327,    0,  327,  327,

      327,  327,  327,  327,  327,  327,  327,  328,    0,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  329,  329,
      330,  330,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  334,  334,  335,  335,  336,
      336,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  338,  338,  339,  339,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  342,  342,

      342,  342,  342,  342,  342,  342,  342,  342,  342,  343,
      343,  344,  344,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  346,  346,  347,  347,  348,  348,
      349,  349,  350,  350,  351,  351,  352,  352,  353,  353,
      354,  354,  355,  355,  356,  356,  357,  357,  357,  357,
      357,    0,  357,  357,  357,  357,  357,  358,  358,  358,
      358,  358,    0,  358,  358,  358,  358,  358,  359,  359,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  362,  362,  362,  362,  362,  362,  362,  362,

      362,  362,  362,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "third_party/libpg_query/scan.l"

#line 46 "third_party/libpg_query/scan.l"

/* LCOV_EXCL_START */

/*
 * GUC variables.  This is a DIRECT violation of the warning given at the
 * head of gram.y, ie flex/bison code must not depend on any GUC variables;
 * as such, changing their values can induce very unintuitive behavior.
 * But we shall have to live with it until we can remove these variables.
 */

int			backslash_quote = PG_BACKSLASH_QUOTE_SAFE_ENCODING;
bool		escape_string_warning = true;
bool		standard_conforming_strings = true;

/*
 * Set the type of YYSTYPE.
 */
#define YYSTYPE core_YYSTYPE

/*
 * Set the type of yyextra.  All state variables used by the scanner should
 * be in yyextra, *not* statically allocated.
 */
#define YY_EXTRA_TYPE core_yy_extra_type *

/*
 * Each call to yylex must set yylloc to the location of the found token
 * (expressed as a byte offset from the start of the input text).
 * When we parse a token that requires multiple lexer rules to process,
 * this should be done in the first such rule, else yylloc will point
 * into the middle of the token.
 */
#define SET_YYLLOC()  (*(yylloc) = yytext - yyextra->scanbuf)

/*
 * Advance yylloc by the given number of bytes.
 */
#define ADVANCE_YYLLOC(delta)  ( *(yylloc) += (delta) )

#define startlit()	( yyextra->literallen = 0 )
static void addlit(char *ytext, int yleng, core_yyscan_t yyscanner);
static void addlitchar(unsigned char ychar, core_yyscan_t yyscanner);
static char *litbufdup(core_yyscan_t yyscanner);
static char *litbuf_udeescape(unsigned char escape, core_yyscan_t yyscanner);
static unsigned char unescape_single_char(unsigned char c, core_yyscan_t yyscanner);
static int	process_integer_literal(const char *token, YYSTYPE *lval);
static bool is_utf16_surrogate_first(pg_wchar c);
static bool is_utf16_surrogate_second(pg_wchar c);
static pg_wchar surrogate_pair_to_codepoint(pg_wchar first, pg_wchar second);
static void addunicode(pg_wchar c, yyscan_t yyscanner);
static bool check_uescapechar(unsigned char escape);

#define yyerror(msg)  scanner_yyerror(msg, yyscanner)

#define lexer_errposition()  scanner_errposition(*(yylloc), yyscanner)

static void check_string_escape_warning(unsigned char ychar, core_yyscan_t yyscanner);
static void check_escape_warning(core_yyscan_t yyscanner);

/*
 * Work around a bug in flex 2.5.35: it emits a couple of functions that
 * it forgets to emit declarations for.  Since we use -Wmissing-prototypes,
 * this would cause warnings.  Providing our own declarations should be
 * harmless even when the bug gets fixed.
 */
extern int	core_yyget_column(yyscan_t yyscanner);
extern void core_yyset_column(int column_no, yyscan_t yyscanner);

#line 1153 "third_party/libpg_query/src_backend_parser_scan.cpp"
#define YY_NO_INPUT 1
/*
 * OK, here is a short description of lex/flex rules behavior.
 * The longest pattern which matches an input string is always chosen.
 * For equal-length patterns, the first occurring in the rules list is chosen.
 * INITIAL is the starting state, to which all non-conditional rules apply.
 * Exclusive states change parsing rules while the state is active.  When in
 * an exclusive state, only those rules defined for that state apply.
 *
 * We use exclusive states for quoted strings, extended comments,
 * and to eliminate parsing troubles for numeric strings.
 * Exclusive states:
 *  <xb> bit string literal
 *  <xc> extended C-style comments
 *  <xd> delimited identifiers (double-quoted identifiers)
 *  <xh> hexadecimal numeric string
 *  <xq> standard quoted strings
 *  <xe> extended quoted strings (support backslash escape sequences)
 *  <xdolq> $foo$ quoted strings
 *  <xui> quoted identifier with Unicode escapes
 *  <xuiend> end of a quoted identifier with Unicode escapes, UESCAPE can follow
 *  <xus> quoted string with Unicode escapes
 *  <xusend> end of a quoted string with Unicode escapes, UESCAPE can follow
 *  <xeu> Unicode surrogate pair in extended quoted string
 *
 * Remember to add an <<EOF>> case whenever you add a new exclusive state!
 * The default one is probably not the right thing.
 */

/*
 * In order to make the world safe for Windows and Mac clients as well as
 * Unix ones, we accept either \n or \r as a newline.  A DOS-style \r\n
 * sequence will be seen as two successive newlines, but that doesn't cause '
 * any problems.  Comments that start with -- and extend to the next
 * newline are treated as equivalent to a single whitespace character.
 *
 * NOTE a fine point: if there is no newline following --, we will absorb
 * everything to the end of the input as a comment.  This is correct.  Older
 * versions of Postgres failed to recognize -- as a comment if the input
 * did not end with a newline.
 *
 * XXX perhaps \f (formfeed) should be treated as a newline as well?
 *
 * XXX if you change the set of whitespace characters, fix scanner_isspace()
 * to agree, and see also the plpgsql lexer.
 */
/*
 * SQL requires at least one newline in the whitespace separating
 * string literals that are to be concatenated.  Silly, but who are we
 * to argue?  Note that {whitespace_with_newline} should not have * after
 * it, whereas {whitespace} should generally have a * after it...
 */
/*
 * To ensure that {quotecontinue} can be scanned without having to back up
 * if the full pattern isn't matched, we include trailing whitespace in
 * {quotestop}.  This matches all cases where {quotecontinue} fails to match,
 * except for {quote} followed by whitespace and just one "-" (not two,
 * which would start a {comment}).  To cover that we have {quotefail}.
 * The actions for {quotestop} and {quotefail} must throw back characters
 * beyond the quote proper.
 */
/* Bit string
 * It is tempting to scan the string for only those characters
 * which are allowed. However, this leads to silently swallowed
 * characters if illegal characters are included in the string.
 * For example, if xbinside is [01] then B'ABCD' is interpreted
 * as a zero-length string, and the ABCD' is lost!
 * Better to pass the string forward and let the input routines
 * validate the contents.
 */
/* Hexadecimal number */
/* National character */
/* Quoted string that allows backslash escapes */
/* Extended quote
 * xqdouble implements embedded quote, ''''
 */
/* $foo$ style quotes ("dollar quoting")
 * The quoted string starts with $foo$ where "foo" is an optional string
 * in the form of an identifier, except that it may not contain "$",
 * and extends to the first occurrence of an identical string.
 * There is *no* processing of the quoted text.
 *
 * {dolqfailed} is an error rule to avoid scanner backup when {dolqdelim}
 * fails to match its trailing "$".
 */
/* Double quote
 * Allows embedded spaces and other special characters into identifiers.
 */
/* Unicode escapes */
/* error rule to avoid backup */
/* Quoted identifier with Unicode escapes */
/* Quoted string with Unicode escapes */
/* Optional UESCAPE after a quoted string or identifier with Unicode escapes. */
/* error rule to avoid backup */
/* C-style comments
 *
 * The "extended comment" syntax closely resembles allowable operator syntax.
 * The tricky part here is to get lex to recognize a string starting with
 * slash-star as a comment, when interpreting it as an operator would produce
 * a longer match --- remember lex will prefer a longer match!  Also, if we
 * have something like plus-slash-star, lex will think this is a 3-character
 * operator whereas we want to see it as a + operator and a comment start.
 * The solution is two-fold:
 * 1. append {op_chars}* to xcstart so that it matches as much text as
 *    {operator} would. Then the tie-breaker (first matching rule of same
 *    length) ensures xcstart wins.  We put back the extra stuff with yyless()
 *    in case it contains a star-slash that should terminate the comment.
 * 2. In the operator rule, check for slash-star within the operator, and
 *    if found throw it back with yyless().  This handles the plus-slash-star
 *    problem.
 * Dash-dash comments have similar interactions with the operator rule.
 */
/* Assorted special-case operators and operator-like tokens */
/* " */
/*
 * These operator-like tokens (unlike the above ones) also match the {operator}
 * rule, which means that they might be overridden by a longer match if they
 * are followed by a comment start or a + or - character. Accordingly, if you
 * add to this list, you must also add corresponding code to the {operator}
 * block to return the correct token in such cases. (This is not needed in
 * psqlscan.l since the token value is ignored there.)
 */
/*
 * "self" is the set of chars that should be returned as single-character
 * tokens.  "op_chars" is the set of chars that can make up "Op" tokens,
 * which can be one or more characters long (but if a single-char token
 * appears in the "self" set, it is not to be returned as an Op).  Note
 * that the sets overlap, but each has some chars that are not in the other.
 *
 * If you change either set, adjust the character lists appearing in the
 * rule for "operator"!
 */
/* we no longer allow unary minus in numbers.
 * instead we pass it separately to parser. there it gets
 * coerced via doNegate() -- Leon aug 20 1999
 *
 * {decimalfail} is used because we would like "1..10" to lex as 1, dot_dot, 10.
 *
 * {realfail1} and {realfail2} are added to prevent the need for scanner
 * backup when the {real} rule fails to match completely.
 */
/*
 * Dollar quoted strings are totally opaque, and no escaping is done on them.
 * Other quoted strings must allow some special characters such as single-quote
 *  and newline.
 * Embedded single-quotes are implemented both in the SQL standard
 *  style of two adjacent single quotes "''" and in the Postgres/Java style
 *  of escaped-quote "\'".
 * Other embedded escaped characters are matched explicitly and the leading
 *  backslash is dropped from the string.
 * Note that xcstart must appear before operator, as explained above!
 *  Also whitespace (comment) must appear before operator.
 */
#line 1307 "third_party/libpg_query/src_backend_parser_scan.cpp"

#define INITIAL 0
#define xb 1
#define xc 2
#define xd 3
#define xh 4
#define xe 5
#define xq 6
#define xdolq 7
#define xui 8
#define xuiend 9
#define xus 10
#define xusend 11
#define xeu 12

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			yy_size_t yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */
		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 404 "third_party/libpg_query/scan.l"


#line 1596 "third_party/libpg_query/src_backend_parser_scan.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 297 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 296 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 406 "third_party/libpg_query/scan.l"
{
					/* ignore */
				}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 410 "third_party/libpg_query/scan.l"
{
					/* Set location in case of syntax error in comment */
					SET_YYLLOC();
					yyextra->xcdepth = 0;
					BEGIN(xc);
					/* Put back any characters past slash-star; see above */
					yyless(2);
				}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 419 "third_party/libpg_query/scan.l"
{
					(yyextra->xcdepth)++;
					/* Put back any characters past slash-star; see above */
					yyless(2);
				}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 425 "third_party/libpg_query/scan.l"
{
					if (yyextra->xcdepth <= 0)
						BEGIN(INITIAL);
					else
						(yyextra->xcdepth)--;
				}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 432 "third_party/libpg_query/scan.l"
{
					/* ignore */
				}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 436 "third_party/libpg_query/scan.l"
{
					/* ignore */
				}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 440 "third_party/libpg_query/scan.l"
{
					/* ignore */
				}
	YY_BREAK
case YY_STATE_EOF(xc):
#line 444 "third_party/libpg_query/scan.l"
{ yyerror("unterminated /* comment"); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 446 "third_party/libpg_query/scan.l"
{
					/* Binary bit type.
					 * At some point we should simply pass the string
					 * forward to the parser and label it there.
					 * In the meantime, place a leading "b" on the string
					 * to mark it for the input routine as a binary string.
					 */
					SET_YYLLOC();
					BEGIN(xb);
					startlit();
					addlitchar('b', yyscanner);
				}
	YY_BREAK
case 9:
/* rule 9 can match eol */
#line 459 "third_party/libpg_query/scan.l"
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 459 "third_party/libpg_query/scan.l"
{
					yyless(1);
					BEGIN(INITIAL);
					yylval->str = litbufdup(yyscanner);
					return BCONST;
				}
	YY_BREAK
case 11:
/* rule 11 can match eol */
#line 466 "third_party/libpg_query/scan.l"
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 466 "third_party/libpg_query/scan.l"
{
					addlit(yytext, yyleng, yyscanner);
				}
	YY_BREAK
case 13:
/* rule 13 can match eol */
#line 470 "third_party/libpg_query/scan.l"
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 470 "third_party/libpg_query/scan.l"
{
					/* ignore */
				}
	YY_BREAK
case YY_STATE_EOF(xb):
#line 473 "third_party/libpg_query/scan.l"
{ yyerror("unterminated bit string literal"); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 475 "third_party/libpg_query/scan.l"
{
					/* Hexadecimal bit type.
					 * At some point we should simply pass the string
					 * forward to the parser and label it there.
					 * In the meantime, place a leading "x" on the string
					 * to mark it for the input routine as a hex string.
					 */
					SET_YYLLOC();
					BEGIN(xh);
					startlit();
					addlitchar('x', yyscanner);
				}
	YY_BREAK
case 16:
/* rule 16 can match eol */
#line 488 "third_party/libpg_query/scan.l"
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 488 "third_party/libpg_query/scan.l"
{
					yyless(1);
					BEGIN(INITIAL);
					yylval->str = litbufdup(yyscanner);
					return XCONST;
				}
	YY_BREAK
case YY_STATE_EOF(xh):
#line 494 "third_party/libpg_query/scan.l"
{ yyerror("unterminated hexadecimal string literal"); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 496 "third_party/libpg_query/scan.l"
{
					/* National character.
					 * We will pass this along as a normal character string,
					 * but preceded with an internally-generated "NCHAR".
					 */
					const PGScanKeyword *keyword;

					SET_YYLLOC();
					yyless(1);	/* eat only 'n' this time */

					keyword = ScanKeywordLookup("nchar",
												yyextra->keywords,
												yyextra->num_keywords);
					if (keyword != NULL)
					{
						yylval->keyword = keyword->name;
						return keyword->value;
					}
					else
					{
						/* If NCHAR isn't a keyword, just return "n" */
						yylval->str = pstrdup("n");
						return IDENT;
					}
				}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 522 "third_party/libpg_query/scan.l"
{
					yyextra->warn_on_first_escape = true;
					yyextra->saw_non_ascii = false;
					SET_YYLLOC();
					if (yyextra->standard_conforming_strings)
						BEGIN(xq);
					else
						BEGIN(xe);
					startlit();
				}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 532 "third_party/libpg_query/scan.l"
{
					yyextra->warn_on_first_escape = false;
					yyextra->saw_non_ascii = false;
					SET_YYLLOC();
					BEGIN(xe);
					startlit();
				}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 539 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					if (!yyextra->standard_conforming_strings)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("unsafe use of string constant with Unicode escapes"),
								 errdetail("String constants with Unicode escapes cannot be used when standard_conforming_strings is off."),
								 lexer_errposition()));
					BEGIN(xus);
					startlit();
				}
	YY_BREAK
case 22:
/* rule 22 can match eol */
#line 551 "third_party/libpg_query/scan.l"
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 551 "third_party/libpg_query/scan.l"
{
					yyless(1);
					BEGIN(INITIAL);
					/*
					 * check that the data remains valid if it might have been
					 * made invalid by unescaping any chars.
					 */
					if (yyextra->saw_non_ascii)
						pg_verifymbstr(yyextra->literalbuf,
									   yyextra->literallen,
									   false);
					yylval->str = litbufdup(yyscanner);
					return SCONST;
				}
	YY_BREAK
case 24:
/* rule 24 can match eol */
#line 566 "third_party/libpg_query/scan.l"
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 566 "third_party/libpg_query/scan.l"
{
					/* throw back all but the quote */
					yyless(1);
					/* xusend state looks for possible UESCAPE */
					BEGIN(xusend);
				}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 572 "third_party/libpg_query/scan.l"
{
					/* stay in xusend state over whitespace */
				}
	YY_BREAK
case YY_STATE_EOF(xusend):
#line 575 "third_party/libpg_query/scan.l"
case 27:
/* rule 27 can match eol */
#line 577 "third_party/libpg_query/scan.l"
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 577 "third_party/libpg_query/scan.l"
{
					/* no UESCAPE after the quote, throw back everything */
					yyless(0);
					BEGIN(INITIAL);
					yylval->str = litbuf_udeescape('\\', yyscanner);
					return SCONST;
				}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 584 "third_party/libpg_query/scan.l"
{
					/* found UESCAPE after the end quote */
					BEGIN(INITIAL);
					if (!check_uescapechar(yytext[yyleng - 2]))
					{
						SET_YYLLOC();
						ADVANCE_YYLLOC(yyleng - 2);
						yyerror("invalid Unicode escape character");
					}
					yylval->str = litbuf_udeescape(yytext[yyleng - 2],
												   yyscanner);
					return SCONST;
				}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 597 "third_party/libpg_query/scan.l"
{
					addlitchar('\'', yyscanner);
				}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 600 "third_party/libpg_query/scan.l"
{
					addlit(yytext, yyleng, yyscanner);
				}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 603 "third_party/libpg_query/scan.l"
{
					addlit(yytext, yyleng, yyscanner);
				}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 606 "third_party/libpg_query/scan.l"
{
					pg_wchar	c = strtoul(yytext + 2, NULL, 16);

					check_escape_warning(yyscanner);

					if (is_utf16_surrogate_first(c))
					{
						yyextra->utf16_first_part = c;
						BEGIN(xeu);
					}
					else if (is_utf16_surrogate_second(c))
						yyerror("invalid Unicode surrogate pair");
					else
						addunicode(c, yyscanner);
				}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 621 "third_party/libpg_query/scan.l"
{
					pg_wchar	c = strtoul(yytext + 2, NULL, 16);

					if (!is_utf16_surrogate_second(c))
						yyerror("invalid Unicode surrogate pair");

					c = surrogate_pair_to_codepoint(yyextra->utf16_first_part, c);

					addunicode(c, yyscanner);

					BEGIN(xe);
				}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 633 "third_party/libpg_query/scan.l"
{ yyerror("invalid Unicode surrogate pair"); }
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 634 "third_party/libpg_query/scan.l"
{ yyerror("invalid Unicode surrogate pair"); }
	YY_BREAK
case YY_STATE_EOF(xeu):
#line 635 "third_party/libpg_query/scan.l"
{ yyerror("invalid Unicode surrogate pair"); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 636 "third_party/libpg_query/scan.l"
{
					ereport(ERROR,
							(errcode(PG_ERRCODE_INVALID_ESCAPE_SEQUENCE),
							 errmsg("invalid Unicode escape"),
							 errhint("Unicode escapes must be \\uXXXX or \\UXXXXXXXX."),
							 lexer_errposition()));
				}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 643 "third_party/libpg_query/scan.l"
{
					// if (yytext[1] == '\'')
					// {
					// 	if (yyextra->backslash_quote == PG_BACKSLASH_QUOTE_OFF ||
					// 		(yyextra->backslash_quote == PG_BACKSLASH_QUOTE_SAFE_ENCODING &&
					// 		 PG_ENCODING_IS_CLIENT_ONLY(pg_get_client_encoding())))
					// 		ereport(ERROR,
					// 				(errcode(PG_ERRCODE_NONSTANDARD_USE_OF_ESCAPE_CHARACTER),
					// 				 errmsg("unsafe use of \\' in a string literal"),
					// 				 errhint("Use '' to write quotes in strings. \\' is insecure in client-only encodings."),
					// 				 lexer_errposition()));
					// }
					check_string_escape_warning(yytext[1], yyscanner);
					addlitchar(unescape_single_char(yytext[1], yyscanner),
							   yyscanner);
				}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 659 "third_party/libpg_query/scan.l"
{
					unsigned char c = strtoul(yytext + 1, NULL, 8);

					check_escape_warning(yyscanner);
					addlitchar(c, yyscanner);
					if (c == '\0' || IS_HIGHBIT_SET(c))
						yyextra->saw_non_ascii = true;
				}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 667 "third_party/libpg_query/scan.l"
{
					unsigned char c = strtoul(yytext + 2, NULL, 16);

					check_escape_warning(yyscanner);
					addlitchar(c, yyscanner);
					if (c == '\0' || IS_HIGHBIT_SET(c))
						yyextra->saw_non_ascii = true;
				}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 675 "third_party/libpg_query/scan.l"
{
					/* ignore */
				}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 678 "third_party/libpg_query/scan.l"
{
					/* This is only needed for \ just before EOF */
					addlitchar(yytext[0], yyscanner);
				}
	YY_BREAK
case YY_STATE_EOF(xq):
case YY_STATE_EOF(xe):
case YY_STATE_EOF(xus):
#line 682 "third_party/libpg_query/scan.l"
{ yyerror("unterminated quoted string"); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 684 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					yyextra->dolqstart = pstrdup(yytext);
					BEGIN(xdolq);
					startlit();
				}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 690 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					/* throw back all but the initial "$" */
					yyless(1);
					/* and treat it as {other} */
					return yytext[0];
				}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 697 "third_party/libpg_query/scan.l"
{
					if (strcmp(yytext, yyextra->dolqstart) == 0)
					{
						pfree(yyextra->dolqstart);
						yyextra->dolqstart = NULL;
						BEGIN(INITIAL);
						yylval->str = litbufdup(yyscanner);
						return SCONST;
					}
					else
					{
						/*
						 * When we fail to match $...$ to dolqstart, transfer
						 * the $... part to the output, but put back the final
						 * $ for rescanning.  Consider $delim$...$junk$delim$
						 */
						addlit(yytext, yyleng - 1, yyscanner);
						yyless(yyleng - 1);
					}
				}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 717 "third_party/libpg_query/scan.l"
{
					addlit(yytext, yyleng, yyscanner);
				}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 720 "third_party/libpg_query/scan.l"
{
					addlit(yytext, yyleng, yyscanner);
				}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 723 "third_party/libpg_query/scan.l"
{
					/* This is only needed for $ inside the quoted text */
					addlitchar(yytext[0], yyscanner);
				}
	YY_BREAK
case YY_STATE_EOF(xdolq):
#line 727 "third_party/libpg_query/scan.l"
{ yyerror("unterminated dollar-quoted string"); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 729 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					BEGIN(xd);
					startlit();
				}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 734 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					BEGIN(xui);
					startlit();
				}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 739 "third_party/libpg_query/scan.l"
{
					char	   *ident;

					BEGIN(INITIAL);
					if (yyextra->literallen == 0)
						yyerror("zero-length delimited identifier");
					ident = litbufdup(yyscanner);
					yylval->str = ident;
					return IDENT;
				}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 749 "third_party/libpg_query/scan.l"
{
					yyless(1);
					/* xuiend state looks for possible UESCAPE */
					BEGIN(xuiend);
				}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 754 "third_party/libpg_query/scan.l"
{
					/* stay in xuiend state over whitespace */
				}
	YY_BREAK
case YY_STATE_EOF(xuiend):
#line 757 "third_party/libpg_query/scan.l"
case 54:
/* rule 54 can match eol */
#line 759 "third_party/libpg_query/scan.l"
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 759 "third_party/libpg_query/scan.l"
{
					/* no UESCAPE after the quote, throw back everything */
					char	   *ident;

					yyless(0);

					BEGIN(INITIAL);
					if (yyextra->literallen == 0)
						yyerror("zero-length delimited identifier");
					ident = litbuf_udeescape('\\', yyscanner);
					yylval->str = ident;
					return IDENT;
				}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 772 "third_party/libpg_query/scan.l"
{
					/* found UESCAPE after the end quote */
					char	   *ident;

					BEGIN(INITIAL);
					if (yyextra->literallen == 0)
						yyerror("zero-length delimited identifier");
					if (!check_uescapechar(yytext[yyleng - 2]))
					{
						SET_YYLLOC();
						ADVANCE_YYLLOC(yyleng - 2);
						yyerror("invalid Unicode escape character");
					}
					ident = litbuf_udeescape(yytext[yyleng - 2], yyscanner);
					yylval->str = ident;
					return IDENT;
				}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 789 "third_party/libpg_query/scan.l"
{
					addlitchar('"', yyscanner);
				}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 792 "third_party/libpg_query/scan.l"
{
					addlit(yytext, yyleng, yyscanner);
				}
	YY_BREAK
case YY_STATE_EOF(xd):
case YY_STATE_EOF(xui):
#line 795 "third_party/libpg_query/scan.l"
{ yyerror("unterminated quoted identifier"); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 797 "third_party/libpg_query/scan.l"
{
					char	   *ident;

					SET_YYLLOC();
					/* throw back all but the initial u/U */
					yyless(1);
					/* and treat it as {identifier} */
					ident = downcase_truncate_identifier(yytext, yyleng, true);
					yylval->str = ident;
					return IDENT;
				}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 809 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					return TYPECAST;
				}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 814 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					return DOT_DOT;
				}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 819 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					return COLON_EQUALS;
				}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 824 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					return LAMBDA_ARROW;
				}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 829 "third_party/libpg_query/scan.l"
{
                    SET_YYLLOC();
                    return DOUBLE_ARROW;
                		}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 834 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					return POWER_OF;
				}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 839 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					return INTEGER_DIVISION;
				}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 844 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					return EQUALS_GREATER;
				}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 849 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					return LESS_EQUALS;
				}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 854 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					return GREATER_EQUALS;
				}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 859 "third_party/libpg_query/scan.l"
{
					/* We accept both "<>" and "!=" as meaning NOT_EQUALS */
					SET_YYLLOC();
					return NOT_EQUALS;
				}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 865 "third_party/libpg_query/scan.l"
{
					/* We accept both "<>" and "!=" as meaning NOT_EQUALS */
					SET_YYLLOC();
					return NOT_EQUALS;
				}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 871 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					return yytext[0];
				}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 876 "third_party/libpg_query/scan.l"
{
					/*
					 * Check for embedded slash-star or dash-dash; those
					 * are comment starts, so operator must stop there.
					 * Note that slash-star or dash-dash at the first
					 * character will match a prior rule, not this one.
					 */
					int			nchars = yyleng;
					char	   *slashstar = strstr(yytext, "/*"); /* slash star */
					char	   *dashdash = strstr(yytext, "--");

					if (slashstar && dashdash) {
						/* if both appear, take the first one */
						if (slashstar > dashdash)
							slashstar = dashdash;
					} else if (!slashstar) {
						slashstar = dashdash;
					}
					if (slashstar) {
						nchars = slashstar - yytext;
					}

					/*
					 * For SQL compatibility, '+' and '-' cannot be the
					 * last char of a multi-char operator unless the operator
					 * contains chars that are not in SQL operators.
					 * The idea is to lex '=-' as two operators, but not
					 * to forbid operator names like '?-' that could not be
					 * sequences of SQL operators.
					 */
					while (nchars > 1 &&
						(yytext[nchars - 1] == '+' ||
						 yytext[nchars - 1] == '-'))
					{
						int			ic;

						for (ic = nchars - 2; ic >= 0; ic--)
						{
							if (strchr("~!@^&|`?%", yytext[ic]))
								break;
						}
						if (ic >= 0)
							break; /* found a char that makes it OK */
						nchars--; /* else remove the +/-, and check again */
					}

					/* We don't accept leading ? in any multi-character operators
					* except for those in use by hstore, JSON and geometric operators.
					*
					* We don't accept contained or trailing ? in any
					* multi-character operators.
					*
					* This is necessary in order to support normalized queries without
					* spacing between ? as a substition character and a simple operator (e.g. "?=?")
					*/
					if (yytext[0] == '?' &&
						strcmp(yytext, "?|") != 0 && strcmp(yytext, "?&") != 0 &&
						strcmp(yytext, "?-") != 0 &&
						strcmp(yytext, "?-|") != 0 && strcmp(yytext, "?||") != 0) {
						nchars = 1;
					}

					if (yytext[0] != '?' && strchr(yytext, '?')) {
						/* Lex up to just before the ? character */
						nchars = strchr(yytext, '?') - yytext;
					}

					SET_YYLLOC();

					if ((yy_size_t) nchars < yyleng)
					{
						/* Strip the unwanted chars from the token */
						yyless(nchars);
						/*
						 * If what we have left is only one char, and it's
						 * one of the characters matching "self", then
						 * return it as a character token the same way
						 * that the "self" rule would have.
						 */
						if (nchars == 1 &&
							strchr(",()[].;:+-*/%^<>=?", yytext[0])) {
							return yytext[0];
						}
						/*
						 * Likewise, if what we have left is two chars, and
						 * those match the tokens ">=", "<=", "=>", "<>" or
						 * "!=", then we must return the appropriate token
						 * rather than the generic Op.
						 */
						if (nchars == 2)
						{
							if (yytext[0] == '=' && yytext[1] == '>')
								return EQUALS_GREATER;
							if (yytext[0] == '>' && yytext[1] == '=')
								return GREATER_EQUALS;
							if (yytext[0] == '<' && yytext[1] == '=')
								return LESS_EQUALS;
							if (yytext[0] == '<' && yytext[1] == '>')
								return NOT_EQUALS;
							if (yytext[0] == '!' && yytext[1] == '=')
								return NOT_EQUALS;
						}
					}

					/*
					 * Complain if operator is too long.  Unlike the case
					 * for identifiers, we make this an error not a notice-
					 * and-truncate, because the odds are we are looking at
					 * a syntactic mistake anyway. NAMEDDATALEN
					 */
					if (nchars >= 64)
						yyerror("operator too long: operators longer than 64 bytes are not supported");

					yylval->str = pstrdup(yytext);
					return Op;
				}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 993 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					yylval->ival = atol(yytext + 1);
					return PARAM;
				}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 999 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					yylval->ival = atol(yytext + 1);
					return PARAM;
				}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 1005 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					return process_integer_literal(yytext, yylval);
				}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 1009 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					yylval->str = pstrdup(yytext);
					return FCONST;
				}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 1014 "third_party/libpg_query/scan.l"
{
					/* throw back the .., and treat as integer */
					yyless(yyleng - 2);
					SET_YYLLOC();
					return process_integer_literal(yytext, yylval);
				}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 1020 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					yylval->str = pstrdup(yytext);
					return FCONST;
				}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 1025 "third_party/libpg_query/scan.l"
{
					/*
					 * throw back the [Ee], and treat as {decimal}.  Note
					 * that it is possible the input is actually {integer},
					 * but since this case will almost certainly lead to a
					 * syntax error anyway, we don't bother to distinguish.
					 */
					yyless(yyleng - 1);
					SET_YYLLOC();
					yylval->str = pstrdup(yytext);
					return FCONST;
				}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 1037 "third_party/libpg_query/scan.l"
{
					/* throw back the [Ee][+-], and proceed as above */
					yyless(yyleng - 2);
					SET_YYLLOC();
					yylval->str = pstrdup(yytext);
					return FCONST;
				}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 1046 "third_party/libpg_query/scan.l"
{
					const PGScanKeyword *keyword;
					char	   *ident;
					char       *keyword_text = pstrdup(yytext);

					SET_YYLLOC();

					if (yytext[yyleng - 1] == '?') {
						keyword_text[yyleng - 1] = '\0';
					}

					/* Is it a keyword? */
					keyword = ScanKeywordLookup(keyword_text,
												yyextra->keywords,
												yyextra->num_keywords);
					if (keyword != NULL)
					{
						if (keyword_text[yyleng - 1] == '\0') {
							yyless(yyleng - 1);
						}
						yylval->keyword = keyword_text;
						return keyword->value;
					}

					/*
					 * No.  Convert the identifier to lower case, and truncate
					 * if necessary.
					 */
					ident = downcase_truncate_identifier(yytext, yyleng, true);
					yylval->str = ident;
					return IDENT;
				}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 1079 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					return yytext[0];
				}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 1084 "third_party/libpg_query/scan.l"
{
					SET_YYLLOC();
					yyterminate();
				}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 1089 "third_party/libpg_query/scan.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2667 "third_party/libpg_query/src_backend_parser_scan.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 297 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 297 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 296);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	//( stderr, "%s\n", msg );
	throw std::runtime_error(msg); // YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

#define YYTABLES_NAME "yytables"

#line 1089 "third_party/libpg_query/scan.l"


/* LCOV_EXCL_STOP */

/*
 * Arrange access to yyextra for subroutines of the main yylex() function.
 * We expect each subroutine to have a yyscanner parameter.  Rather than
 * use the yyget_xxx functions, which might or might not get inlined by the
 * compiler, we cheat just a bit and cast yyscanner to the right type.
 */
#undef yyextra
#define yyextra  (((struct yyguts_t *) yyscanner)->yyextra_r)

/* Likewise for a couple of other things we need. */
#undef yylloc
#define yylloc	(((struct yyguts_t *) yyscanner)->yylloc_r)
#undef yyleng
#define yyleng	(((struct yyguts_t *) yyscanner)->yyleng_r)


/*
 * scanner_errposition
 *		Report a lexer or grammar error cursor position, if possible.
 *
 * This is expected to be used within an ereport() call.  The return value
 * is a dummy (always 0, in fact).
 *
 * Note that this can only be used for messages emitted during raw parsing
 * (essentially, scan.l and gram.y), since it requires the yyscanner struct
 * to still be available.
 */
int
scanner_errposition(int location, core_yyscan_t yyscanner)
{
	int			pos;

	if (location < 0)
		return 0;				/* no-op if location is unknown */

	/* Convert byte offset to character number */
	pos = pg_mbstrlen_with_len(yyextra->scanbuf, location) + 1;
	/* And pass it to the ereport mechanism */
	return errposition(pos);
}

/*
 * scanner_yyerror
 *		Report a lexer or grammar error.
 *
 * The message's cursor position is whatever YYLLOC was last set to,
 * ie, the start of the current token if called within yylex(), or the
 * most recently lexed token if called from the grammar.
 * This is OK for syntax error messages from the Bison parser, because Bison
 * parsers report error as soon as the first unparsable token is reached.
 * Beware of using yyerror for other purposes, as the cursor position might
 * be misleading!
 */
void
scanner_yyerror(const char *message, core_yyscan_t yyscanner)
{
	const char *loc = yyextra->scanbuf + *yylloc;

	if (*loc == YY_END_OF_BUFFER_CHAR)
	{
		ereport(ERROR,
				(errcode(PG_ERRCODE_SYNTAX_ERROR),
		/* translator: %s is typically the translation of "syntax error" */
				 errmsg("%s at end of input", _(message)),
				 lexer_errposition()));
	}
	else
	{
		ereport(ERROR,
				(errcode(PG_ERRCODE_SYNTAX_ERROR),
		/* translator: first %s is typically the translation of "syntax error" */
				 errmsg("%s at or near \"%s\"", _(message), loc),
				 lexer_errposition()));
	}
}


/*
 * Called before any actual parsing is done
 */
core_yyscan_t
scanner_init(const char *str,
			 core_yy_extra_type *yyext,
			 const PGScanKeyword *keywords,
			 int num_keywords)
{
	PGSize		slen = strlen(str);
	yyscan_t	scanner;

	if (yylex_init(&scanner) != 0)
		elog(ERROR, "yylex_init() failed: %m");

	core_yyset_extra(yyext, scanner);

	yyext->keywords = keywords;
	yyext->num_keywords = num_keywords;

	yyext->backslash_quote = backslash_quote;
	yyext->escape_string_warning = escape_string_warning;
	yyext->standard_conforming_strings = standard_conforming_strings;

	/*
	 * Make a scan buffer with special termination needed by flex.
	 */
	yyext->scanbuf = (char *) palloc(slen + 2);
	yyext->scanbuflen = slen;
	memcpy(yyext->scanbuf, str, slen);
	yyext->scanbuf[slen] = yyext->scanbuf[slen + 1] = YY_END_OF_BUFFER_CHAR;
	yy_scan_buffer(yyext->scanbuf, slen + 2, scanner);

	/* initialize literal buffer to a reasonable but expansible size */
	yyext->literalalloc = 1024;
	yyext->literalbuf = (char *) palloc(yyext->literalalloc);
	yyext->literallen = 0;

	return scanner;
}


/*
 * Called after parsing is done to clean up after scanner_init()
 */
void
scanner_finish(core_yyscan_t yyscanner)
{
	/*
	 * We don't bother to call yylex_destroy(), because all it would do is
	 * pfree a small amount of control storage.  It's cheaper to leak the
	 * storage until the parsing context is destroyed.  The amount of space
	 * involved is usually negligible compared to the output parse tree
	 * anyway.
	 *
	 * We do bother to pfree the scanbuf and literal buffer, but only if they
	 * represent a nontrivial amount of space.  The 8K cutoff is arbitrary.
	 */
	if (yyextra->scanbuflen >= 8192)
		pfree(yyextra->scanbuf);
	if (yyextra->literalalloc >= 8192)
		pfree(yyextra->literalbuf);
}


static void
addlit(char *ytext, int yleng, core_yyscan_t yyscanner)
{
	/* enlarge buffer if needed */
	if ((yyextra->literallen + yleng) >= yyextra->literalalloc)
	{
		do
		{
			yyextra->literalalloc *= 2;
		} while ((yyextra->literallen + yleng) >= yyextra->literalalloc);
		yyextra->literalbuf = (char *) repalloc(yyextra->literalbuf,
												yyextra->literalalloc);
	}
	/* append new data */
	memcpy(yyextra->literalbuf + yyextra->literallen, ytext, yleng);
	yyextra->literallen += yleng;
}


static void
addlitchar(unsigned char ychar, core_yyscan_t yyscanner)
{
	/* enlarge buffer if needed */
	if ((yyextra->literallen + 1) >= yyextra->literalalloc)
	{
		yyextra->literalalloc *= 2;
		yyextra->literalbuf = (char *) repalloc(yyextra->literalbuf,
												yyextra->literalalloc);
	}
	/* append new data */
	yyextra->literalbuf[yyextra->literallen] = ychar;
	yyextra->literallen += 1;
}


/*
 * Create a palloc'd copy of literalbuf, adding a trailing null.
 */
static char *
litbufdup(core_yyscan_t yyscanner)
{
	int			llen = yyextra->literallen;
	char	   *newbuf;

	newbuf = (char*) palloc(llen + 1);
	memcpy(newbuf, yyextra->literalbuf, llen);
	newbuf[llen] = '\0';
	return newbuf;
}

static int
process_integer_literal(const char *token, YYSTYPE *lval)
{
	long		val;
	char	   *endptr;

	errno = 0;
	val = strtol(token, &endptr, 10);
	if (*endptr != '\0' || errno == ERANGE
	/* if long > 32 bits, check for overflow of int4_t */
		|| val != (long) ((int32_t) val) )
	{
		/* integer too large, treat it as a float */
		lval->str = pstrdup(token);
		return FCONST;
	}
	lval->ival = val;
	return ICONST;
}

static unsigned int
hexval(unsigned char c)
{
	if (c >= '0' && c <= '9')
		return c - '0';
	if (c >= 'a' && c <= 'f')
		return c - 'a' + 0xA;
	if (c >= 'A' && c <= 'F')
		return c - 'A' + 0xA;
	elog(ERROR, "invalid hexadecimal digit");
	return 0;					/* not reached */
}

static void
check_unicode_value(pg_wchar c, char *loc, core_yyscan_t yyscanner)
{
	// database encoding is always UTF8
	// if (GetDatabaseEncoding() == PG_UTF8)
	// 	return;

	// if (c > 0x7F)
	// {
	// 	ADVANCE_YYLLOC(loc - yyextra->literalbuf + 3);	/* 3 for U&" */
	// 	yyerror("Unicode escape values cannot be used for code point values above 007F when the server encoding is not UTF8");
	// }
}

static bool
is_utf16_surrogate_first(pg_wchar c)
{
	return (c >= 0xD800 && c <= 0xDBFF);
}

static bool
is_utf16_surrogate_second(pg_wchar c)
{
	return (c >= 0xDC00 && c <= 0xDFFF);
}

static pg_wchar
surrogate_pair_to_codepoint(pg_wchar first, pg_wchar second)
{
	return ((first & 0x3FF) << 10) + 0x10000 + (second & 0x3FF);
}

static void
addunicode(pg_wchar c, core_yyscan_t yyscanner)
{
	char		buf[8];

	if (c == 0 || c > 0x10FFFF)
		yyerror("invalid Unicode escape value");
	if (c > 0x7F)
	{
		// if (GetDatabaseEncoding() != PG_UTF8)
		// 	yyerror("Unicode escape values cannot be used for code point values above 007F when the server encoding is not UTF8");
		yyextra->saw_non_ascii = true;
	}
	unicode_to_utf8(c, (unsigned char *) buf);
	addlit(buf, pg_mblen(buf), yyscanner);
}

/* is 'escape' acceptable as Unicode escape character (UESCAPE syntax) ? */
static bool
check_uescapechar(unsigned char escape)
{
	if (isxdigit(escape)
		|| escape == '+'
		|| escape == '\''
		|| escape == '"'
		|| scanner_isspace(escape))
	{
		return false;
	}
	else
		return true;
}

/* like litbufdup, but handle unicode escapes */
static char *
litbuf_udeescape(unsigned char escape, core_yyscan_t yyscanner)
{
	char	   *newbuf;
	char	   *litbuf,
			   *in,
			   *out;
	pg_wchar	pair_first = 0;

	/* Make literalbuf null-terminated to simplify the scanning loop */
	litbuf = yyextra->literalbuf;
	litbuf[yyextra->literallen] = '\0';

	/*
	 * This relies on the subtle assumption that a UTF-8 expansion cannot be
	 * longer than its escaped representation.
	 */
	newbuf = (char*) palloc(yyextra->literallen + 1);

	in = litbuf;
	out = newbuf;
	while (*in)
	{
		if (in[0] == escape)
		{
			if (in[1] == escape)
			{
				if (pair_first)
				{
					ADVANCE_YYLLOC(in - litbuf + 3);	/* 3 for U&" */
					yyerror("invalid Unicode surrogate pair");
				}
				*out++ = escape;
				in += 2;
			}
			else if (isxdigit((unsigned char) in[1]) &&
					 isxdigit((unsigned char) in[2]) &&
					 isxdigit((unsigned char) in[3]) &&
					 isxdigit((unsigned char) in[4]))
			{
				pg_wchar	unicode;

				unicode = (hexval(in[1]) << 12) +
					(hexval(in[2]) << 8) +
					(hexval(in[3]) << 4) +
					hexval(in[4]);
				check_unicode_value(unicode, in, yyscanner);
				if (pair_first)
				{
					if (is_utf16_surrogate_second(unicode))
					{
						unicode = surrogate_pair_to_codepoint(pair_first, unicode);
						pair_first = 0;
					}
					else
					{
						ADVANCE_YYLLOC(in - litbuf + 3);		/* 3 for U&" */
						yyerror("invalid Unicode surrogate pair");
					}
				}
				else if (is_utf16_surrogate_second(unicode))
					yyerror("invalid Unicode surrogate pair");

				if (is_utf16_surrogate_first(unicode))
					pair_first = unicode;
				else
				{
					unicode_to_utf8(unicode, (unsigned char *) out);
					out += pg_mblen(out);
				}
				in += 5;
			}
			else if (in[1] == '+' &&
					 isxdigit((unsigned char) in[2]) &&
					 isxdigit((unsigned char) in[3]) &&
					 isxdigit((unsigned char) in[4]) &&
					 isxdigit((unsigned char) in[5]) &&
					 isxdigit((unsigned char) in[6]) &&
					 isxdigit((unsigned char) in[7]))
			{
				pg_wchar	unicode;

				unicode = (hexval(in[2]) << 20) +
					(hexval(in[3]) << 16) +
					(hexval(in[4]) << 12) +
					(hexval(in[5]) << 8) +
					(hexval(in[6]) << 4) +
					hexval(in[7]);
				check_unicode_value(unicode, in, yyscanner);
				if (pair_first)
				{
					if (is_utf16_surrogate_second(unicode))
					{
						unicode = surrogate_pair_to_codepoint(pair_first, unicode);
						pair_first = 0;
					}
					else
					{
						ADVANCE_YYLLOC(in - litbuf + 3);		/* 3 for U&" */
						yyerror("invalid Unicode surrogate pair");
					}
				}
				else if (is_utf16_surrogate_second(unicode))
					yyerror("invalid Unicode surrogate pair");

				if (is_utf16_surrogate_first(unicode))
					pair_first = unicode;
				else
				{
					unicode_to_utf8(unicode, (unsigned char *) out);
					out += pg_mblen(out);
				}
				in += 8;
			}
			else
			{
				ADVANCE_YYLLOC(in - litbuf + 3);		/* 3 for U&" */
				yyerror("invalid Unicode escape value");
			}
		}
		else
		{
			if (pair_first)
			{
				ADVANCE_YYLLOC(in - litbuf + 3);		/* 3 for U&" */
				yyerror("invalid Unicode surrogate pair");
			}
			*out++ = *in++;
		}
	}

	/* unfinished surrogate pair? */
	if (pair_first)
	{
		ADVANCE_YYLLOC(in - litbuf + 3);				/* 3 for U&" */
		yyerror("invalid Unicode surrogate pair");
	}

	*out = '\0';

	/*
	 * We could skip pg_verifymbstr if we didn't process any non-7-bit-ASCII
	 * codes; but it's probably not worth the trouble, since this isn't likely
	 * to be a performance-critical path.
	 */
	pg_verifymbstr(newbuf, out - newbuf, false);
	return newbuf;
}

static unsigned char
unescape_single_char(unsigned char c, core_yyscan_t yyscanner)
{
	switch (c)
	{
		case 'b':
			return '\b';
		case 'f':
			return '\f';
		case 'n':
			return '\n';
		case 'r':
			return '\r';
		case 't':
			return '\t';
		default:
			/* check for backslash followed by non-7-bit-ASCII */
			if (c == '\0' || IS_HIGHBIT_SET(c))
				yyextra->saw_non_ascii = true;

			return c;
	}
}

static void
check_string_escape_warning(unsigned char ychar, core_yyscan_t yyscanner)
{
	if (ychar == '\'')
	{
		if (yyextra->warn_on_first_escape && yyextra->escape_string_warning)
			ereport(PGWARNING,
					(errcode(PG_ERRCODE_NONSTANDARD_USE_OF_ESCAPE_CHARACTER),
					 errmsg("nonstandard use of \\' in a string literal"),
					 errhint("Use '' to write quotes in strings, or use the escape string syntax (E'...')."),
					 lexer_errposition()));
		yyextra->warn_on_first_escape = false;	/* warn only once per string */
	}
	else if (ychar == '\\')
	{
		if (yyextra->warn_on_first_escape && yyextra->escape_string_warning)
			ereport(PGWARNING,
					(errcode(PG_ERRCODE_NONSTANDARD_USE_OF_ESCAPE_CHARACTER),
					 errmsg("nonstandard use of \\\\ in a string literal"),
					 errhint("Use the escape string syntax for backslashes, e.g., E'\\\\'."),
					 lexer_errposition()));
		yyextra->warn_on_first_escape = false;	/* warn only once per string */
	}
	else
		check_escape_warning(yyscanner);
}

static void
check_escape_warning(core_yyscan_t yyscanner)
{
	if (yyextra->warn_on_first_escape && yyextra->escape_string_warning)
		ereport(PGWARNING,
				(errcode(PG_ERRCODE_NONSTANDARD_USE_OF_ESCAPE_CHARACTER),
				 errmsg("nonstandard use of escape in a string literal"),
		errhint("Use the escape string syntax for escapes, e.g., E'\\r\\n'."),
				 lexer_errposition()));
	yyextra->warn_on_first_escape = false;		/* warn only once per string */
}

/*
 * Interface functions to make flex use palloc() instead of malloc().
 * It'd be better to make these static, but flex insists otherwise.
 */

void *
core_yyalloc(yy_size_t bytes, core_yyscan_t yyscanner)
{
	return palloc(bytes);
}

void *
core_yyrealloc(void *ptr, yy_size_t bytes, core_yyscan_t yyscanner)
{
	if (ptr)
		return repalloc(ptr, bytes);
	else
		return palloc(bytes);
}

void
core_yyfree(void *ptr, core_yyscan_t yyscanner)
{
	if (ptr)
		pfree(ptr);
}

#undef yyerror
#undef yylloc
#undef yylval
#undef yyin
#undef yyout
#undef yyextra
#undef yyleng
#undef yytext
#undef yylineno
#undef yycolumn
#undef yy_flex_debug
#undef yyless
#undef YYSTYPE
#undef YY_EXTRA_TYPE
#undef SET_YYLLOC
#undef ADVANCE_YYLLOC
#undef BEGIN
#undef REJECT
#undef INITIAL
#undef xb
#undef xc
#undef xd
#undef xh
#undef xe
#undef xq
#undef xdolq
#undef xui
#undef xuiend
#undef xus
#undef xusend
#undef xeu
#undef ECHO


} /* duckdb_libpgquery */


// LICENSE_CHANGE_END


// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #14
// See the end of this file for a list

/*--------------------------------------------------------------------
 * Symbols referenced in this file:
 * - truncate_identifier
 * - downcase_truncate_identifier
 * - downcase_identifier
 * - scanner_isspace
 *--------------------------------------------------------------------
 */

/*-------------------------------------------------------------------------
 *
 * scansup.c
 *	  support routines for the lex/flex scanner, used by both the normal
 * backend as well as the bootstrap backend
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/scansup.c
 *
 *-------------------------------------------------------------------------
 */

#include <string.h>

#include <ctype.h>




namespace duckdb_libpgquery {

/* ----------------
 *		scanstr
 *
 * if the string passed in has escaped codes, map the escape codes to actual
 * chars
 *
 * the string returned is palloc'd and should eventually be pfree'd by the
 * caller!
 * ----------------
 */

/*
 * downcase_truncate_identifier() --- do appropriate downcasing and
 * truncation of an unquoted identifier.  Optionally warn of truncation.
 *
 * Returns a palloc'd string containing the adjusted identifier.
 *
 * Note: in some usages the passed string is not null-terminated.
 *
 * Note: the API of this function is designed to allow for downcasing
 * transformations that increase the string length, but we don't yet
 * support that.  If you want to implement it, you'll need to fix
 * SplitIdentifierString() in utils/adt/varlena.c.
 */
char *downcase_truncate_identifier(const char *ident, int len, bool warn) {
	return downcase_identifier(ident, len, warn, true);
}

static __thread bool pg_preserve_identifier_case = false;

void set_preserve_identifier_case(bool preserve) {
	pg_preserve_identifier_case = preserve;
}

bool get_preserve_identifier_case() {
	return pg_preserve_identifier_case;
}

/*
 * a workhorse for downcase_truncate_identifier
 */
char *downcase_identifier(const char *ident, int len, bool warn, bool truncate) {
	char *result;
	int i;
	bool enc_is_single_byte;

	result = (char *)palloc(len + 1);
	enc_is_single_byte = pg_database_encoding_max_length() == 1;

	/*
	 * SQL99 specifies Unicode-aware case normalization, which we don't yet
	 * have the infrastructure for.  Instead we use tolower() to provide a
	 * locale-aware translation.  However, there are some locales where this
	 * is not right either (eg, Turkish may do strange things with 'i' and
	 * 'I').  Our current compromise is to use tolower() for characters with
	 * the high bit set, as long as they aren't part of a multi-byte
	 * character, and use an ASCII-only downcasing for 7-bit characters.
	 */
	for (i = 0; i < len; i++) {
		unsigned char ch = (unsigned char)ident[i];

		if (!get_preserve_identifier_case()) {
			if (ch >= 'A' && ch <= 'Z')
				ch += 'a' - 'A';
			else if (enc_is_single_byte && IS_HIGHBIT_SET(ch) && isupper(ch))
				ch = tolower(ch);
		}
		result[i] = (char)ch;
	}
	result[i] = '\0';

	return result;
}

/*
 * scanner_isspace() --- return true if flex scanner considers char whitespace
 *
 * This should be used instead of the potentially locale-dependent isspace()
 * function when it's important to match the lexer's behavior.
 *
 * In principle we might need similar functions for isalnum etc, but for the
 * moment only isspace seems needed.
 */
bool scanner_isspace(char ch) {
	/* This must match scan.l's list of {space} characters */
	if (ch == ' ' || ch == '\t' || ch == '\n' || ch == '\r' || ch == '\f')
		return true;
	return false;
}
}

// LICENSE_CHANGE_END


// LICENSE_CHANGE_BEGIN
// The following code up to LICENSE_CHANGE_END is subject to THIRD PARTY LICENSE #14
// See the end of this file for a list

/*--------------------------------------------------------------------
 * Symbols referenced in this file:
 * - ScanKeywords
 * - NumScanKeywords
 * - ScanKeywordLookup
 *--------------------------------------------------------------------
 */

/*-------------------------------------------------------------------------
 *
 * keywords.c
 *	  lexical token lookup for key words in PostgreSQL
 *
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/common/keywords.c
 *
 *-------------------------------------------------------------------------
 */

#include <string.h>
#include <string>
#include <memory>





namespace duckdb_libpgquery {

/*
 * ScanKeywordLookup - see if a given word is a keyword
 *
 * The table to be searched is passed explicitly, so that this can be used
 * to search keyword lists other than the standard list appearing above.
 *
 * Returns a pointer to the PGScanKeyword table entry, or NULL if no match.
 *
 * The match is done case-insensitively.  Note that we deliberately use a
 * dumbed-down case conversion that will only translate 'A'-'Z' into 'a'-'z',
 * even if we are in a locale where tolower() would produce more or different
 * translations.  This is to conform to the SQL99 spec, which says that
 * keywords are to be matched in this way even though non-keyword identifiers
 * receive a different case-normalization mapping.
 */
const PGScanKeyword *ScanKeywordLookup(const char *text, const PGScanKeyword *keywords, int num_keywords) {
	int len, i;
	const PGScanKeyword *low;
	const PGScanKeyword *high;

	len = strlen(text);
	auto data = std::unique_ptr<char[]>(new char[len + 1]);
	auto word = data.get();
	/* We assume all keywords are shorter than NAMEDATALEN. */

	/*
	 * Apply an ASCII-only downcasing.  We must not use tolower() since it may
	 * produce the wrong translation in some locales (eg, Turkish).
	 */
	for (i = 0; i < len; i++) {
		char ch = text[i];

		if (ch >= 'A' && ch <= 'Z')
			ch += 'a' - 'A';
		word[i] = ch;
	}
	word[len] = '\0';

	/*
	 * Now do a binary search using plain strcmp() comparison.
	 */
	low = keywords;
	high = keywords + (num_keywords - 1);
	while (low <= high) {
		const PGScanKeyword *middle;
		int difference;

		middle = low + (high - low) / 2;
		difference = strcmp(middle->name, word);
		if (difference == 0)
			return middle;
		else if (difference < 0)
			low = middle + 1;
		else
			high = middle - 1;
	}

	return NULL;
}
}

// LICENSE_CHANGE_END
