/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "velox/common/encode/Base64.h"
#include "velox/common/hyperloglog/DenseHll.h"
#include "velox/common/hyperloglog/SparseHll.h"
#include "velox/common/memory/HashStringAllocator.h"
#include "velox/functions/prestosql/tests/CastBaseTest.h"
#include "velox/functions/prestosql/types/HyperLogLogType.h"
#include "velox/functions/prestosql/types/P4HyperLogLogType.h"

using namespace facebook::velox;

class P4HyperLogLogCastTest : public functions::test::CastBaseTest {
 protected:
  // Helper to decode base64 to binary string
  static std::string decodeBase64(const std::string& base64Str) {
    return encoding::Base64::decode(base64Str);
  }
};

TEST_F(P4HyperLogLogCastTest, nullValues) {
  auto nullData = std::vector<std::optional<StringView>>{
      std::nullopt, std::nullopt, std::nullopt, std::nullopt};

  // VARBINARY from/to P4HYPERLOGLOG
  testCast<StringView, StringView>(
      VARBINARY(), P4HYPERLOGLOG(), nullData, nullData);
  testCast<StringView, StringView>(
      P4HYPERLOGLOG(), VARBINARY(), nullData, nullData);

  // HYPERLOGLOG from/to P4HYPERLOGLOG
  testCast<StringView, StringView>(
      HYPERLOGLOG(), P4HYPERLOGLOG(), nullData, nullData);
  testCast<StringView, StringView>(
      P4HYPERLOGLOG(), HYPERLOGLOG(), nullData, nullData);
}

TEST_F(P4HyperLogLogCastTest, emptyValues) {
  auto emptyData =
      std::vector<std::optional<StringView>>{""_sv, ""_sv, ""_sv, ""_sv};

  // VARBINARY from/to P4HYPERLOGLOG
  testCast<StringView, StringView>(
      VARBINARY(), P4HYPERLOGLOG(), emptyData, emptyData);
  testCast<StringView, StringView>(
      P4HYPERLOGLOG(), VARBINARY(), emptyData, emptyData);

  // HYPERLOGLOG from/to P4HYPERLOGLOG
  testCast<StringView, StringView>(
      HYPERLOGLOG(), P4HYPERLOGLOG(), emptyData, emptyData);
  testCast<StringView, StringView>(
      P4HYPERLOGLOG(), HYPERLOGLOG(), emptyData, emptyData);
}

TEST_F(P4HyperLogLogCastTest, nonEmptyValues) {
  // SELECT cast(empty_approx_set(0.01625) as VARBINARY) as input1;
  // SELECT cast(approx_set('test1', 0.01625) as VARBINARY) as input2;
  // SELECT cast(approx_set('test_dense', 0.065) as VARBINARY) as input3;
  std::string input1Binary = decodeBase64("AgwAAA==");
  std::string input2Binary = decodeBase64("AgwBAELMwgM=");
  std::string input3Binary = decodeBase64("AggBAED31hA=");

  std::string expected1Binary = decodeBase64(
      "Awwmpty sparse → dense
  std::string expected2Binary = decodeBase64(
      "AwwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="); // Sparse → dense
  std::string expected3Binary = decodeBase64(
      "AwgAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="); // Dense → re-serialized

  auto inputData = std::vector<std::optional<StringView>>{
      StringView(input1Binary),
      StringView(input2Binary),
      StringView(input3Binary)};

  auto expectedP4Data = std::vector<std::optional<StringView>>{
      StringView(expected1Binary),
      StringView(expected2Binary),
      StringView(expected3Binary)};

  // Test VARBINARY from/to P4HYPERLOGLOG (should be direct copy)
  testCast<StringView, StringView>(
      VARBINARY(), P4HYPERLOGLOG(), inputData, inputData);
  testCast<StringView, StringView>(
      P4HYPERLOGLOG(), VARBINARY(), inputData, inputData);

  // Test HYPERLOGLOG to P4HYPERLOGLOG conversion
  testCast<StringView, StringView>(
      HYPERLOGLOG(), P4HYPERLOGLOG(), inputData, expectedP4Data);

  // Test P4HYPERLOGLOG to HYPERLOGLOG (should be direct copy)
  testCast<StringView, StringView>(
      P4HYPERLOGLOG(), HYPERLOGLOG(), expectedP4Data, expectedP4Data);
}
