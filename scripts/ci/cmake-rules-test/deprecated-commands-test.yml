# Copyright (c) Facebook, Inc. and its affiliates.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
id: deprecated-commands
valid:
  # Good practices that should NOT trigger the rule - modern alternatives
  - |
    # Use execute_process instead of exec_program
    execute_process(COMMAND ls RESULT_VARIABLE result)
  - |
    # Use file(MAKE_DIRECTORY) instead of make_directory
    file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/output)
  - |
    # Use file(WRITE) instead of write_file
    file(WRITE ${CMAKE_BINARY_DIR}/config.h "#define VERSION 1.0")
  - |
    # Use list(REMOVE_ITEM) instead of remove
    set(MY_LIST a b c d)
    list(REMOVE_ITEM MY_LIST c)
  - |
    # Use add_subdirectory instead of subdirs
    add_subdirectory(src)
    add_subdirectory(tests)
  - |
    # Use install with FILES instead of install_files
    install(FILES config.h DESTINATION include)
  - |
    # Use install with PROGRAMS instead of install_programs
    install(PROGRAMS script.sh DESTINATION bin)
  - |
    # Use install with TARGETS instead of install_targets
    add_executable(myapp main.cpp)
    install(TARGETS myapp DESTINATION bin)
  - |
    # Comments mentioning deprecated commands should not trigger
    # This project used to use exec_program but now uses execute_process
    execute_process(COMMAND echo "hello")
  - |
    # Variable names that happen to match should not trigger
    set(exec_program_result "some value")
    set(make_directory_path "/tmp")
  - |
    add_library(mylib SHARED src/mylib.cpp)
    target_link_libraries(mylib PRIVATE /usr/local/lib/libfoo.so)
  - |
    find_library(FOO_LIB foo PATHS /usr/local/lib)
    target_link_libraries(mylib PRIVATE ${FOO_LIB})
  - |
    target_link_libraries(mylib PRIVATE ${CMAKE_BINARY_DIR}/lib/libbar.a)
  - |
    # This is just a comment about link_directories
    target_link_libraries(mylib PRIVATE somelib)
invalid:
  # These should trigger the rule - deprecated command usage
  - build_name(BUILD_NAME)
  - exec_program(ls ARGS "-la" OUTPUT_VARIABLE LS_OUTPUT)
  - export_library_dependencies(deps.cmake)
  - install_files(/usr/include FILES config.h)
  - install_programs(/usr/bin FILES script.sh)
  - install_targets(/usr/bin myapp)
  - load_command(COMMAND mycommand src/mycommand.c)
  - make_directory(${CMAKE_BINARY_DIR}/output)
  - output_required_files(main.cpp deps.txt)
  - qt_wrap_cpp(MOC_SOURCES widget.h)
  - qt_wrap_ui(UI_SOURCES dialog.ui)
  - |
    set(MY_LIST a b c d)
    remove(MY_LIST c)
  - subdir_depends(src mylib)
  - subdirs(src tests docs)
  - use_mangled_mesa(ON)
  - utility_source(UTILITY_NAME src/utility.c)
  - variable_requires(VAR FOO BAR)
  - write_file(${CMAKE_BINARY_DIR}/config.h "#define VERSION 1.0")
  - |
    # Multiple deprecated commands in one file
    cmake_minimum_required(VERSION 3.10)
    project(TestProject)
    make_directory(${CMAKE_BINARY_DIR}/temp)
    exec_program(date OUTPUT_VARIABLE CURRENT_DATE)
    write_file(${CMAKE_BINARY_DIR}/info.txt "Build date: ${CURRENT_DATE}")
  - |
    # Deprecated commands with complex arguments
    install_files(
        /usr/local/include
        FILES
        header1.h
        header2.h
    )
  - |
    # Mixed with modern commands - deprecated ones should still trigger
    add_executable(myapp main.cpp)
    install(TARGETS myapp DESTINATION bin)
    install_programs(/usr/bin script.sh)  # This line should trigger
  - link_directories(/usr/local/lib)
  - |
    link_directories(${CMAKE_BINARY_DIR}/lib)
  - |
    link_directories(
        /opt/lib
        /usr/lib64
    )
  - |
    cmake_minimum_required(VERSION 3.10)
    project(TestProject)
    link_directories(/usr/local/lib)
