---
title: "Velox Build Metrics"
execute:
  echo: false
  warning: false
format:
  dashboard:
    logo: https://velox-lib.io/img/velox-logo-white.png
    expandable: true
    scrolling: true
    self-contained: true
    theme: zephyr
---




```{r setup}
library(gt)
library(ggplot2)
library(plotly)
library(dplyr)
library(purrr)

# Cache conbench and gh api results for local development
cd <- cachem::cache_disk(rappdirs::user_cache_dir("velox-bm-report"))
mgh <- memoise::memoise(gh::gh, cache = cd)
mruns <- memoise::memoise(conbenchcoms::runs, cache = cd)
lookback_days <- 30
latest_results <- function(x) {
  conbenchcoms::benchmark_results(x,
    earliest_timestamp = lubridate::now() - lubridate::days(lookback_days)
  )
}

# Get latest runs of build-metric job
runs <- mgh(
  "GET /repos/facebookincubator/velox/actions/workflows/build-metrics.yml/runs",
  branch = "main"
) |> jsonlite::toJSON()

# Extract the commit sha of the most recent run. The results of the latest
# run are displayed in the tables.
newest_sha <- runs |>
  jqr::jq(".workflow_runs | max_by(.updated_at) | .head_sha") |>
  jsonlite::fromJSON()

run_shas <- runs |>
  jqr::jq("[.workflow_runs[].head_sha]") |>
  jsonlite::fromJSON()

run_ids <- mruns(run_shas) |>
  filter(commit.branch == "facebookincubator:main", substr(id, 1, 2) == "BM") |>
  pull(id)

# Speed up local dev by saving 'results' as conbench requests can't be memoised
if (file.exists("/tmp/benchmark_results.rds")) {
  load("/tmp/benchmark_results.rds")
} else {
  # Fetch the result and do clean/format the data this can take 15-20 minutes
  # as the conbench api only allows for the results of a single run to be
  # fetched at a time = 120 sequential requests
  results <- run_ids |>
    purrr::map_df(latest_results)
}

results <- results |>
  mutate(
    timestamp = lubridate::as_datetime(timestamp),
    stats.data = unlist(stats.data),
    type = case_when(
      grepl("^BM-.*debug.*", run_id) ~ "debug",
      .default = "release"
    ),
    linkage = case_when(
      grepl("^BM-(static-|)[dr].*", run_id) ~ "static",
      startsWith(run_id, "BM-shared") ~ "shared",
    )
  )

# Format compile time data
compile_times <- results |>
  filter(tags.suite == "compiling", commit.sha == newest_sha) |>
  mutate(
    stats.data = lubridate::dseconds(stats.data),
    tags.name = glue::glue("`{tags.name}`")
  )

# Format link time data
link_times <- results |>
  filter(tags.suite == "linking", commit.sha == newest_sha) |>
  mutate(
    stats.data = lubridate::dseconds(stats.data),
    tags.name = glue::glue("`{tags.name}`")
  )

link_times_static <- link_times |> filter(linkage == "static")
link_times_shared <- link_times |> filter(linkage == "shared")

# Prepare object size data
object_sizes <- results |>
  filter(endsWith(tags.source, "size"), commit.sha == newest_sha) |>
  mutate(
    tags.name = glue::glue("`{tags.name}`")
  )

object_sizes_static <- object_sizes |>
  filter(linkage == "static", !startsWith(tags.name, "`total_"))
object_sizes_shared <- object_sizes |>
  filter(linkage == "shared", !startsWith(tags.name, "`total_"))

searchable_table <- function(data, build_type, linkage, data_label, tab_title) {
  data |>
    filter(type == build_type, linkage == linkage) |>
    select(tags.name, stats.data) |>
    arrange(desc(stats.data)) |>
    gt() |>
    cols_label(
      `tags.name` = "Object",
      `stats.data` = data_label
    ) |>
    cols_align(align = "left", columns = everything()) |>
    tab_header(title = tab_title) |>
    fmt_markdown(columns = "tags.name") |>
    opt_interactive(use_page_size_select = TRUE, use_search = TRUE)
}
```

```{r ggplot2-specs}
theme_set(theme_minimal(base_size = 12) %+replace%
  theme(
    plot.title.position = "plot",
    strip.text = element_text(size = 12)
  ) + theme(panel.spacing = unit(4, "lines")))

format_tags <- function(x) {
  x |>
    stringr::str_replace_all("_", " ") |>
    stringr::str_to_title()
}
```

# Build Times

## Overview Plot { height=400px padding=10px }
```{r total-graphs}
# Filter the data and layout the overview plots
times_plot <- results |>
  filter(
    tags.suite == "total",
    endsWith(tags.source, "time"), tags.name != "wall_time"
  ) |>
  mutate(
    stats.data = lubridate::dseconds(stats.data),
    tags.name = format_tags(tags.name)
  ) |>
  ggplot(aes(
    x = timestamp,
    y = stats.data,
    group = interaction(tags.name, type), color = tags.name
  )) +
  facet_wrap(vars(type, linkage), scales = "free_y") +
  geom_line() +
  geom_point(aes(text = paste(
    "Duration: ",
    prettyunits::pretty_sec(stats.data), "<br>",
    "Date: ", timestamp, "<br>"
  ))) +
  scale_y_time(labels = function(x) strftime(x, "%H:%M")) +
  scale_x_datetime() +
  labs(
    title = "Velox Build Times",
    x = "Date",
    y = "Time in Minutes"
  ) +
  scale_color_viridis_d()

ggplotly(times_plot, tooltip = c("text")) |>
  layout(legend = list(title = list(text = "Tags Name<br>"))) ## needed because theme legend specs don't work with ggplotly
```
## Row {.tabset .scrolling }
### Release
:::: {layout="[[50, 50],[50, 50]]" }

::: {}
```{r compile-time-release2}
searchable_table(
  compile_times, "release", "shared",
  "Time in hours", "Compile Times - Shared"
)
```
:::

::: {}
```{r compile-time-release}
searchable_table(
  compile_times, "release", "static",
  "Time in hours", "Compile Times - Static"
)
```
:::


::: {}
```{r link-time-release2}
searchable_table(
  link_times_shared, "release", "shared",
  "Time in hours", "Link Times - Shared"
)
```
:::

::: {}
```{r link-time-release}
searchable_table(
  link_times_static, "release", "static",
  "Time in hours", "Link Times - Static"
)
```
:::


::::

### Debug
:::: {layout="[[50, 50],[50, 50]]" }

::: {}
```{r compile-time-debug2}
searchable_table(
  compile_times, "debug", "shared",
  "Time in hours", "Compile Times - Shared"
)
```
:::

::: {}
```{r compile-time-debug}
searchable_table(
  compile_times, "debug", "static",
  "Time in hours", "Compile Times - Static"
)
```
:::


::: {}
```{r link-time-debug2}
searchable_table(
  link_times_shared, "debug", "shared",
  "Time in hours", "Link Times - Shared"
)
```
:::

::: {}
```{r link-time-debug}
searchable_table(
  link_times_static, "debug", "static",
  "Time in hours", "Link Times - Static"
)
```
:::


::::

# Binary Sizes

## Overview Plot { height=400px padding=10px }
```{r big-objects}
# This is converts byte values into human-readable values in the tables
size_formatter <- function(x) {
  function(x) {
    prettyunits::pretty_bytes(x)
  }
}


# Filter the data and layout the size overview plots
sizes_plot <- results |>
  filter(tags.suite == "executable", startsWith(tags.name, "total_")) |>
  mutate(
    tags.name = format_tags(tags.name),
  ) |>
  ggplot(aes(
    x = timestamp,
    y = stats.data,
    group = interaction(tags.name, type), color = tags.name
  )) +
  facet_wrap(vars(type, linkage), scales = "free_y") +
  geom_line() +
  geom_point(aes(text = paste(
    "Size: ", prettyunits::pretty_bytes(stats.data), "<br>",
    "Date: ", timestamp, "<br>"
  ))) +
  scale_y_continuous(labels = size_formatter()) +
  scale_x_datetime() +
  labs(
    title = "Velox Object Sizes",
    x = "Date",
    y = "Size"
  ) +
  scale_color_viridis_d()
ggplotly(sizes_plot, tooltip = c("text")) |>
  layout(legend = list(title = list(text = "Tags Name<br>"))) ## needed because theme legend specs don't work with ggplotly
```

## Row {.tabset .scrolling }
### Release
:::: {layout="[50, 50]" }

::: {}
```{r sizes-release2}
searchable_table(
  object_sizes_shared, "release", "shared",
  "Size", "Binary Sizes - Shared"
) |> fmt(columns = `stats.data`, fn = size_formatter())
```
:::

::: {}
```{r sizes-release}
searchable_table(
  object_sizes_static, "release", "static",
  "Size", "Binary Sizes - Static"
) |> fmt(columns = `stats.data`, fn = size_formatter())
```
:::


::::

### Debug
:::: {layout="[50, 50]" }

::: {}
```{r sizes-debug2}
searchable_table(
  object_sizes_shared, "debug", "shared",
  "Size", "Binary Sizes - Shared"
) |> fmt(columns = `stats.data`, fn = size_formatter())
```
:::

::: {}
```{r sizes-debug}
searchable_table(
  object_sizes_static, "debug", "static",
  "Size", "Binary Sizes - Static"
) |> fmt(columns = `stats.data`, fn = size_formatter())
```
:::

::::
