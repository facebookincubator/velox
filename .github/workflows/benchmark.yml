# Copyright (c) Facebook, Inc. and its affiliates.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Linux Benchmark"

on:
  pull_request:
    paths:
      - 'velox/**'
      - 'third_party/**'
      - '.github/workflows/benchmark.yml'
  push:
    branches: [main]

permissions:
  contents: read

defaults:
  run:
    shell: bash
#TODO  concurrency groups?
jobs:
  benchmark:
    runs-on: ubuntu-22.04
    container: ghcr.io/facebookincubator/velox-dev:amd64-ubuntu-22.04-avx
    env:
      CCACHE_DIR: "${{ github.workspace }}/.ccache/"
      CCACHE_BASEDIR: "${{ github.workspace }}"
      BINARY_DIR: "${{ github.workspace }}/benchmarks/"
      CONBENCH_URL: "https://velox-conbench.voltrondata.run/"
      CONBENCH_HOST: "GitHub-runner"
      LINUX_DISTRO: "ubuntu"
      RESULTS_ROOT: "${{ github.workspace }}/benchmark-results"
      BASELINE_OUTPUT_PATH: "${{ github.workspace }}/benchmark-results/baseline/"
      TARGET_OUTPUT_PATH: "${{ github.workspace }}/benchmark-results/target/"
    steps:
      - name: "Setup ccache and python"
        run: |
            # Set up ccache configs .
            mkdir -p .ccache
            ccache -sz -M 5Gi
            
            # We can not use setup-python as we are running in a container
            # TODO add to docker image and remove here
            apt update
            apt install -y lsb-release python3 pip

      - uses: actions/cache/restore@v3
        id: restore-cache
        with:
          path: ".ccache"
          key: ccache-benchmark-${{ github.sha }}
          restore-keys: |
            ccache-benchmark-

      - name: "Checkout Base"
        uses: actions/checkout@v3
        with:
          path: 'velox'
          ref: ${{ github.event.pull_request.base.sha || github.sha }}
          submodules: 'recursive'

      - name: Build Base Benchmarks
        working-directory: velox
        run: |
            n_cores=$(nproc)
            make benchmarks-basic-build NUM_THREADS=$n_cores MAX_HIGH_MEM_JOBS=$((n_cores/2)) MAX_LINK_JOBS=$n_cores
            ccache -s
            mkdir -p ${BINARY_DIR}/baseline/
            cp -r --verbose _build/release/velox/benchmarks/basic/* ${BINARY_DIR}/baseline/

      - name: "Checkout Head"
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@v3
        with:
          path: 'velox'
          submodules: 'recursive'

      - name: Build Target Benchmarks
        if: ${{ github.event_name == 'pull_request' }}
        working-directory: velox
        run: |
            n_cores=$(nproc)
            make benchmarks-basic-build NUM_THREADS=$n_cores MAX_HIGH_MEM_JOBS=$n_cores MAX_LINK_JOBS=$n_cores
            ccache -s
            mkdir -p  ${BINARY_DIR}/target/
            cp -r --verbose _build/release/velox/benchmarks/basic/*  ${BINARY_DIR}/target/

      - uses: actions/cache/save@v3
        id: cache
        with:
          path: ".ccache"
          key: ccache-benchmark-${{ github.sha }}

      - name: Remove Unchanged Benchmarks
        id: delete
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          pushd ${BINARY_DIR}/baseline/
          # list all executable files in the directory
          for file in $(find . -type f -executable); do
            # compare the files byte bye byte and remove them if they are the same
            if cmp -s "$file" "../target/$file"; then
              echo "Removing unchanged benchmark: $file"
              rm "$file"
              rm "../target/$file"
            fi
          done

          if ! find . -type f -executable | grep -q .; then
            echo "empty=true" >> $GITHUB_OUTPUT
            mkdir -p ${BASELINE_OUTPUT_PATH}
            mkdir -p ${TARGET_OUTPUT_PATH}
          fi
      - name: "Install benchmark dependencies"
        run: |
          cd velox
          python3 -m pip install -r scripts/benchmark-requirements.txt

      - name: "Run Benchmarks - Full Round"
        if: ${{ steps.delete.outputs.empty != 'true' }}
        working-directory: 'velox'
        run: |
            make benchmarks-basic-run \
                EXTRA_BENCHMARK_FLAGS="--binary_path ${BINARY_DIR}/baseline/ --output_path ${BASELINE_OUTPUT_PATH}"

            if [ "${{ github.event_name }}" == "pull_request" ]; then
             make benchmarks-basic-run \
                EXTRA_BENCHMARK_FLAGS="--binary_path ${BINARY_DIR}/target/ --output_path ${TARGET_OUTPUT_PATH}"
            else
              echo "Copying baseline results to target for upload."
              mkdir -p ${TARGET_OUTPUT_PATH}
              cp -r ${BASELINE_OUTPUT_PATH}/* ${TARGET_OUTPUT_PATH}
            fi 

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          path: "benchmark-results"
          name: "benchmark-results"

